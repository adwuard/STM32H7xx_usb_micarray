
H750_usb_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800d0a8  0800d0a8  0001d0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d1f0  0800d1f0  0001d1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d1f4  0800d1f4  0001d1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000194  24000000  0800d1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000049b0  24000194  0800d38c  00020194  2**2
                  ALLOC
  7 ._user_heap_stack 00008004  24004b44  0800d38c  00024b44  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001816e  00000000  00000000  000201c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003bb2  00000000  00000000  00038330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001200  00000000  00000000  0003bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001050  00000000  00000000  0003d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a8a4  00000000  00000000  0003e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a392  00000000  00000000  000789dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a4ae  00000000  00000000  00092d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ed21c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005080  00000000  00000000  001ed26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000194 	.word	0x24000194
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d090 	.word	0x0800d090

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000198 	.word	0x24000198
 80002dc:	0800d090 	.word	0x0800d090

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_DMA_Init+0x5c>)
 8000388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800038c:	4a13      	ldr	r2, [pc, #76]	; (80003dc <MX_DMA_Init+0x5c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_DMA_Init+0x5c>)
 8000398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	200c      	movs	r0, #12
 80003aa:	f000 ffaa 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80003ae:	200c      	movs	r0, #12
 80003b0:	f000 ffc1 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	200d      	movs	r0, #13
 80003ba:	f000 ffa2 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80003be:	200d      	movs	r0, #13
 80003c0:	f000 ffb9 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	200e      	movs	r0, #14
 80003ca:	f000 ff9a 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80003ce:	200e      	movs	r0, #14
 80003d0:	f000 ffb1 	bl	8001336 <HAL_NVIC_EnableIRQ>

}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	58024400 	.word	0x58024400

080003e0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08a      	sub	sp, #40	; 0x28
 80003e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003f6:	4b37      	ldr	r3, [pc, #220]	; (80004d4 <MX_GPIO_Init+0xf4>)
 80003f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003fc:	4a35      	ldr	r2, [pc, #212]	; (80004d4 <MX_GPIO_Init+0xf4>)
 80003fe:	f043 0310 	orr.w	r3, r3, #16
 8000402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000406:	4b33      	ldr	r3, [pc, #204]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800040c:	f003 0310 	and.w	r3, r3, #16
 8000410:	613b      	str	r3, [r7, #16]
 8000412:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000414:	4b2f      	ldr	r3, [pc, #188]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800041a:	4a2e      	ldr	r2, [pc, #184]	; (80004d4 <MX_GPIO_Init+0xf4>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000424:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000432:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000438:	4a26      	ldr	r2, [pc, #152]	; (80004d4 <MX_GPIO_Init+0xf4>)
 800043a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000442:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000450:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000456:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000458:	f043 0308 	orr.w	r3, r3, #8
 800045c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000460:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000466:	f003 0308 	and.w	r3, r3, #8
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000474:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	2108      	movs	r1, #8
 8000490:	4811      	ldr	r0, [pc, #68]	; (80004d8 <MX_GPIO_Init+0xf8>)
 8000492:	f002 fddd 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000496:	2308      	movs	r3, #8
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800049e:	2302      	movs	r3, #2
 80004a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004a2:	2301      	movs	r3, #1
 80004a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	4619      	mov	r1, r3
 80004ac:	480a      	ldr	r0, [pc, #40]	; (80004d8 <MX_GPIO_Init+0xf8>)
 80004ae:	f002 fc1f 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K1_KEY_Pin;
 80004b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004bc:	2302      	movs	r3, #2
 80004be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(K1_KEY_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	4619      	mov	r1, r3
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_GPIO_Init+0xfc>)
 80004c8:	f002 fc12 	bl	8002cf0 <HAL_GPIO_Init>

}
 80004cc:	bf00      	nop
 80004ce:	3728      	adds	r7, #40	; 0x28
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	58024400 	.word	0x58024400
 80004d8:	58021000 	.word	0x58021000
 80004dc:	58020800 	.word	0x58020800

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fd70 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f80e 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f7ff ff78 	bl	80003e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f7ff ff46 	bl	8000380 <MX_DMA_Init>
  MX_SAI1_Init();
 80004f4:	f000 f8c4 	bl	8000680 <MX_SAI1_Init>
  MX_USB_DEVICE_Init();
 80004f8:	f00b f854 	bl	800b5a4 <MX_USB_DEVICE_Init>
  MX_SAI3_Init();
 80004fc:	f000 f97c 	bl	80007f8 <MX_SAI3_Init>
  MX_SAI2_Init();
 8000500:	f000 f920 	bl	8000744 <MX_SAI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x24>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b0a4      	sub	sp, #144	; 0x90
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000512:	224c      	movs	r2, #76	; 0x4c
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00b fd50 	bl	800bfbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000520:	2220      	movs	r2, #32
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f00b fd49 	bl	800bfbc <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]
 800053a:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800053c:	2002      	movs	r0, #2
 800053e:	f004 f875 	bl	800462c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b46      	ldr	r3, [pc, #280]	; (8000660 <SystemClock_Config+0x158>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a45      	ldr	r2, [pc, #276]	; (8000660 <SystemClock_Config+0x158>)
 800054c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b43      	ldr	r3, [pc, #268]	; (8000660 <SystemClock_Config+0x158>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b41      	ldr	r3, [pc, #260]	; (8000664 <SystemClock_Config+0x15c>)
 800055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000560:	4a40      	ldr	r2, [pc, #256]	; (8000664 <SystemClock_Config+0x15c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000568:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <SystemClock_Config+0x15c>)
 800056a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000574:	bf00      	nop
 8000576:	4b3a      	ldr	r3, [pc, #232]	; (8000660 <SystemClock_Config+0x158>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800057e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000582:	d1f8      	bne.n	8000576 <SystemClock_Config+0x6e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000584:	2321      	movs	r3, #33	; 0x21
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	2302      	movs	r3, #2
 8000598:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800059a:	2305      	movs	r3, #5
 800059c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 800059e:	23c0      	movs	r3, #192	; 0xc0
 80005a0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80005a6:	230f      	movs	r3, #15
 80005a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005b0:	2308      	movs	r3, #8
 80005b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 f87a 	bl	80046c0 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80005d2:	f000 f84b 	bl	800066c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	233f      	movs	r3, #63	; 0x3f
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005e2:	2308      	movs	r3, #8
 80005e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005e6:	2340      	movs	r3, #64	; 0x40
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ea:	2340      	movs	r3, #64	; 0x40
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005f4:	2340      	movs	r3, #64	; 0x40
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fc:	2104      	movs	r1, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fc8c 	bl	8004f1c <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x106>
  {
    Error_Handler();
 800060a:	f000 f82f 	bl	800066c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800060e:	f004 fe3b 	bl	8005288 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <SystemClock_Config+0x160>)
 8000614:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <SystemClock_Config+0x160>)
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <SystemClock_Config+0x160>)
 8000624:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000628:	f003 0302 	and.w	r3, r3, #2
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 8000634:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000638:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 800063e:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000644:	2322      	movs	r3, #34	; 0x22
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000648:	2320      	movs	r3, #32
 800064a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4618      	mov	r0, r3
 8000652:	f007 f817 	bl	8007684 <HAL_RCCEx_CRSConfig>
}
 8000656:	bf00      	nop
 8000658:	3790      	adds	r7, #144	; 0x90
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	58024800 	.word	0x58024800
 8000664:	58000400 	.word	0x58000400
 8000668:	58024400 	.word	0x58024400

0800066c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("usb startup error!!!!!\n");
 8000674:	4801      	ldr	r0, [pc, #4]	; (800067c <Error_Handler+0x10>)
 8000676:	f00b fd45 	bl	800c104 <puts>
 800067a:	e7fb      	b.n	8000674 <Error_Handler+0x8>
 800067c:	0800d0a8 	.word	0x0800d0a8

08000680 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai3_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000684:	4b2d      	ldr	r3, [pc, #180]	; (800073c <MX_SAI1_Init+0xbc>)
 8000686:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <MX_SAI1_Init+0xc0>)
 8000688:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <MX_SAI1_Init+0xbc>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000690:	4b2a      	ldr	r3, [pc, #168]	; (800073c <MX_SAI1_Init+0xbc>)
 8000692:	2201      	movs	r2, #1
 8000694:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_SAI1_Init+0xbc>)
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_SAI1_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_SAI1_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_SAI1_Init+0xbc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_SAI1_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_SAI1_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_SAI1_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_SAI1_Init+0xbc>)
 80006c2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80006c6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_SAI1_Init+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_SAI1_Init+0xbc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_SAI1_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_SAI1_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_SAI1_Init+0xbc>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_SAI1_Init+0xbc>)
 80006ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ee:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_SAI1_Init+0xbc>)
 80006f2:	2208      	movs	r2, #8
 80006f4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_SAI1_Init+0xbc>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_SAI1_Init+0xbc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_SAI1_Init+0xbc>)
 8000704:	2200      	movs	r2, #0
 8000706:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SAI1_Init+0xbc>)
 800070a:	2200      	movs	r2, #0
 800070c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_SAI1_Init+0xbc>)
 8000710:	2200      	movs	r2, #0
 8000712:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SAI1_Init+0xbc>)
 8000716:	2200      	movs	r2, #0
 8000718:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_SAI1_Init+0xbc>)
 800071c:	2201      	movs	r2, #1
 800071e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SAI1_Init+0xbc>)
 8000722:	2200      	movs	r2, #0
 8000724:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_SAI1_Init+0xbc>)
 8000728:	f007 f966 	bl	80079f8 <HAL_SAI_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_SAI1_Init+0xb6>
  {
    Error_Handler();
 8000732:	f7ff ff9b 	bl	800066c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	240001b0 	.word	0x240001b0
 8000740:	40015804 	.word	0x40015804

08000744 <MX_SAI2_Init>:
/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_SAI2_Init+0xac>)
 800074a:	4a2a      	ldr	r2, [pc, #168]	; (80007f4 <MX_SAI2_Init+0xb0>)
 800074c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_SAI2_Init+0xac>)
 8000750:	2200      	movs	r2, #0
 8000752:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_SAI2_Init+0xac>)
 8000756:	2203      	movs	r2, #3
 8000758:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_SAI2_Init+0xac>)
 800075c:	2240      	movs	r2, #64	; 0x40
 800075e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_SAI2_Init+0xac>)
 8000762:	2200      	movs	r2, #0
 8000764:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_SAI2_Init+0xac>)
 8000768:	2200      	movs	r2, #0
 800076a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_SYNCHRONOUS;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_SAI2_Init+0xac>)
 800076e:	2201      	movs	r2, #1
 8000770:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_SAI2_Init+0xac>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_SAI2_Init+0xac>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_SAI2_Init+0xac>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_SAI2_Init+0xac>)
 8000786:	2200      	movs	r2, #0
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_SAI2_Init+0xac>)
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_SAI2_Init+0xac>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_SAI2_Init+0xac>)
 800079a:	2201      	movs	r2, #1
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007a8:	2208      	movs	r2, #8
 80007aa:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007d8:	2200      	movs	r2, #0
 80007da:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_SAI2_Init+0xac>)
 80007de:	f007 f90b 	bl	80079f8 <HAL_SAI_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_SAI2_Init+0xa8>
  {
    Error_Handler();
 80007e8:	f7ff ff40 	bl	800066c <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	24000248 	.word	0x24000248
 80007f4:	40015c04 	.word	0x40015c04

080007f8 <MX_SAI3_Init>:
/* SAI3 init function */
void MX_SAI3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI3_Init 1 */

  /* USER CODE END SAI3_Init 1 */

  hsai_BlockA3.Instance = SAI3_Block_A;
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_SAI3_Init+0xac>)
 80007fe:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <MX_SAI3_Init+0xb0>)
 8000800:	601a      	str	r2, [r3, #0]
  hsai_BlockA3.Init.Protocol = SAI_FREE_PROTOCOL;
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000804:	2200      	movs	r2, #0
 8000806:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA3.Init.AudioMode = SAI_MODESLAVE_RX;
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_SAI3_Init+0xac>)
 800080a:	2203      	movs	r2, #3
 800080c:	605a      	str	r2, [r3, #4]
  hsai_BlockA3.Init.DataSize = SAI_DATASIZE_8;
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000810:	2240      	movs	r2, #64	; 0x40
 8000812:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA3.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000816:	2200      	movs	r2, #0
 8000818:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA3.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_SAI3_Init+0xac>)
 800081c:	2200      	movs	r2, #0
 800081e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA3.Init.Synchro = SAI_SYNCHRONOUS;
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000822:	2201      	movs	r2, #1
 8000824:	609a      	str	r2, [r3, #8]
  hsai_BlockA3.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hsai_BlockA3.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_SAI3_Init+0xac>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hsai_BlockA3.Init.MonoStereoMode = SAI_STEREOMODE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA3.Init.CompandingMode = SAI_NOCOMPANDING;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_SAI3_Init+0xac>)
 800083a:	2200      	movs	r2, #0
 800083c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA3.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000840:	2200      	movs	r2, #0
 8000842:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA3.Init.PdmInit.Activation = DISABLE;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA3.Init.PdmInit.MicPairsNbr = 1;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_SAI3_Init+0xac>)
 800084e:	2201      	movs	r2, #1
 8000850:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA3.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000858:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA3.FrameInit.FrameLength = 8;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_SAI3_Init+0xac>)
 800085c:	2208      	movs	r2, #8
 800085e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA3.FrameInit.ActiveFrameLength = 1;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000862:	2201      	movs	r2, #1
 8000864:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA3.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000868:	2200      	movs	r2, #0
 800086a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA3.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_SAI3_Init+0xac>)
 800086e:	2200      	movs	r2, #0
 8000870:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA3.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000874:	2200      	movs	r2, #0
 8000876:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA3.SlotInit.FirstBitOffset = 0;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_SAI3_Init+0xac>)
 800087a:	2200      	movs	r2, #0
 800087c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA3.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000880:	2200      	movs	r2, #0
 8000882:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA3.SlotInit.SlotNumber = 1;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000886:	2201      	movs	r2, #1
 8000888:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA3.SlotInit.SlotActive = 0x00000000;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_SAI3_Init+0xac>)
 800088c:	2200      	movs	r2, #0
 800088e:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA3) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_SAI3_Init+0xac>)
 8000892:	f007 f8b1 	bl	80079f8 <HAL_SAI_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_SAI3_Init+0xa8>
  {
    Error_Handler();
 800089c:	f7ff fee6 	bl	800066c <Error_Handler>

  /* USER CODE BEGIN SAI3_Init 2 */

  /* USER CODE END SAI3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	240002e0 	.word	0x240002e0
 80008a8:	40016004 	.word	0x40016004

080008ac <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;
static uint32_t SAI3_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0ba      	sub	sp, #232	; 0xe8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b4:	f107 0318 	add.w	r3, r7, #24
 80008b8:	22bc      	movs	r2, #188	; 0xbc
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f00b fb7d 	bl	800bfbc <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4aae      	ldr	r2, [pc, #696]	; (8000b80 <HAL_SAI_MspInit+0x2d4>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d17b      	bne.n	80009c4 <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80008cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 feaa 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 80008e6:	f7ff fec1 	bl	800066c <Error_Handler>
    }

    if (SAI1_client == 0)
 80008ea:	4ba6      	ldr	r3, [pc, #664]	; (8000b84 <HAL_SAI_MspInit+0x2d8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10e      	bne.n	8000910 <HAL_SAI_MspInit+0x64>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80008f2:	4ba5      	ldr	r3, [pc, #660]	; (8000b88 <HAL_SAI_MspInit+0x2dc>)
 80008f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008f8:	4aa3      	ldr	r2, [pc, #652]	; (8000b88 <HAL_SAI_MspInit+0x2dc>)
 80008fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000902:	4ba1      	ldr	r3, [pc, #644]	; (8000b88 <HAL_SAI_MspInit+0x2dc>)
 8000904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697b      	ldr	r3, [r7, #20]
    }
    SAI1_client ++;
 8000910:	4b9c      	ldr	r3, [pc, #624]	; (8000b84 <HAL_SAI_MspInit+0x2d8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	4a9b      	ldr	r2, [pc, #620]	; (8000b84 <HAL_SAI_MspInit+0x2d8>)
 8000918:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800091a:	2370      	movs	r3, #112	; 0x70
 800091c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000932:	2306      	movs	r3, #6
 8000934:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000938:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800093c:	4619      	mov	r1, r3
 800093e:	4893      	ldr	r0, [pc, #588]	; (8000b8c <HAL_SAI_MspInit+0x2e0>)
 8000940:	f002 f9d6 	bl	8002cf0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8000944:	4b92      	ldr	r3, [pc, #584]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 8000946:	4a93      	ldr	r2, [pc, #588]	; (8000b94 <HAL_SAI_MspInit+0x2e8>)
 8000948:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800094a:	4b91      	ldr	r3, [pc, #580]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 800094c:	2257      	movs	r2, #87	; 0x57
 800094e:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000950:	4b8f      	ldr	r3, [pc, #572]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000956:	4b8e      	ldr	r3, [pc, #568]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800095c:	4b8c      	ldr	r3, [pc, #560]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 800095e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000962:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000964:	4b8a      	ldr	r3, [pc, #552]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 8000966:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800096a:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800096c:	4b88      	ldr	r3, [pc, #544]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 800096e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000972:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 8000974:	4b86      	ldr	r3, [pc, #536]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800097a:	4b85      	ldr	r3, [pc, #532]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000980:	4b83      	ldr	r3, [pc, #524]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 8000982:	2204      	movs	r2, #4
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000986:	4b82      	ldr	r3, [pc, #520]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 8000988:	2203      	movs	r2, #3
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800098c:	4b80      	ldr	r3, [pc, #512]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000992:	4b7f      	ldr	r3, [pc, #508]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000998:	487d      	ldr	r0, [pc, #500]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 800099a:	f000 fce7 	bl	800136c <HAL_DMA_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_SAI_MspInit+0xfc>
    {
      Error_Handler();
 80009a4:	f7ff fe62 	bl	800066c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a79      	ldr	r2, [pc, #484]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 80009ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80009b0:	4a77      	ldr	r2, [pc, #476]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a75      	ldr	r2, [pc, #468]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 80009ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80009be:	4a74      	ldr	r2, [pc, #464]	; (8000b90 <HAL_SAI_MspInit+0x2e4>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a73      	ldr	r2, [pc, #460]	; (8000b98 <HAL_SAI_MspInit+0x2ec>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d17c      	bne.n	8000ac8 <HAL_SAI_MspInit+0x21c>
    {
    /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80009ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fe29 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 80009e8:	f7ff fe40 	bl	800066c <Error_Handler>
    }

    if (SAI2_client == 0)
 80009ec:	4b6b      	ldr	r3, [pc, #428]	; (8000b9c <HAL_SAI_MspInit+0x2f0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10e      	bne.n	8000a12 <HAL_SAI_MspInit+0x166>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80009f4:	4b64      	ldr	r3, [pc, #400]	; (8000b88 <HAL_SAI_MspInit+0x2dc>)
 80009f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009fa:	4a63      	ldr	r2, [pc, #396]	; (8000b88 <HAL_SAI_MspInit+0x2dc>)
 80009fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000a04:	4b60      	ldr	r3, [pc, #384]	; (8000b88 <HAL_SAI_MspInit+0x2dc>)
 8000a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8000a12:	4b62      	ldr	r3, [pc, #392]	; (8000b9c <HAL_SAI_MspInit+0x2f0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a60      	ldr	r2, [pc, #384]	; (8000b9c <HAL_SAI_MspInit+0x2f0>)
 8000a1a:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a36:	230a      	movs	r3, #10
 8000a38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4857      	ldr	r0, [pc, #348]	; (8000ba0 <HAL_SAI_MspInit+0x2f4>)
 8000a44:	f002 f954 	bl	8002cf0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Stream2;
 8000a48:	4b56      	ldr	r3, [pc, #344]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a4a:	4a57      	ldr	r2, [pc, #348]	; (8000ba8 <HAL_SAI_MspInit+0x2fc>)
 8000a4c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_SAI2_A;
 8000a4e:	4b55      	ldr	r3, [pc, #340]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a50:	2259      	movs	r2, #89	; 0x59
 8000a52:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a54:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5a:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000a60:	4b50      	ldr	r3, [pc, #320]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a66:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a68:	4b4e      	ldr	r3, [pc, #312]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a6e:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a70:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a76:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_NORMAL;
 8000a78:	4b4a      	ldr	r3, [pc, #296]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a84:	4b47      	ldr	r3, [pc, #284]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a8a:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a90:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a96:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000a9c:	4841      	ldr	r0, [pc, #260]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000a9e:	f000 fc65 	bl	800136c <HAL_DMA_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_SAI_MspInit+0x200>
    {
      Error_Handler();
 8000aa8:	f7ff fde0 	bl	800066c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a3d      	ldr	r2, [pc, #244]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000ab4:	4a3b      	ldr	r2, [pc, #236]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a39      	ldr	r2, [pc, #228]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000ac2:	4a38      	ldr	r2, [pc, #224]	; (8000ba4 <HAL_SAI_MspInit+0x2f8>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI3 */
    if(saiHandle->Instance==SAI3_Block_A)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a37      	ldr	r2, [pc, #220]	; (8000bac <HAL_SAI_MspInit+0x300>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	f040 809c 	bne.w	8000c0c <HAL_SAI_MspInit+0x360>
    {
    /* SAI3 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI3;
 8000ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f004 fda6 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_SAI_MspInit+0x246>
    {
      Error_Handler();
 8000aee:	f7ff fdbd 	bl	800066c <Error_Handler>
    }

    if (SAI3_client == 0)
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <HAL_SAI_MspInit+0x304>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10e      	bne.n	8000b18 <HAL_SAI_MspInit+0x26c>
    {
       __HAL_RCC_SAI3_CLK_ENABLE();
 8000afa:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <HAL_SAI_MspInit+0x2dc>)
 8000afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <HAL_SAI_MspInit+0x2dc>)
 8000b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <HAL_SAI_MspInit+0x2dc>)
 8000b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    }
    SAI3_client ++;
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <HAL_SAI_MspInit+0x304>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <HAL_SAI_MspInit+0x304>)
 8000b20:	6013      	str	r3, [r2, #0]

    /**SAI3_A_Block_A GPIO Configuration
    PD1     ------> SAI3_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b22:	2302      	movs	r3, #2
 8000b24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
 8000b3a:	2306      	movs	r3, #6
 8000b3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4816      	ldr	r0, [pc, #88]	; (8000ba0 <HAL_SAI_MspInit+0x2f4>)
 8000b48:	f002 f8d2 	bl	8002cf0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai3_a.Instance = DMA1_Stream3;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_SAI_MspInit+0x308>)
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <HAL_SAI_MspInit+0x30c>)
 8000b50:	601a      	str	r2, [r3, #0]
    hdma_sai3_a.Init.Request = DMA_REQUEST_SAI3_A;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_SAI_MspInit+0x308>)
 8000b54:	2271      	movs	r2, #113	; 0x71
 8000b56:	605a      	str	r2, [r3, #4]
    hdma_sai3_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_SAI_MspInit+0x308>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
    hdma_sai3_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_SAI_MspInit+0x308>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
    hdma_sai3_a.Init.MemInc = DMA_MINC_ENABLE;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_SAI_MspInit+0x308>)
 8000b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b6a:	611a      	str	r2, [r3, #16]
    hdma_sai3_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_SAI_MspInit+0x308>)
 8000b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b72:	615a      	str	r2, [r3, #20]
    hdma_sai3_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_SAI_MspInit+0x308>)
 8000b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7a:	619a      	str	r2, [r3, #24]
 8000b7c:	e01e      	b.n	8000bbc <HAL_SAI_MspInit+0x310>
 8000b7e:	bf00      	nop
 8000b80:	40015804 	.word	0x40015804
 8000b84:	240004e0 	.word	0x240004e0
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	58021000 	.word	0x58021000
 8000b90:	24000378 	.word	0x24000378
 8000b94:	40020028 	.word	0x40020028
 8000b98:	40015c04 	.word	0x40015c04
 8000b9c:	240004e4 	.word	0x240004e4
 8000ba0:	58020c00 	.word	0x58020c00
 8000ba4:	240003f0 	.word	0x240003f0
 8000ba8:	40020040 	.word	0x40020040
 8000bac:	40016004 	.word	0x40016004
 8000bb0:	240004e8 	.word	0x240004e8
 8000bb4:	24000468 	.word	0x24000468
 8000bb8:	40020058 	.word	0x40020058
    hdma_sai3_a.Init.Mode = DMA_NORMAL;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
    hdma_sai3_a.Init.Priority = DMA_PRIORITY_LOW;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
    hdma_sai3_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai3_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai3_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai3_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai3_a) != HAL_OK)
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000be2:	f000 fbc3 	bl	800136c <HAL_DMA_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_SAI_MspInit+0x344>
    {
      Error_Handler();
 8000bec:	f7ff fd3e 	bl	800066c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai3_a);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai3_a);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000c06:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <HAL_SAI_MspInit+0x368>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8000c0c:	bf00      	nop
 8000c0e:	37e8      	adds	r7, #232	; 0xe8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	24000468 	.word	0x24000468

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_MspInit+0x30>)
 8000c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c24:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x30>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x30>)
 8000c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	58024400 	.word	0x58024400

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000c50:	f004 fcd4 	bl	80055fc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x8>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 fa06 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <DMA1_Stream1_IRQHandler+0x10>)
 8000caa:	f000 febb 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24000378 	.word	0x24000378

08000cb8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <DMA1_Stream2_IRQHandler+0x10>)
 8000cbe:	f000 feb1 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	240003f0 	.word	0x240003f0

08000ccc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai3_a);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA1_Stream3_IRQHandler+0x10>)
 8000cd2:	f000 fea7 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	24000468 	.word	0x24000468

08000ce0 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8000ce6:	f002 fb23 	bl	8003330 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	240009d4 	.word	0x240009d4

08000cf4 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8000cfa:	f002 fb19 	bl	8003330 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	240009d4 	.word	0x240009d4

08000d08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <OTG_FS_IRQHandler+0x10>)
 8000d0e:	f002 fb0f 	bl	8003330 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	240009d4 	.word	0x240009d4

08000d1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e00a      	b.n	8000d44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d2e:	f3af 8000 	nop.w
 8000d32:	4601      	mov	r1, r0
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	b2ca      	uxtb	r2, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf0      	blt.n	8000d2e <_read+0x12>
	}

return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	e009      	b.n	8000d7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dbf1      	blt.n	8000d68 <_write+0x12>
	}
	return len;
 8000d84:	687b      	ldr	r3, [r7, #4]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_close>:

int _close(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
	return -1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db6:	605a      	str	r2, [r3, #4]
	return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_isatty>:

int _isatty(int file)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f00b f89e 	bl	800bf68 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24080000 	.word	0x24080000
 8000e58:	00004000 	.word	0x00004000
 8000e5c:	240004ec 	.word	0x240004ec
 8000e60:	24004b48 	.word	0x24004b48

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e68:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <SystemInit+0xe4>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a36      	ldr	r2, [pc, #216]	; (8000f48 <SystemInit+0xe4>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <SystemInit+0xe8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 030f 	and.w	r3, r3, #15
 8000e80:	2b06      	cmp	r3, #6
 8000e82:	d807      	bhi.n	8000e94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e84:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <SystemInit+0xe8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 030f 	bic.w	r3, r3, #15
 8000e8c:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <SystemInit+0xe8>)
 8000e8e:	f043 0307 	orr.w	r3, r3, #7
 8000e92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e94:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <SystemInit+0xec>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a2d      	ldr	r2, [pc, #180]	; (8000f50 <SystemInit+0xec>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <SystemInit+0xec>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <SystemInit+0xec>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4929      	ldr	r1, [pc, #164]	; (8000f50 <SystemInit+0xec>)
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <SystemInit+0xf0>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <SystemInit+0xe8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <SystemInit+0xe8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 030f 	bic.w	r3, r3, #15
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <SystemInit+0xe8>)
 8000ec8:	f043 0307 	orr.w	r3, r3, #7
 8000ecc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <SystemInit+0xec>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <SystemInit+0xec>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <SystemInit+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <SystemInit+0xec>)
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <SystemInit+0xf4>)
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <SystemInit+0xec>)
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <SystemInit+0xf8>)
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <SystemInit+0xec>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <SystemInit+0xfc>)
 8000ef0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <SystemInit+0xec>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <SystemInit+0xec>)
 8000efa:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <SystemInit+0xfc>)
 8000efc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <SystemInit+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <SystemInit+0xec>)
 8000f06:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <SystemInit+0xfc>)
 8000f08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <SystemInit+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <SystemInit+0xec>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <SystemInit+0xec>)
 8000f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <SystemInit+0xec>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <SystemInit+0x100>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <SystemInit+0x104>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f2e:	d202      	bcs.n	8000f36 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <SystemInit+0x108>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <SystemInit+0x10c>)
 8000f38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	52002000 	.word	0x52002000
 8000f50:	58024400 	.word	0x58024400
 8000f54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f58:	02020200 	.word	0x02020200
 8000f5c:	01ff0000 	.word	0x01ff0000
 8000f60:	01010280 	.word	0x01010280
 8000f64:	5c001000 	.word	0x5c001000
 8000f68:	ffff0000 	.word	0xffff0000
 8000f6c:	51008108 	.word	0x51008108
 8000f70:	52004000 	.word	0x52004000

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f78:	f7ff ff74 	bl	8000e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	; (8000fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f00a ffe7 	bl	800bf74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fa9b 	bl	80004e0 <main>
  bx  lr
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fb4:	24000194 	.word	0x24000194
  ldr r2, =_sidata
 8000fb8:	0800d1f8 	.word	0x0800d1f8
  ldr r2, =_sbss
 8000fbc:	24000194 	.word	0x24000194
  ldr r4, =_ebss
 8000fc0:	24004b44 	.word	0x24004b44

08000fc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC3_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f000 f98c 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fd4:	f004 f968 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_Init+0x68>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	4913      	ldr	r1, [pc, #76]	; (8001034 <HAL_Init+0x6c>)
 8000fe6:	5ccb      	ldrb	r3, [r1, r3]
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_Init+0x68>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_Init+0x6c>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_Init+0x70>)
 800100a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_Init+0x74>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001012:	200f      	movs	r0, #15
 8001014:	f000 f814 	bl	8001040 <HAL_InitTick>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e002      	b.n	8001028 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001022:	f7ff fdf9 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400
 8001034:	0800d140 	.word	0x0800d140
 8001038:	24000004 	.word	0x24000004
 800103c:	24000000 	.word	0x24000000

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_InitTick+0x60>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e021      	b.n	8001098 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_InitTick+0x64>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_InitTick+0x60>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f971 	bl	8001352 <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f93b 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x68>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2400000c 	.word	0x2400000c
 80010a4:	24000000 	.word	0x24000000
 80010a8:	24000008 	.word	0x24000008

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2400000c 	.word	0x2400000c
 80010d0:	240004f0 	.word	0x240004f0

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	240004f0 	.word	0x240004f0

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2400000c 	.word	0x2400000c

08001134 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetREVID+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0c1b      	lsrs	r3, r3, #16
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	5c001000 	.word	0x5c001000

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	4313      	orrs	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	05fa0000 	.word	0x05fa0000

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff40 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff33 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa4 	bl	80012a8 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff feae 	bl	80010d4 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e316      	b.n	80019b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a66      	ldr	r2, [pc, #408]	; (8001524 <HAL_DMA_Init+0x1b8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d04a      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_DMA_Init+0x1bc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d045      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a63      	ldr	r2, [pc, #396]	; (800152c <HAL_DMA_Init+0x1c0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d040      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a62      	ldr	r2, [pc, #392]	; (8001530 <HAL_DMA_Init+0x1c4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d03b      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a60      	ldr	r2, [pc, #384]	; (8001534 <HAL_DMA_Init+0x1c8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d036      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a5f      	ldr	r2, [pc, #380]	; (8001538 <HAL_DMA_Init+0x1cc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d031      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a5d      	ldr	r2, [pc, #372]	; (800153c <HAL_DMA_Init+0x1d0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02c      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <HAL_DMA_Init+0x1d4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d027      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a5a      	ldr	r2, [pc, #360]	; (8001544 <HAL_DMA_Init+0x1d8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d022      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a59      	ldr	r2, [pc, #356]	; (8001548 <HAL_DMA_Init+0x1dc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d01d      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a57      	ldr	r2, [pc, #348]	; (800154c <HAL_DMA_Init+0x1e0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d018      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a56      	ldr	r2, [pc, #344]	; (8001550 <HAL_DMA_Init+0x1e4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d013      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a54      	ldr	r2, [pc, #336]	; (8001554 <HAL_DMA_Init+0x1e8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00e      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a53      	ldr	r2, [pc, #332]	; (8001558 <HAL_DMA_Init+0x1ec>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d009      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a51      	ldr	r2, [pc, #324]	; (800155c <HAL_DMA_Init+0x1f0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d004      	beq.n	8001424 <HAL_DMA_Init+0xb8>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a50      	ldr	r2, [pc, #320]	; (8001560 <HAL_DMA_Init+0x1f4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d101      	bne.n	8001428 <HAL_DMA_Init+0xbc>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_DMA_Init+0xbe>
 8001428:	2300      	movs	r3, #0
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 813b 	beq.w	80016a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a37      	ldr	r2, [pc, #220]	; (8001524 <HAL_DMA_Init+0x1b8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d04a      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a36      	ldr	r2, [pc, #216]	; (8001528 <HAL_DMA_Init+0x1bc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d045      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a34      	ldr	r2, [pc, #208]	; (800152c <HAL_DMA_Init+0x1c0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d040      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a33      	ldr	r2, [pc, #204]	; (8001530 <HAL_DMA_Init+0x1c4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d03b      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a31      	ldr	r2, [pc, #196]	; (8001534 <HAL_DMA_Init+0x1c8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d036      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a30      	ldr	r2, [pc, #192]	; (8001538 <HAL_DMA_Init+0x1cc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d031      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2e      	ldr	r2, [pc, #184]	; (800153c <HAL_DMA_Init+0x1d0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d02c      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <HAL_DMA_Init+0x1d4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d027      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a2b      	ldr	r2, [pc, #172]	; (8001544 <HAL_DMA_Init+0x1d8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d022      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <HAL_DMA_Init+0x1dc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d01d      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a28      	ldr	r2, [pc, #160]	; (800154c <HAL_DMA_Init+0x1e0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d018      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_DMA_Init+0x1e4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d013      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a25      	ldr	r2, [pc, #148]	; (8001554 <HAL_DMA_Init+0x1e8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00e      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a24      	ldr	r2, [pc, #144]	; (8001558 <HAL_DMA_Init+0x1ec>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d009      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a22      	ldr	r2, [pc, #136]	; (800155c <HAL_DMA_Init+0x1f0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d004      	beq.n	80014e0 <HAL_DMA_Init+0x174>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a21      	ldr	r2, [pc, #132]	; (8001560 <HAL_DMA_Init+0x1f4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d108      	bne.n	80014f2 <HAL_DMA_Init+0x186>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e007      	b.n	8001502 <HAL_DMA_Init+0x196>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001502:	e02f      	b.n	8001564 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001504:	f7ff fde6 	bl	80010d4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b05      	cmp	r3, #5
 8001510:	d928      	bls.n	8001564 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2220      	movs	r2, #32
 8001516:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2203      	movs	r2, #3
 800151c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e246      	b.n	80019b2 <HAL_DMA_Init+0x646>
 8001524:	40020010 	.word	0x40020010
 8001528:	40020028 	.word	0x40020028
 800152c:	40020040 	.word	0x40020040
 8001530:	40020058 	.word	0x40020058
 8001534:	40020070 	.word	0x40020070
 8001538:	40020088 	.word	0x40020088
 800153c:	400200a0 	.word	0x400200a0
 8001540:	400200b8 	.word	0x400200b8
 8001544:	40020410 	.word	0x40020410
 8001548:	40020428 	.word	0x40020428
 800154c:	40020440 	.word	0x40020440
 8001550:	40020458 	.word	0x40020458
 8001554:	40020470 	.word	0x40020470
 8001558:	40020488 	.word	0x40020488
 800155c:	400204a0 	.word	0x400204a0
 8001560:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1c8      	bne.n	8001504 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4b83      	ldr	r3, [pc, #524]	; (800178c <HAL_DMA_Init+0x420>)
 800157e:	4013      	ands	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800158a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001596:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d107      	bne.n	80015c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4313      	orrs	r3, r2
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80015c8:	4b71      	ldr	r3, [pc, #452]	; (8001790 <HAL_DMA_Init+0x424>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b71      	ldr	r3, [pc, #452]	; (8001794 <HAL_DMA_Init+0x428>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015d4:	d328      	bcc.n	8001628 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b28      	cmp	r3, #40	; 0x28
 80015dc:	d903      	bls.n	80015e6 <HAL_DMA_Init+0x27a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b2e      	cmp	r3, #46	; 0x2e
 80015e4:	d917      	bls.n	8001616 <HAL_DMA_Init+0x2aa>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b3e      	cmp	r3, #62	; 0x3e
 80015ec:	d903      	bls.n	80015f6 <HAL_DMA_Init+0x28a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b42      	cmp	r3, #66	; 0x42
 80015f4:	d90f      	bls.n	8001616 <HAL_DMA_Init+0x2aa>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b46      	cmp	r3, #70	; 0x46
 80015fc:	d903      	bls.n	8001606 <HAL_DMA_Init+0x29a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b48      	cmp	r3, #72	; 0x48
 8001604:	d907      	bls.n	8001616 <HAL_DMA_Init+0x2aa>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b4e      	cmp	r3, #78	; 0x4e
 800160c:	d905      	bls.n	800161a <HAL_DMA_Init+0x2ae>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b52      	cmp	r3, #82	; 0x52
 8001614:	d801      	bhi.n	800161a <HAL_DMA_Init+0x2ae>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_DMA_Init+0x2b0>
 800161a:	2300      	movs	r3, #0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001626:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f023 0307 	bic.w	r3, r3, #7
 800163e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	4313      	orrs	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b04      	cmp	r3, #4
 8001650:	d117      	bne.n	8001682 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4313      	orrs	r3, r2
 800165a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00e      	beq.n	8001682 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f001 f9b9 	bl	80029dc <DMA_CheckFifoParam>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e197      	b.n	80019b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f001 f8f4 	bl	8002878 <DMA_CalcBaseAndBitshift>
 8001690:	4603      	mov	r3, r0
 8001692:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	223f      	movs	r2, #63	; 0x3f
 800169e:	409a      	lsls	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	e0cd      	b.n	8001842 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a3b      	ldr	r2, [pc, #236]	; (8001798 <HAL_DMA_Init+0x42c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d022      	beq.n	80016f6 <HAL_DMA_Init+0x38a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a39      	ldr	r2, [pc, #228]	; (800179c <HAL_DMA_Init+0x430>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d01d      	beq.n	80016f6 <HAL_DMA_Init+0x38a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a38      	ldr	r2, [pc, #224]	; (80017a0 <HAL_DMA_Init+0x434>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d018      	beq.n	80016f6 <HAL_DMA_Init+0x38a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a36      	ldr	r2, [pc, #216]	; (80017a4 <HAL_DMA_Init+0x438>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_DMA_Init+0x38a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a35      	ldr	r2, [pc, #212]	; (80017a8 <HAL_DMA_Init+0x43c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00e      	beq.n	80016f6 <HAL_DMA_Init+0x38a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a33      	ldr	r2, [pc, #204]	; (80017ac <HAL_DMA_Init+0x440>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d009      	beq.n	80016f6 <HAL_DMA_Init+0x38a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <HAL_DMA_Init+0x444>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d004      	beq.n	80016f6 <HAL_DMA_Init+0x38a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a30      	ldr	r2, [pc, #192]	; (80017b4 <HAL_DMA_Init+0x448>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_DMA_Init+0x38e>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_DMA_Init+0x390>
 80016fa:	2300      	movs	r3, #0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8097 	beq.w	8001830 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a24      	ldr	r2, [pc, #144]	; (8001798 <HAL_DMA_Init+0x42c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d021      	beq.n	8001750 <HAL_DMA_Init+0x3e4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a22      	ldr	r2, [pc, #136]	; (800179c <HAL_DMA_Init+0x430>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01c      	beq.n	8001750 <HAL_DMA_Init+0x3e4>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <HAL_DMA_Init+0x434>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d017      	beq.n	8001750 <HAL_DMA_Init+0x3e4>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <HAL_DMA_Init+0x438>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d012      	beq.n	8001750 <HAL_DMA_Init+0x3e4>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <HAL_DMA_Init+0x43c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d00d      	beq.n	8001750 <HAL_DMA_Init+0x3e4>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <HAL_DMA_Init+0x440>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d008      	beq.n	8001750 <HAL_DMA_Init+0x3e4>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_DMA_Init+0x444>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d003      	beq.n	8001750 <HAL_DMA_Init+0x3e4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <HAL_DMA_Init+0x448>)
 800174e:	4293      	cmp	r3, r2
 8001750:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2202      	movs	r2, #2
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_DMA_Init+0x44c>)
 800176e:	4013      	ands	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b40      	cmp	r3, #64	; 0x40
 8001778:	d020      	beq.n	80017bc <HAL_DMA_Init+0x450>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b80      	cmp	r3, #128	; 0x80
 8001780:	d102      	bne.n	8001788 <HAL_DMA_Init+0x41c>
 8001782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001786:	e01a      	b.n	80017be <HAL_DMA_Init+0x452>
 8001788:	2300      	movs	r3, #0
 800178a:	e018      	b.n	80017be <HAL_DMA_Init+0x452>
 800178c:	fe10803f 	.word	0xfe10803f
 8001790:	5c001000 	.word	0x5c001000
 8001794:	ffff0000 	.word	0xffff0000
 8001798:	58025408 	.word	0x58025408
 800179c:	5802541c 	.word	0x5802541c
 80017a0:	58025430 	.word	0x58025430
 80017a4:	58025444 	.word	0x58025444
 80017a8:	58025458 	.word	0x58025458
 80017ac:	5802546c 	.word	0x5802546c
 80017b0:	58025480 	.word	0x58025480
 80017b4:	58025494 	.word	0x58025494
 80017b8:	fffe000f 	.word	0xfffe000f
 80017bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68d2      	ldr	r2, [r2, #12]
 80017c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b6e      	ldr	r3, [pc, #440]	; (80019bc <HAL_DMA_Init+0x650>)
 8001804:	4413      	add	r3, r2
 8001806:	4a6e      	ldr	r2, [pc, #440]	; (80019c0 <HAL_DMA_Init+0x654>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	009a      	lsls	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f001 f82f 	bl	8002878 <DMA_CalcBaseAndBitshift>
 800181a:	4603      	mov	r3, r0
 800181c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	2201      	movs	r2, #1
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	e008      	b.n	8001842 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0b7      	b.n	80019b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a5f      	ldr	r2, [pc, #380]	; (80019c4 <HAL_DMA_Init+0x658>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d072      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a5d      	ldr	r2, [pc, #372]	; (80019c8 <HAL_DMA_Init+0x65c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d06d      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a5c      	ldr	r2, [pc, #368]	; (80019cc <HAL_DMA_Init+0x660>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d068      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a5a      	ldr	r2, [pc, #360]	; (80019d0 <HAL_DMA_Init+0x664>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d063      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a59      	ldr	r2, [pc, #356]	; (80019d4 <HAL_DMA_Init+0x668>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d05e      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_DMA_Init+0x66c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d059      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a56      	ldr	r2, [pc, #344]	; (80019dc <HAL_DMA_Init+0x670>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d054      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a54      	ldr	r2, [pc, #336]	; (80019e0 <HAL_DMA_Init+0x674>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d04f      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a53      	ldr	r2, [pc, #332]	; (80019e4 <HAL_DMA_Init+0x678>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04a      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_DMA_Init+0x67c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d045      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a50      	ldr	r2, [pc, #320]	; (80019ec <HAL_DMA_Init+0x680>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d040      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a4e      	ldr	r2, [pc, #312]	; (80019f0 <HAL_DMA_Init+0x684>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d03b      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <HAL_DMA_Init+0x688>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d036      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a4b      	ldr	r2, [pc, #300]	; (80019f8 <HAL_DMA_Init+0x68c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d031      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a4a      	ldr	r2, [pc, #296]	; (80019fc <HAL_DMA_Init+0x690>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d02c      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <HAL_DMA_Init+0x694>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d027      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a47      	ldr	r2, [pc, #284]	; (8001a04 <HAL_DMA_Init+0x698>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d022      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <HAL_DMA_Init+0x69c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01d      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <HAL_DMA_Init+0x6a0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d018      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a42      	ldr	r2, [pc, #264]	; (8001a10 <HAL_DMA_Init+0x6a4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_DMA_Init+0x6a8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00e      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a3f      	ldr	r2, [pc, #252]	; (8001a18 <HAL_DMA_Init+0x6ac>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d009      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a3e      	ldr	r2, [pc, #248]	; (8001a1c <HAL_DMA_Init+0x6b0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d004      	beq.n	8001932 <HAL_DMA_Init+0x5c6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a3c      	ldr	r2, [pc, #240]	; (8001a20 <HAL_DMA_Init+0x6b4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_DMA_Init+0x5ca>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_DMA_Init+0x5cc>
 8001936:	2300      	movs	r3, #0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d032      	beq.n	80019a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f001 f8c9 	bl	8002ad4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b80      	cmp	r3, #128	; 0x80
 8001948:	d102      	bne.n	8001950 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001964:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_DMA_Init+0x624>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b08      	cmp	r3, #8
 8001974:	d80c      	bhi.n	8001990 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f001 f946 	bl	8002c08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e008      	b.n	80019a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	a7fdabf8 	.word	0xa7fdabf8
 80019c0:	cccccccd 	.word	0xcccccccd
 80019c4:	40020010 	.word	0x40020010
 80019c8:	40020028 	.word	0x40020028
 80019cc:	40020040 	.word	0x40020040
 80019d0:	40020058 	.word	0x40020058
 80019d4:	40020070 	.word	0x40020070
 80019d8:	40020088 	.word	0x40020088
 80019dc:	400200a0 	.word	0x400200a0
 80019e0:	400200b8 	.word	0x400200b8
 80019e4:	40020410 	.word	0x40020410
 80019e8:	40020428 	.word	0x40020428
 80019ec:	40020440 	.word	0x40020440
 80019f0:	40020458 	.word	0x40020458
 80019f4:	40020470 	.word	0x40020470
 80019f8:	40020488 	.word	0x40020488
 80019fc:	400204a0 	.word	0x400204a0
 8001a00:	400204b8 	.word	0x400204b8
 8001a04:	58025408 	.word	0x58025408
 8001a08:	5802541c 	.word	0x5802541c
 8001a0c:	58025430 	.word	0x58025430
 8001a10:	58025444 	.word	0x58025444
 8001a14:	58025458 	.word	0x58025458
 8001a18:	5802546c 	.word	0x5802546c
 8001a1c:	58025480 	.word	0x58025480
 8001a20:	58025494 	.word	0x58025494

08001a24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a30:	4b67      	ldr	r3, [pc, #412]	; (8001bd0 <HAL_DMA_IRQHandler+0x1ac>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a67      	ldr	r2, [pc, #412]	; (8001bd4 <HAL_DMA_IRQHandler+0x1b0>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a5f      	ldr	r2, [pc, #380]	; (8001bd8 <HAL_DMA_IRQHandler+0x1b4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d04a      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a5d      	ldr	r2, [pc, #372]	; (8001bdc <HAL_DMA_IRQHandler+0x1b8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d045      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5c      	ldr	r2, [pc, #368]	; (8001be0 <HAL_DMA_IRQHandler+0x1bc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d040      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a5a      	ldr	r2, [pc, #360]	; (8001be4 <HAL_DMA_IRQHandler+0x1c0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d03b      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a59      	ldr	r2, [pc, #356]	; (8001be8 <HAL_DMA_IRQHandler+0x1c4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d036      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a57      	ldr	r2, [pc, #348]	; (8001bec <HAL_DMA_IRQHandler+0x1c8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d031      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a56      	ldr	r2, [pc, #344]	; (8001bf0 <HAL_DMA_IRQHandler+0x1cc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d02c      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a54      	ldr	r2, [pc, #336]	; (8001bf4 <HAL_DMA_IRQHandler+0x1d0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d027      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_DMA_IRQHandler+0x1d4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <HAL_DMA_IRQHandler+0x1d8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01d      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a50      	ldr	r2, [pc, #320]	; (8001c00 <HAL_DMA_IRQHandler+0x1dc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d018      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <HAL_DMA_IRQHandler+0x1e0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a4d      	ldr	r2, [pc, #308]	; (8001c08 <HAL_DMA_IRQHandler+0x1e4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00e      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a4b      	ldr	r2, [pc, #300]	; (8001c0c <HAL_DMA_IRQHandler+0x1e8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a4a      	ldr	r2, [pc, #296]	; (8001c10 <HAL_DMA_IRQHandler+0x1ec>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xd2>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a48      	ldr	r2, [pc, #288]	; (8001c14 <HAL_DMA_IRQHandler+0x1f0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_DMA_IRQHandler+0xd6>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_DMA_IRQHandler+0xd8>
 8001afa:	2300      	movs	r3, #0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 842b 	beq.w	8002358 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80a2 	beq.w	8001c5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <HAL_DMA_IRQHandler+0x1b4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d04a      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a2d      	ldr	r2, [pc, #180]	; (8001bdc <HAL_DMA_IRQHandler+0x1b8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d045      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2b      	ldr	r2, [pc, #172]	; (8001be0 <HAL_DMA_IRQHandler+0x1bc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d040      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <HAL_DMA_IRQHandler+0x1c0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d03b      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a28      	ldr	r2, [pc, #160]	; (8001be8 <HAL_DMA_IRQHandler+0x1c4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d036      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a27      	ldr	r2, [pc, #156]	; (8001bec <HAL_DMA_IRQHandler+0x1c8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d031      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <HAL_DMA_IRQHandler+0x1cc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d02c      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <HAL_DMA_IRQHandler+0x1d0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d027      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_DMA_IRQHandler+0x1d4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d022      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <HAL_DMA_IRQHandler+0x1d8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d01d      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_DMA_IRQHandler+0x1dc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d018      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_DMA_IRQHandler+0x1e0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_DMA_IRQHandler+0x1e4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00e      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_DMA_IRQHandler+0x1e8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_DMA_IRQHandler+0x1ec>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x194>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_DMA_IRQHandler+0x1f0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d12f      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x1f4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	e02e      	b.n	8001c2c <HAL_DMA_IRQHandler+0x208>
 8001bce:	bf00      	nop
 8001bd0:	24000000 	.word	0x24000000
 8001bd4:	1b4e81b5 	.word	0x1b4e81b5
 8001bd8:	40020010 	.word	0x40020010
 8001bdc:	40020028 	.word	0x40020028
 8001be0:	40020040 	.word	0x40020040
 8001be4:	40020058 	.word	0x40020058
 8001be8:	40020070 	.word	0x40020070
 8001bec:	40020088 	.word	0x40020088
 8001bf0:	400200a0 	.word	0x400200a0
 8001bf4:	400200b8 	.word	0x400200b8
 8001bf8:	40020410 	.word	0x40020410
 8001bfc:	40020428 	.word	0x40020428
 8001c00:	40020440 	.word	0x40020440
 8001c04:	40020458 	.word	0x40020458
 8001c08:	40020470 	.word	0x40020470
 8001c0c:	40020488 	.word	0x40020488
 8001c10:	400204a0 	.word	0x400204a0
 8001c14:	400204b8 	.word	0x400204b8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf14      	ite	ne
 8001c26:	2301      	movne	r3, #1
 8001c28:	2300      	moveq	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d015      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0204 	bic.w	r2, r2, #4
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2208      	movs	r2, #8
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d06e      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a69      	ldr	r2, [pc, #420]	; (8001e1c <HAL_DMA_IRQHandler+0x3f8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d04a      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a67      	ldr	r2, [pc, #412]	; (8001e20 <HAL_DMA_IRQHandler+0x3fc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d045      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a66      	ldr	r2, [pc, #408]	; (8001e24 <HAL_DMA_IRQHandler+0x400>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d040      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a64      	ldr	r2, [pc, #400]	; (8001e28 <HAL_DMA_IRQHandler+0x404>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d03b      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a63      	ldr	r2, [pc, #396]	; (8001e2c <HAL_DMA_IRQHandler+0x408>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d036      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a61      	ldr	r2, [pc, #388]	; (8001e30 <HAL_DMA_IRQHandler+0x40c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d031      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a60      	ldr	r2, [pc, #384]	; (8001e34 <HAL_DMA_IRQHandler+0x410>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d02c      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5e      	ldr	r2, [pc, #376]	; (8001e38 <HAL_DMA_IRQHandler+0x414>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d027      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a5d      	ldr	r2, [pc, #372]	; (8001e3c <HAL_DMA_IRQHandler+0x418>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d022      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a5b      	ldr	r2, [pc, #364]	; (8001e40 <HAL_DMA_IRQHandler+0x41c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01d      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a5a      	ldr	r2, [pc, #360]	; (8001e44 <HAL_DMA_IRQHandler+0x420>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d018      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <HAL_DMA_IRQHandler+0x424>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a57      	ldr	r2, [pc, #348]	; (8001e4c <HAL_DMA_IRQHandler+0x428>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00e      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <HAL_DMA_IRQHandler+0x42c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a54      	ldr	r2, [pc, #336]	; (8001e54 <HAL_DMA_IRQHandler+0x430>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2ee>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_DMA_IRQHandler+0x434>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10a      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x304>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e003      	b.n	8001d30 <HAL_DMA_IRQHandler+0x30c>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	f043 0202 	orr.w	r2, r3, #2
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	2204      	movs	r2, #4
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 808f 	beq.w	8001e84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2c      	ldr	r2, [pc, #176]	; (8001e1c <HAL_DMA_IRQHandler+0x3f8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04a      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <HAL_DMA_IRQHandler+0x3fc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d045      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a29      	ldr	r2, [pc, #164]	; (8001e24 <HAL_DMA_IRQHandler+0x400>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d040      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <HAL_DMA_IRQHandler+0x404>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d03b      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_DMA_IRQHandler+0x408>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d036      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a24      	ldr	r2, [pc, #144]	; (8001e30 <HAL_DMA_IRQHandler+0x40c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d031      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_DMA_IRQHandler+0x410>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d02c      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <HAL_DMA_IRQHandler+0x414>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d027      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_DMA_IRQHandler+0x418>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d022      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_DMA_IRQHandler+0x41c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01d      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_DMA_IRQHandler+0x420>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d018      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_DMA_IRQHandler+0x424>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_DMA_IRQHandler+0x428>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d00e      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <HAL_DMA_IRQHandler+0x42c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d009      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_DMA_IRQHandler+0x430>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d004      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x3e2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <HAL_DMA_IRQHandler+0x434>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12a      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x438>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf14      	ite	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	2300      	moveq	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e023      	b.n	8001e64 <HAL_DMA_IRQHandler+0x440>
 8001e1c:	40020010 	.word	0x40020010
 8001e20:	40020028 	.word	0x40020028
 8001e24:	40020040 	.word	0x40020040
 8001e28:	40020058 	.word	0x40020058
 8001e2c:	40020070 	.word	0x40020070
 8001e30:	40020088 	.word	0x40020088
 8001e34:	400200a0 	.word	0x400200a0
 8001e38:	400200b8 	.word	0x400200b8
 8001e3c:	40020410 	.word	0x40020410
 8001e40:	40020428 	.word	0x40020428
 8001e44:	40020440 	.word	0x40020440
 8001e48:	40020458 	.word	0x40020458
 8001e4c:	40020470 	.word	0x40020470
 8001e50:	40020488 	.word	0x40020488
 8001e54:	400204a0 	.word	0x400204a0
 8001e58:	400204b8 	.word	0x400204b8
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00d      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2204      	movs	r2, #4
 8001e72:	409a      	lsls	r2, r3
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a85      	ldr	r2, [pc, #532]	; (80020b4 <HAL_DMA_IRQHandler+0x690>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d04a      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a83      	ldr	r2, [pc, #524]	; (80020b8 <HAL_DMA_IRQHandler+0x694>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d045      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a82      	ldr	r2, [pc, #520]	; (80020bc <HAL_DMA_IRQHandler+0x698>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d040      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a80      	ldr	r2, [pc, #512]	; (80020c0 <HAL_DMA_IRQHandler+0x69c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d03b      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a7f      	ldr	r2, [pc, #508]	; (80020c4 <HAL_DMA_IRQHandler+0x6a0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d036      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a7d      	ldr	r2, [pc, #500]	; (80020c8 <HAL_DMA_IRQHandler+0x6a4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d031      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7c      	ldr	r2, [pc, #496]	; (80020cc <HAL_DMA_IRQHandler+0x6a8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d02c      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <HAL_DMA_IRQHandler+0x6ac>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d027      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a79      	ldr	r2, [pc, #484]	; (80020d4 <HAL_DMA_IRQHandler+0x6b0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d022      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a77      	ldr	r2, [pc, #476]	; (80020d8 <HAL_DMA_IRQHandler+0x6b4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01d      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a76      	ldr	r2, [pc, #472]	; (80020dc <HAL_DMA_IRQHandler+0x6b8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d018      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a74      	ldr	r2, [pc, #464]	; (80020e0 <HAL_DMA_IRQHandler+0x6bc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a73      	ldr	r2, [pc, #460]	; (80020e4 <HAL_DMA_IRQHandler+0x6c0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00e      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a71      	ldr	r2, [pc, #452]	; (80020e8 <HAL_DMA_IRQHandler+0x6c4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d009      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a70      	ldr	r2, [pc, #448]	; (80020ec <HAL_DMA_IRQHandler+0x6c8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d004      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x516>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6e      	ldr	r2, [pc, #440]	; (80020f0 <HAL_DMA_IRQHandler+0x6cc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d10a      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x52c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e009      	b.n	8001f64 <HAL_DMA_IRQHandler+0x540>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d03e      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2210      	movs	r2, #16
 8001f72:	409a      	lsls	r2, r3
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d018      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d108      	bne.n	8001fa6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d024      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
 8001fa4:	e01f      	b.n	8001fe6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01b      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
 8001fb6:	e016      	b.n	8001fe6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0208 	bic.w	r2, r2, #8
 8001fd4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2220      	movs	r2, #32
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8110 	beq.w	800221c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <HAL_DMA_IRQHandler+0x690>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d04a      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <HAL_DMA_IRQHandler+0x694>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d045      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a29      	ldr	r2, [pc, #164]	; (80020bc <HAL_DMA_IRQHandler+0x698>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d040      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_DMA_IRQHandler+0x69c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d03b      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <HAL_DMA_IRQHandler+0x6a0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d036      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <HAL_DMA_IRQHandler+0x6a4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d031      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a23      	ldr	r2, [pc, #140]	; (80020cc <HAL_DMA_IRQHandler+0x6a8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d02c      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <HAL_DMA_IRQHandler+0x6ac>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d027      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <HAL_DMA_IRQHandler+0x6b0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d022      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <HAL_DMA_IRQHandler+0x6b4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d01d      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <HAL_DMA_IRQHandler+0x6b8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d018      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_DMA_IRQHandler+0x6bc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d013      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <HAL_DMA_IRQHandler+0x6c0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00e      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <HAL_DMA_IRQHandler+0x6c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d009      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a17      	ldr	r2, [pc, #92]	; (80020ec <HAL_DMA_IRQHandler+0x6c8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d004      	beq.n	800209c <HAL_DMA_IRQHandler+0x678>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_DMA_IRQHandler+0x6cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d12b      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x6d0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	e02a      	b.n	8002108 <HAL_DMA_IRQHandler+0x6e4>
 80020b2:	bf00      	nop
 80020b4:	40020010 	.word	0x40020010
 80020b8:	40020028 	.word	0x40020028
 80020bc:	40020040 	.word	0x40020040
 80020c0:	40020058 	.word	0x40020058
 80020c4:	40020070 	.word	0x40020070
 80020c8:	40020088 	.word	0x40020088
 80020cc:	400200a0 	.word	0x400200a0
 80020d0:	400200b8 	.word	0x400200b8
 80020d4:	40020410 	.word	0x40020410
 80020d8:	40020428 	.word	0x40020428
 80020dc:	40020440 	.word	0x40020440
 80020e0:	40020458 	.word	0x40020458
 80020e4:	40020470 	.word	0x40020470
 80020e8:	40020488 	.word	0x40020488
 80020ec:	400204a0 	.word	0x400204a0
 80020f0:	400204b8 	.word	0x400204b8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8087 	beq.w	800221c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2220      	movs	r2, #32
 8002118:	409a      	lsls	r2, r3
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b04      	cmp	r3, #4
 8002128:	d139      	bne.n	800219e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0216 	bic.w	r2, r2, #22
 8002138:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002148:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <HAL_DMA_IRQHandler+0x736>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0208 	bic.w	r2, r2, #8
 8002168:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	223f      	movs	r2, #63	; 0x3f
 8002174:	409a      	lsls	r2, r3
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 834a 	beq.w	8002828 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
          }
          return;
 800219c:	e344      	b.n	8002828 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d018      	beq.n	80021de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d02c      	beq.n	800221c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	e027      	b.n	800221c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d023      	beq.n	800221c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e01e      	b.n	800221c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10f      	bne.n	800220c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0210 	bic.w	r2, r2, #16
 80021fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8306 	beq.w	8002832 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8088 	beq.w	8002344 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a7a      	ldr	r2, [pc, #488]	; (800242c <HAL_DMA_IRQHandler+0xa08>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d04a      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a79      	ldr	r2, [pc, #484]	; (8002430 <HAL_DMA_IRQHandler+0xa0c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d045      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a77      	ldr	r2, [pc, #476]	; (8002434 <HAL_DMA_IRQHandler+0xa10>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d040      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a76      	ldr	r2, [pc, #472]	; (8002438 <HAL_DMA_IRQHandler+0xa14>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d03b      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a74      	ldr	r2, [pc, #464]	; (800243c <HAL_DMA_IRQHandler+0xa18>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d036      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a73      	ldr	r2, [pc, #460]	; (8002440 <HAL_DMA_IRQHandler+0xa1c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d031      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a71      	ldr	r2, [pc, #452]	; (8002444 <HAL_DMA_IRQHandler+0xa20>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d02c      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a70      	ldr	r2, [pc, #448]	; (8002448 <HAL_DMA_IRQHandler+0xa24>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d027      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6e      	ldr	r2, [pc, #440]	; (800244c <HAL_DMA_IRQHandler+0xa28>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d022      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a6d      	ldr	r2, [pc, #436]	; (8002450 <HAL_DMA_IRQHandler+0xa2c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d01d      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6b      	ldr	r2, [pc, #428]	; (8002454 <HAL_DMA_IRQHandler+0xa30>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d018      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6a      	ldr	r2, [pc, #424]	; (8002458 <HAL_DMA_IRQHandler+0xa34>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_DMA_IRQHandler+0xa38>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00e      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a67      	ldr	r2, [pc, #412]	; (8002460 <HAL_DMA_IRQHandler+0xa3c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a65      	ldr	r2, [pc, #404]	; (8002464 <HAL_DMA_IRQHandler+0xa40>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d004      	beq.n	80022dc <HAL_DMA_IRQHandler+0x8b8>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a64      	ldr	r2, [pc, #400]	; (8002468 <HAL_DMA_IRQHandler+0xa44>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d108      	bne.n	80022ee <HAL_DMA_IRQHandler+0x8ca>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e007      	b.n	80022fe <HAL_DMA_IRQHandler+0x8da>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	429a      	cmp	r2, r3
 8002308:	d307      	bcc.n	800231a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f2      	bne.n	80022fe <HAL_DMA_IRQHandler+0x8da>
 8002318:	e000      	b.n	800231c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800231a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2203      	movs	r2, #3
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002332:	e003      	b.n	800233c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8272 	beq.w	8002832 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
 8002356:	e26c      	b.n	8002832 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a43      	ldr	r2, [pc, #268]	; (800246c <HAL_DMA_IRQHandler+0xa48>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d022      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x984>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a42      	ldr	r2, [pc, #264]	; (8002470 <HAL_DMA_IRQHandler+0xa4c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d01d      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x984>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a40      	ldr	r2, [pc, #256]	; (8002474 <HAL_DMA_IRQHandler+0xa50>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d018      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x984>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a3f      	ldr	r2, [pc, #252]	; (8002478 <HAL_DMA_IRQHandler+0xa54>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x984>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3d      	ldr	r2, [pc, #244]	; (800247c <HAL_DMA_IRQHandler+0xa58>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00e      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x984>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a3c      	ldr	r2, [pc, #240]	; (8002480 <HAL_DMA_IRQHandler+0xa5c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x984>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <HAL_DMA_IRQHandler+0xa60>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x984>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a39      	ldr	r2, [pc, #228]	; (8002488 <HAL_DMA_IRQHandler+0xa64>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_DMA_IRQHandler+0x988>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_DMA_IRQHandler+0x98a>
 80023ac:	2300      	movs	r3, #0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 823f 	beq.w	8002832 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2204      	movs	r2, #4
 80023c6:	409a      	lsls	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80cd 	beq.w	800256c <HAL_DMA_IRQHandler+0xb48>
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80c7 	beq.w	800256c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	2204      	movs	r2, #4
 80023e8:	409a      	lsls	r2, r3
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d049      	beq.n	800248c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8210 	beq.w	800282c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002414:	e20a      	b.n	800282c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8206 	beq.w	800282c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002428:	e200      	b.n	800282c <HAL_DMA_IRQHandler+0xe08>
 800242a:	bf00      	nop
 800242c:	40020010 	.word	0x40020010
 8002430:	40020028 	.word	0x40020028
 8002434:	40020040 	.word	0x40020040
 8002438:	40020058 	.word	0x40020058
 800243c:	40020070 	.word	0x40020070
 8002440:	40020088 	.word	0x40020088
 8002444:	400200a0 	.word	0x400200a0
 8002448:	400200b8 	.word	0x400200b8
 800244c:	40020410 	.word	0x40020410
 8002450:	40020428 	.word	0x40020428
 8002454:	40020440 	.word	0x40020440
 8002458:	40020458 	.word	0x40020458
 800245c:	40020470 	.word	0x40020470
 8002460:	40020488 	.word	0x40020488
 8002464:	400204a0 	.word	0x400204a0
 8002468:	400204b8 	.word	0x400204b8
 800246c:	58025408 	.word	0x58025408
 8002470:	5802541c 	.word	0x5802541c
 8002474:	58025430 	.word	0x58025430
 8002478:	58025444 	.word	0x58025444
 800247c:	58025458 	.word	0x58025458
 8002480:	5802546c 	.word	0x5802546c
 8002484:	58025480 	.word	0x58025480
 8002488:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d160      	bne.n	8002558 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7f      	ldr	r2, [pc, #508]	; (8002698 <HAL_DMA_IRQHandler+0xc74>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d04a      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a7d      	ldr	r2, [pc, #500]	; (800269c <HAL_DMA_IRQHandler+0xc78>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d045      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7c      	ldr	r2, [pc, #496]	; (80026a0 <HAL_DMA_IRQHandler+0xc7c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d040      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7a      	ldr	r2, [pc, #488]	; (80026a4 <HAL_DMA_IRQHandler+0xc80>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d03b      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a79      	ldr	r2, [pc, #484]	; (80026a8 <HAL_DMA_IRQHandler+0xc84>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d036      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a77      	ldr	r2, [pc, #476]	; (80026ac <HAL_DMA_IRQHandler+0xc88>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d031      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a76      	ldr	r2, [pc, #472]	; (80026b0 <HAL_DMA_IRQHandler+0xc8c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d02c      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a74      	ldr	r2, [pc, #464]	; (80026b4 <HAL_DMA_IRQHandler+0xc90>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d027      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a73      	ldr	r2, [pc, #460]	; (80026b8 <HAL_DMA_IRQHandler+0xc94>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d022      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a71      	ldr	r2, [pc, #452]	; (80026bc <HAL_DMA_IRQHandler+0xc98>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01d      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a70      	ldr	r2, [pc, #448]	; (80026c0 <HAL_DMA_IRQHandler+0xc9c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d018      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6e      	ldr	r2, [pc, #440]	; (80026c4 <HAL_DMA_IRQHandler+0xca0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6d      	ldr	r2, [pc, #436]	; (80026c8 <HAL_DMA_IRQHandler+0xca4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00e      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6b      	ldr	r2, [pc, #428]	; (80026cc <HAL_DMA_IRQHandler+0xca8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6a      	ldr	r2, [pc, #424]	; (80026d0 <HAL_DMA_IRQHandler+0xcac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <HAL_DMA_IRQHandler+0xb12>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a68      	ldr	r2, [pc, #416]	; (80026d4 <HAL_DMA_IRQHandler+0xcb0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d108      	bne.n	8002548 <HAL_DMA_IRQHandler+0xb24>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e007      	b.n	8002558 <HAL_DMA_IRQHandler+0xb34>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0204 	bic.w	r2, r2, #4
 8002556:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8165 	beq.w	800282c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800256a:	e15f      	b.n	800282c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2202      	movs	r2, #2
 8002576:	409a      	lsls	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80c5 	beq.w	800270c <HAL_DMA_IRQHandler+0xce8>
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80bf 	beq.w	800270c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	2202      	movs	r2, #2
 8002598:	409a      	lsls	r2, r3
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d018      	beq.n	80025da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 813a 	beq.w	8002830 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025c4:	e134      	b.n	8002830 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8130 	beq.w	8002830 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025d8:	e12a      	b.n	8002830 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 8089 	bne.w	80026f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <HAL_DMA_IRQHandler+0xc74>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04a      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a29      	ldr	r2, [pc, #164]	; (800269c <HAL_DMA_IRQHandler+0xc78>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d045      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a28      	ldr	r2, [pc, #160]	; (80026a0 <HAL_DMA_IRQHandler+0xc7c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d040      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <HAL_DMA_IRQHandler+0xc80>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d03b      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <HAL_DMA_IRQHandler+0xc84>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d036      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_DMA_IRQHandler+0xc88>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d031      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <HAL_DMA_IRQHandler+0xc8c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d02c      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_DMA_IRQHandler+0xc90>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d027      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <HAL_DMA_IRQHandler+0xc94>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <HAL_DMA_IRQHandler+0xc98>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01d      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <HAL_DMA_IRQHandler+0xc9c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_DMA_IRQHandler+0xca0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_DMA_IRQHandler+0xca4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_DMA_IRQHandler+0xca8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_DMA_IRQHandler+0xcac>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_IRQHandler+0xc62>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <HAL_DMA_IRQHandler+0xcb0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d128      	bne.n	80026d8 <HAL_DMA_IRQHandler+0xcb4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0214 	bic.w	r2, r2, #20
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e027      	b.n	80026e8 <HAL_DMA_IRQHandler+0xcc4>
 8002698:	40020010 	.word	0x40020010
 800269c:	40020028 	.word	0x40020028
 80026a0:	40020040 	.word	0x40020040
 80026a4:	40020058 	.word	0x40020058
 80026a8:	40020070 	.word	0x40020070
 80026ac:	40020088 	.word	0x40020088
 80026b0:	400200a0 	.word	0x400200a0
 80026b4:	400200b8 	.word	0x400200b8
 80026b8:	40020410 	.word	0x40020410
 80026bc:	40020428 	.word	0x40020428
 80026c0:	40020440 	.word	0x40020440
 80026c4:	40020458 	.word	0x40020458
 80026c8:	40020470 	.word	0x40020470
 80026cc:	40020488 	.word	0x40020488
 80026d0:	400204a0 	.word	0x400204a0
 80026d4:	400204b8 	.word	0x400204b8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 020a 	bic.w	r2, r2, #10
 80026e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8097 	beq.w	8002830 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800270a:	e091      	b.n	8002830 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2208      	movs	r2, #8
 8002716:	409a      	lsls	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8088 	beq.w	8002832 <HAL_DMA_IRQHandler+0xe0e>
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8082 	beq.w	8002832 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a41      	ldr	r2, [pc, #260]	; (8002838 <HAL_DMA_IRQHandler+0xe14>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d04a      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a3f      	ldr	r2, [pc, #252]	; (800283c <HAL_DMA_IRQHandler+0xe18>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d045      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a3e      	ldr	r2, [pc, #248]	; (8002840 <HAL_DMA_IRQHandler+0xe1c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d040      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a3c      	ldr	r2, [pc, #240]	; (8002844 <HAL_DMA_IRQHandler+0xe20>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d03b      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <HAL_DMA_IRQHandler+0xe24>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d036      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a39      	ldr	r2, [pc, #228]	; (800284c <HAL_DMA_IRQHandler+0xe28>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d031      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a38      	ldr	r2, [pc, #224]	; (8002850 <HAL_DMA_IRQHandler+0xe2c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d02c      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a36      	ldr	r2, [pc, #216]	; (8002854 <HAL_DMA_IRQHandler+0xe30>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d027      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a35      	ldr	r2, [pc, #212]	; (8002858 <HAL_DMA_IRQHandler+0xe34>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d022      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a33      	ldr	r2, [pc, #204]	; (800285c <HAL_DMA_IRQHandler+0xe38>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01d      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <HAL_DMA_IRQHandler+0xe3c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a30      	ldr	r2, [pc, #192]	; (8002864 <HAL_DMA_IRQHandler+0xe40>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a2f      	ldr	r2, [pc, #188]	; (8002868 <HAL_DMA_IRQHandler+0xe44>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a2d      	ldr	r2, [pc, #180]	; (800286c <HAL_DMA_IRQHandler+0xe48>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <HAL_DMA_IRQHandler+0xe4c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_IRQHandler+0xdaa>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <HAL_DMA_IRQHandler+0xe50>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d108      	bne.n	80027e0 <HAL_DMA_IRQHandler+0xdbc>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 021c 	bic.w	r2, r2, #28
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e007      	b.n	80027f0 <HAL_DMA_IRQHandler+0xdcc>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020e 	bic.w	r2, r2, #14
 80027ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	2201      	movs	r2, #1
 80027fa:	409a      	lsls	r2, r3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
 8002826:	e004      	b.n	8002832 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002828:	bf00      	nop
 800282a:	e002      	b.n	8002832 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002830:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002832:	3728      	adds	r7, #40	; 0x28
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40020010 	.word	0x40020010
 800283c:	40020028 	.word	0x40020028
 8002840:	40020040 	.word	0x40020040
 8002844:	40020058 	.word	0x40020058
 8002848:	40020070 	.word	0x40020070
 800284c:	40020088 	.word	0x40020088
 8002850:	400200a0 	.word	0x400200a0
 8002854:	400200b8 	.word	0x400200b8
 8002858:	40020410 	.word	0x40020410
 800285c:	40020428 	.word	0x40020428
 8002860:	40020440 	.word	0x40020440
 8002864:	40020458 	.word	0x40020458
 8002868:	40020470 	.word	0x40020470
 800286c:	40020488 	.word	0x40020488
 8002870:	400204a0 	.word	0x400204a0
 8002874:	400204b8 	.word	0x400204b8

08002878 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a42      	ldr	r2, [pc, #264]	; (8002990 <DMA_CalcBaseAndBitshift+0x118>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d04a      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a41      	ldr	r2, [pc, #260]	; (8002994 <DMA_CalcBaseAndBitshift+0x11c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d045      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a3f      	ldr	r2, [pc, #252]	; (8002998 <DMA_CalcBaseAndBitshift+0x120>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d040      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a3e      	ldr	r2, [pc, #248]	; (800299c <DMA_CalcBaseAndBitshift+0x124>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d03b      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a3c      	ldr	r2, [pc, #240]	; (80029a0 <DMA_CalcBaseAndBitshift+0x128>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d036      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a3b      	ldr	r2, [pc, #236]	; (80029a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d031      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a39      	ldr	r2, [pc, #228]	; (80029a8 <DMA_CalcBaseAndBitshift+0x130>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d02c      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a38      	ldr	r2, [pc, #224]	; (80029ac <DMA_CalcBaseAndBitshift+0x134>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d027      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a36      	ldr	r2, [pc, #216]	; (80029b0 <DMA_CalcBaseAndBitshift+0x138>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d022      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d01d      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a33      	ldr	r2, [pc, #204]	; (80029b8 <DMA_CalcBaseAndBitshift+0x140>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d018      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a32      	ldr	r2, [pc, #200]	; (80029bc <DMA_CalcBaseAndBitshift+0x144>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d013      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a30      	ldr	r2, [pc, #192]	; (80029c0 <DMA_CalcBaseAndBitshift+0x148>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00e      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d009      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <DMA_CalcBaseAndBitshift+0x150>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <DMA_CalcBaseAndBitshift+0xa8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <DMA_CalcBaseAndBitshift+0x154>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <DMA_CalcBaseAndBitshift+0xac>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <DMA_CalcBaseAndBitshift+0xae>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d024      	beq.n	8002974 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	3b10      	subs	r3, #16
 8002932:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <DMA_CalcBaseAndBitshift+0x158>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d908      	bls.n	8002964 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <DMA_CalcBaseAndBitshift+0x160>)
 800295a:	4013      	ands	r3, r2
 800295c:	1d1a      	adds	r2, r3, #4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58
 8002962:	e00d      	b.n	8002980 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <DMA_CalcBaseAndBitshift+0x160>)
 800296c:	4013      	ands	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
 8002972:	e005      	b.n	8002980 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40020010 	.word	0x40020010
 8002994:	40020028 	.word	0x40020028
 8002998:	40020040 	.word	0x40020040
 800299c:	40020058 	.word	0x40020058
 80029a0:	40020070 	.word	0x40020070
 80029a4:	40020088 	.word	0x40020088
 80029a8:	400200a0 	.word	0x400200a0
 80029ac:	400200b8 	.word	0x400200b8
 80029b0:	40020410 	.word	0x40020410
 80029b4:	40020428 	.word	0x40020428
 80029b8:	40020440 	.word	0x40020440
 80029bc:	40020458 	.word	0x40020458
 80029c0:	40020470 	.word	0x40020470
 80029c4:	40020488 	.word	0x40020488
 80029c8:	400204a0 	.word	0x400204a0
 80029cc:	400204b8 	.word	0x400204b8
 80029d0:	aaaaaaab 	.word	0xaaaaaaab
 80029d4:	0800d150 	.word	0x0800d150
 80029d8:	fffffc00 	.word	0xfffffc00

080029dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d120      	bne.n	8002a32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d858      	bhi.n	8002aaa <DMA_CheckFifoParam+0xce>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x24>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a23 	.word	0x08002a23
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002aab 	.word	0x08002aab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d048      	beq.n	8002aae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a20:	e045      	b.n	8002aae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a2a:	d142      	bne.n	8002ab2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a30:	e03f      	b.n	8002ab2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3a:	d123      	bne.n	8002a84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d838      	bhi.n	8002ab6 <DMA_CheckFifoParam+0xda>
 8002a44:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <DMA_CheckFifoParam+0x70>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002a5d 	.word	0x08002a5d
 8002a50:	08002a63 	.word	0x08002a63
 8002a54:	08002a5d 	.word	0x08002a5d
 8002a58:	08002a75 	.word	0x08002a75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
        break;
 8002a60:	e030      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d025      	beq.n	8002aba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a72:	e022      	b.n	8002aba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a7c:	d11f      	bne.n	8002abe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a82:	e01c      	b.n	8002abe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d902      	bls.n	8002a92 <DMA_CheckFifoParam+0xb6>
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d003      	beq.n	8002a98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002a90:	e018      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
        break;
 8002a96:	e015      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8002aa8:	e00b      	b.n	8002ac2 <DMA_CheckFifoParam+0xe6>
        break;
 8002aaa:	bf00      	nop
 8002aac:	e00a      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8002aae:	bf00      	nop
 8002ab0:	e008      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e006      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8002ab6:	bf00      	nop
 8002ab8:	e004      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
    break;
 8002ac2:	bf00      	nop
    }
  }

  return status;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a38      	ldr	r2, [pc, #224]	; (8002bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d022      	beq.n	8002b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a36      	ldr	r2, [pc, #216]	; (8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01d      	beq.n	8002b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a35      	ldr	r2, [pc, #212]	; (8002bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d018      	beq.n	8002b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a33      	ldr	r2, [pc, #204]	; (8002bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a32      	ldr	r2, [pc, #200]	; (8002bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00e      	beq.n	8002b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d004      	beq.n	8002b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2d      	ldr	r2, [pc, #180]	; (8002be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01a      	beq.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3b08      	subs	r3, #8
 8002b44:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4b26      	ldr	r3, [pc, #152]	; (8002bec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	461a      	mov	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002b60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2201      	movs	r2, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002b70:	e024      	b.n	8002bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3b10      	subs	r3, #16
 8002b7a:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d806      	bhi.n	8002b9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d902      	bls.n	8002b9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3308      	adds	r3, #8
 8002b98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002bac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	58025408 	.word	0x58025408
 8002bcc:	5802541c 	.word	0x5802541c
 8002bd0:	58025430 	.word	0x58025430
 8002bd4:	58025444 	.word	0x58025444
 8002bd8:	58025458 	.word	0x58025458
 8002bdc:	5802546c 	.word	0x5802546c
 8002be0:	58025480 	.word	0x58025480
 8002be4:	58025494 	.word	0x58025494
 8002be8:	cccccccd 	.word	0xcccccccd
 8002bec:	16009600 	.word	0x16009600
 8002bf0:	58025880 	.word	0x58025880
 8002bf4:	aaaaaaab 	.word	0xaaaaaaab
 8002bf8:	400204b8 	.word	0x400204b8
 8002bfc:	4002040f 	.word	0x4002040f
 8002c00:	10008200 	.word	0x10008200
 8002c04:	40020880 	.word	0x40020880

08002c08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d04a      	beq.n	8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d847      	bhi.n	8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d022      	beq.n	8002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d01d      	beq.n	8002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a22      	ldr	r2, [pc, #136]	; (8002cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d018      	beq.n	8002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a21      	ldr	r2, [pc, #132]	; (8002ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00e      	beq.n	8002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d009      	beq.n	8002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	461a      	mov	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002c90:	671a      	str	r2, [r3, #112]	; 0x70
 8002c92:	e009      	b.n	8002ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a11      	ldr	r2, [pc, #68]	; (8002cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002ca6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	58025408 	.word	0x58025408
 8002cc4:	5802541c 	.word	0x5802541c
 8002cc8:	58025430 	.word	0x58025430
 8002ccc:	58025444 	.word	0x58025444
 8002cd0:	58025458 	.word	0x58025458
 8002cd4:	5802546c 	.word	0x5802546c
 8002cd8:	58025480 	.word	0x58025480
 8002cdc:	58025494 	.word	0x58025494
 8002ce0:	1600963f 	.word	0x1600963f
 8002ce4:	58025940 	.word	0x58025940
 8002ce8:	1000823f 	.word	0x1000823f
 8002cec:	40020940 	.word	0x40020940

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cfe:	4b89      	ldr	r3, [pc, #548]	; (8002f24 <HAL_GPIO_Init+0x234>)
 8002d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d02:	e194      	b.n	800302e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8186 	beq.w	8003028 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d005      	beq.n	8002d34 <HAL_GPIO_Init+0x44>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d130      	bne.n	8002d96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0201 	and.w	r2, r3, #1
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d017      	beq.n	8002dd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d123      	bne.n	8002e26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	69b9      	ldr	r1, [r7, #24]
 8002e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0203 	and.w	r2, r3, #3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80e0 	beq.w	8003028 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e68:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_GPIO_Init+0x238>)
 8002e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e6e:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <HAL_GPIO_Init+0x238>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_GPIO_Init+0x238>)
 8002e7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e86:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <HAL_GPIO_Init+0x23c>)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a20      	ldr	r2, [pc, #128]	; (8002f30 <HAL_GPIO_Init+0x240>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d052      	beq.n	8002f58 <HAL_GPIO_Init+0x268>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_GPIO_Init+0x244>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d031      	beq.n	8002f1e <HAL_GPIO_Init+0x22e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1e      	ldr	r2, [pc, #120]	; (8002f38 <HAL_GPIO_Init+0x248>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d02b      	beq.n	8002f1a <HAL_GPIO_Init+0x22a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_GPIO_Init+0x24c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d025      	beq.n	8002f16 <HAL_GPIO_Init+0x226>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_GPIO_Init+0x250>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01f      	beq.n	8002f12 <HAL_GPIO_Init+0x222>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_GPIO_Init+0x254>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d019      	beq.n	8002f0e <HAL_GPIO_Init+0x21e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <HAL_GPIO_Init+0x258>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_GPIO_Init+0x21a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <HAL_GPIO_Init+0x25c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00d      	beq.n	8002f06 <HAL_GPIO_Init+0x216>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <HAL_GPIO_Init+0x260>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <HAL_GPIO_Init+0x212>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <HAL_GPIO_Init+0x264>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_GPIO_Init+0x20e>
 8002efa:	2309      	movs	r3, #9
 8002efc:	e02d      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002efe:	230a      	movs	r3, #10
 8002f00:	e02b      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f02:	2308      	movs	r3, #8
 8002f04:	e029      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f06:	2307      	movs	r3, #7
 8002f08:	e027      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	e025      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f0e:	2305      	movs	r3, #5
 8002f10:	e023      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f12:	2304      	movs	r3, #4
 8002f14:	e021      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f16:	2303      	movs	r3, #3
 8002f18:	e01f      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e01d      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e01b      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f22:	bf00      	nop
 8002f24:	58000080 	.word	0x58000080
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	58000400 	.word	0x58000400
 8002f30:	58020000 	.word	0x58020000
 8002f34:	58020400 	.word	0x58020400
 8002f38:	58020800 	.word	0x58020800
 8002f3c:	58020c00 	.word	0x58020c00
 8002f40:	58021000 	.word	0x58021000
 8002f44:	58021400 	.word	0x58021400
 8002f48:	58021800 	.word	0x58021800
 8002f4c:	58021c00 	.word	0x58021c00
 8002f50:	58022000 	.word	0x58022000
 8002f54:	58022400 	.word	0x58022400
 8002f58:	2300      	movs	r3, #0
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	f002 0203 	and.w	r2, r2, #3
 8002f60:	0092      	lsls	r2, r2, #2
 8002f62:	4093      	lsls	r3, r2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f6a:	4938      	ldr	r1, [pc, #224]	; (800304c <HAL_GPIO_Init+0x35c>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f ae63 	bne.w	8002d04 <HAL_GPIO_Init+0x14>
  }
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	3724      	adds	r7, #36	; 0x24
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	58000400 	.word	0x58000400

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003084:	b08f      	sub	sp, #60	; 0x3c
 8003086:	af0a      	add	r7, sp, #40	; 0x28
 8003088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e116      	b.n	80032c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f008 fc14 	bl	800b8dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2203      	movs	r2, #3
 80030b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f005 f88b 	bl	80081ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	687e      	ldr	r6, [r7, #4]
 80030e0:	466d      	mov	r5, sp
 80030e2:	f106 0410 	add.w	r4, r6, #16
 80030e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f6:	1d33      	adds	r3, r6, #4
 80030f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fa:	6838      	ldr	r0, [r7, #0]
 80030fc:	f004 ff56 	bl	8007fac <USB_CoreInit>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0d7      	b.n	80032c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f005 f879 	bl	8008210 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
 8003122:	e04a      	b.n	80031ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	333d      	adds	r3, #61	; 0x3d
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	333c      	adds	r3, #60	; 0x3c
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	b298      	uxth	r0, r3
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3344      	adds	r3, #68	; 0x44
 8003160:	4602      	mov	r2, r0
 8003162:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3340      	adds	r3, #64	; 0x40
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3348      	adds	r3, #72	; 0x48
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	334c      	adds	r3, #76	; 0x4c
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3354      	adds	r3, #84	; 0x54
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	3301      	adds	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3af      	bcc.n	8003124 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e044      	b.n	8003254 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	3301      	adds	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d3b5      	bcc.n	80031ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	687e      	ldr	r6, [r7, #4]
 8003266:	466d      	mov	r5, sp
 8003268:	f106 0410 	add.w	r4, r6, #16
 800326c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003274:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003278:	e885 0003 	stmia.w	r5, {r0, r1}
 800327c:	1d33      	adds	r3, r6, #4
 800327e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003280:	6838      	ldr	r0, [r7, #0]
 8003282:	f005 f811 	bl	80082a8 <USB_DevInit>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e014      	b.n	80032c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d102      	bne.n	80032b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f001 f98b 	bl	80045cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f006 f95f 	bl	800957e <USB_DevDisconnect>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_PCD_Start+0x1c>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e020      	b.n	8003328 <HAL_PCD_Start+0x5e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d109      	bne.n	800330a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d005      	beq.n	800330a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f004 ff5c 	bl	80081cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f006 f90f 	bl	800953c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b08d      	sub	sp, #52	; 0x34
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f006 f9cd 	bl	80096e6 <USB_GetMode>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 84b7 	bne.w	8003cc2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f006 f931 	bl	80095c0 <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 84ad 	beq.w	8003cc0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f006 f91e 	bl	80095c0 <USB_ReadInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b02      	cmp	r3, #2
 800338c:	d107      	bne.n	800339e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f002 0202 	and.w	r2, r2, #2
 800339c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f006 f90c 	bl	80095c0 <USB_ReadInterrupts>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d161      	bne.n	8003476 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0210 	bic.w	r2, r2, #16
 80033c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f003 020f 	and.w	r2, r3, #15
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	0c5b      	lsrs	r3, r3, #17
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d124      	bne.n	8003438 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d035      	beq.n	8003466 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6a38      	ldr	r0, [r7, #32]
 800340e:	f005 ff43 	bl	8009298 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800341e:	441a      	add	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003430:	441a      	add	r2, r3
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	621a      	str	r2, [r3, #32]
 8003436:	e016      	b.n	8003466 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	0c5b      	lsrs	r3, r3, #17
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	2b06      	cmp	r3, #6
 8003442:	d110      	bne.n	8003466 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800344a:	2208      	movs	r2, #8
 800344c:	4619      	mov	r1, r3
 800344e:	6a38      	ldr	r0, [r7, #32]
 8003450:	f005 ff22 	bl	8009298 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003460:	441a      	add	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0210 	orr.w	r2, r2, #16
 8003474:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f006 f8a0 	bl	80095c0 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003486:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800348a:	f040 80a7 	bne.w	80035dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f006 f8a5 	bl	80095e6 <USB_ReadDevAllOutEpInterrupt>
 800349c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800349e:	e099      	b.n	80035d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 808e 	beq.w	80035c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f006 f8c9 	bl	800964e <USB_ReadDevOutEPInterrupt>
 80034bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00c      	beq.n	80034e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d4:	461a      	mov	r2, r3
 80034d6:	2301      	movs	r3, #1
 80034d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 feef 	bl	80042c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00c      	beq.n	8003506 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	461a      	mov	r2, r3
 80034fa:	2308      	movs	r3, #8
 80034fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 ffc5 	bl	8004490 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351c:	461a      	mov	r2, r3
 800351e:	2310      	movs	r3, #16
 8003520:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d030      	beq.n	800358e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d109      	bne.n	800354c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800354a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	78db      	ldrb	r3, [r3, #3]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d108      	bne.n	800357c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2200      	movs	r2, #0
 800356e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	b2db      	uxtb	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f008 fae4 	bl	800bb44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	461a      	mov	r2, r3
 800358a:	2302      	movs	r3, #2
 800358c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	461a      	mov	r2, r3
 80035a6:	2320      	movs	r3, #32
 80035a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	461a      	mov	r2, r3
 80035c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	3301      	adds	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f47f af62 	bne.w	80034a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f005 ffed 	bl	80095c0 <USB_ReadInterrupts>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035f0:	f040 80db 	bne.w	80037aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f006 f80e 	bl	800961a <USB_ReadDevAllInEpInterrupt>
 80035fe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003604:	e0cd      	b.n	80037a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80c2 	beq.w	8003796 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f006 f834 	bl	800968a <USB_ReadDevInEPInterrupt>
 8003622:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d057      	beq.n	80036de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	2201      	movs	r2, #1
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	43db      	mvns	r3, r3
 8003648:	69f9      	ldr	r1, [r7, #28]
 800364a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800364e:	4013      	ands	r3, r2
 8003650:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365e:	461a      	mov	r2, r3
 8003660:	2301      	movs	r3, #1
 8003662:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d132      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334c      	adds	r3, #76	; 0x4c
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4403      	add	r3, r0
 800368c:	3348      	adds	r3, #72	; 0x48
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4419      	add	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4403      	add	r3, r0
 80036a0:	334c      	adds	r3, #76	; 0x4c
 80036a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d113      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x3a2>
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3354      	adds	r3, #84	; 0x54
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d108      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036ca:	461a      	mov	r2, r3
 80036cc:	2101      	movs	r1, #1
 80036ce:	f006 f83d 	bl	800974c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	4619      	mov	r1, r3
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f008 f9ae 	bl	800ba3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	461a      	mov	r2, r3
 80036f6:	2308      	movs	r3, #8
 80036f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	461a      	mov	r2, r3
 8003712:	2310      	movs	r3, #16
 8003714:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372c:	461a      	mov	r2, r3
 800372e:	2340      	movs	r3, #64	; 0x40
 8003730:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d023      	beq.n	8003784 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800373c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800373e:	6a38      	ldr	r0, [r7, #32]
 8003740:	f004 ff10 	bl	8008564 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	3338      	adds	r3, #56	; 0x38
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	78db      	ldrb	r3, [r3, #3]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d108      	bne.n	8003772 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2200      	movs	r2, #0
 8003764:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	b2db      	uxtb	r3, r3
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f008 f9fb 	bl	800bb68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377e:	461a      	mov	r2, r3
 8003780:	2302      	movs	r3, #2
 8003782:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800378e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fd08 	bl	80041a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	3301      	adds	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f af2e 	bne.w	8003606 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f005 ff06 	bl	80095c0 <USB_ReadInterrupts>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037be:	d122      	bne.n	8003806 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d108      	bne.n	80037f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037e6:	2100      	movs	r1, #0
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 ff13 	bl	8004614 <HAL_PCDEx_LPM_Callback>
 80037ee:	e002      	b.n	80037f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f008 f999 	bl	800bb28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f005 fed8 	bl	80095c0 <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381a:	d112      	bne.n	8003842 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b01      	cmp	r3, #1
 800382a:	d102      	bne.n	8003832 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f008 f955 	bl	800badc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003840:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f005 feba 	bl	80095c0 <USB_ReadInterrupts>
 800384c:	4603      	mov	r3, r0
 800384e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003856:	d121      	bne.n	800389c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003866:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d111      	bne.n	8003896 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	f003 020f 	and.w	r2, r3, #15
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800388c:	2101      	movs	r1, #1
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fec0 	bl	8004614 <HAL_PCDEx_LPM_Callback>
 8003894:	e002      	b.n	800389c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f008 f920 	bl	800badc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f005 fe8d 	bl	80095c0 <USB_ReadInterrupts>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	f040 80b7 	bne.w	8003a22 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2110      	movs	r1, #16
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 fe48 	bl	8008564 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d8:	e046      	b.n	8003968 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e6:	461a      	mov	r2, r3
 80038e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fe:	0151      	lsls	r1, r2, #5
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	440a      	add	r2, r1
 8003904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003908:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800390c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391a:	461a      	mov	r2, r3
 800391c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003920:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003932:	0151      	lsls	r1, r2, #5
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	440a      	add	r2, r1
 8003938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800393c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003940:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003952:	0151      	lsls	r1, r2, #5
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	440a      	add	r2, r1
 8003958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800395c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003960:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	3301      	adds	r3, #1
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396e:	429a      	cmp	r2, r3
 8003970:	d3b3      	bcc.n	80038da <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003980:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003984:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800399e:	f043 030b 	orr.w	r3, r3, #11
 80039a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b4:	f043 030b 	orr.w	r3, r3, #11
 80039b8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ba:	e015      	b.n	80039e8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	4619      	mov	r1, r3
 80039cc:	f242 032b 	movw	r3, #8235	; 0x202b
 80039d0:	4313      	orrs	r3, r2
 80039d2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e2:	f043 030b 	orr.w	r3, r3, #11
 80039e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f005 fe9d 	bl	800974c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f005 fdca 	bl	80095c0 <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a36:	d124      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f005 fe61 	bl	8009704 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f004 fe09 	bl	800865e <USB_GetDevSpeed>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681c      	ldr	r4, [r3, #0]
 8003a58:	f001 fda0 	bl	800559c <HAL_RCC_GetHCLKFreq>
 8003a5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	4620      	mov	r0, r4
 8003a68:	f004 fb0e 	bl	8008088 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f008 f80c 	bl	800ba8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f005 fd9a 	bl	80095c0 <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d10a      	bne.n	8003aac <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f007 ffe9 	bl	800ba6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f002 0208 	and.w	r2, r2, #8
 8003aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f005 fd85 	bl	80095c0 <USB_ReadInterrupts>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d122      	bne.n	8003b06 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003acc:	2301      	movs	r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad0:	e014      	b.n	8003afc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d105      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fb27 	bl	8004144 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	3301      	adds	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d3e5      	bcc.n	8003ad2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f005 fd58 	bl	80095c0 <USB_ReadInterrupts>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1a:	d13b      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b20:	e02b      	b.n	8003b7a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3340      	adds	r3, #64	; 0x40
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d115      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da12      	bge.n	8003b74 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	333f      	adds	r3, #63	; 0x3f
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fae8 	bl	8004144 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	3301      	adds	r3, #1
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3ce      	bcc.n	8003b22 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f005 fd11 	bl	80095c0 <USB_ReadInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ba8:	d155      	bne.n	8003c56 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003baa:	2301      	movs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	e045      	b.n	8003c3c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d12e      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bd8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	da2b      	bge.n	8003c36 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003bea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d121      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c32:	6053      	str	r3, [r2, #4]
            break;
 8003c34:	e007      	b.n	8003c46 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	3301      	adds	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d3b4      	bcc.n	8003bb0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f005 fcb0 	bl	80095c0 <USB_ReadInterrupts>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6a:	d10a      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f007 ff8d 	bl	800bb8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f005 fc9a 	bl	80095c0 <USB_ReadInterrupts>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d115      	bne.n	8003cc2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f007 ff7d 	bl	800bba8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	e000      	b.n	8003cc2 <HAL_PCD_IRQHandler+0x992>
      return;
 8003cc0:	bf00      	nop
    }
  }
}
 8003cc2:	3734      	adds	r7, #52	; 0x34
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd90      	pop	{r4, r7, pc}

08003cc8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_PCD_SetAddress+0x1a>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e013      	b.n	8003d0a <HAL_PCD_SetAddress+0x42>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f005 fbf8 	bl	80094f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	4608      	mov	r0, r1
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4603      	mov	r3, r0
 8003d22:	70fb      	strb	r3, [r7, #3]
 8003d24:	460b      	mov	r3, r1
 8003d26:	803b      	strh	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	da0f      	bge.n	8003d58 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	f003 020f 	and.w	r2, r3, #15
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	3338      	adds	r3, #56	; 0x38
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	705a      	strb	r2, [r3, #1]
 8003d56:	e00f      	b.n	8003d78 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 020f 	and.w	r2, r3, #15
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3304      	adds	r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d84:	883a      	ldrh	r2, [r7, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	78ba      	ldrb	r2, [r7, #2]
 8003d8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003da2:	78bb      	ldrb	r3, [r7, #2]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d102      	bne.n	8003dae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_PCD_EP_Open+0xaa>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e00e      	b.n	8003dda <HAL_PCD_EP_Open+0xc8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 fc6c 	bl	80086a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003dd8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	460b      	mov	r3, r1
 8003dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da0f      	bge.n	8003e16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	3338      	adds	r3, #56	; 0x38
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	705a      	strb	r2, [r3, #1]
 8003e14:	e00f      	b.n	8003e36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 020f 	and.w	r2, r3, #15
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_PCD_EP_Close+0x6e>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e00e      	b.n	8003e6e <HAL_PCD_EP_Close+0x8c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f004 fcaa 	bl	80087b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	460b      	mov	r3, r1
 8003e84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e86:	7afb      	ldrb	r3, [r7, #11]
 8003e88:	f003 020f 	and.w	r2, r3, #15
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d102      	bne.n	8003ed2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6979      	ldr	r1, [r7, #20]
 8003eea:	f004 ff91 	bl	8008e10 <USB_EP0StartXfer>
 8003eee:	e008      	b.n	8003f02 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	f004 fd37 	bl	8008970 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	f003 020f 	and.w	r2, r3, #15
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f2e:	681b      	ldr	r3, [r3, #0]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f4c:	7afb      	ldrb	r3, [r7, #11]
 8003f4e:	f003 020f 	and.w	r2, r3, #15
 8003f52:	4613      	mov	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	3338      	adds	r3, #56	; 0x38
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	3304      	adds	r3, #4
 8003f62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2200      	movs	r2, #0
 8003f74:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f7c:	7afb      	ldrb	r3, [r7, #11]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d102      	bne.n	8003f96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f96:	7afb      	ldrb	r3, [r7, #11]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	6979      	ldr	r1, [r7, #20]
 8003fae:	f004 ff2f 	bl	8008e10 <USB_EP0StartXfer>
 8003fb2:	e008      	b.n	8003fc6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6979      	ldr	r1, [r7, #20]
 8003fc2:	f004 fcd5 	bl	8008970 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	f003 020f 	and.w	r2, r3, #15
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d901      	bls.n	8003fee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e050      	b.n	8004090 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	da0f      	bge.n	8004016 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	f003 020f 	and.w	r2, r3, #15
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	3338      	adds	r3, #56	; 0x38
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	3304      	adds	r3, #4
 800400c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	705a      	strb	r2, [r3, #1]
 8004014:	e00d      	b.n	8004032 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_PCD_EP_SetStall+0x82>
 800404e:	2302      	movs	r3, #2
 8004050:	e01e      	b.n	8004090 <HAL_PCD_EP_SetStall+0xc0>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	4618      	mov	r0, r3
 8004062:	f005 f971 	bl	8009348 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	b2d9      	uxtb	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004080:	461a      	mov	r2, r3
 8004082:	f005 fb63 	bl	800974c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	f003 020f 	and.w	r2, r3, #15
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d901      	bls.n	80040b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e042      	b.n	800413c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da0f      	bge.n	80040de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	f003 020f 	and.w	r2, r3, #15
 80040c4:	4613      	mov	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	3338      	adds	r3, #56	; 0x38
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	3304      	adds	r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	705a      	strb	r2, [r3, #1]
 80040dc:	e00f      	b.n	80040fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	f003 020f 	and.w	r2, r3, #15
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	4413      	add	r3, r2
 80040f4:	3304      	adds	r3, #4
 80040f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_PCD_EP_ClrStall+0x86>
 800411a:	2302      	movs	r3, #2
 800411c:	e00e      	b.n	800413c <HAL_PCD_EP_ClrStall+0xa4>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	4618      	mov	r0, r3
 800412e:	f005 f979 	bl	8009424 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004154:	2b00      	cmp	r3, #0
 8004156:	da0c      	bge.n	8004172 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 020f 	and.w	r2, r3, #15
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	3338      	adds	r3, #56	; 0x38
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	3304      	adds	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e00c      	b.n	800418c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	f003 020f 	and.w	r2, r3, #15
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	3304      	adds	r3, #4
 800418a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	4618      	mov	r0, r3
 8004194:	f004 ff98 	bl	80090c8 <USB_EPStopXfer>
 8004198:	4603      	mov	r3, r0
 800419a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800419c:	7afb      	ldrb	r3, [r7, #11]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b08a      	sub	sp, #40	; 0x28
 80041aa:	af02      	add	r7, sp, #8
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	3338      	adds	r3, #56	; 0x38
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	3304      	adds	r3, #4
 80041cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d901      	bls.n	80041de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e06c      	b.n	80042b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d902      	bls.n	80041fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3303      	adds	r3, #3
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004202:	e02b      	b.n	800425c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	699a      	ldr	r2, [r3, #24]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	429a      	cmp	r2, r3
 8004218:	d902      	bls.n	8004220 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	3303      	adds	r3, #3
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6919      	ldr	r1, [r3, #16]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	b2da      	uxtb	r2, r3
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004238:	b2db      	uxtb	r3, r3
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	4603      	mov	r3, r0
 800423e:	6978      	ldr	r0, [r7, #20]
 8004240:	f004 ffec 	bl	800921c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	441a      	add	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	441a      	add	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	b29b      	uxth	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	429a      	cmp	r2, r3
 8004270:	d809      	bhi.n	8004286 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800427a:	429a      	cmp	r2, r3
 800427c:	d203      	bcs.n	8004286 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1be      	bne.n	8004204 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	429a      	cmp	r2, r3
 8004290:	d811      	bhi.n	80042b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	2201      	movs	r2, #1
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	6939      	ldr	r1, [r7, #16]
 80042ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042b2:	4013      	ands	r3, r2
 80042b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	333c      	adds	r3, #60	; 0x3c
 80042d8:	3304      	adds	r3, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d17b      	bne.n	80043ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d015      	beq.n	800432c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4a61      	ldr	r2, [pc, #388]	; (8004488 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	f240 80b9 	bls.w	800447c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80b3 	beq.w	800447c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	461a      	mov	r2, r3
 8004324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004328:	6093      	str	r3, [r2, #8]
 800432a:	e0a7      	b.n	800447c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	461a      	mov	r2, r3
 8004344:	2320      	movs	r3, #32
 8004346:	6093      	str	r3, [r2, #8]
 8004348:	e098      	b.n	800447c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 8093 	bne.w	800447c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	4a4b      	ldr	r2, [pc, #300]	; (8004488 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d90f      	bls.n	800437e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	461a      	mov	r2, r3
 8004376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437a:	6093      	str	r3, [r2, #8]
 800437c:	e07e      	b.n	800447c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4413      	add	r3, r2
 8004390:	3304      	adds	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	0159      	lsls	r1, r3, #5
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	440b      	add	r3, r1
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d114      	bne.n	80043e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043c8:	461a      	mov	r2, r3
 80043ca:	2101      	movs	r1, #1
 80043cc:	f005 f9be 	bl	800974c <USB_EP0_OutStart>
 80043d0:	e006      	b.n	80043e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	441a      	add	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f007 fb0c 	bl	800ba04 <HAL_PCD_DataOutStageCallback>
 80043ec:	e046      	b.n	800447c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4a26      	ldr	r2, [pc, #152]	; (800448c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d124      	bne.n	8004440 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	461a      	mov	r2, r3
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	6093      	str	r3, [r2, #8]
 8004414:	e032      	b.n	800447c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442c:	461a      	mov	r2, r3
 800442e:	2320      	movs	r3, #32
 8004430:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f007 fae3 	bl	800ba04 <HAL_PCD_DataOutStageCallback>
 800443e:	e01d      	b.n	800447c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d114      	bne.n	8004470 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d108      	bne.n	8004470 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004468:	461a      	mov	r2, r3
 800446a:	2100      	movs	r1, #0
 800446c:	f005 f96e 	bl	800974c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f007 fac4 	bl	800ba04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	4f54300a 	.word	0x4f54300a
 800448c:	4f54310a 	.word	0x4f54310a

08004490 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	333c      	adds	r3, #60	; 0x3c
 80044a8:	3304      	adds	r3, #4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <PCD_EP_OutSetupPacket_int+0x88>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d90e      	bls.n	80044e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d009      	beq.n	80044e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	461a      	mov	r2, r3
 80044de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f007 fa7b 	bl	800b9e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <PCD_EP_OutSetupPacket_int+0x88>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d90c      	bls.n	800450c <PCD_EP_OutSetupPacket_int+0x7c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d108      	bne.n	800450c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004504:	461a      	mov	r2, r3
 8004506:	2101      	movs	r1, #1
 8004508:	f005 f920 	bl	800974c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	4f54300a 	.word	0x4f54300a

0800451c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
 8004528:	4613      	mov	r3, r2
 800452a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d107      	bne.n	800454a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800453a:	883b      	ldrh	r3, [r7, #0]
 800453c:	0419      	lsls	r1, r3, #16
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	430a      	orrs	r2, r1
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
 8004548:	e028      	b.n	800459c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	4413      	add	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004558:	2300      	movs	r3, #0
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	e00d      	b.n	800457a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	3340      	adds	r3, #64	; 0x40
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	4413      	add	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	3301      	adds	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	3b01      	subs	r3, #1
 8004580:	429a      	cmp	r2, r3
 8004582:	d3ec      	bcc.n	800455e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004584:	883b      	ldrh	r3, [r7, #0]
 8004586:	0418      	lsls	r0, r3, #16
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6819      	ldr	r1, [r3, #0]
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	3b01      	subs	r3, #1
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	4302      	orrs	r2, r0
 8004594:	3340      	adds	r3, #64	; 0x40
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	887a      	ldrh	r2, [r7, #2]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_PCDEx_ActivateLPM+0x44>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	10000003 	.word	0x10000003

08004614 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004634:	4b19      	ldr	r3, [pc, #100]	; (800469c <HAL_PWREx_ConfigSupply+0x70>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d00a      	beq.n	8004656 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004640:	4b16      	ldr	r3, [pc, #88]	; (800469c <HAL_PWREx_ConfigSupply+0x70>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	429a      	cmp	r2, r3
 800464c:	d001      	beq.n	8004652 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e01f      	b.n	8004692 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e01d      	b.n	8004692 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <HAL_PWREx_ConfigSupply+0x70>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f023 0207 	bic.w	r2, r3, #7
 800465e:	490f      	ldr	r1, [pc, #60]	; (800469c <HAL_PWREx_ConfigSupply+0x70>)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4313      	orrs	r3, r2
 8004664:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004666:	f7fc fd35 	bl	80010d4 <HAL_GetTick>
 800466a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800466c:	e009      	b.n	8004682 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800466e:	f7fc fd31 	bl	80010d4 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800467c:	d901      	bls.n	8004682 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e007      	b.n	8004692 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_PWREx_ConfigSupply+0x70>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468e:	d1ee      	bne.n	800466e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	58024800 	.word	0x58024800

080046a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ae:	60d3      	str	r3, [r2, #12]
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	58024800 	.word	0x58024800

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08c      	sub	sp, #48	; 0x30
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f000 bc1d 	b.w	8004f0e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8087 	beq.w	80047f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e2:	4b99      	ldr	r3, [pc, #612]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ec:	4b96      	ldr	r3, [pc, #600]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	2b10      	cmp	r3, #16
 80046f6:	d007      	beq.n	8004708 <HAL_RCC_OscConfig+0x48>
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	2b18      	cmp	r3, #24
 80046fc:	d110      	bne.n	8004720 <HAL_RCC_OscConfig+0x60>
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d10b      	bne.n	8004720 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004708:	4b8f      	ldr	r3, [pc, #572]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d06c      	beq.n	80047ee <HAL_RCC_OscConfig+0x12e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d168      	bne.n	80047ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e3f6      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004728:	d106      	bne.n	8004738 <HAL_RCC_OscConfig+0x78>
 800472a:	4b87      	ldr	r3, [pc, #540]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a86      	ldr	r2, [pc, #536]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e02e      	b.n	8004796 <HAL_RCC_OscConfig+0xd6>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10c      	bne.n	800475a <HAL_RCC_OscConfig+0x9a>
 8004740:	4b81      	ldr	r3, [pc, #516]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a80      	ldr	r2, [pc, #512]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b7e      	ldr	r3, [pc, #504]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a7d      	ldr	r2, [pc, #500]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	e01d      	b.n	8004796 <HAL_RCC_OscConfig+0xd6>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004762:	d10c      	bne.n	800477e <HAL_RCC_OscConfig+0xbe>
 8004764:	4b78      	ldr	r3, [pc, #480]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a77      	ldr	r2, [pc, #476]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800476a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b75      	ldr	r3, [pc, #468]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a74      	ldr	r2, [pc, #464]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	e00b      	b.n	8004796 <HAL_RCC_OscConfig+0xd6>
 800477e:	4b72      	ldr	r3, [pc, #456]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a71      	ldr	r2, [pc, #452]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b6f      	ldr	r3, [pc, #444]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a6e      	ldr	r2, [pc, #440]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004794:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d013      	beq.n	80047c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7fc fc99 	bl	80010d4 <HAL_GetTick>
 80047a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a6:	f7fc fc95 	bl	80010d4 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b64      	cmp	r3, #100	; 0x64
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e3aa      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047b8:	4b63      	ldr	r3, [pc, #396]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0xe6>
 80047c4:	e014      	b.n	80047f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fc fc85 	bl	80010d4 <HAL_GetTick>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ce:	f7fc fc81 	bl	80010d4 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b64      	cmp	r3, #100	; 0x64
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e396      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047e0:	4b59      	ldr	r3, [pc, #356]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x10e>
 80047ec:	e000      	b.n	80047f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80cb 	beq.w	8004994 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fe:	4b52      	ldr	r3, [pc, #328]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004806:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004808:	4b4f      	ldr	r3, [pc, #316]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_RCC_OscConfig+0x164>
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	2b18      	cmp	r3, #24
 8004818:	d156      	bne.n	80048c8 <HAL_RCC_OscConfig+0x208>
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d151      	bne.n	80048c8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004824:	4b48      	ldr	r3, [pc, #288]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_RCC_OscConfig+0x17c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e368      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800483c:	4b42      	ldr	r3, [pc, #264]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 0219 	bic.w	r2, r3, #25
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	493f      	ldr	r1, [pc, #252]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800484e:	f7fc fc41 	bl	80010d4 <HAL_GetTick>
 8004852:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004856:	f7fc fc3d 	bl	80010d4 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e352      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004868:	4b37      	ldr	r3, [pc, #220]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	f7fc fc5e 	bl	8001134 <HAL_GetREVID>
 8004878:	4603      	mov	r3, r0
 800487a:	f241 0203 	movw	r2, #4099	; 0x1003
 800487e:	4293      	cmp	r3, r2
 8004880:	d817      	bhi.n	80048b2 <HAL_RCC_OscConfig+0x1f2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d108      	bne.n	800489c <HAL_RCC_OscConfig+0x1dc>
 800488a:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004892:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004898:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800489a:	e07b      	b.n	8004994 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489c:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	031b      	lsls	r3, r3, #12
 80048aa:	4927      	ldr	r1, [pc, #156]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b0:	e070      	b.n	8004994 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b2:	4b25      	ldr	r3, [pc, #148]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	4921      	ldr	r1, [pc, #132]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c6:	e065      	b.n	8004994 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d048      	beq.n	8004962 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048d0:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 0219 	bic.w	r2, r3, #25
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	491a      	ldr	r1, [pc, #104]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e2:	f7fc fbf7 	bl	80010d4 <HAL_GetTick>
 80048e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ea:	f7fc fbf3 	bl	80010d4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e308      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004908:	f7fc fc14 	bl	8001134 <HAL_GetREVID>
 800490c:	4603      	mov	r3, r0
 800490e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004912:	4293      	cmp	r3, r2
 8004914:	d81a      	bhi.n	800494c <HAL_RCC_OscConfig+0x28c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d108      	bne.n	8004930 <HAL_RCC_OscConfig+0x270>
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492c:	6053      	str	r3, [r2, #4]
 800492e:	e031      	b.n	8004994 <HAL_RCC_OscConfig+0x2d4>
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	031b      	lsls	r3, r3, #12
 800493e:	4902      	ldr	r1, [pc, #8]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
 8004944:	e026      	b.n	8004994 <HAL_RCC_OscConfig+0x2d4>
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400
 800494c:	4b9a      	ldr	r3, [pc, #616]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	061b      	lsls	r3, r3, #24
 800495a:	4997      	ldr	r1, [pc, #604]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
 8004960:	e018      	b.n	8004994 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004962:	4b95      	ldr	r3, [pc, #596]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a94      	ldr	r2, [pc, #592]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496e:	f7fc fbb1 	bl	80010d4 <HAL_GetTick>
 8004972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004976:	f7fc fbad 	bl	80010d4 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e2c2      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004988:	4b8b      	ldr	r3, [pc, #556]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f0      	bne.n	8004976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80a9 	beq.w	8004af4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a2:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ac:	4b82      	ldr	r3, [pc, #520]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d007      	beq.n	80049c8 <HAL_RCC_OscConfig+0x308>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b18      	cmp	r3, #24
 80049bc:	d13a      	bne.n	8004a34 <HAL_RCC_OscConfig+0x374>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d135      	bne.n	8004a34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049c8:	4b7b      	ldr	r3, [pc, #492]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_OscConfig+0x320>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	2b80      	cmp	r3, #128	; 0x80
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e296      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049e0:	f7fc fba8 	bl	8001134 <HAL_GetREVID>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d817      	bhi.n	8004a1e <HAL_RCC_OscConfig+0x35e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d108      	bne.n	8004a08 <HAL_RCC_OscConfig+0x348>
 80049f6:	4b70      	ldr	r3, [pc, #448]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80049fe:	4a6e      	ldr	r2, [pc, #440]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a06:	e075      	b.n	8004af4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a08:	4b6b      	ldr	r3, [pc, #428]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	069b      	lsls	r3, r3, #26
 8004a16:	4968      	ldr	r1, [pc, #416]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a1c:	e06a      	b.n	8004af4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a1e:	4b66      	ldr	r3, [pc, #408]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	061b      	lsls	r3, r3, #24
 8004a2c:	4962      	ldr	r1, [pc, #392]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a32:	e05f      	b.n	8004af4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d042      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a3c:	4b5e      	ldr	r3, [pc, #376]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a5d      	ldr	r2, [pc, #372]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fc fb44 	bl	80010d4 <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a50:	f7fc fb40 	bl	80010d4 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e255      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a62:	4b55      	ldr	r3, [pc, #340]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a6e:	f7fc fb61 	bl	8001134 <HAL_GetREVID>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d817      	bhi.n	8004aac <HAL_RCC_OscConfig+0x3ec>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d108      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3d6>
 8004a84:	4b4c      	ldr	r3, [pc, #304]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004a8c:	4a4a      	ldr	r2, [pc, #296]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a92:	6053      	str	r3, [r2, #4]
 8004a94:	e02e      	b.n	8004af4 <HAL_RCC_OscConfig+0x434>
 8004a96:	4b48      	ldr	r3, [pc, #288]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	069b      	lsls	r3, r3, #26
 8004aa4:	4944      	ldr	r1, [pc, #272]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
 8004aaa:	e023      	b.n	8004af4 <HAL_RCC_OscConfig+0x434>
 8004aac:	4b42      	ldr	r3, [pc, #264]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	493f      	ldr	r1, [pc, #252]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60cb      	str	r3, [r1, #12]
 8004ac0:	e018      	b.n	8004af4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fc fb01 	bl	80010d4 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ad6:	f7fc fafd 	bl	80010d4 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e212      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ae8:	4b33      	ldr	r3, [pc, #204]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f0      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d036      	beq.n	8004b6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d019      	beq.n	8004b3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b08:	4b2b      	ldr	r3, [pc, #172]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0c:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fc fade 	bl	80010d4 <HAL_GetTick>
 8004b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b1c:	f7fc fada 	bl	80010d4 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1ef      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b2e:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x45c>
 8004b3a:	e018      	b.n	8004b6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b40:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fc fac4 	bl	80010d4 <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b50:	f7fc fac0 	bl	80010d4 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1d5      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b62:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d039      	beq.n	8004bee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01c      	beq.n	8004bbc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b8e:	f7fc faa1 	bl	80010d4 <HAL_GetTick>
 8004b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b96:	f7fc fa9d 	bl	80010d4 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e1b2      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <HAL_RCC_OscConfig+0x4f8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x4d6>
 8004bb4:	e01b      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
 8004bb6:	bf00      	nop
 8004bb8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bbc:	4b9b      	ldr	r3, [pc, #620]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a9a      	ldr	r2, [pc, #616]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bc8:	f7fc fa84 	bl	80010d4 <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004bd0:	f7fc fa80 	bl	80010d4 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e195      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004be2:	4b92      	ldr	r3, [pc, #584]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8081 	beq.w	8004cfe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bfc:	4b8c      	ldr	r3, [pc, #560]	; (8004e30 <HAL_RCC_OscConfig+0x770>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a8b      	ldr	r2, [pc, #556]	; (8004e30 <HAL_RCC_OscConfig+0x770>)
 8004c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c08:	f7fc fa64 	bl	80010d4 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c10:	f7fc fa60 	bl	80010d4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e175      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c22:	4b83      	ldr	r3, [pc, #524]	; (8004e30 <HAL_RCC_OscConfig+0x770>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d106      	bne.n	8004c44 <HAL_RCC_OscConfig+0x584>
 8004c36:	4b7d      	ldr	r3, [pc, #500]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a7c      	ldr	r2, [pc, #496]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
 8004c42:	e02d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x5e0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10c      	bne.n	8004c66 <HAL_RCC_OscConfig+0x5a6>
 8004c4c:	4b77      	ldr	r3, [pc, #476]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	4a76      	ldr	r2, [pc, #472]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	6713      	str	r3, [r2, #112]	; 0x70
 8004c58:	4b74      	ldr	r3, [pc, #464]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	4a73      	ldr	r2, [pc, #460]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c5e:	f023 0304 	bic.w	r3, r3, #4
 8004c62:	6713      	str	r3, [r2, #112]	; 0x70
 8004c64:	e01c      	b.n	8004ca0 <HAL_RCC_OscConfig+0x5e0>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCC_OscConfig+0x5c8>
 8004c6e:	4b6f      	ldr	r3, [pc, #444]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	4a6e      	ldr	r2, [pc, #440]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c74:	f043 0304 	orr.w	r3, r3, #4
 8004c78:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7a:	4b6c      	ldr	r3, [pc, #432]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	4a6b      	ldr	r2, [pc, #428]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	6713      	str	r3, [r2, #112]	; 0x70
 8004c86:	e00b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x5e0>
 8004c88:	4b68      	ldr	r3, [pc, #416]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	4a67      	ldr	r2, [pc, #412]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	6713      	str	r3, [r2, #112]	; 0x70
 8004c94:	4b65      	ldr	r3, [pc, #404]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	4a64      	ldr	r2, [pc, #400]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004c9a:	f023 0304 	bic.w	r3, r3, #4
 8004c9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d015      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fc fa14 	bl	80010d4 <HAL_GetTick>
 8004cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fc fa10 	bl	80010d4 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e123      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc6:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ee      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x5f0>
 8004cd2:	e014      	b.n	8004cfe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fc f9fe 	bl	80010d4 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fc f9fa 	bl	80010d4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e10d      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cf2:	4b4e      	ldr	r3, [pc, #312]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1ee      	bne.n	8004cdc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8102 	beq.w	8004f0c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d08:	4b48      	ldr	r3, [pc, #288]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d10:	2b18      	cmp	r3, #24
 8004d12:	f000 80bd 	beq.w	8004e90 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	f040 809e 	bne.w	8004e5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d20:	4b42      	ldr	r3, [pc, #264]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a41      	ldr	r2, [pc, #260]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fc f9d2 	bl	80010d4 <HAL_GetTick>
 8004d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fc f9ce 	bl	80010d4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e0e3      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d46:	4b39      	ldr	r3, [pc, #228]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d52:	4b36      	ldr	r3, [pc, #216]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d56:	4b37      	ldr	r3, [pc, #220]	; (8004e34 <HAL_RCC_OscConfig+0x774>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d62:	0112      	lsls	r2, r2, #4
 8004d64:	430a      	orrs	r2, r1
 8004d66:	4931      	ldr	r1, [pc, #196]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	628b      	str	r3, [r1, #40]	; 0x28
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	3b01      	subs	r3, #1
 8004d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	025b      	lsls	r3, r3, #9
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	3b01      	subs	r3, #1
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	3b01      	subs	r3, #1
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d9c:	4923      	ldr	r1, [pc, #140]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004da2:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	4a21      	ldr	r2, [pc, #132]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dae:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db2:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <HAL_RCC_OscConfig+0x778>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004dba:	00d2      	lsls	r2, r2, #3
 8004dbc:	491b      	ldr	r1, [pc, #108]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	f023 020c 	bic.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	4917      	ldr	r1, [pc, #92]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004dd4:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	f023 0202 	bic.w	r2, r3, #2
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	4912      	ldr	r1, [pc, #72]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004e0a:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_RCC_OscConfig+0x76c>)
 8004e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fc f957 	bl	80010d4 <HAL_GetTick>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e28:	e011      	b.n	8004e4e <HAL_RCC_OscConfig+0x78e>
 8004e2a:	bf00      	nop
 8004e2c:	58024400 	.word	0x58024400
 8004e30:	58024800 	.word	0x58024800
 8004e34:	fffffc0c 	.word	0xfffffc0c
 8004e38:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e3c:	f7fc f94a 	bl	80010d4 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e05f      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e4e:	4b32      	ldr	r3, [pc, #200]	; (8004f18 <HAL_RCC_OscConfig+0x858>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x77c>
 8004e5a:	e057      	b.n	8004f0c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <HAL_RCC_OscConfig+0x858>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2d      	ldr	r2, [pc, #180]	; (8004f18 <HAL_RCC_OscConfig+0x858>)
 8004e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fc f934 	bl	80010d4 <HAL_GetTick>
 8004e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fc f930 	bl	80010d4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e045      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e82:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <HAL_RCC_OscConfig+0x858>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x7b0>
 8004e8e:	e03d      	b.n	8004f0c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e90:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <HAL_RCC_OscConfig+0x858>)
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <HAL_RCC_OscConfig+0x858>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d031      	beq.n	8004f08 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f003 0203 	and.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d12a      	bne.n	8004f08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d122      	bne.n	8004f08 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d11a      	bne.n	8004f08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	0a5b      	lsrs	r3, r3, #9
 8004ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d111      	bne.n	8004f08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	0c1b      	lsrs	r3, r3, #16
 8004ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d108      	bne.n	8004f08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	0e1b      	lsrs	r3, r3, #24
 8004efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3730      	adds	r7, #48	; 0x30
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	58024400 	.word	0x58024400

08004f1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e19c      	b.n	800526a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f30:	4b8a      	ldr	r3, [pc, #552]	; (800515c <HAL_RCC_ClockConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d910      	bls.n	8004f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b87      	ldr	r3, [pc, #540]	; (800515c <HAL_RCC_ClockConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 020f 	bic.w	r2, r3, #15
 8004f46:	4985      	ldr	r1, [pc, #532]	; (800515c <HAL_RCC_ClockConfig+0x240>)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b83      	ldr	r3, [pc, #524]	; (800515c <HAL_RCC_ClockConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e184      	b.n	800526a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	4b7b      	ldr	r3, [pc, #492]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d908      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f7c:	4b78      	ldr	r3, [pc, #480]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	4975      	ldr	r1, [pc, #468]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d010      	beq.n	8004fbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	4b70      	ldr	r3, [pc, #448]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d908      	bls.n	8004fbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004faa:	4b6d      	ldr	r3, [pc, #436]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	496a      	ldr	r1, [pc, #424]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d010      	beq.n	8004fea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	4b64      	ldr	r3, [pc, #400]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d908      	bls.n	8004fea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fd8:	4b61      	ldr	r3, [pc, #388]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	495e      	ldr	r1, [pc, #376]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d010      	beq.n	8005018 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005002:	429a      	cmp	r2, r3
 8005004:	d908      	bls.n	8005018 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005006:	4b56      	ldr	r3, [pc, #344]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	4953      	ldr	r1, [pc, #332]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8005014:	4313      	orrs	r3, r2
 8005016:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d010      	beq.n	8005046 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	4b4d      	ldr	r3, [pc, #308]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	429a      	cmp	r2, r3
 8005032:	d908      	bls.n	8005046 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005034:	4b4a      	ldr	r3, [pc, #296]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f023 020f 	bic.w	r2, r3, #15
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4947      	ldr	r1, [pc, #284]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8005042:	4313      	orrs	r3, r2
 8005044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d055      	beq.n	80050fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005052:	4b43      	ldr	r3, [pc, #268]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4940      	ldr	r1, [pc, #256]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8005060:	4313      	orrs	r3, r2
 8005062:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d107      	bne.n	800507c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800506c:	4b3c      	ldr	r3, [pc, #240]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d121      	bne.n	80050bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0f6      	b.n	800526a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d107      	bne.n	8005094 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005084:	4b36      	ldr	r3, [pc, #216]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d115      	bne.n	80050bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0ea      	b.n	800526a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d107      	bne.n	80050ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800509c:	4b30      	ldr	r3, [pc, #192]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0de      	b.n	800526a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050ac:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0d6      	b.n	800526a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050bc:	4b28      	ldr	r3, [pc, #160]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f023 0207 	bic.w	r2, r3, #7
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4925      	ldr	r1, [pc, #148]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ce:	f7fc f801 	bl	80010d4 <HAL_GetTick>
 80050d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d4:	e00a      	b.n	80050ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d6:	f7fb fffd 	bl	80010d4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e0be      	b.n	800526a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ec:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d1eb      	bne.n	80050d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d010      	beq.n	800512c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	4b14      	ldr	r3, [pc, #80]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	429a      	cmp	r2, r3
 8005118:	d208      	bcs.n	800512c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800511a:	4b11      	ldr	r3, [pc, #68]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f023 020f 	bic.w	r2, r3, #15
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	490e      	ldr	r1, [pc, #56]	; (8005160 <HAL_RCC_ClockConfig+0x244>)
 8005128:	4313      	orrs	r3, r2
 800512a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_ClockConfig+0x240>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d214      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b08      	ldr	r3, [pc, #32]	; (800515c <HAL_RCC_ClockConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 020f 	bic.w	r2, r3, #15
 8005142:	4906      	ldr	r1, [pc, #24]	; (800515c <HAL_RCC_ClockConfig+0x240>)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b04      	ldr	r3, [pc, #16]	; (800515c <HAL_RCC_ClockConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d005      	beq.n	8005164 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e086      	b.n	800526a <HAL_RCC_ClockConfig+0x34e>
 800515c:	52002000 	.word	0x52002000
 8005160:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d010      	beq.n	8005192 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800517c:	429a      	cmp	r2, r3
 800517e:	d208      	bcs.n	8005192 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005180:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	4939      	ldr	r1, [pc, #228]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 800518e:	4313      	orrs	r3, r2
 8005190:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d010      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	4b34      	ldr	r3, [pc, #208]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d208      	bcs.n	80051c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	492e      	ldr	r1, [pc, #184]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d010      	beq.n	80051ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	4b28      	ldr	r3, [pc, #160]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d8:	429a      	cmp	r2, r3
 80051da:	d208      	bcs.n	80051ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051dc:	4b25      	ldr	r3, [pc, #148]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	4922      	ldr	r1, [pc, #136]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d010      	beq.n	800521c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69da      	ldr	r2, [r3, #28]
 80051fe:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005206:	429a      	cmp	r2, r3
 8005208:	d208      	bcs.n	800521c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800520a:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4917      	ldr	r1, [pc, #92]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 8005218:	4313      	orrs	r3, r2
 800521a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800521c:	f000 f844 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b14      	ldr	r3, [pc, #80]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	4912      	ldr	r1, [pc, #72]	; (8005278 <HAL_RCC_ClockConfig+0x35c>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
 8005238:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800523a:	4b0e      	ldr	r3, [pc, #56]	; (8005274 <HAL_RCC_ClockConfig+0x358>)
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <HAL_RCC_ClockConfig+0x35c>)
 8005244:	5cd3      	ldrb	r3, [r2, r3]
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <HAL_RCC_ClockConfig+0x360>)
 8005252:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005254:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <HAL_RCC_ClockConfig+0x364>)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <HAL_RCC_ClockConfig+0x368>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb feee 	bl	8001040 <HAL_InitTick>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	58024400 	.word	0x58024400
 8005278:	0800d140 	.word	0x0800d140
 800527c:	24000004 	.word	0x24000004
 8005280:	24000000 	.word	0x24000000
 8005284:	24000008 	.word	0x24000008

08005288 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_RCC_EnableCSS+0x1c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a04      	ldr	r2, [pc, #16]	; (80052a4 <HAL_RCC_EnableCSS+0x1c>)
 8005292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005296:	6013      	str	r3, [r2, #0]
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	58024400 	.word	0x58024400

080052a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b089      	sub	sp, #36	; 0x24
 80052ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052ae:	4bb3      	ldr	r3, [pc, #716]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b6:	2b18      	cmp	r3, #24
 80052b8:	f200 8155 	bhi.w	8005566 <HAL_RCC_GetSysClockFreq+0x2be>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	08005329 	.word	0x08005329
 80052c8:	08005567 	.word	0x08005567
 80052cc:	08005567 	.word	0x08005567
 80052d0:	08005567 	.word	0x08005567
 80052d4:	08005567 	.word	0x08005567
 80052d8:	08005567 	.word	0x08005567
 80052dc:	08005567 	.word	0x08005567
 80052e0:	08005567 	.word	0x08005567
 80052e4:	0800534f 	.word	0x0800534f
 80052e8:	08005567 	.word	0x08005567
 80052ec:	08005567 	.word	0x08005567
 80052f0:	08005567 	.word	0x08005567
 80052f4:	08005567 	.word	0x08005567
 80052f8:	08005567 	.word	0x08005567
 80052fc:	08005567 	.word	0x08005567
 8005300:	08005567 	.word	0x08005567
 8005304:	08005355 	.word	0x08005355
 8005308:	08005567 	.word	0x08005567
 800530c:	08005567 	.word	0x08005567
 8005310:	08005567 	.word	0x08005567
 8005314:	08005567 	.word	0x08005567
 8005318:	08005567 	.word	0x08005567
 800531c:	08005567 	.word	0x08005567
 8005320:	08005567 	.word	0x08005567
 8005324:	0800535b 	.word	0x0800535b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005328:	4b94      	ldr	r3, [pc, #592]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d009      	beq.n	8005348 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005334:	4b91      	ldr	r3, [pc, #580]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	08db      	lsrs	r3, r3, #3
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	4a90      	ldr	r2, [pc, #576]	; (8005580 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005346:	e111      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005348:	4b8d      	ldr	r3, [pc, #564]	; (8005580 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800534a:	61bb      	str	r3, [r7, #24]
    break;
 800534c:	e10e      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800534e:	4b8d      	ldr	r3, [pc, #564]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005350:	61bb      	str	r3, [r7, #24]
    break;
 8005352:	e10b      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005354:	4b8c      	ldr	r3, [pc, #560]	; (8005588 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005356:	61bb      	str	r3, [r7, #24]
    break;
 8005358:	e108      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800535a:	4b88      	ldr	r3, [pc, #544]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005364:	4b85      	ldr	r3, [pc, #532]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800536e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005370:	4b82      	ldr	r3, [pc, #520]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800537a:	4b80      	ldr	r3, [pc, #512]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	08db      	lsrs	r3, r3, #3
 8005380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80e1 	beq.w	8005560 <HAL_RCC_GetSysClockFreq+0x2b8>
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	f000 8083 	beq.w	80054ac <HAL_RCC_GetSysClockFreq+0x204>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	f200 80a1 	bhi.w	80054f0 <HAL_RCC_GetSysClockFreq+0x248>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0x114>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d056      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x1c0>
 80053ba:	e099      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053bc:	4b6f      	ldr	r3, [pc, #444]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d02d      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053c8:	4b6c      	ldr	r3, [pc, #432]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	08db      	lsrs	r3, r3, #3
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	4a6b      	ldr	r2, [pc, #428]	; (8005580 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
 80053d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f2:	4b62      	ldr	r3, [pc, #392]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005402:	ed97 6a02 	vldr	s12, [r7, #8]
 8005406:	eddf 5a61 	vldr	s11, [pc, #388]	; 800558c <HAL_RCC_GetSysClockFreq+0x2e4>
 800540a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005422:	e087      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005590 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005436:	4b51      	ldr	r3, [pc, #324]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005446:	ed97 6a02 	vldr	s12, [r7, #8]
 800544a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800558c <HAL_RCC_GetSysClockFreq+0x2e4>
 800544e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800545a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005466:	e065      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005594 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547a:	4b40      	ldr	r3, [pc, #256]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548a:	ed97 6a02 	vldr	s12, [r7, #8]
 800548e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800558c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054aa:	e043      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005598 <HAL_RCC_GetSysClockFreq+0x2f0>
 80054ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054be:	4b2f      	ldr	r3, [pc, #188]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80054d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800558c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ee:	e021      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005594 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005512:	ed97 6a02 	vldr	s12, [r7, #8]
 8005516:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800558c <HAL_RCC_GetSysClockFreq+0x2e4>
 800551a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005532:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005534:	4b11      	ldr	r3, [pc, #68]	; (800557c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	0a5b      	lsrs	r3, r3, #9
 800553a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553e:	3301      	adds	r3, #1
 8005540:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800554c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005558:	ee17 3a90 	vmov	r3, s15
 800555c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800555e:	e005      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
    break;
 8005564:	e002      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005568:	61bb      	str	r3, [r7, #24]
    break;
 800556a:	bf00      	nop
  }

  return sysclockfreq;
 800556c:	69bb      	ldr	r3, [r7, #24]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3724      	adds	r7, #36	; 0x24
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	58024400 	.word	0x58024400
 8005580:	03d09000 	.word	0x03d09000
 8005584:	003d0900 	.word	0x003d0900
 8005588:	017d7840 	.word	0x017d7840
 800558c:	46000000 	.word	0x46000000
 8005590:	4c742400 	.word	0x4c742400
 8005594:	4a742400 	.word	0x4a742400
 8005598:	4bbebc20 	.word	0x4bbebc20

0800559c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055a2:	f7ff fe81 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 80055a6:	4602      	mov	r2, r0
 80055a8:	4b10      	ldr	r3, [pc, #64]	; (80055ec <HAL_RCC_GetHCLKFreq+0x50>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	490f      	ldr	r1, [pc, #60]	; (80055f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80055b4:	5ccb      	ldrb	r3, [r1, r3]
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	fa22 f303 	lsr.w	r3, r2, r3
 80055be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <HAL_RCC_GetHCLKFreq+0x50>)
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80055ca:	5cd3      	ldrb	r3, [r2, r3]
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	fa22 f303 	lsr.w	r3, r2, r3
 80055d6:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80055d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055da:	4a07      	ldr	r2, [pc, #28]	; (80055f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055e0:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80055e2:	681b      	ldr	r3, [r3, #0]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	58024400 	.word	0x58024400
 80055f0:	0800d140 	.word	0x0800d140
 80055f4:	24000004 	.word	0x24000004
 80055f8:	24000000 	.word	0x24000000

080055fc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560c:	d105      	bne.n	800561a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800560e:	f000 f809 	bl	8005624 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005612:	4b03      	ldr	r3, [pc, #12]	; (8005620 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005618:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	58024400 	.word	0x58024400

08005624 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800563c:	2300      	movs	r3, #0
 800563e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005640:	2300      	movs	r3, #0
 8005642:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d03f      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005658:	d02a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800565a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800565e:	d824      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005664:	d018      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800566a:	d81e      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005674:	d007      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005676:	e018      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005678:	4ba3      	ldr	r3, [pc, #652]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	4aa2      	ldr	r2, [pc, #648]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800567e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005684:	e015      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3304      	adds	r3, #4
 800568a:	2102      	movs	r1, #2
 800568c:	4618      	mov	r0, r3
 800568e:	f002 f84f 	bl	8007730 <RCCEx_PLL2_Config>
 8005692:	4603      	mov	r3, r0
 8005694:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005696:	e00c      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3324      	adds	r3, #36	; 0x24
 800569c:	2102      	movs	r1, #2
 800569e:	4618      	mov	r0, r3
 80056a0:	f002 f8f8 	bl	8007894 <RCCEx_PLL3_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056a8:	e003      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	75fb      	strb	r3, [r7, #23]
      break;
 80056ae:	e000      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056b8:	4b93      	ldr	r3, [pc, #588]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c4:	4990      	ldr	r1, [pc, #576]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	650b      	str	r3, [r1, #80]	; 0x50
 80056ca:	e001      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d03d      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d826      	bhi.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005701 	.word	0x08005701
 80056f0:	0800570f 	.word	0x0800570f
 80056f4:	08005721 	.word	0x08005721
 80056f8:	08005739 	.word	0x08005739
 80056fc:	08005739 	.word	0x08005739
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005700:	4b81      	ldr	r3, [pc, #516]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	4a80      	ldr	r2, [pc, #512]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800570a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800570c:	e015      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3304      	adds	r3, #4
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f002 f80b 	bl	8007730 <RCCEx_PLL2_Config>
 800571a:	4603      	mov	r3, r0
 800571c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800571e:	e00c      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3324      	adds	r3, #36	; 0x24
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f002 f8b4 	bl	8007894 <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005730:	e003      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]
      break;
 8005736:	e000      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005740:	4b71      	ldr	r3, [pc, #452]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005744:	f023 0207 	bic.w	r2, r3, #7
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	496e      	ldr	r1, [pc, #440]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800574e:	4313      	orrs	r3, r2
 8005750:	650b      	str	r3, [r1, #80]	; 0x50
 8005752:	e001      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005760:	2b00      	cmp	r3, #0
 8005762:	d042      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576c:	d02b      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800576e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005772:	d825      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005774:	2bc0      	cmp	r3, #192	; 0xc0
 8005776:	d028      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005778:	2bc0      	cmp	r3, #192	; 0xc0
 800577a:	d821      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d016      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005780:	2b80      	cmp	r3, #128	; 0x80
 8005782:	d81d      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	d007      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800578c:	e018      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800578e:	4b5e      	ldr	r3, [pc, #376]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	4a5d      	ldr	r2, [pc, #372]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005798:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800579a:	e017      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	2100      	movs	r1, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 ffc4 	bl	8007730 <RCCEx_PLL2_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80057ac:	e00e      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3324      	adds	r3, #36	; 0x24
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 f86d 	bl	8007894 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80057be:	e005      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
      break;
 80057c4:	e002      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80057c6:	bf00      	nop
 80057c8:	e000      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80057ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057d2:	4b4d      	ldr	r3, [pc, #308]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80057d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	494a      	ldr	r1, [pc, #296]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	650b      	str	r3, [r1, #80]	; 0x50
 80057e4:	e001      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d049      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005800:	d030      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005802:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005806:	d82a      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005808:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800580c:	d02c      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800580e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005812:	d824      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005818:	d018      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800581a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800581e:	d81e      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005828:	d007      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800582a:	e018      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582c:	4b36      	ldr	r3, [pc, #216]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4a35      	ldr	r2, [pc, #212]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005838:	e017      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3304      	adds	r3, #4
 800583e:	2100      	movs	r1, #0
 8005840:	4618      	mov	r0, r3
 8005842:	f001 ff75 	bl	8007730 <RCCEx_PLL2_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800584a:	e00e      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3324      	adds	r3, #36	; 0x24
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f002 f81e 	bl	8007894 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800585c:	e005      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	75fb      	strb	r3, [r7, #23]
      break;
 8005862:	e002      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005864:	bf00      	nop
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005870:	4b25      	ldr	r3, [pc, #148]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005874:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800587e:	4922      	ldr	r1, [pc, #136]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005880:	4313      	orrs	r3, r2
 8005882:	658b      	str	r3, [r1, #88]	; 0x58
 8005884:	e001      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005892:	2b00      	cmp	r3, #0
 8005894:	d04b      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800589c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a0:	d030      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80058a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a6:	d82a      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80058a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058ac:	d02e      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80058ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058b2:	d824      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80058b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058b8:	d018      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80058ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058be:	d81e      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80058c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058c8:	d007      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80058ca:	e018      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058cc:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	4a0d      	ldr	r2, [pc, #52]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058d8:	e019      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	2100      	movs	r1, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 ff25 	bl	8007730 <RCCEx_PLL2_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80058ea:	e010      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3324      	adds	r3, #36	; 0x24
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 ffce 	bl	8007894 <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058fc:	e007      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	75fb      	strb	r3, [r7, #23]
      break;
 8005902:	e004      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005904:	bf00      	nop
 8005906:	e002      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005908:	58024400 	.word	0x58024400
      break;
 800590c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005914:	4b99      	ldr	r3, [pc, #612]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005918:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005922:	4996      	ldr	r1, [pc, #600]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005924:	4313      	orrs	r3, r2
 8005926:	658b      	str	r3, [r1, #88]	; 0x58
 8005928:	e001      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d032      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593e:	2b30      	cmp	r3, #48	; 0x30
 8005940:	d01c      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005942:	2b30      	cmp	r3, #48	; 0x30
 8005944:	d817      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005946:	2b20      	cmp	r3, #32
 8005948:	d00c      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800594a:	2b20      	cmp	r3, #32
 800594c:	d813      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005952:	2b10      	cmp	r3, #16
 8005954:	d10f      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005956:	4b89      	ldr	r3, [pc, #548]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	4a88      	ldr	r2, [pc, #544]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800595c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005962:	e00e      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	2102      	movs	r1, #2
 800596a:	4618      	mov	r0, r3
 800596c:	f001 fee0 	bl	8007730 <RCCEx_PLL2_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005974:	e005      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]
      break;
 800597a:	e002      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800597c:	bf00      	nop
 800597e:	e000      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005982:	7dfb      	ldrb	r3, [r7, #23]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005988:	4b7c      	ldr	r3, [pc, #496]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800598a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005994:	4979      	ldr	r1, [pc, #484]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005996:	4313      	orrs	r3, r2
 8005998:	64cb      	str	r3, [r1, #76]	; 0x4c
 800599a:	e001      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d047      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059b4:	d030      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80059b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ba:	d82a      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80059bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059c0:	d02c      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80059c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059c6:	d824      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80059c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059cc:	d018      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80059ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d2:	d81e      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80059d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059dc:	d007      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80059de:	e018      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e0:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a65      	ldr	r2, [pc, #404]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80059ec:	e017      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3304      	adds	r3, #4
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 fe9b 	bl	8007730 <RCCEx_PLL2_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80059fe:	e00e      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3324      	adds	r3, #36	; 0x24
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 ff44 	bl	8007894 <RCCEx_PLL3_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a10:	e005      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
      break;
 8005a16:	e002      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005a18:	bf00      	nop
 8005a1a:	e000      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a24:	4b55      	ldr	r3, [pc, #340]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a30:	4952      	ldr	r1, [pc, #328]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	650b      	str	r3, [r1, #80]	; 0x50
 8005a36:	e001      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d049      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a50:	d02e      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a56:	d828      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005a58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a5c:	d02a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005a5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a62:	d822      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005a64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a68:	d026      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005a6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a6e:	d81c      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a74:	d010      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a7a:	d816      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01d      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a84:	d111      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 fe4f 	bl	8007730 <RCCEx_PLL2_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a96:	e012      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3324      	adds	r3, #36	; 0x24
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 fef8 	bl	8007894 <RCCEx_PLL3_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005aa8:	e009      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	75fb      	strb	r3, [r7, #23]
      break;
 8005aae:	e006      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ab0:	bf00      	nop
 8005ab2:	e004      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ab4:	bf00      	nop
 8005ab6:	e002      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ab8:	bf00      	nop
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ac4:	4b2d      	ldr	r3, [pc, #180]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad0:	492a      	ldr	r1, [pc, #168]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ad6:	e001      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d04d      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af2:	d02e      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af8:	d828      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afe:	d02a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b04:	d822      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b0a:	d026      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b10:	d81c      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b16:	d010      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1c:	d816      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01d      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b26:	d111      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fdfe 	bl	8007730 <RCCEx_PLL2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b38:	e012      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3324      	adds	r3, #36	; 0x24
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fea7 	bl	8007894 <RCCEx_PLL3_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b4a:	e009      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b50:	e006      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005b52:	bf00      	nop
 8005b54:	e004      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10c      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b74:	4901      	ldr	r1, [pc, #4]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	658b      	str	r3, [r1, #88]	; 0x58
 8005b7a:	e003      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d02f      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b98:	d00e      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b9e:	d814      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d015      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ba8:	d10f      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005baa:	4baf      	ldr	r3, [pc, #700]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	4aae      	ldr	r2, [pc, #696]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005bb6:	e00c      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fdb6 	bl	8007730 <RCCEx_PLL2_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bce:	e000      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bd8:	4ba3      	ldr	r3, [pc, #652]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be4:	49a0      	ldr	r1, [pc, #640]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	650b      	str	r3, [r1, #80]	; 0x50
 8005bea:	e001      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d032      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d81b      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c43 	.word	0x08005c43
 8005c10:	08005c1d 	.word	0x08005c1d
 8005c14:	08005c2b 	.word	0x08005c2b
 8005c18:	08005c43 	.word	0x08005c43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1c:	4b92      	ldr	r3, [pc, #584]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a91      	ldr	r2, [pc, #580]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005c28:	e00c      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	2102      	movs	r1, #2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 fd7d 	bl	8007730 <RCCEx_PLL2_Config>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005c3a:	e003      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c40:	e000      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c4a:	4b87      	ldr	r3, [pc, #540]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4e:	f023 0203 	bic.w	r2, r3, #3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	4984      	ldr	r1, [pc, #528]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c5c:	e001      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8086 	beq.w	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c70:	4b7e      	ldr	r3, [pc, #504]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a7d      	ldr	r2, [pc, #500]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c7c:	f7fb fa2a 	bl	80010d4 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c82:	e009      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c84:	f7fb fa26 	bl	80010d4 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	; 0x64
 8005c90:	d902      	bls.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	75fb      	strb	r3, [r7, #23]
        break;
 8005c96:	e005      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c98:	4b74      	ldr	r3, [pc, #464]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ef      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d166      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005caa:	4b6f      	ldr	r3, [pc, #444]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cb4:	4053      	eors	r3, r2
 8005cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d013      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cbe:	4b6a      	ldr	r3, [pc, #424]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cc8:	4b67      	ldr	r3, [pc, #412]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	4a66      	ldr	r2, [pc, #408]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cd4:	4b64      	ldr	r3, [pc, #400]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4a63      	ldr	r2, [pc, #396]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ce0:	4a61      	ldr	r2, [pc, #388]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf0:	d115      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf2:	f7fb f9ef 	bl	80010d4 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cf8:	e00b      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cfa:	f7fb f9eb 	bl	80010d4 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d902      	bls.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	75fb      	strb	r3, [r7, #23]
            break;
 8005d10:	e005      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d12:	4b55      	ldr	r3, [pc, #340]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0ed      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d126      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d32:	d10d      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005d34:	4b4c      	ldr	r3, [pc, #304]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d42:	0919      	lsrs	r1, r3, #4
 8005d44:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005d46:	400b      	ands	r3, r1
 8005d48:	4947      	ldr	r1, [pc, #284]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	610b      	str	r3, [r1, #16]
 8005d4e:	e005      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005d50:	4b45      	ldr	r3, [pc, #276]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	4a44      	ldr	r2, [pc, #272]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d5a:	6113      	str	r3, [r2, #16]
 8005d5c:	4b42      	ldr	r3, [pc, #264]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6a:	493f      	ldr	r1, [pc, #252]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	670b      	str	r3, [r1, #112]	; 0x70
 8005d70:	e004      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
 8005d74:	75bb      	strb	r3, [r7, #22]
 8005d76:	e001      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8085 	beq.w	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d8e:	2b28      	cmp	r3, #40	; 0x28
 8005d90:	d866      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005e75 	.word	0x08005e75
 8005d9c:	08005e61 	.word	0x08005e61
 8005da0:	08005e61 	.word	0x08005e61
 8005da4:	08005e61 	.word	0x08005e61
 8005da8:	08005e61 	.word	0x08005e61
 8005dac:	08005e61 	.word	0x08005e61
 8005db0:	08005e61 	.word	0x08005e61
 8005db4:	08005e61 	.word	0x08005e61
 8005db8:	08005e3d 	.word	0x08005e3d
 8005dbc:	08005e61 	.word	0x08005e61
 8005dc0:	08005e61 	.word	0x08005e61
 8005dc4:	08005e61 	.word	0x08005e61
 8005dc8:	08005e61 	.word	0x08005e61
 8005dcc:	08005e61 	.word	0x08005e61
 8005dd0:	08005e61 	.word	0x08005e61
 8005dd4:	08005e61 	.word	0x08005e61
 8005dd8:	08005e4f 	.word	0x08005e4f
 8005ddc:	08005e61 	.word	0x08005e61
 8005de0:	08005e61 	.word	0x08005e61
 8005de4:	08005e61 	.word	0x08005e61
 8005de8:	08005e61 	.word	0x08005e61
 8005dec:	08005e61 	.word	0x08005e61
 8005df0:	08005e61 	.word	0x08005e61
 8005df4:	08005e61 	.word	0x08005e61
 8005df8:	08005e75 	.word	0x08005e75
 8005dfc:	08005e61 	.word	0x08005e61
 8005e00:	08005e61 	.word	0x08005e61
 8005e04:	08005e61 	.word	0x08005e61
 8005e08:	08005e61 	.word	0x08005e61
 8005e0c:	08005e61 	.word	0x08005e61
 8005e10:	08005e61 	.word	0x08005e61
 8005e14:	08005e61 	.word	0x08005e61
 8005e18:	08005e75 	.word	0x08005e75
 8005e1c:	08005e61 	.word	0x08005e61
 8005e20:	08005e61 	.word	0x08005e61
 8005e24:	08005e61 	.word	0x08005e61
 8005e28:	08005e61 	.word	0x08005e61
 8005e2c:	08005e61 	.word	0x08005e61
 8005e30:	08005e61 	.word	0x08005e61
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	08005e75 	.word	0x08005e75
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	2101      	movs	r1, #1
 8005e42:	4618      	mov	r0, r3
 8005e44:	f001 fc74 	bl	8007730 <RCCEx_PLL2_Config>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005e4c:	e013      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3324      	adds	r3, #36	; 0x24
 8005e52:	2101      	movs	r1, #1
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 fd1d 	bl	8007894 <RCCEx_PLL3_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	75fb      	strb	r3, [r7, #23]
      break;
 8005e64:	e007      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	58024800 	.word	0x58024800
 8005e70:	00ffffcf 	.word	0x00ffffcf
      break;
 8005e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e7c:	4b96      	ldr	r3, [pc, #600]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e80:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e88:	4993      	ldr	r1, [pc, #588]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	654b      	str	r3, [r1, #84]	; 0x54
 8005e8e:	e001      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d038      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	d821      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005ea8:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ef3 	.word	0x08005ef3
 8005eb4:	08005ec9 	.word	0x08005ec9
 8005eb8:	08005edb 	.word	0x08005edb
 8005ebc:	08005ef3 	.word	0x08005ef3
 8005ec0:	08005ef3 	.word	0x08005ef3
 8005ec4:	08005ef3 	.word	0x08005ef3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 fc2e 	bl	8007730 <RCCEx_PLL2_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ed8:	e00c      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3324      	adds	r3, #36	; 0x24
 8005ede:	2101      	movs	r1, #1
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fcd7 	bl	8007894 <RCCEx_PLL3_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005eea:	e003      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005efa:	4b77      	ldr	r3, [pc, #476]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efe:	f023 0207 	bic.w	r2, r3, #7
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f06:	4974      	ldr	r1, [pc, #464]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	654b      	str	r3, [r1, #84]	; 0x54
 8005f0c:	e001      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d03a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	2b05      	cmp	r3, #5
 8005f26:	d821      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005f28:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f73 	.word	0x08005f73
 8005f34:	08005f49 	.word	0x08005f49
 8005f38:	08005f5b 	.word	0x08005f5b
 8005f3c:	08005f73 	.word	0x08005f73
 8005f40:	08005f73 	.word	0x08005f73
 8005f44:	08005f73 	.word	0x08005f73
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 fbee 	bl	8007730 <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005f58:	e00c      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3324      	adds	r3, #36	; 0x24
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fc97 	bl	8007894 <RCCEx_PLL3_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005f6a:	e003      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f70:	e000      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f7a:	4b57      	ldr	r3, [pc, #348]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7e:	f023 0207 	bic.w	r2, r3, #7
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f88:	4953      	ldr	r1, [pc, #332]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	658b      	str	r3, [r1, #88]	; 0x58
 8005f8e:	e001      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d04b      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005faa:	d02e      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fb0:	d828      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb6:	d02a      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbc:	d822      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005fbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fc2:	d026      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005fc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fc8:	d81c      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fce:	d010      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fd4:	d816      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01d      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fde:	d111      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fba2 	bl	8007730 <RCCEx_PLL2_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ff0:	e012      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3324      	adds	r3, #36	; 0x24
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fc4b 	bl	8007894 <RCCEx_PLL3_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006002:	e009      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	75fb      	strb	r3, [r7, #23]
      break;
 8006008:	e006      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800600a:	bf00      	nop
 800600c:	e004      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800600e:	bf00      	nop
 8006010:	e002      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006012:	bf00      	nop
 8006014:	e000      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800601e:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800602c:	492a      	ldr	r1, [pc, #168]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800602e:	4313      	orrs	r3, r2
 8006030:	654b      	str	r3, [r1, #84]	; 0x54
 8006032:	e001      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d04d      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800604a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800604e:	d02e      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006050:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006054:	d828      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605a:	d02a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800605c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006060:	d822      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006062:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006066:	d026      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006068:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800606c:	d81c      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800606e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006072:	d010      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006078:	d816      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01d      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800607e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006082:	d111      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f001 fb50 	bl	8007730 <RCCEx_PLL2_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006094:	e012      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3324      	adds	r3, #36	; 0x24
 800609a:	2102      	movs	r1, #2
 800609c:	4618      	mov	r0, r3
 800609e:	f001 fbf9 	bl	8007894 <RCCEx_PLL3_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80060a6:	e009      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	75fb      	strb	r3, [r7, #23]
      break;
 80060ac:	e006      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80060ae:	bf00      	nop
 80060b0:	e004      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80060ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10c      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060c2:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060d0:	4901      	ldr	r1, [pc, #4]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	658b      	str	r3, [r1, #88]	; 0x58
 80060d6:	e003      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80060d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d04b      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060f6:	d02e      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80060f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060fc:	d828      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80060fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006102:	d02a      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006108:	d822      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800610a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800610e:	d026      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006110:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006114:	d81c      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800611a:	d010      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800611c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006120:	d816      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01d      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612a:	d111      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f001 fafc 	bl	8007730 <RCCEx_PLL2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800613c:	e012      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3324      	adds	r3, #36	; 0x24
 8006142:	2102      	movs	r1, #2
 8006144:	4618      	mov	r0, r3
 8006146:	f001 fba5 	bl	8007894 <RCCEx_PLL3_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800614e:	e009      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
      break;
 8006154:	e006      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006156:	bf00      	nop
 8006158:	e004      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800615a:	bf00      	nop
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006164:	7dfb      	ldrb	r3, [r7, #23]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800616a:	4b9d      	ldr	r3, [pc, #628]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800616c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006178:	4999      	ldr	r1, [pc, #612]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800617a:	4313      	orrs	r3, r2
 800617c:	658b      	str	r3, [r1, #88]	; 0x58
 800617e:	e001      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01a      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619a:	d10a      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3324      	adds	r3, #36	; 0x24
 80061a0:	2102      	movs	r1, #2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fb76 	bl	8007894 <RCCEx_PLL3_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80061b2:	4b8b      	ldr	r3, [pc, #556]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061c0:	4987      	ldr	r1, [pc, #540]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0310 	and.w	r3, r3, #16
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01a      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061dc:	d10a      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3324      	adds	r3, #36	; 0x24
 80061e2:	2102      	movs	r1, #2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 fb55 	bl	8007894 <RCCEx_PLL3_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061f4:	4b7a      	ldr	r3, [pc, #488]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006202:	4977      	ldr	r1, [pc, #476]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006204:	4313      	orrs	r3, r2
 8006206:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d034      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800621a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800621e:	d01d      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006224:	d817      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800622a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622e:	d009      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006230:	e011      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	2100      	movs	r1, #0
 8006238:	4618      	mov	r0, r3
 800623a:	f001 fa79 	bl	8007730 <RCCEx_PLL2_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006242:	e00c      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3324      	adds	r3, #36	; 0x24
 8006248:	2102      	movs	r1, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fb22 	bl	8007894 <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006254:	e003      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
      break;
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800625c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800625e:	7dfb      	ldrb	r3, [r7, #23]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006264:	4b5e      	ldr	r3, [pc, #376]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006272:	495b      	ldr	r1, [pc, #364]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006274:	4313      	orrs	r3, r2
 8006276:	658b      	str	r3, [r1, #88]	; 0x58
 8006278:	e001      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d033      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006290:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006294:	d01c      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006296:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800629a:	d816      	bhi.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800629c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a0:	d003      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80062a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a6:	d007      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80062a8:	e00f      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062aa:	4b4d      	ldr	r3, [pc, #308]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	4a4c      	ldr	r2, [pc, #304]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80062b6:	e00c      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3324      	adds	r3, #36	; 0x24
 80062bc:	2101      	movs	r1, #1
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fae8 	bl	8007894 <RCCEx_PLL3_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80062c8:	e003      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	75fb      	strb	r3, [r7, #23]
      break;
 80062ce:	e000      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80062d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062d8:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e6:	493e      	ldr	r1, [pc, #248]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	654b      	str	r3, [r1, #84]	; 0x54
 80062ec:	e001      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d029      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630a:	d007      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800630c:	e00f      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630e:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	4a33      	ldr	r2, [pc, #204]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800631a:	e00b      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	2102      	movs	r1, #2
 8006322:	4618      	mov	r0, r3
 8006324:	f001 fa04 	bl	8007730 <RCCEx_PLL2_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800632c:	e002      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
      break;
 8006332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800633a:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800633c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006346:	4926      	ldr	r1, [pc, #152]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006348:	4313      	orrs	r3, r2
 800634a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800634c:	e001      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3324      	adds	r3, #36	; 0x24
 8006362:	2102      	movs	r1, #2
 8006364:	4618      	mov	r0, r3
 8006366:	f001 fa95 	bl	8007894 <RCCEx_PLL3_Config>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d033      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006388:	d017      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800638a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800638e:	d811      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006394:	d013      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800639a:	d80b      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80063a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a4:	d106      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a6:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	4a0d      	ldr	r2, [pc, #52]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80063b2:	e007      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	75fb      	strb	r3, [r7, #23]
      break;
 80063b8:	e004      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80063ba:	bf00      	nop
 80063bc:	e002      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80063be:	bf00      	nop
 80063c0:	e000      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80063c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10c      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063ca:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d6:	4902      	ldr	r1, [pc, #8]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	654b      	str	r3, [r1, #84]	; 0x54
 80063dc:	e004      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80063de:	bf00      	nop
 80063e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063f4:	4b31      	ldr	r3, [pc, #196]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80063f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006400:	492e      	ldr	r1, [pc, #184]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006402:	4313      	orrs	r3, r2
 8006404:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d009      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006412:	4b2a      	ldr	r3, [pc, #168]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006420:	4926      	ldr	r1, [pc, #152]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006422:	4313      	orrs	r3, r2
 8006424:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006432:	4b22      	ldr	r3, [pc, #136]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006436:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800643e:	491f      	ldr	r1, [pc, #124]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006440:	4313      	orrs	r3, r2
 8006442:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00d      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006450:	4b1a      	ldr	r3, [pc, #104]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006456:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800645a:	6113      	str	r3, [r2, #16]
 800645c:	4b17      	ldr	r3, [pc, #92]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006466:	4915      	ldr	r1, [pc, #84]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006468:	4313      	orrs	r3, r2
 800646a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	da08      	bge.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006474:	4b11      	ldr	r3, [pc, #68]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006478:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	490e      	ldr	r1, [pc, #56]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006482:	4313      	orrs	r3, r2
 8006484:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006492:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a0:	4906      	ldr	r1, [pc, #24]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80064a6:	7dbb      	ldrb	r3, [r7, #22]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	58024400 	.word	0x58024400

080064c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b090      	sub	sp, #64	; 0x40
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ce:	f040 8095 	bne.w	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80064d2:	4b97      	ldr	r3, [pc, #604]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80064d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2b04      	cmp	r3, #4
 80064e0:	f200 8088 	bhi.w	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80064e4:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	08006501 	.word	0x08006501
 80064f0:	08006529 	.word	0x08006529
 80064f4:	08006551 	.word	0x08006551
 80064f8:	080065ed 	.word	0x080065ed
 80064fc:	08006579 	.word	0x08006579
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006500:	4b8b      	ldr	r3, [pc, #556]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800650c:	d108      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800650e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006512:	4618      	mov	r0, r3
 8006514:	f000 ff64 	bl	80073e0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800651c:	f000 bc94 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006524:	f000 bc90 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006528:	4b81      	ldr	r3, [pc, #516]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006534:	d108      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006536:	f107 0318 	add.w	r3, r7, #24
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fca8 	bl	8006e90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006544:	f000 bc80 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800654c:	f000 bc7c 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006550:	4b77      	ldr	r3, [pc, #476]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800655c:	d108      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800655e:	f107 030c 	add.w	r3, r7, #12
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fde8 	bl	8007138 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800656c:	f000 bc6c 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006574:	f000 bc68 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006578:	4b6d      	ldr	r3, [pc, #436]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800657a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006580:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006582:	4b6b      	ldr	r3, [pc, #428]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b04      	cmp	r3, #4
 800658c:	d10c      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006594:	4b66      	ldr	r3, [pc, #408]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	08db      	lsrs	r3, r3, #3
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	4a65      	ldr	r2, [pc, #404]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a6:	e01f      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065a8:	4b61      	ldr	r3, [pc, #388]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b4:	d106      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80065b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065bc:	d102      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80065be:	4b5e      	ldr	r3, [pc, #376]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c2:	e011      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065c4:	4b5a      	ldr	r3, [pc, #360]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065d0:	d106      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80065d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d8:	d102      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80065da:	4b58      	ldr	r3, [pc, #352]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80065dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80065e4:	f000 bc30 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80065e8:	f000 bc2e 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80065ec:	4b54      	ldr	r3, [pc, #336]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065f0:	f000 bc2a 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065f8:	f000 bc26 	b.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006602:	f040 809f 	bne.w	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006606:	4b4a      	ldr	r3, [pc, #296]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800660e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006616:	d04d      	beq.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661e:	f200 8084 	bhi.w	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	2bc0      	cmp	r3, #192	; 0xc0
 8006626:	d07d      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	2bc0      	cmp	r3, #192	; 0xc0
 800662c:	d87d      	bhi.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2b80      	cmp	r3, #128	; 0x80
 8006632:	d02d      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	2b80      	cmp	r3, #128	; 0x80
 8006638:	d877      	bhi.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d012      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006646:	e070      	b.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006648:	4b39      	ldr	r3, [pc, #228]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006654:	d107      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fec0 	bl	80073e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006664:	e3f0      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800666a:	e3ed      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800666c:	4b30      	ldr	r3, [pc, #192]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006678:	d107      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800667a:	f107 0318 	add.w	r3, r7, #24
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fc06 	bl	8006e90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006688:	e3de      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800668e:	e3db      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006690:	4b27      	ldr	r3, [pc, #156]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669c:	d107      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800669e:	f107 030c 	add.w	r3, r7, #12
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fd48 	bl	8007138 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066ac:	e3cc      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066b2:	e3c9      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066b4:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80066b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066be:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d10c      	bne.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066d0:	4b17      	ldr	r3, [pc, #92]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	08db      	lsrs	r3, r3, #3
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	4a16      	ldr	r2, [pc, #88]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80066dc:	fa22 f303 	lsr.w	r3, r2, r3
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e2:	e01e      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f0:	d106      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80066f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f8:	d102      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fe:	e010      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006700:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800670c:	d106      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800670e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006714:	d102      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800671a:	e002      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006720:	e392      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006722:	e391      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006728:	e38e      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672e:	e38b      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006730:	58024400 	.word	0x58024400
 8006734:	03d09000 	.word	0x03d09000
 8006738:	003d0900 	.word	0x003d0900
 800673c:	017d7840 	.word	0x017d7840
 8006740:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674a:	f040 809c 	bne.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800674e:	4b9d      	ldr	r3, [pc, #628]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006752:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006756:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800675e:	d054      	beq.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006766:	f200 808b 	bhi.w	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006770:	f000 8083 	beq.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800677a:	f200 8081 	bhi.w	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006784:	d02f      	beq.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800678c:	d878      	bhi.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679a:	d012      	beq.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800679c:	e070      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800679e:	4b89      	ldr	r3, [pc, #548]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067aa:	d107      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fe15 	bl	80073e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067ba:	e345      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c0:	e342      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067c2:	4b80      	ldr	r3, [pc, #512]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ce:	d107      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d0:	f107 0318 	add.w	r3, r7, #24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fb5b 	bl	8006e90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067de:	e333      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067e4:	e330      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067e6:	4b77      	ldr	r3, [pc, #476]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f2:	d107      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067f4:	f107 030c 	add.w	r3, r7, #12
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fc9d 	bl	8007138 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006802:	e321      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006808:	e31e      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800680a:	4b6e      	ldr	r3, [pc, #440]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800680c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006812:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006814:	4b6b      	ldr	r3, [pc, #428]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b04      	cmp	r3, #4
 800681e:	d10c      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006826:	4b67      	ldr	r3, [pc, #412]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	08db      	lsrs	r3, r3, #3
 800682c:	f003 0303 	and.w	r3, r3, #3
 8006830:	4a65      	ldr	r2, [pc, #404]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006838:	e01e      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800683a:	4b62      	ldr	r3, [pc, #392]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006846:	d106      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800684e:	d102      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006850:	4b5e      	ldr	r3, [pc, #376]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006854:	e010      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006856:	4b5b      	ldr	r3, [pc, #364]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006862:	d106      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686a:	d102      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800686c:	4b58      	ldr	r3, [pc, #352]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006870:	e002      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006876:	e2e7      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006878:	e2e6      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800687a:	4b56      	ldr	r3, [pc, #344]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800687e:	e2e3      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006884:	e2e0      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800688c:	f040 80a7 	bne.w	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006890:	4b4c      	ldr	r3, [pc, #304]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006898:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068a0:	d055      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068a8:	f200 8096 	bhi.w	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068b2:	f000 8084 	beq.w	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068bc:	f200 808c 	bhi.w	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068c6:	d030      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ce:	f200 8083 	bhi.w	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068de:	d012      	beq.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80068e0:	e07a      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068e2:	4b38      	ldr	r3, [pc, #224]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ee:	d107      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fd73 	bl	80073e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068fe:	e2a3      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006904:	e2a0      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800690e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006912:	d107      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006914:	f107 0318 	add.w	r3, r7, #24
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fab9 	bl	8006e90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006922:	e291      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006928:	e28e      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800692a:	4b26      	ldr	r3, [pc, #152]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006936:	d107      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006938:	f107 030c 	add.w	r3, r7, #12
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fbfb 	bl	8007138 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006946:	e27f      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800694c:	e27c      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006952:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006956:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006958:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b04      	cmp	r3, #4
 8006962:	d10c      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800696a:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006976:	fa22 f303 	lsr.w	r3, r2, r3
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800697c:	e01e      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800697e:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800698a:	d106      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006992:	d102      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006994:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006998:	e010      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a6:	d106      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80069a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ae:	d102      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069ba:	e245      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80069bc:	e244      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069be:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069c2:	e241      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80069c4:	58024400 	.word	0x58024400
 80069c8:	03d09000 	.word	0x03d09000
 80069cc:	003d0900 	.word	0x003d0900
 80069d0:	017d7840 	.word	0x017d7840
 80069d4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069dc:	e234      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e4:	f040 809c 	bne.w	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80069e8:	4b9b      	ldr	r3, [pc, #620]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80069ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80069f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f8:	d054      	beq.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a00:	f200 808b 	bhi.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a0a:	f000 8083 	beq.w	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a14:	f200 8081 	bhi.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1e:	d02f      	beq.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a26:	d878      	bhi.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a34:	d012      	beq.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006a36:	e070      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a38:	4b87      	ldr	r3, [pc, #540]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a44:	d107      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fcc8 	bl	80073e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a54:	e1f8      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a5a:	e1f5      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a5c:	4b7e      	ldr	r3, [pc, #504]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a68:	d107      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a6a:	f107 0318 	add.w	r3, r7, #24
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fa0e 	bl	8006e90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a78:	e1e6      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a7e:	e1e3      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a80:	4b75      	ldr	r3, [pc, #468]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a8c:	d107      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a8e:	f107 030c 	add.w	r3, r7, #12
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fb50 	bl	8007138 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a9c:	e1d4      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aa2:	e1d1      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006aa4:	4b6c      	ldr	r3, [pc, #432]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006aae:	4b6a      	ldr	r3, [pc, #424]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ac0:	4b65      	ldr	r3, [pc, #404]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	08db      	lsrs	r3, r3, #3
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	4a64      	ldr	r2, [pc, #400]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad2:	e01e      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ad4:	4b60      	ldr	r3, [pc, #384]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae0:	d106      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ae8:	d102      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006aea:	4b5d      	ldr	r3, [pc, #372]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aee:	e010      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006af0:	4b59      	ldr	r3, [pc, #356]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006afc:	d106      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b04:	d102      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b06:	4b57      	ldr	r3, [pc, #348]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b0a:	e002      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b10:	e19a      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006b12:	e199      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b14:	4b54      	ldr	r3, [pc, #336]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b18:	e196      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b1e:	e193      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b26:	d173      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006b28:	4b4b      	ldr	r3, [pc, #300]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b38:	d02f      	beq.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b40:	d863      	bhi.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b4e:	d012      	beq.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006b50:	e05b      	b.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b52:	4b41      	ldr	r3, [pc, #260]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b5e:	d107      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b60:	f107 0318 	add.w	r3, r7, #24
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 f993 	bl	8006e90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b6e:	e16b      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b74:	e168      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b76:	4b38      	ldr	r3, [pc, #224]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b82:	d107      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fad5 	bl	8007138 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b92:	e159      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b98:	e156      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b9a:	4b2f      	ldr	r3, [pc, #188]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ba4:	4b2c      	ldr	r3, [pc, #176]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d10c      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bb6:	4b28      	ldr	r3, [pc, #160]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	08db      	lsrs	r3, r3, #3
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	4a26      	ldr	r2, [pc, #152]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc8:	e01e      	b.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bca:	4b23      	ldr	r3, [pc, #140]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd6:	d106      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bde:	d102      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006be0:	4b1f      	ldr	r3, [pc, #124]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be4:	e010      	b.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006be6:	4b1c      	ldr	r3, [pc, #112]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf2:	d106      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8006bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfa:	d102      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006bfc:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c00:	e002      	b.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c06:	e11f      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006c08:	e11e      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c0e:	e11b      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c16:	d13e      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006c18:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c2e:	d01d      	beq.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006c30:	e02e      	b.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c32:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fbcb 	bl	80073e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c4e:	e0fb      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c54:	e0f8      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006c56:	bf00      	nop
 8006c58:	58024400 	.word	0x58024400
 8006c5c:	03d09000 	.word	0x03d09000
 8006c60:	003d0900 	.word	0x003d0900
 8006c64:	017d7840 	.word	0x017d7840
 8006c68:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c6c:	4b79      	ldr	r3, [pc, #484]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c78:	d107      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c7a:	f107 0318 	add.w	r3, r7, #24
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f906 	bl	8006e90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c88:	e0de      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c8e:	e0db      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c94:	e0d8      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c9c:	f040 8085 	bne.w	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006ca0:	4b6c      	ldr	r3, [pc, #432]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006ca8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb0:	d06b      	beq.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb8:	d874      	bhi.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc0:	d056      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d86c      	bhi.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ccc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cd0:	d03b      	beq.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cd8:	d864      	bhi.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce0:	d021      	beq.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce8:	d85c      	bhi.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf6:	d004      	beq.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006cf8:	e054      	b.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006cfa:	f000 f8b3 	bl	8006e64 <HAL_RCCEx_GetD3PCLK1Freq>
 8006cfe:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006d00:	e0a2      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d02:	4b54      	ldr	r3, [pc, #336]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d0e:	d107      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d10:	f107 0318 	add.w	r3, r7, #24
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 f8bb 	bl	8006e90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d1e:	e093      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d24:	e090      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d26:	4b4b      	ldr	r3, [pc, #300]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d32:	d107      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d34:	f107 030c 	add.w	r3, r7, #12
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f9fd 	bl	8007138 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d42:	e081      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d48:	e07e      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d4a:	4b42      	ldr	r3, [pc, #264]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d109      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d56:	4b3f      	ldr	r3, [pc, #252]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	08db      	lsrs	r3, r3, #3
 8006d5c:	f003 0303 	and.w	r3, r3, #3
 8006d60:	4a3d      	ldr	r2, [pc, #244]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006d62:	fa22 f303 	lsr.w	r3, r2, r3
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d68:	e06e      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d6e:	e06b      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d70:	4b38      	ldr	r3, [pc, #224]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7c:	d102      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8006d7e:	4b37      	ldr	r3, [pc, #220]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d82:	e061      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d88:	e05e      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d8a:	4b32      	ldr	r3, [pc, #200]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d96:	d102      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006d98:	4b31      	ldr	r3, [pc, #196]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d9c:	e054      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da2:	e051      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da8:	e04e      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db0:	d148      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006db2:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc2:	d02a      	beq.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dca:	d838      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dd8:	d00d      	beq.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006dda:	e030      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ddc:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de8:	d102      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006dee:	e02b      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006df4:	e028      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006df6:	4b17      	ldr	r3, [pc, #92]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e02:	d107      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fae9 	bl	80073e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e12:	e019      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e18:	e016      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e1a:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e26:	d107      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e28:	f107 0318 	add.w	r3, r7, #24
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 f82f 	bl	8006e90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e36:	e007      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e3c:	e004      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e42:	e001      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3740      	adds	r7, #64	; 0x40
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	58024400 	.word	0x58024400
 8006e58:	03d09000 	.word	0x03d09000
 8006e5c:	003d0900 	.word	0x003d0900
 8006e60:	017d7840 	.word	0x017d7840

08006e64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e68:	f7fe fb98 	bl	800559c <HAL_RCC_GetHCLKFreq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	091b      	lsrs	r3, r3, #4
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	4904      	ldr	r1, [pc, #16]	; (8006e8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	0800d140 	.word	0x0800d140

08006e90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b089      	sub	sp, #36	; 0x24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e98:	4ba1      	ldr	r3, [pc, #644]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ea2:	4b9f      	ldr	r3, [pc, #636]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	0b1b      	lsrs	r3, r3, #12
 8006ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006eae:	4b9c      	ldr	r3, [pc, #624]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	091b      	lsrs	r3, r3, #4
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006eba:	4b99      	ldr	r3, [pc, #612]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	08db      	lsrs	r3, r3, #3
 8006ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8111 	beq.w	8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	f000 8083 	beq.w	8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	f200 80a1 	bhi.w	8007030 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d056      	beq.n	8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006efa:	e099      	b.n	8007030 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006efc:	4b88      	ldr	r3, [pc, #544]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d02d      	beq.n	8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f08:	4b85      	ldr	r3, [pc, #532]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	08db      	lsrs	r3, r3, #3
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	4a84      	ldr	r2, [pc, #528]	; (8007124 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
 8006f18:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b7b      	ldr	r3, [pc, #492]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f62:	e087      	b.n	8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800712c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b6a      	ldr	r3, [pc, #424]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fa6:	e065      	b.n	8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007130 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fba:	4b59      	ldr	r3, [pc, #356]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fea:	e043      	b.n	8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b48      	ldr	r3, [pc, #288]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007012:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800702e:	e021      	b.n	8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007130 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	4b37      	ldr	r3, [pc, #220]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	ed97 6a03 	vldr	s12, [r7, #12]
 8007056:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800705a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007072:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007074:	4b2a      	ldr	r3, [pc, #168]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	0a5b      	lsrs	r3, r3, #9
 800707a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800708a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800708e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800709a:	ee17 2a90 	vmov	r2, s15
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80070a2:	4b1f      	ldr	r3, [pc, #124]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	0c1b      	lsrs	r3, r3, #16
 80070a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80070c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c8:	ee17 2a90 	vmov	r2, s15
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80070d0:	4b13      	ldr	r3, [pc, #76]	; (8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	0e1b      	lsrs	r3, r3, #24
 80070d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f6:	ee17 2a90 	vmov	r2, s15
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070fe:	e008      	b.n	8007112 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	609a      	str	r2, [r3, #8]
}
 8007112:	bf00      	nop
 8007114:	3724      	adds	r7, #36	; 0x24
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400
 8007124:	03d09000 	.word	0x03d09000
 8007128:	46000000 	.word	0x46000000
 800712c:	4c742400 	.word	0x4c742400
 8007130:	4a742400 	.word	0x4a742400
 8007134:	4bbebc20 	.word	0x4bbebc20

08007138 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007138:	b480      	push	{r7}
 800713a:	b089      	sub	sp, #36	; 0x24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007140:	4ba1      	ldr	r3, [pc, #644]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800714a:	4b9f      	ldr	r3, [pc, #636]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	0d1b      	lsrs	r3, r3, #20
 8007150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007154:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007156:	4b9c      	ldr	r3, [pc, #624]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	0a1b      	lsrs	r3, r3, #8
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007162:	4b99      	ldr	r3, [pc, #612]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 8111 	beq.w	80073a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b02      	cmp	r3, #2
 800718a:	f000 8083 	beq.w	8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b02      	cmp	r3, #2
 8007192:	f200 80a1 	bhi.w	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d056      	beq.n	8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80071a2:	e099      	b.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071a4:	4b88      	ldr	r3, [pc, #544]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d02d      	beq.n	800720c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071b0:	4b85      	ldr	r3, [pc, #532]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	08db      	lsrs	r3, r3, #3
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	4a84      	ldr	r2, [pc, #528]	; (80073cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
 80071c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	ee07 3a90 	vmov	s15, r3
 80071c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071da:	4b7b      	ldr	r3, [pc, #492]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007206:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800720a:	e087      	b.n	800731c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800721a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721e:	4b6a      	ldr	r3, [pc, #424]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007232:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800724e:	e065      	b.n	800731c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800725e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007262:	4b59      	ldr	r3, [pc, #356]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	ed97 6a03 	vldr	s12, [r7, #12]
 8007276:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007292:	e043      	b.n	800731c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b48      	ldr	r3, [pc, #288]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d6:	e021      	b.n	800731c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b37      	ldr	r3, [pc, #220]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800731a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800731c:	4b2a      	ldr	r3, [pc, #168]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	0a5b      	lsrs	r3, r3, #9
 8007322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007332:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007336:	edd7 6a07 	vldr	s13, [r7, #28]
 800733a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007342:	ee17 2a90 	vmov	r2, s15
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800734a:	4b1f      	ldr	r3, [pc, #124]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	0c1b      	lsrs	r3, r3, #16
 8007350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007354:	ee07 3a90 	vmov	s15, r3
 8007358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007360:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007364:	edd7 6a07 	vldr	s13, [r7, #28]
 8007368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800736c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007370:	ee17 2a90 	vmov	r2, s15
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007378:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	0e1b      	lsrs	r3, r3, #24
 800737e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800738e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007392:	edd7 6a07 	vldr	s13, [r7, #28]
 8007396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800739a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800739e:	ee17 2a90 	vmov	r2, s15
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073a6:	e008      	b.n	80073ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	609a      	str	r2, [r3, #8]
}
 80073ba:	bf00      	nop
 80073bc:	3724      	adds	r7, #36	; 0x24
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	58024400 	.word	0x58024400
 80073cc:	03d09000 	.word	0x03d09000
 80073d0:	46000000 	.word	0x46000000
 80073d4:	4c742400 	.word	0x4c742400
 80073d8:	4a742400 	.word	0x4a742400
 80073dc:	4bbebc20 	.word	0x4bbebc20

080073e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b089      	sub	sp, #36	; 0x24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073e8:	4ba0      	ldr	r3, [pc, #640]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80073f2:	4b9e      	ldr	r3, [pc, #632]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073fe:	4b9b      	ldr	r3, [pc, #620]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007408:	4b98      	ldr	r3, [pc, #608]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	08db      	lsrs	r3, r3, #3
 800740e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007420:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 8111 	beq.w	800764e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2b02      	cmp	r3, #2
 8007430:	f000 8083 	beq.w	800753a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b02      	cmp	r3, #2
 8007438:	f200 80a1 	bhi.w	800757e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d056      	beq.n	80074f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007448:	e099      	b.n	800757e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800744a:	4b88      	ldr	r3, [pc, #544]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d02d      	beq.n	80074b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007456:	4b85      	ldr	r3, [pc, #532]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	08db      	lsrs	r3, r3, #3
 800745c:	f003 0303 	and.w	r3, r3, #3
 8007460:	4a83      	ldr	r2, [pc, #524]	; (8007670 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007462:	fa22 f303 	lsr.w	r3, r2, r3
 8007466:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007480:	4b7a      	ldr	r3, [pc, #488]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007490:	ed97 6a03 	vldr	s12, [r7, #12]
 8007494:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074b0:	e087      	b.n	80075c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80074c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c4:	4b69      	ldr	r3, [pc, #420]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074f4:	e065      	b.n	80075c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007500:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800767c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007508:	4b58      	ldr	r3, [pc, #352]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007518:	ed97 6a03 	vldr	s12, [r7, #12]
 800751c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800752c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007538:	e043      	b.n	80075c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	ee07 3a90 	vmov	s15, r3
 8007540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007544:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754c:	4b47      	ldr	r3, [pc, #284]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007560:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800757c:	e021      	b.n	80075c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	ee07 3a90 	vmov	s15, r3
 8007584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007588:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800758c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007590:	4b36      	ldr	r3, [pc, #216]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007598:	ee07 3a90 	vmov	s15, r3
 800759c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80075c2:	4b2a      	ldr	r3, [pc, #168]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	0a5b      	lsrs	r3, r3, #9
 80075c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075cc:	ee07 3a90 	vmov	s15, r3
 80075d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e8:	ee17 2a90 	vmov	r2, s15
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80075f0:	4b1e      	ldr	r3, [pc, #120]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f4:	0c1b      	lsrs	r3, r3, #16
 80075f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800760a:	edd7 6a07 	vldr	s13, [r7, #28]
 800760e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007616:	ee17 2a90 	vmov	r2, s15
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800761e:	4b13      	ldr	r3, [pc, #76]	; (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	0e1b      	lsrs	r3, r3, #24
 8007624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007638:	edd7 6a07 	vldr	s13, [r7, #28]
 800763c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007644:	ee17 2a90 	vmov	r2, s15
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800764c:	e008      	b.n	8007660 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	609a      	str	r2, [r3, #8]
}
 8007660:	bf00      	nop
 8007662:	3724      	adds	r7, #36	; 0x24
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	58024400 	.word	0x58024400
 8007670:	03d09000 	.word	0x03d09000
 8007674:	46000000 	.word	0x46000000
 8007678:	4c742400 	.word	0x4c742400
 800767c:	4a742400 	.word	0x4a742400
 8007680:	4bbebc20 	.word	0x4bbebc20

08007684 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800768c:	4b26      	ldr	r3, [pc, #152]	; (8007728 <HAL_RCCEx_CRSConfig+0xa4>)
 800768e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007692:	4a25      	ldr	r2, [pc, #148]	; (8007728 <HAL_RCCEx_CRSConfig+0xa4>)
 8007694:	f043 0302 	orr.w	r3, r3, #2
 8007698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800769c:	4b22      	ldr	r3, [pc, #136]	; (8007728 <HAL_RCCEx_CRSConfig+0xa4>)
 800769e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076a2:	4a21      	ldr	r2, [pc, #132]	; (8007728 <HAL_RCCEx_CRSConfig+0xa4>)
 80076a4:	f023 0302 	bic.w	r3, r3, #2
 80076a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80076ac:	f7f9 fd42 	bl	8001134 <HAL_GetREVID>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d80b      	bhi.n	80076d2 <HAL_RCCEx_CRSConfig+0x4e>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076c2:	d106      	bne.n	80076d2 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	e008      	b.n	80076e4 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80076fa:	4a0c      	ldr	r2, [pc, #48]	; (800772c <HAL_RCCEx_CRSConfig+0xa8>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007700:	4b0a      	ldr	r3, [pc, #40]	; (800772c <HAL_RCCEx_CRSConfig+0xa8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	4907      	ldr	r1, [pc, #28]	; (800772c <HAL_RCCEx_CRSConfig+0xa8>)
 8007710:	4313      	orrs	r3, r2
 8007712:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_RCCEx_CRSConfig+0xa8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a04      	ldr	r2, [pc, #16]	; (800772c <HAL_RCCEx_CRSConfig+0xa8>)
 800771a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800771e:	6013      	str	r3, [r2, #0]
}
 8007720:	bf00      	nop
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	58024400 	.word	0x58024400
 800772c:	40008400 	.word	0x40008400

08007730 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800773e:	4b53      	ldr	r3, [pc, #332]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b03      	cmp	r3, #3
 8007748:	d101      	bne.n	800774e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e099      	b.n	8007882 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800774e:	4b4f      	ldr	r3, [pc, #316]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a4e      	ldr	r2, [pc, #312]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007754:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775a:	f7f9 fcbb 	bl	80010d4 <HAL_GetTick>
 800775e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007760:	e008      	b.n	8007774 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007762:	f7f9 fcb7 	bl	80010d4 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e086      	b.n	8007882 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007774:	4b45      	ldr	r3, [pc, #276]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f0      	bne.n	8007762 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007780:	4b42      	ldr	r3, [pc, #264]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	031b      	lsls	r3, r3, #12
 800778e:	493f      	ldr	r1, [pc, #252]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007790:	4313      	orrs	r3, r2
 8007792:	628b      	str	r3, [r1, #40]	; 0x28
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	3b01      	subs	r3, #1
 800779a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	025b      	lsls	r3, r3, #9
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	041b      	lsls	r3, r3, #16
 80077b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	3b01      	subs	r3, #1
 80077be:	061b      	lsls	r3, r3, #24
 80077c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077c4:	4931      	ldr	r1, [pc, #196]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077ca:	4b30      	ldr	r3, [pc, #192]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	492d      	ldr	r1, [pc, #180]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077dc:	4b2b      	ldr	r3, [pc, #172]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	f023 0220 	bic.w	r2, r3, #32
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	4928      	ldr	r1, [pc, #160]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077ee:	4b27      	ldr	r3, [pc, #156]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	4a26      	ldr	r2, [pc, #152]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077f4:	f023 0310 	bic.w	r3, r3, #16
 80077f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077fe:	4b24      	ldr	r3, [pc, #144]	; (8007890 <RCCEx_PLL2_Config+0x160>)
 8007800:	4013      	ands	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	69d2      	ldr	r2, [r2, #28]
 8007806:	00d2      	lsls	r2, r2, #3
 8007808:	4920      	ldr	r1, [pc, #128]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 800780a:	4313      	orrs	r3, r2
 800780c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800780e:	4b1f      	ldr	r3, [pc, #124]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	4a1e      	ldr	r2, [pc, #120]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007814:	f043 0310 	orr.w	r3, r3, #16
 8007818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007820:	4b1a      	ldr	r3, [pc, #104]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800782a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800782c:	e00f      	b.n	800784e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d106      	bne.n	8007842 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007834:	4b15      	ldr	r3, [pc, #84]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	4a14      	ldr	r2, [pc, #80]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 800783a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007840:	e005      	b.n	800784e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	4a11      	ldr	r2, [pc, #68]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800784c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a0e      	ldr	r2, [pc, #56]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007854:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800785a:	f7f9 fc3b 	bl	80010d4 <HAL_GetTick>
 800785e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007860:	e008      	b.n	8007874 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007862:	f7f9 fc37 	bl	80010d4 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e006      	b.n	8007882 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	58024400 	.word	0x58024400
 8007890:	ffff0007 	.word	0xffff0007

08007894 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078a2:	4b53      	ldr	r3, [pc, #332]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d101      	bne.n	80078b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e099      	b.n	80079e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80078b2:	4b4f      	ldr	r3, [pc, #316]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a4e      	ldr	r2, [pc, #312]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078be:	f7f9 fc09 	bl	80010d4 <HAL_GetTick>
 80078c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078c4:	e008      	b.n	80078d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078c6:	f7f9 fc05 	bl	80010d4 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d901      	bls.n	80078d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e086      	b.n	80079e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078d8:	4b45      	ldr	r3, [pc, #276]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f0      	bne.n	80078c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078e4:	4b42      	ldr	r3, [pc, #264]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	051b      	lsls	r3, r3, #20
 80078f2:	493f      	ldr	r1, [pc, #252]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	628b      	str	r3, [r1, #40]	; 0x28
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	3b01      	subs	r3, #1
 8007908:	025b      	lsls	r3, r3, #9
 800790a:	b29b      	uxth	r3, r3
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	3b01      	subs	r3, #1
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	3b01      	subs	r3, #1
 8007922:	061b      	lsls	r3, r3, #24
 8007924:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007928:	4931      	ldr	r1, [pc, #196]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800792a:	4313      	orrs	r3, r2
 800792c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800792e:	4b30      	ldr	r3, [pc, #192]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	492d      	ldr	r1, [pc, #180]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800793c:	4313      	orrs	r3, r2
 800793e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007940:	4b2b      	ldr	r3, [pc, #172]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	4928      	ldr	r1, [pc, #160]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800794e:	4313      	orrs	r3, r2
 8007950:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007952:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800795e:	4b24      	ldr	r3, [pc, #144]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <RCCEx_PLL3_Config+0x160>)
 8007964:	4013      	ands	r3, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	69d2      	ldr	r2, [r2, #28]
 800796a:	00d2      	lsls	r2, r2, #3
 800796c:	4920      	ldr	r1, [pc, #128]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800796e:	4313      	orrs	r3, r2
 8007970:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007972:	4b1f      	ldr	r3, [pc, #124]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800797c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800798a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800798e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007990:	e00f      	b.n	80079b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d106      	bne.n	80079a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	4a14      	ldr	r2, [pc, #80]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800799e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079a4:	e005      	b.n	80079b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80079a6:	4b12      	ldr	r3, [pc, #72]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80079b2:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a0e      	ldr	r2, [pc, #56]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079be:	f7f9 fb89 	bl	80010d4 <HAL_GetTick>
 80079c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079c4:	e008      	b.n	80079d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80079c6:	f7f9 fb85 	bl	80010d4 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d901      	bls.n	80079d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e006      	b.n	80079e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079d8:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0f0      	beq.n	80079c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400
 80079f4:	ffff0007 	.word	0xffff0007

080079f8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	; 0x28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e283      	b.n	8007f12 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007a0a:	f7f9 fb93 	bl	8001134 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d113      	bne.n	8007a40 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a94      	ldr	r2, [pc, #592]	; (8007c70 <HAL_SAI_Init+0x278>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_SAI_Init+0x34>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a93      	ldr	r2, [pc, #588]	; (8007c74 <HAL_SAI_Init+0x27c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d107      	bne.n	8007a3c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d103      	bne.n	8007a3c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e268      	b.n	8007f12 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a8a      	ldr	r2, [pc, #552]	; (8007c70 <HAL_SAI_Init+0x278>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <HAL_SAI_Init+0x5c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a8a      	ldr	r2, [pc, #552]	; (8007c78 <HAL_SAI_Init+0x280>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d102      	bne.n	8007a5a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007a54:	4b89      	ldr	r3, [pc, #548]	; (8007c7c <HAL_SAI_Init+0x284>)
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	e028      	b.n	8007aac <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a88      	ldr	r2, [pc, #544]	; (8007c80 <HAL_SAI_Init+0x288>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d004      	beq.n	8007a6e <HAL_SAI_Init+0x76>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a86      	ldr	r2, [pc, #536]	; (8007c84 <HAL_SAI_Init+0x28c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d102      	bne.n	8007a74 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007a6e:	4b86      	ldr	r3, [pc, #536]	; (8007c88 <HAL_SAI_Init+0x290>)
 8007a70:	61bb      	str	r3, [r7, #24]
 8007a72:	e01b      	b.n	8007aac <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a84      	ldr	r2, [pc, #528]	; (8007c8c <HAL_SAI_Init+0x294>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_SAI_Init+0x90>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a83      	ldr	r2, [pc, #524]	; (8007c90 <HAL_SAI_Init+0x298>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d102      	bne.n	8007a8e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8007a88:	4b82      	ldr	r3, [pc, #520]	; (8007c94 <HAL_SAI_Init+0x29c>)
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	e00e      	b.n	8007aac <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a78      	ldr	r2, [pc, #480]	; (8007c74 <HAL_SAI_Init+0x27c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d004      	beq.n	8007aa2 <HAL_SAI_Init+0xaa>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a7e      	ldr	r2, [pc, #504]	; (8007c98 <HAL_SAI_Init+0x2a0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d102      	bne.n	8007aa8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8007aa2:	4b7e      	ldr	r3, [pc, #504]	; (8007c9c <HAL_SAI_Init+0x2a4>)
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	e001      	b.n	8007aac <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e232      	b.n	8007f12 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d106      	bne.n	8007ac6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7f8 fef3 	bl	80008ac <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa36 	bl	8007f38 <SAI_Disable>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e21d      	b.n	8007f12 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d00c      	beq.n	8007b00 <HAL_SAI_Init+0x108>
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d80d      	bhi.n	8007b06 <HAL_SAI_Init+0x10e>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_SAI_Init+0xfc>
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d003      	beq.n	8007afa <HAL_SAI_Init+0x102>
 8007af2:	e008      	b.n	8007b06 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007af4:	2300      	movs	r3, #0
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007af8:	e008      	b.n	8007b0c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007afa:	2310      	movs	r3, #16
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007afe:	e005      	b.n	8007b0c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007b00:	2320      	movs	r3, #32
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b04:	e002      	b.n	8007b0c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b0a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b05      	cmp	r3, #5
 8007b12:	d832      	bhi.n	8007b7a <HAL_SAI_Init+0x182>
 8007b14:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <HAL_SAI_Init+0x124>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007b35 	.word	0x08007b35
 8007b20:	08007b3b 	.word	0x08007b3b
 8007b24:	08007b43 	.word	0x08007b43
 8007b28:	08007b4b 	.word	0x08007b4b
 8007b2c:	08007b5b 	.word	0x08007b5b
 8007b30:	08007b6b 	.word	0x08007b6b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61fb      	str	r3, [r7, #28]
      break;
 8007b38:	e022      	b.n	8007b80 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b3e:	61fb      	str	r3, [r7, #28]
      break;
 8007b40:	e01e      	b.n	8007b80 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b46:	61fb      	str	r3, [r7, #28]
      break;
 8007b48:	e01a      	b.n	8007b80 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b4e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	f043 0301 	orr.w	r3, r3, #1
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b58:	e012      	b.n	8007b80 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b5e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	f043 0302 	orr.w	r3, r3, #2
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b68:	e00a      	b.n	8007b80 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b6e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	f043 0303 	orr.w	r3, r3, #3
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b78:	e002      	b.n	8007b80 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
      break;
 8007b7e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b84:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 80ba 	beq.w	8007d04 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a35      	ldr	r2, [pc, #212]	; (8007c70 <HAL_SAI_Init+0x278>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d004      	beq.n	8007ba8 <HAL_SAI_Init+0x1b0>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a35      	ldr	r2, [pc, #212]	; (8007c78 <HAL_SAI_Init+0x280>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d104      	bne.n	8007bb2 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007ba8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007bac:	f7fe fc88 	bl	80064c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bb0:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a32      	ldr	r2, [pc, #200]	; (8007c80 <HAL_SAI_Init+0x288>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d004      	beq.n	8007bc6 <HAL_SAI_Init+0x1ce>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a30      	ldr	r2, [pc, #192]	; (8007c84 <HAL_SAI_Init+0x28c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d104      	bne.n	8007bd0 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007bc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007bca:	f7fe fc79 	bl	80064c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bce:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a2d      	ldr	r2, [pc, #180]	; (8007c8c <HAL_SAI_Init+0x294>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d004      	beq.n	8007be4 <HAL_SAI_Init+0x1ec>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a2c      	ldr	r2, [pc, #176]	; (8007c90 <HAL_SAI_Init+0x298>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d104      	bne.n	8007bee <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8007be4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007be8:	f7fe fc6a 	bl	80064c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bec:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a20      	ldr	r2, [pc, #128]	; (8007c74 <HAL_SAI_Init+0x27c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d104      	bne.n	8007c02 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007bf8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007bfc:	f7fe fc60 	bl	80064c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c00:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a24      	ldr	r2, [pc, #144]	; (8007c98 <HAL_SAI_Init+0x2a0>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d104      	bne.n	8007c16 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007c0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c10:	f7fe fc56 	bl	80064c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c14:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c1e:	d120      	bne.n	8007c62 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d102      	bne.n	8007c2e <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e00a      	b.n	8007c44 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d103      	bne.n	8007c3e <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	e002      	b.n	8007c44 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	4619      	mov	r1, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	fb02 f303 	mul.w	r3, r2, r3
 8007c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	e02f      	b.n	8007cc2 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c6a:	d119      	bne.n	8007ca0 <HAL_SAI_Init+0x2a8>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e018      	b.n	8007ca2 <HAL_SAI_Init+0x2aa>
 8007c70:	40015804 	.word	0x40015804
 8007c74:	58005404 	.word	0x58005404
 8007c78:	40015824 	.word	0x40015824
 8007c7c:	40015800 	.word	0x40015800
 8007c80:	40015c04 	.word	0x40015c04
 8007c84:	40015c24 	.word	0x40015c24
 8007c88:	40015c00 	.word	0x40015c00
 8007c8c:	40016004 	.word	0x40016004
 8007c90:	40016024 	.word	0x40016024
 8007c94:	40016000 	.word	0x40016000
 8007c98:	58005424 	.word	0x58005424
 8007c9c:	58005400 	.word	0x58005400
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	4619      	mov	r1, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cc0:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4a95      	ldr	r2, [pc, #596]	; (8007f1c <HAL_SAI_Init+0x524>)
 8007cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cca:	08da      	lsrs	r2, r3, #3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007cd0:	6939      	ldr	r1, [r7, #16]
 8007cd2:	4b92      	ldr	r3, [pc, #584]	; (8007f1c <HAL_SAI_Init+0x524>)
 8007cd4:	fba3 2301 	umull	r2, r3, r3, r1
 8007cd8:	08da      	lsrs	r2, r3, #3
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	1aca      	subs	r2, r1, r3
 8007ce4:	2a08      	cmp	r2, #8
 8007ce6:	d904      	bls.n	8007cf2 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d104      	bne.n	8007d04 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	085a      	lsrs	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_SAI_Init+0x31c>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d109      	bne.n	8007d28 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_SAI_Init+0x328>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e001      	b.n	8007d24 <HAL_SAI_Init+0x32c>
 8007d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d24:	623b      	str	r3, [r7, #32]
 8007d26:	e008      	b.n	8007d3a <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d102      	bne.n	8007d36 <HAL_SAI_Init+0x33e>
 8007d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d34:	e000      	b.n	8007d38 <HAL_SAI_Init+0x340>
 8007d36:	2300      	movs	r3, #0
 8007d38:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007d3a:	f7f9 f9fb 	bl	8001134 <HAL_GetREVID>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d44:	d331      	bcc.n	8007daa <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6819      	ldr	r1, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	4b73      	ldr	r3, [pc, #460]	; (8007f20 <HAL_SAI_Init+0x528>)
 8007d52:	400b      	ands	r3, r1
 8007d54:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6819      	ldr	r1, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d64:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d6a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d70:	431a      	orrs	r2, r3
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007d7e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d8a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	051b      	lsls	r3, r3, #20
 8007d92:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d98:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	e02d      	b.n	8007e06 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6819      	ldr	r1, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	4b5b      	ldr	r3, [pc, #364]	; (8007f24 <HAL_SAI_Init+0x52c>)
 8007db6:	400b      	ands	r3, r1
 8007db8:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6819      	ldr	r1, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007dce:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007de2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007dee:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	051b      	lsls	r3, r3, #20
 8007df6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007dfc:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6859      	ldr	r1, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	4b45      	ldr	r3, [pc, #276]	; (8007f28 <HAL_SAI_Init+0x530>)
 8007e12:	400b      	ands	r3, r1
 8007e14:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6859      	ldr	r1, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e24:	431a      	orrs	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6899      	ldr	r1, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	4b3b      	ldr	r3, [pc, #236]	; (8007f2c <HAL_SAI_Init+0x534>)
 8007e40:	400b      	ands	r3, r1
 8007e42:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6899      	ldr	r1, [r3, #8]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e54:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007e5a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007e60:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e66:	3b01      	subs	r3, #1
 8007e68:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007e6a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68d9      	ldr	r1, [r3, #12]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007e82:	400b      	ands	r3, r1
 8007e84:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68d9      	ldr	r1, [r3, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e94:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e9a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e9c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	021b      	lsls	r3, r3, #8
 8007ea6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1e      	ldr	r2, [pc, #120]	; (8007f30 <HAL_SAI_Init+0x538>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d004      	beq.n	8007ec4 <HAL_SAI_Init+0x4cc>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a1d      	ldr	r2, [pc, #116]	; (8007f34 <HAL_SAI_Init+0x53c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d119      	bne.n	8007ef8 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec8:	f023 0201 	bic.w	r2, r3, #1
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d10e      	bne.n	8007ef8 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef0:	f043 0201 	orr.w	r2, r3, #1
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3728      	adds	r7, #40	; 0x28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	cccccccd 	.word	0xcccccccd
 8007f20:	f005c010 	.word	0xf005c010
 8007f24:	f805c010 	.word	0xf805c010
 8007f28:	ffff1ff0 	.word	0xffff1ff0
 8007f2c:	fff88000 	.word	0xfff88000
 8007f30:	40015804 	.word	0x40015804
 8007f34:	58005404 	.word	0x58005404

08007f38 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007f40:	4b18      	ldr	r3, [pc, #96]	; (8007fa4 <SAI_Disable+0x6c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a18      	ldr	r2, [pc, #96]	; (8007fa8 <SAI_Disable+0x70>)
 8007f46:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4a:	0b1b      	lsrs	r3, r3, #12
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f62:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10a      	bne.n	8007f80 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	72fb      	strb	r3, [r7, #11]
      break;
 8007f7e:	e009      	b.n	8007f94 <SAI_Disable+0x5c>
    }
    count--;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e7      	bne.n	8007f64 <SAI_Disable+0x2c>

  return status;
 8007f94:	7afb      	ldrb	r3, [r7, #11]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	24000000 	.word	0x24000000
 8007fa8:	95cbec1b 	.word	0x95cbec1b

08007fac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fac:	b084      	sub	sp, #16
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	f107 001c 	add.w	r0, r7, #28
 8007fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d120      	bne.n	8008006 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	4b2a      	ldr	r3, [pc, #168]	; (8008080 <USB_CoreInit+0xd4>)
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d105      	bne.n	8007ffa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 fc04 	bl	8009808 <USB_CoreReset>
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]
 8008004:	e01a      	b.n	800803c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fbf8 	bl	8009808 <USB_CoreReset>
 8008018:	4603      	mov	r3, r0
 800801a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800801c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d106      	bne.n	8008030 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	639a      	str	r2, [r3, #56]	; 0x38
 800802e:	e005      	b.n	800803c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	2b01      	cmp	r3, #1
 8008040:	d116      	bne.n	8008070 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008046:	b29a      	uxth	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008050:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <USB_CoreInit+0xd8>)
 8008052:	4313      	orrs	r3, r2
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f043 0206 	orr.w	r2, r3, #6
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f043 0220 	orr.w	r2, r3, #32
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800807c:	b004      	add	sp, #16
 800807e:	4770      	bx	lr
 8008080:	ffbdffbf 	.word	0xffbdffbf
 8008084:	03ee0000 	.word	0x03ee0000

08008088 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d165      	bne.n	8008168 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4a41      	ldr	r2, [pc, #260]	; (80081a4 <USB_SetTurnaroundTime+0x11c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d906      	bls.n	80080b2 <USB_SetTurnaroundTime+0x2a>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4a40      	ldr	r2, [pc, #256]	; (80081a8 <USB_SetTurnaroundTime+0x120>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d202      	bcs.n	80080b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80080ac:	230f      	movs	r3, #15
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e062      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	4a3c      	ldr	r2, [pc, #240]	; (80081a8 <USB_SetTurnaroundTime+0x120>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d306      	bcc.n	80080c8 <USB_SetTurnaroundTime+0x40>
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4a3b      	ldr	r2, [pc, #236]	; (80081ac <USB_SetTurnaroundTime+0x124>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d202      	bcs.n	80080c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80080c2:	230e      	movs	r3, #14
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	e057      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	4a38      	ldr	r2, [pc, #224]	; (80081ac <USB_SetTurnaroundTime+0x124>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d306      	bcc.n	80080de <USB_SetTurnaroundTime+0x56>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4a37      	ldr	r2, [pc, #220]	; (80081b0 <USB_SetTurnaroundTime+0x128>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d202      	bcs.n	80080de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080d8:	230d      	movs	r3, #13
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	e04c      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	4a33      	ldr	r2, [pc, #204]	; (80081b0 <USB_SetTurnaroundTime+0x128>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d306      	bcc.n	80080f4 <USB_SetTurnaroundTime+0x6c>
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	4a32      	ldr	r2, [pc, #200]	; (80081b4 <USB_SetTurnaroundTime+0x12c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d802      	bhi.n	80080f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080ee:	230c      	movs	r3, #12
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	e041      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4a2f      	ldr	r2, [pc, #188]	; (80081b4 <USB_SetTurnaroundTime+0x12c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d906      	bls.n	800810a <USB_SetTurnaroundTime+0x82>
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4a2e      	ldr	r2, [pc, #184]	; (80081b8 <USB_SetTurnaroundTime+0x130>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d802      	bhi.n	800810a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008104:	230b      	movs	r3, #11
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e036      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	4a2a      	ldr	r2, [pc, #168]	; (80081b8 <USB_SetTurnaroundTime+0x130>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d906      	bls.n	8008120 <USB_SetTurnaroundTime+0x98>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4a29      	ldr	r2, [pc, #164]	; (80081bc <USB_SetTurnaroundTime+0x134>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d802      	bhi.n	8008120 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800811a:	230a      	movs	r3, #10
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	e02b      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4a26      	ldr	r2, [pc, #152]	; (80081bc <USB_SetTurnaroundTime+0x134>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d906      	bls.n	8008136 <USB_SetTurnaroundTime+0xae>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	4a25      	ldr	r2, [pc, #148]	; (80081c0 <USB_SetTurnaroundTime+0x138>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d202      	bcs.n	8008136 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008130:	2309      	movs	r3, #9
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e020      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	4a21      	ldr	r2, [pc, #132]	; (80081c0 <USB_SetTurnaroundTime+0x138>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d306      	bcc.n	800814c <USB_SetTurnaroundTime+0xc4>
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	4a20      	ldr	r2, [pc, #128]	; (80081c4 <USB_SetTurnaroundTime+0x13c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d802      	bhi.n	800814c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008146:	2308      	movs	r3, #8
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e015      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4a1d      	ldr	r2, [pc, #116]	; (80081c4 <USB_SetTurnaroundTime+0x13c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d906      	bls.n	8008162 <USB_SetTurnaroundTime+0xda>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4a1c      	ldr	r2, [pc, #112]	; (80081c8 <USB_SetTurnaroundTime+0x140>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d202      	bcs.n	8008162 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800815c:	2307      	movs	r3, #7
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	e00a      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008162:	2306      	movs	r3, #6
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e007      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800816e:	2309      	movs	r3, #9
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	e001      	b.n	8008178 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008174:	2309      	movs	r3, #9
 8008176:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	029b      	lsls	r3, r3, #10
 800818c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008190:	431a      	orrs	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	00d8acbf 	.word	0x00d8acbf
 80081a8:	00e4e1c0 	.word	0x00e4e1c0
 80081ac:	00f42400 	.word	0x00f42400
 80081b0:	01067380 	.word	0x01067380
 80081b4:	011a499f 	.word	0x011a499f
 80081b8:	01312cff 	.word	0x01312cff
 80081bc:	014ca43f 	.word	0x014ca43f
 80081c0:	016e3600 	.word	0x016e3600
 80081c4:	01a6ab1f 	.word	0x01a6ab1f
 80081c8:	01e84800 	.word	0x01e84800

080081cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f043 0201 	orr.w	r2, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d115      	bne.n	800825e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800823e:	2001      	movs	r0, #1
 8008240:	f7f8 ff54 	bl	80010ec <HAL_Delay>
      ms++;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3301      	adds	r3, #1
 8008248:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 fa4b 	bl	80096e6 <USB_GetMode>
 8008250:	4603      	mov	r3, r0
 8008252:	2b01      	cmp	r3, #1
 8008254:	d01e      	beq.n	8008294 <USB_SetCurrentMode+0x84>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b31      	cmp	r3, #49	; 0x31
 800825a:	d9f0      	bls.n	800823e <USB_SetCurrentMode+0x2e>
 800825c:	e01a      	b.n	8008294 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d115      	bne.n	8008290 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008270:	2001      	movs	r0, #1
 8008272:	f7f8 ff3b 	bl	80010ec <HAL_Delay>
      ms++;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3301      	adds	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 fa32 	bl	80096e6 <USB_GetMode>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d005      	beq.n	8008294 <USB_SetCurrentMode+0x84>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b31      	cmp	r3, #49	; 0x31
 800828c:	d9f0      	bls.n	8008270 <USB_SetCurrentMode+0x60>
 800828e:	e001      	b.n	8008294 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e005      	b.n	80082a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b32      	cmp	r3, #50	; 0x32
 8008298:	d101      	bne.n	800829e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e000      	b.n	80082a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082a8:	b084      	sub	sp, #16
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b086      	sub	sp, #24
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80082b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	e009      	b.n	80082dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	3340      	adds	r3, #64	; 0x40
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	2200      	movs	r2, #0
 80082d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	3301      	adds	r3, #1
 80082da:	613b      	str	r3, [r7, #16]
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2b0e      	cmp	r3, #14
 80082e0:	d9f2      	bls.n	80082c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d11c      	bne.n	8008322 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082f6:	f043 0302 	orr.w	r3, r3, #2
 80082fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	e005      	b.n	800832e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008334:	461a      	mov	r2, r3
 8008336:	2300      	movs	r3, #0
 8008338:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008340:	4619      	mov	r1, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008348:	461a      	mov	r2, r3
 800834a:	680b      	ldr	r3, [r1, #0]
 800834c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	2b01      	cmp	r3, #1
 8008352:	d10c      	bne.n	800836e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d104      	bne.n	8008364 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800835a:	2100      	movs	r1, #0
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f965 	bl	800862c <USB_SetDevSpeed>
 8008362:	e008      	b.n	8008376 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008364:	2101      	movs	r1, #1
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f960 	bl	800862c <USB_SetDevSpeed>
 800836c:	e003      	b.n	8008376 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800836e:	2103      	movs	r1, #3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f95b 	bl	800862c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008376:	2110      	movs	r1, #16
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f8f3 	bl	8008564 <USB_FlushTxFifo>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f91f 	bl	80085cc <USB_FlushRxFifo>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839e:	461a      	mov	r2, r3
 80083a0:	2300      	movs	r3, #0
 80083a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083aa:	461a      	mov	r2, r3
 80083ac:	2300      	movs	r3, #0
 80083ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b6:	461a      	mov	r2, r3
 80083b8:	2300      	movs	r3, #0
 80083ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083bc:	2300      	movs	r3, #0
 80083be:	613b      	str	r3, [r7, #16]
 80083c0:	e043      	b.n	800844a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083d8:	d118      	bne.n	800840c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10a      	bne.n	80083f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ec:	461a      	mov	r2, r3
 80083ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	e013      	b.n	800841e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008402:	461a      	mov	r2, r3
 8008404:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	e008      	b.n	800841e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008418:	461a      	mov	r2, r3
 800841a:	2300      	movs	r3, #0
 800841c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842a:	461a      	mov	r2, r3
 800842c:	2300      	movs	r3, #0
 800842e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843c:	461a      	mov	r2, r3
 800843e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008442:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	3301      	adds	r3, #1
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	429a      	cmp	r2, r3
 8008450:	d3b7      	bcc.n	80083c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008452:	2300      	movs	r3, #0
 8008454:	613b      	str	r3, [r7, #16]
 8008456:	e043      	b.n	80084e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800846a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800846e:	d118      	bne.n	80084a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10a      	bne.n	800848c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008482:	461a      	mov	r2, r3
 8008484:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	e013      	b.n	80084b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008498:	461a      	mov	r2, r3
 800849a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	e008      	b.n	80084b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ae:	461a      	mov	r2, r3
 80084b0:	2300      	movs	r3, #0
 80084b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c0:	461a      	mov	r2, r3
 80084c2:	2300      	movs	r3, #0
 80084c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d2:	461a      	mov	r2, r3
 80084d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	3301      	adds	r3, #1
 80084de:	613b      	str	r3, [r7, #16]
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d3b7      	bcc.n	8008458 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008508:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	2b00      	cmp	r3, #0
 800850e:	d105      	bne.n	800851c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	f043 0210 	orr.w	r2, r3, #16
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	699a      	ldr	r2, [r3, #24]
 8008520:	4b0e      	ldr	r3, [pc, #56]	; (800855c <USB_DevInit+0x2b4>)
 8008522:	4313      	orrs	r3, r2
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	f043 0208 	orr.w	r2, r3, #8
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800853a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853c:	2b01      	cmp	r3, #1
 800853e:	d105      	bne.n	800854c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	699a      	ldr	r2, [r3, #24]
 8008544:	4b06      	ldr	r3, [pc, #24]	; (8008560 <USB_DevInit+0x2b8>)
 8008546:	4313      	orrs	r3, r2
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008558:	b004      	add	sp, #16
 800855a:	4770      	bx	lr
 800855c:	803c3800 	.word	0x803c3800
 8008560:	40000004 	.word	0x40000004

08008564 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3301      	adds	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4a13      	ldr	r2, [pc, #76]	; (80085c8 <USB_FlushTxFifo+0x64>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d901      	bls.n	8008584 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e01b      	b.n	80085bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	daf2      	bge.n	8008572 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	019b      	lsls	r3, r3, #6
 8008594:	f043 0220 	orr.w	r2, r3, #32
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3301      	adds	r3, #1
 80085a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4a08      	ldr	r2, [pc, #32]	; (80085c8 <USB_FlushTxFifo+0x64>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d901      	bls.n	80085ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e006      	b.n	80085bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d0f0      	beq.n	800859c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	00030d40 	.word	0x00030d40

080085cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3301      	adds	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4a11      	ldr	r2, [pc, #68]	; (8008628 <USB_FlushRxFifo+0x5c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d901      	bls.n	80085ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e018      	b.n	800861c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	daf2      	bge.n	80085d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2210      	movs	r2, #16
 80085fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4a08      	ldr	r2, [pc, #32]	; (8008628 <USB_FlushRxFifo+0x5c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d901      	bls.n	800860e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e006      	b.n	800861c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	f003 0310 	and.w	r3, r3, #16
 8008616:	2b10      	cmp	r3, #16
 8008618:	d0f0      	beq.n	80085fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	00030d40 	.word	0x00030d40

0800862c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	68f9      	ldr	r1, [r7, #12]
 8008648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800864c:	4313      	orrs	r3, r2
 800864e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800865e:	b480      	push	{r7}
 8008660:	b087      	sub	sp, #28
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 0306 	and.w	r3, r3, #6
 8008676:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d102      	bne.n	8008684 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800867e:	2300      	movs	r3, #0
 8008680:	75fb      	strb	r3, [r7, #23]
 8008682:	e00a      	b.n	800869a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b02      	cmp	r3, #2
 8008688:	d002      	beq.n	8008690 <USB_GetDevSpeed+0x32>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b06      	cmp	r3, #6
 800868e:	d102      	bne.n	8008696 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008690:	2302      	movs	r3, #2
 8008692:	75fb      	strb	r3, [r7, #23]
 8008694:	e001      	b.n	800869a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008696:	230f      	movs	r3, #15
 8008698:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800869a:	7dfb      	ldrb	r3, [r7, #23]
}
 800869c:	4618      	mov	r0, r3
 800869e:	371c      	adds	r7, #28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d139      	bne.n	8008738 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ca:	69da      	ldr	r2, [r3, #28]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	2101      	movs	r1, #1
 80086d6:	fa01 f303 	lsl.w	r3, r1, r3
 80086da:	b29b      	uxth	r3, r3
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e2:	4313      	orrs	r3, r2
 80086e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d153      	bne.n	80087a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	791b      	ldrb	r3, [r3, #4]
 8008716:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008718:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	059b      	lsls	r3, r3, #22
 800871e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008720:	431a      	orrs	r2, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	0159      	lsls	r1, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	440b      	add	r3, r1
 800872a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872e:	4619      	mov	r1, r3
 8008730:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <USB_ActivateEndpoint+0x10c>)
 8008732:	4313      	orrs	r3, r2
 8008734:	600b      	str	r3, [r1, #0]
 8008736:	e035      	b.n	80087a4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873e:	69da      	ldr	r2, [r3, #28]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	2101      	movs	r1, #1
 800874a:	fa01 f303 	lsl.w	r3, r1, r3
 800874e:	041b      	lsls	r3, r3, #16
 8008750:	68f9      	ldr	r1, [r7, #12]
 8008752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008756:	4313      	orrs	r3, r2
 8008758:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d119      	bne.n	80087a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	791b      	ldrb	r3, [r3, #4]
 800878a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800878c:	430b      	orrs	r3, r1
 800878e:	431a      	orrs	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	0159      	lsls	r1, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	440b      	add	r3, r1
 8008798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879c:	4619      	mov	r1, r3
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <USB_ActivateEndpoint+0x10c>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	10008000 	.word	0x10008000

080087b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	785b      	ldrb	r3, [r3, #1]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d161      	bne.n	8008898 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ea:	d11f      	bne.n	800882c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	0151      	lsls	r1, r2, #5
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	440a      	add	r2, r1
 8008802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008806:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800880a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4413      	add	r3, r2
 8008814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	0151      	lsls	r1, r2, #5
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	440a      	add	r2, r1
 8008822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800882a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	2101      	movs	r1, #1
 800883e:	fa01 f303 	lsl.w	r3, r1, r3
 8008842:	b29b      	uxth	r3, r3
 8008844:	43db      	mvns	r3, r3
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800884c:	4013      	ands	r3, r2
 800884e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	f003 030f 	and.w	r3, r3, #15
 8008860:	2101      	movs	r1, #1
 8008862:	fa01 f303 	lsl.w	r3, r1, r3
 8008866:	b29b      	uxth	r3, r3
 8008868:	43db      	mvns	r3, r3
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008870:	4013      	ands	r3, r2
 8008872:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	0159      	lsls	r1, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	440b      	add	r3, r1
 800888a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888e:	4619      	mov	r1, r3
 8008890:	4b35      	ldr	r3, [pc, #212]	; (8008968 <USB_DeactivateEndpoint+0x1b0>)
 8008892:	4013      	ands	r3, r2
 8008894:	600b      	str	r3, [r1, #0]
 8008896:	e060      	b.n	800895a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ae:	d11f      	bne.n	80088f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	0151      	lsls	r1, r2, #5
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	440a      	add	r2, r1
 80088c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	2101      	movs	r1, #1
 8008902:	fa01 f303 	lsl.w	r3, r1, r3
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	43db      	mvns	r3, r3
 800890a:	68f9      	ldr	r1, [r7, #12]
 800890c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008910:	4013      	ands	r3, r2
 8008912:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891a:	69da      	ldr	r2, [r3, #28]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	f003 030f 	and.w	r3, r3, #15
 8008924:	2101      	movs	r1, #1
 8008926:	fa01 f303 	lsl.w	r3, r1, r3
 800892a:	041b      	lsls	r3, r3, #16
 800892c:	43db      	mvns	r3, r3
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008934:	4013      	ands	r3, r2
 8008936:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	0159      	lsls	r1, r3, #5
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	440b      	add	r3, r1
 800894e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008952:	4619      	mov	r1, r3
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <USB_DeactivateEndpoint+0x1b4>)
 8008956:	4013      	ands	r3, r2
 8008958:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	ec337800 	.word	0xec337800
 800896c:	eff37800 	.word	0xeff37800

08008970 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08a      	sub	sp, #40	; 0x28
 8008974:	af02      	add	r7, sp, #8
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4613      	mov	r3, r2
 800897c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	785b      	ldrb	r3, [r3, #1]
 800898c:	2b01      	cmp	r3, #1
 800898e:	f040 8163 	bne.w	8008c58 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d132      	bne.n	8008a00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a6:	691a      	ldr	r2, [r3, #16]
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	0159      	lsls	r1, r3, #5
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	440b      	add	r3, r1
 80089b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b4:	4619      	mov	r1, r3
 80089b6:	4ba5      	ldr	r3, [pc, #660]	; (8008c4c <USB_EPStartXfer+0x2dc>)
 80089b8:	4013      	ands	r3, r2
 80089ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e8:	691a      	ldr	r2, [r3, #16]
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	0159      	lsls	r1, r3, #5
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	440b      	add	r3, r1
 80089f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f6:	4619      	mov	r1, r3
 80089f8:	4b95      	ldr	r3, [pc, #596]	; (8008c50 <USB_EPStartXfer+0x2e0>)
 80089fa:	4013      	ands	r3, r2
 80089fc:	610b      	str	r3, [r1, #16]
 80089fe:	e074      	b.n	8008aea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	0159      	lsls	r1, r3, #5
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	440b      	add	r3, r1
 8008a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4b8c      	ldr	r3, [pc, #560]	; (8008c50 <USB_EPStartXfer+0x2e0>)
 8008a1e:	4013      	ands	r3, r2
 8008a20:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2e:	691a      	ldr	r2, [r3, #16]
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	0159      	lsls	r1, r3, #5
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	440b      	add	r3, r1
 8008a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4b83      	ldr	r3, [pc, #524]	; (8008c4c <USB_EPStartXfer+0x2dc>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	6999      	ldr	r1, [r3, #24]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	440b      	add	r3, r1
 8008a5c:	1e59      	subs	r1, r3, #1
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a68:	4b7a      	ldr	r3, [pc, #488]	; (8008c54 <USB_EPStartXfer+0x2e4>)
 8008a6a:	400b      	ands	r3, r1
 8008a6c:	69b9      	ldr	r1, [r7, #24]
 8008a6e:	0148      	lsls	r0, r1, #5
 8008a70:	69f9      	ldr	r1, [r7, #28]
 8008a72:	4401      	add	r1, r0
 8008a74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a88:	691a      	ldr	r2, [r3, #16]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a92:	69b9      	ldr	r1, [r7, #24]
 8008a94:	0148      	lsls	r0, r1, #5
 8008a96:	69f9      	ldr	r1, [r7, #28]
 8008a98:	4401      	add	r1, r0
 8008a9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	791b      	ldrb	r3, [r3, #4]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d11f      	bne.n	8008aea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	0151      	lsls	r1, r2, #5
 8008abc:	69fa      	ldr	r2, [r7, #28]
 8008abe:	440a      	add	r2, r1
 8008ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008ac8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	69fa      	ldr	r2, [r7, #28]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ae8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008aea:	79fb      	ldrb	r3, [r7, #7]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d14b      	bne.n	8008b88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d009      	beq.n	8008b0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b04:	461a      	mov	r2, r3
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	791b      	ldrb	r3, [r3, #4]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d128      	bne.n	8008b66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d110      	bne.n	8008b46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	0151      	lsls	r1, r2, #5
 8008b36:	69fa      	ldr	r2, [r7, #28]
 8008b38:	440a      	add	r2, r1
 8008b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	e00f      	b.n	8008b66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	69fa      	ldr	r2, [r7, #28]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	0151      	lsls	r1, r2, #5
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	440a      	add	r2, r1
 8008b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	e137      	b.n	8008df8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	0151      	lsls	r1, r2, #5
 8008b9a:	69fa      	ldr	r2, [r7, #28]
 8008b9c:	440a      	add	r2, r1
 8008b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ba6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	791b      	ldrb	r3, [r3, #4]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d015      	beq.n	8008bdc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 811f 	beq.w	8008df8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	2101      	movs	r1, #1
 8008bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd0:	69f9      	ldr	r1, [r7, #28]
 8008bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	634b      	str	r3, [r1, #52]	; 0x34
 8008bda:	e10d      	b.n	8008df8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d110      	bne.n	8008c0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	0151      	lsls	r1, r2, #5
 8008bfe:	69fa      	ldr	r2, [r7, #28]
 8008c00:	440a      	add	r2, r1
 8008c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	e00f      	b.n	8008c2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	0151      	lsls	r1, r2, #5
 8008c20:	69fa      	ldr	r2, [r7, #28]
 8008c22:	440a      	add	r2, r1
 8008c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	6919      	ldr	r1, [r3, #16]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	781a      	ldrb	r2, [r3, #0]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	b298      	uxth	r0, r3
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	4603      	mov	r3, r0
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 faea 	bl	800921c <USB_WritePacket>
 8008c48:	e0d6      	b.n	8008df8 <USB_EPStartXfer+0x488>
 8008c4a:	bf00      	nop
 8008c4c:	e007ffff 	.word	0xe007ffff
 8008c50:	fff80000 	.word	0xfff80000
 8008c54:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	0159      	lsls	r1, r3, #5
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c72:	4619      	mov	r1, r3
 8008c74:	4b63      	ldr	r3, [pc, #396]	; (8008e04 <USB_EPStartXfer+0x494>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	0159      	lsls	r1, r3, #5
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	440b      	add	r3, r1
 8008c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c94:	4619      	mov	r1, r3
 8008c96:	4b5c      	ldr	r3, [pc, #368]	; (8008e08 <USB_EPStartXfer+0x498>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d123      	bne.n	8008cec <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb0:	691a      	ldr	r2, [r3, #16]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cba:	69b9      	ldr	r1, [r7, #24]
 8008cbc:	0148      	lsls	r0, r1, #5
 8008cbe:	69f9      	ldr	r1, [r7, #28]
 8008cc0:	4401      	add	r1, r0
 8008cc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	0151      	lsls	r1, r2, #5
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ce8:	6113      	str	r3, [r2, #16]
 8008cea:	e037      	b.n	8008d5c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	699a      	ldr	r2, [r3, #24]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	1e5a      	subs	r2, r3, #1
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d00:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	8afa      	ldrh	r2, [r7, #22]
 8008d08:	fb03 f202 	mul.w	r2, r3, r2
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1c:	691a      	ldr	r2, [r3, #16]
 8008d1e:	8afb      	ldrh	r3, [r7, #22]
 8008d20:	04d9      	lsls	r1, r3, #19
 8008d22:	4b3a      	ldr	r3, [pc, #232]	; (8008e0c <USB_EPStartXfer+0x49c>)
 8008d24:	400b      	ands	r3, r1
 8008d26:	69b9      	ldr	r1, [r7, #24]
 8008d28:	0148      	lsls	r0, r1, #5
 8008d2a:	69f9      	ldr	r1, [r7, #28]
 8008d2c:	4401      	add	r1, r0
 8008d2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d32:	4313      	orrs	r3, r2
 8008d34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d42:	691a      	ldr	r2, [r3, #16]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d4c:	69b9      	ldr	r1, [r7, #24]
 8008d4e:	0148      	lsls	r0, r1, #5
 8008d50:	69f9      	ldr	r1, [r7, #28]
 8008d52:	4401      	add	r1, r0
 8008d54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d10d      	bne.n	8008d7e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6919      	ldr	r1, [r3, #16]
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7a:	460a      	mov	r2, r1
 8008d7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	791b      	ldrb	r3, [r3, #4]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d128      	bne.n	8008dd8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d110      	bne.n	8008db8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	0151      	lsls	r1, r2, #5
 8008da8:	69fa      	ldr	r2, [r7, #28]
 8008daa:	440a      	add	r2, r1
 8008dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008db0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	e00f      	b.n	8008dd8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	0151      	lsls	r1, r2, #5
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	440a      	add	r2, r1
 8008dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008df6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3720      	adds	r7, #32
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	fff80000 	.word	0xfff80000
 8008e08:	e007ffff 	.word	0xe007ffff
 8008e0c:	1ff80000 	.word	0x1ff80000

08008e10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	f040 80ce 	bne.w	8008fce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d132      	bne.n	8008ea0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	0159      	lsls	r1, r3, #5
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	440b      	add	r3, r1
 8008e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e54:	4619      	mov	r1, r3
 8008e56:	4b9a      	ldr	r3, [pc, #616]	; (80090c0 <USB_EP0StartXfer+0x2b0>)
 8008e58:	4013      	ands	r3, r2
 8008e5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e88:	691a      	ldr	r2, [r3, #16]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	0159      	lsls	r1, r3, #5
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	440b      	add	r3, r1
 8008e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e96:	4619      	mov	r1, r3
 8008e98:	4b8a      	ldr	r3, [pc, #552]	; (80090c4 <USB_EP0StartXfer+0x2b4>)
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	610b      	str	r3, [r1, #16]
 8008e9e:	e04e      	b.n	8008f3e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	691a      	ldr	r2, [r3, #16]
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	0159      	lsls	r1, r3, #5
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	440b      	add	r3, r1
 8008eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eba:	4619      	mov	r1, r3
 8008ebc:	4b81      	ldr	r3, [pc, #516]	; (80090c4 <USB_EP0StartXfer+0x2b4>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ece:	691a      	ldr	r2, [r3, #16]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	0159      	lsls	r1, r3, #5
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	440b      	add	r3, r1
 8008ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008edc:	4619      	mov	r1, r3
 8008ede:	4b78      	ldr	r3, [pc, #480]	; (80090c0 <USB_EP0StartXfer+0x2b0>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	699a      	ldr	r2, [r3, #24]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d903      	bls.n	8008ef8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	0151      	lsls	r1, r2, #5
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	440a      	add	r2, r1
 8008f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f24:	691a      	ldr	r2, [r3, #16]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f2e:	6939      	ldr	r1, [r7, #16]
 8008f30:	0148      	lsls	r0, r1, #5
 8008f32:	6979      	ldr	r1, [r7, #20]
 8008f34:	4401      	add	r1, r0
 8008f36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d11e      	bne.n	8008f82 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d009      	beq.n	8008f60 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f58:	461a      	mov	r2, r3
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	0151      	lsls	r1, r2, #5
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	440a      	add	r2, r1
 8008f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	e097      	b.n	80090b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	0151      	lsls	r1, r2, #5
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	440a      	add	r2, r1
 8008f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fa0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 8083 	beq.w	80090b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	f003 030f 	and.w	r3, r3, #15
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc2:	6979      	ldr	r1, [r7, #20]
 8008fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	634b      	str	r3, [r1, #52]	; 0x34
 8008fcc:	e071      	b.n	80090b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	0159      	lsls	r1, r3, #5
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	440b      	add	r3, r1
 8008fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4b36      	ldr	r3, [pc, #216]	; (80090c4 <USB_EP0StartXfer+0x2b4>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffc:	691a      	ldr	r2, [r3, #16]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	0159      	lsls	r1, r3, #5
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	440b      	add	r3, r1
 8009006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900a:	4619      	mov	r1, r3
 800900c:	4b2c      	ldr	r3, [pc, #176]	; (80090c0 <USB_EP0StartXfer+0x2b0>)
 800900e:	4013      	ands	r3, r2
 8009010:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	68da      	ldr	r2, [r3, #12]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009048:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009056:	691a      	ldr	r2, [r3, #16]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009060:	6939      	ldr	r1, [r7, #16]
 8009062:	0148      	lsls	r0, r1, #5
 8009064:	6979      	ldr	r1, [r7, #20]
 8009066:	4401      	add	r1, r0
 8009068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800906c:	4313      	orrs	r3, r2
 800906e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d10d      	bne.n	8009092 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d009      	beq.n	8009092 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6919      	ldr	r1, [r3, #16]
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	015a      	lsls	r2, r3, #5
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	4413      	add	r3, r2
 800908a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800908e:	460a      	mov	r2, r1
 8009090:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	0151      	lsls	r1, r2, #5
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	440a      	add	r2, r1
 80090a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	371c      	adds	r7, #28
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	e007ffff 	.word	0xe007ffff
 80090c4:	fff80000 	.word	0xfff80000

080090c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090d2:	2300      	movs	r3, #0
 80090d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d14a      	bne.n	800917c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090fe:	f040 8086 	bne.w	800920e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	7812      	ldrb	r2, [r2, #0]
 8009116:	0151      	lsls	r1, r2, #5
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	440a      	add	r2, r1
 800911c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009120:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009124:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	7812      	ldrb	r2, [r2, #0]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009148:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3301      	adds	r3, #1
 800914e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f242 7210 	movw	r2, #10000	; 0x2710
 8009156:	4293      	cmp	r3, r2
 8009158:	d902      	bls.n	8009160 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	75fb      	strb	r3, [r7, #23]
          break;
 800915e:	e056      	b.n	800920e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009178:	d0e7      	beq.n	800914a <USB_EPStopXfer+0x82>
 800917a:	e048      	b.n	800920e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009194:	d13b      	bne.n	800920e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	0151      	lsls	r1, r2, #5
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	440a      	add	r2, r1
 80091b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	7812      	ldrb	r2, [r2, #0]
 80091ce:	0151      	lsls	r1, r2, #5
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	440a      	add	r2, r1
 80091d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3301      	adds	r3, #1
 80091e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d902      	bls.n	80091f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	75fb      	strb	r3, [r7, #23]
          break;
 80091f2:	e00c      	b.n	800920e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800920c:	d0e7      	beq.n	80091de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800920e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009210:	4618      	mov	r0, r3
 8009212:	371c      	adds	r7, #28
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800921c:	b480      	push	{r7}
 800921e:	b089      	sub	sp, #36	; 0x24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	4611      	mov	r1, r2
 8009228:	461a      	mov	r2, r3
 800922a:	460b      	mov	r3, r1
 800922c:	71fb      	strb	r3, [r7, #7]
 800922e:	4613      	mov	r3, r2
 8009230:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800923a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800923e:	2b00      	cmp	r3, #0
 8009240:	d123      	bne.n	800928a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009242:	88bb      	ldrh	r3, [r7, #4]
 8009244:	3303      	adds	r3, #3
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800924a:	2300      	movs	r3, #0
 800924c:	61bb      	str	r3, [r7, #24]
 800924e:	e018      	b.n	8009282 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	031a      	lsls	r2, r3, #12
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	4413      	add	r3, r2
 8009258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925c:	461a      	mov	r2, r3
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	3301      	adds	r3, #1
 8009268:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	3301      	adds	r3, #1
 800926e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	3301      	adds	r3, #1
 8009274:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	3301      	adds	r3, #1
 800927a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	3301      	adds	r3, #1
 8009280:	61bb      	str	r3, [r7, #24]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	429a      	cmp	r2, r3
 8009288:	d3e2      	bcc.n	8009250 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3724      	adds	r7, #36	; 0x24
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009298:	b480      	push	{r7}
 800929a:	b08b      	sub	sp, #44	; 0x2c
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4613      	mov	r3, r2
 80092a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	089b      	lsrs	r3, r3, #2
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80092b6:	88fb      	ldrh	r3, [r7, #6]
 80092b8:	f003 0303 	and.w	r3, r3, #3
 80092bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80092be:	2300      	movs	r3, #0
 80092c0:	623b      	str	r3, [r7, #32]
 80092c2:	e014      	b.n	80092ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	3301      	adds	r3, #1
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	3301      	adds	r3, #1
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	3301      	adds	r3, #1
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	3301      	adds	r3, #1
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	3301      	adds	r3, #1
 80092ec:	623b      	str	r3, [r7, #32]
 80092ee:	6a3a      	ldr	r2, [r7, #32]
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d3e6      	bcc.n	80092c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80092f6:	8bfb      	ldrh	r3, [r7, #30]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01e      	beq.n	800933a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009306:	461a      	mov	r2, r3
 8009308:	f107 0310 	add.w	r3, r7, #16
 800930c:	6812      	ldr	r2, [r2, #0]
 800930e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	fa22 f303 	lsr.w	r3, r2, r3
 800931c:	b2da      	uxtb	r2, r3
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	701a      	strb	r2, [r3, #0]
      i++;
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	3301      	adds	r3, #1
 8009326:	623b      	str	r3, [r7, #32]
      pDest++;
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	3301      	adds	r3, #1
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800932e:	8bfb      	ldrh	r3, [r7, #30]
 8009330:	3b01      	subs	r3, #1
 8009332:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009334:	8bfb      	ldrh	r3, [r7, #30]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1ea      	bne.n	8009310 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800933c:	4618      	mov	r0, r3
 800933e:	372c      	adds	r7, #44	; 0x2c
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d12c      	bne.n	80093be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	db12      	blt.n	800939c <USB_EPSetStall+0x54>
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00f      	beq.n	800939c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	0151      	lsls	r1, r2, #5
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	440a      	add	r2, r1
 8009392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800939a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	0151      	lsls	r1, r2, #5
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	440a      	add	r2, r1
 80093b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	e02b      	b.n	8009416 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	db12      	blt.n	80093f6 <USB_EPSetStall+0xae>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00f      	beq.n	80093f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	0151      	lsls	r1, r2, #5
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	440a      	add	r2, r1
 80093ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	0151      	lsls	r1, r2, #5
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	440a      	add	r2, r1
 800940c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009414:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	785b      	ldrb	r3, [r3, #1]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d128      	bne.n	8009492 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	440a      	add	r2, r1
 8009456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800945e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	791b      	ldrb	r3, [r3, #4]
 8009464:	2b03      	cmp	r3, #3
 8009466:	d003      	beq.n	8009470 <USB_EPClearStall+0x4c>
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	791b      	ldrb	r3, [r3, #4]
 800946c:	2b02      	cmp	r3, #2
 800946e:	d138      	bne.n	80094e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	0151      	lsls	r1, r2, #5
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	440a      	add	r2, r1
 8009486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800948a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	e027      	b.n	80094e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	015a      	lsls	r2, r3, #5
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4413      	add	r3, r2
 800949a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	0151      	lsls	r1, r2, #5
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	440a      	add	r2, r1
 80094a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	791b      	ldrb	r3, [r3, #4]
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d003      	beq.n	80094c2 <USB_EPClearStall+0x9e>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	791b      	ldrb	r3, [r3, #4]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d10f      	bne.n	80094e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800950e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009512:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009524:	68f9      	ldr	r1, [r7, #12]
 8009526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800952a:	4313      	orrs	r3, r2
 800952c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009556:	f023 0303 	bic.w	r3, r3, #3
 800955a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800956a:	f023 0302 	bic.w	r3, r3, #2
 800956e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800957e:	b480      	push	{r7}
 8009580:	b085      	sub	sp, #20
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009598:	f023 0303 	bic.w	r3, r3, #3
 800959c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095ac:	f043 0302 	orr.w	r3, r3, #2
 80095b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	4013      	ands	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095d8:	68fb      	ldr	r3, [r7, #12]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b085      	sub	sp, #20
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	4013      	ands	r3, r2
 8009608:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	0c1b      	lsrs	r3, r3, #16
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800961a:	b480      	push	{r7}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009636:	69db      	ldr	r3, [r3, #28]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	4013      	ands	r3, r2
 800963c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	b29b      	uxth	r3, r3
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800964e:	b480      	push	{r7}
 8009650:	b085      	sub	sp, #20
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800965e:	78fb      	ldrb	r3, [r7, #3]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	4413      	add	r3, r2
 8009666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	4013      	ands	r3, r2
 800967a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800967c:	68bb      	ldr	r3, [r7, #8]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800968a:	b480      	push	{r7}
 800968c:	b087      	sub	sp, #28
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	f003 030f 	and.w	r3, r3, #15
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	fa22 f303 	lsr.w	r3, r2, r3
 80096ba:	01db      	lsls	r3, r3, #7
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	4013      	ands	r3, r2
 80096d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096d8:	68bb      	ldr	r3, [r7, #8]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	f003 0301 	and.w	r3, r3, #1
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
	...

08009704 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971e:	4619      	mov	r1, r3
 8009720:	4b09      	ldr	r3, [pc, #36]	; (8009748 <USB_ActivateSetup+0x44>)
 8009722:	4013      	ands	r3, r2
 8009724:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009738:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	fffff800 	.word	0xfffff800

0800974c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800974c:	b480      	push	{r7}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	460b      	mov	r3, r1
 8009756:	607a      	str	r2, [r7, #4]
 8009758:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	333c      	adds	r3, #60	; 0x3c
 8009762:	3304      	adds	r3, #4
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	4a26      	ldr	r2, [pc, #152]	; (8009804 <USB_EP0_OutStart+0xb8>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d90a      	bls.n	8009786 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800977c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009780:	d101      	bne.n	8009786 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e037      	b.n	80097f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978c:	461a      	mov	r2, r3
 800978e:	2300      	movs	r3, #0
 8009790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b4:	f043 0318 	orr.w	r3, r3, #24
 80097b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80097cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80097ce:	7afb      	ldrb	r3, [r7, #11]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d10f      	bne.n	80097f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80097f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	371c      	adds	r7, #28
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	4f54300a 	.word	0x4f54300a

08009808 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3301      	adds	r3, #1
 8009818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4a13      	ldr	r2, [pc, #76]	; (800986c <USB_CoreReset+0x64>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d901      	bls.n	8009826 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	e01b      	b.n	800985e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	daf2      	bge.n	8009814 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f043 0201 	orr.w	r2, r3, #1
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3301      	adds	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4a09      	ldr	r2, [pc, #36]	; (800986c <USB_CoreReset+0x64>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d901      	bls.n	8009850 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e006      	b.n	800985e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b01      	cmp	r3, #1
 800985a:	d0f0      	beq.n	800983e <USB_CoreReset+0x36>

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	00030d40 	.word	0x00030d40

08009870 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800987c:	f643 4050 	movw	r0, #15440	; 0x3c50
 8009880:	f002 fb2e 	bl	800bee0 <USBD_static_malloc>
 8009884:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	32b0      	adds	r2, #176	; 0xb0
 8009896:	2100      	movs	r1, #0
 8009898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800989c:	2302      	movs	r3, #2
 800989e:	e07e      	b.n	800999e <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	32b0      	adds	r2, #176	; 0xb0
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	32b0      	adds	r2, #176	; 0xb0
 80098ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	7c1b      	ldrb	r3, [r3, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10e      	bne.n	80098ea <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80098cc:	4b36      	ldr	r3, [pc, #216]	; (80099a8 <USBD_AUDIO_Init+0x138>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f003 020f 	and.w	r2, r3, #15
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	4613      	mov	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	440b      	add	r3, r1
 80098e0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80098e4:	2201      	movs	r2, #1
 80098e6:	801a      	strh	r2, [r3, #0]
 80098e8:	e00d      	b.n	8009906 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80098ea:	4b2f      	ldr	r3, [pc, #188]	; (80099a8 <USBD_AUDIO_Init+0x138>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	f003 020f 	and.w	r2, r3, #15
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8009902:	2201      	movs	r2, #1
 8009904:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8009906:	4b28      	ldr	r3, [pc, #160]	; (80099a8 <USBD_AUDIO_Init+0x138>)
 8009908:	7819      	ldrb	r1, [r3, #0]
 800990a:	23c0      	movs	r3, #192	; 0xc0
 800990c:	2201      	movs	r2, #1
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f002 f9c3 	bl	800bc9a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8009914:	4b24      	ldr	r3, [pc, #144]	; (80099a8 <USBD_AUDIO_Init+0x138>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f003 020f 	and.w	r2, r3, #15
 800991c:	6879      	ldr	r1, [r7, #4]
 800991e:	4613      	mov	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800992c:	2201      	movs	r2, #1
 800992e:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800993c:	2203      	movs	r2, #3
 800993e:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009948:	2200      	movs	r2, #0
 800994a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009954:	2200      	movs	r2, #0
 8009956:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	33b0      	adds	r3, #176	; 0xb0
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2200      	movs	r2, #0
 800997a:	2146      	movs	r1, #70	; 0x46
 800997c:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8009980:	4798      	blx	r3
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8009988:	2303      	movs	r3, #3
 800998a:	e008      	b.n	800999e <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <USBD_AUDIO_Init+0x138>)
 800998e:	7819      	ldrb	r1, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	1d1a      	adds	r2, r3, #4
 8009994:	23c0      	movs	r3, #192	; 0xc0
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f002 fa6e 	bl	800be78 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	240000c2 	.word	0x240000c2

080099ac <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 80099b8:	4b28      	ldr	r3, [pc, #160]	; (8009a5c <USBD_AUDIO_DeInit+0xb0>)
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f002 f991 	bl	800bce6 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 80099c4:	4b25      	ldr	r3, [pc, #148]	; (8009a5c <USBD_AUDIO_DeInit+0xb0>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 020f 	and.w	r2, r3, #15
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	440b      	add	r3, r1
 80099d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099dc:	2200      	movs	r2, #0
 80099de:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 80099e0:	4b1e      	ldr	r3, [pc, #120]	; (8009a5c <USBD_AUDIO_DeInit+0xb0>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f003 020f 	and.w	r2, r3, #15
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80099f8:	2200      	movs	r2, #0
 80099fa:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	32b0      	adds	r2, #176	; 0xb0
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d020      	beq.n	8009a50 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	33b0      	adds	r3, #176	; 0xb0
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2000      	movs	r0, #0
 8009a22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	32b0      	adds	r2, #176	; 0xb0
 8009a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f002 fa62 	bl	800befc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	32b0      	adds	r2, #176	; 0xb0
 8009a42:	2100      	movs	r1, #0
 8009a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	240000c2 	.word	0x240000c2

08009a60 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	32b0      	adds	r2, #176	; 0xb0
 8009a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a80:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d101      	bne.n	8009a8c <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e0c1      	b.n	8009c10 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01a      	beq.n	8009ace <USBD_AUDIO_Setup+0x6e>
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	f040 80b1 	bne.w	8009c00 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d006      	beq.n	8009ab4 <USBD_AUDIO_Setup+0x54>
 8009aa6:	2b81      	cmp	r3, #129	; 0x81
 8009aa8:	d109      	bne.n	8009abe <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f9d7 	bl	8009e60 <AUDIO_REQ_GetCurrent>
          break;
 8009ab2:	e00b      	b.n	8009acc <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f9fe 	bl	8009eb8 <AUDIO_REQ_SetCurrent>
          break;
 8009abc:	e006      	b.n	8009acc <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 fc7e 	bl	800b3c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	75fb      	strb	r3, [r7, #23]
          break;
 8009aca:	bf00      	nop
      }
      break;
 8009acc:	e09f      	b.n	8009c0e <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	785b      	ldrb	r3, [r3, #1]
 8009ad2:	2b0b      	cmp	r3, #11
 8009ad4:	f200 8089 	bhi.w	8009bea <USBD_AUDIO_Setup+0x18a>
 8009ad8:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <USBD_AUDIO_Setup+0x80>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009b11 	.word	0x08009b11
 8009ae4:	08009bf9 	.word	0x08009bf9
 8009ae8:	08009beb 	.word	0x08009beb
 8009aec:	08009beb 	.word	0x08009beb
 8009af0:	08009beb 	.word	0x08009beb
 8009af4:	08009beb 	.word	0x08009beb
 8009af8:	08009b3b 	.word	0x08009b3b
 8009afc:	08009beb 	.word	0x08009beb
 8009b00:	08009beb 	.word	0x08009beb
 8009b04:	08009beb 	.word	0x08009beb
 8009b08:	08009b83 	.word	0x08009b83
 8009b0c:	08009bab 	.word	0x08009bab
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d107      	bne.n	8009b2c <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b1c:	f107 0308 	add.w	r3, r7, #8
 8009b20:	2202      	movs	r2, #2
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 fcbd 	bl	800b4a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b2a:	e068      	b.n	8009bfe <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 fc47 	bl	800b3c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b34:	2303      	movs	r3, #3
 8009b36:	75fb      	strb	r3, [r7, #23]
          break;
 8009b38:	e061      	b.n	8009bfe <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	885b      	ldrh	r3, [r3, #2]
 8009b3e:	0a1b      	lsrs	r3, r3, #8
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b21      	cmp	r3, #33	; 0x21
 8009b44:	d15a      	bne.n	8009bfc <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fa21 	bl	8009f94 <USBD_AUDIO_GetAudioHeaderDesc>
 8009b52:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00c      	beq.n	8009b74 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	88db      	ldrh	r3, [r3, #6]
 8009b5e:	2b09      	cmp	r3, #9
 8009b60:	bf28      	it	cs
 8009b62:	2309      	movcs	r3, #9
 8009b64:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b66:	897b      	ldrh	r3, [r7, #10]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 fc99 	bl	800b4a4 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8009b72:	e043      	b.n	8009bfc <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 fc23 	bl	800b3c2 <USBD_CtlError>
              ret = USBD_FAIL;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	75fb      	strb	r3, [r7, #23]
          break;
 8009b80:	e03c      	b.n	8009bfc <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d106      	bne.n	8009b9c <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2201      	movs	r2, #1
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f001 fc85 	bl	800b4a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b9a:	e030      	b.n	8009bfe <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 fc0f 	bl	800b3c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	75fb      	strb	r3, [r7, #23]
          break;
 8009ba8:	e029      	b.n	8009bfe <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d112      	bne.n	8009bdc <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	885b      	ldrh	r3, [r3, #2]
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d806      	bhi.n	8009bce <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	885b      	ldrh	r3, [r3, #2]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bcc:	e017      	b.n	8009bfe <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 fbf6 	bl	800b3c2 <USBD_CtlError>
              ret = USBD_FAIL;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8009bda:	e010      	b.n	8009bfe <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f001 fbef 	bl	800b3c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009be4:	2303      	movs	r3, #3
 8009be6:	75fb      	strb	r3, [r7, #23]
          break;
 8009be8:	e009      	b.n	8009bfe <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f001 fbe8 	bl	800b3c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	75fb      	strb	r3, [r7, #23]
          break;
 8009bf6:	e002      	b.n	8009bfe <USBD_AUDIO_Setup+0x19e>
          break;
 8009bf8:	bf00      	nop
 8009bfa:	e008      	b.n	8009c0e <USBD_AUDIO_Setup+0x1ae>
          break;
 8009bfc:	bf00      	nop
      }
      break;
 8009bfe:	e006      	b.n	8009c0e <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 fbdd 	bl	800b3c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	226d      	movs	r2, #109	; 0x6d
 8009c24:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8009c26:	4b03      	ldr	r3, [pc, #12]	; (8009c34 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	24000048 	.word	0x24000048

08009c38 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	32b0      	adds	r2, #176	; 0xb0
 8009c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c68:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e02a      	b.n	8009cca <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009c7a:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d122      	bne.n	8009cc8 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009c88:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d11b      	bne.n	8009cc8 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	33b0      	adds	r3, #176	; 0xb0
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8009ca8:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 8009cac:	4610      	mov	r0, r2
 8009cae:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
	...

08009d34 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	32b0      	adds	r2, #176	; 0xb0
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e07c      	b.n	8009e54 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 8009d5a:	4b40      	ldr	r3, [pc, #256]	; (8009e5c <USBD_AUDIO_DataOut+0x128>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d176      	bne.n	8009e52 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f002 f8a6 	bl	800beba <USBD_LL_GetRxDataSize>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	33b0      	adds	r3, #176	; 0xb0
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8009d8a:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 8009d8e:	4611      	mov	r1, r2
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	440a      	add	r2, r1
 8009d94:	1d10      	adds	r0, r2, #4
 8009d96:	8979      	ldrh	r1, [r7, #10]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009da2:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 8009da6:	897b      	ldrh	r3, [r7, #10]
 8009da8:	4413      	add	r3, r2
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009db2:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009dbc:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8009dc0:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8009dc4:	d121      	bne.n	8009e0a <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009dd8:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d114      	bne.n	8009e0a <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	33b0      	adds	r3, #176	; 0xb0
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	1d10      	adds	r0, r2, #4
 8009df6:	2201      	movs	r2, #1
 8009df8:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8009dfc:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009e10:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10d      	bne.n	8009e34 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009e1e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8009e22:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8009e26:	d105      	bne.n	8009e34 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8009e34:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <USBD_AUDIO_DataOut+0x128>)
 8009e36:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009e3e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8009e42:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	1d1a      	adds	r2, r3, #4
 8009e4a:	23c0      	movs	r3, #192	; 0xc0
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f002 f813 	bl	800be78 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	240000c2 	.word	0x240000c2

08009e60 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	32b0      	adds	r2, #176	; 0xb0
 8009e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e78:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d017      	beq.n	8009eb0 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8009e86:	4413      	add	r3, r2
 8009e88:	2240      	movs	r2, #64	; 0x40
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f002 f895 	bl	800bfbc <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8009e98:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	88d2      	ldrh	r2, [r2, #6]
 8009e9e:	2a40      	cmp	r2, #64	; 0x40
 8009ea0:	bf28      	it	cs
 8009ea2:	2240      	movcs	r2, #64	; 0x40
 8009ea4:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f001 fafb 	bl	800b4a4 <USBD_CtlSendData>
 8009eae:	e000      	b.n	8009eb2 <AUDIO_REQ_GetCurrent+0x52>
    return;
 8009eb0:	bf00      	nop
}
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	32b0      	adds	r2, #176	; 0xb0
 8009ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed0:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d02f      	beq.n	8009f38 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	88db      	ldrh	r3, [r3, #6]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d02c      	beq.n	8009f3a <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	88db      	ldrh	r3, [r3, #6]
 8009ef0:	2b3f      	cmp	r3, #63	; 0x3f
 8009ef2:	d803      	bhi.n	8009efc <AUDIO_REQ_SetCurrent+0x44>
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	88db      	ldrh	r3, [r3, #6]
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	e000      	b.n	8009efe <AUDIO_REQ_SetCurrent+0x46>
 8009efc:	2240      	movs	r2, #64	; 0x40
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009f04:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	889b      	ldrh	r3, [r3, #4]
 8009f0c:	0a1b      	lsrs	r3, r3, #8
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8009f18:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8009f22:	4413      	add	r3, r2
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8009f2a:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 fae3 	bl	800b4fc <USBD_CtlPrepareRx>
 8009f36:	e000      	b.n	8009f3a <AUDIO_REQ_SetCurrent+0x82>
    return;
 8009f38:	bf00      	nop
  }
}
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	220a      	movs	r2, #10
 8009f4c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8009f4e:	4b03      	ldr	r3, [pc, #12]	; (8009f5c <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	240000b8 	.word	0x240000b8

08009f60 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e009      	b.n	8009f88 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	33b0      	adds	r3, #176	; 0xb0
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	885b      	ldrh	r3, [r3, #2]
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d91c      	bls.n	8009ff2 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009fc0:	e011      	b.n	8009fe6 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009fc2:	f107 030a 	add.w	r3, r7, #10
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6978      	ldr	r0, [r7, #20]
 8009fca:	f000 fbfc 	bl	800a7c6 <USBD_GetNextDesc>
 8009fce:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	785b      	ldrb	r3, [r3, #1]
 8009fd4:	2b24      	cmp	r3, #36	; 0x24
 8009fd6:	d106      	bne.n	8009fe6 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d102      	bne.n	8009fe6 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	613b      	str	r3, [r7, #16]
        break;
 8009fe4:	e005      	b.n	8009ff2 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	885b      	ldrh	r3, [r3, #2]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	897b      	ldrh	r3, [r7, #10]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d8e7      	bhi.n	8009fc2 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 8009ff2:	693b      	ldr	r3, [r7, #16]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	4613      	mov	r3, r2
 800a008:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800a010:	4817      	ldr	r0, [pc, #92]	; (800a070 <USBD_Init+0x74>)
 800a012:	f001 ffdb 	bl	800bfcc <iprintf>
 800a016:	4817      	ldr	r0, [pc, #92]	; (800a074 <USBD_Init+0x78>)
 800a018:	f001 ffd8 	bl	800bfcc <iprintf>
 800a01c:	200a      	movs	r0, #10
 800a01e:	f001 ffed 	bl	800bffc <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a022:	2303      	movs	r3, #3
 800a024:	e01f      	b.n	800a066 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d003      	beq.n	800a04c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	79fa      	ldrb	r2, [r7, #7]
 800a058:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f001 fdb2 	bl	800bbc4 <USBD_LL_Init>
 800a060:	4603      	mov	r3, r0
 800a062:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a064:	7dfb      	ldrb	r3, [r7, #23]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	0800d0c0 	.word	0x0800d0c0
 800a074:	0800d0c8 	.word	0x0800d0c8

0800a078 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800a08c:	481a      	ldr	r0, [pc, #104]	; (800a0f8 <USBD_RegisterClass+0x80>)
 800a08e:	f001 ff9d 	bl	800bfcc <iprintf>
 800a092:	481a      	ldr	r0, [pc, #104]	; (800a0fc <USBD_RegisterClass+0x84>)
 800a094:	f001 ff9a 	bl	800bfcc <iprintf>
 800a098:	200a      	movs	r0, #10
 800a09a:	f001 ffaf 	bl	800bffc <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e025      	b.n	800a0ee <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	32ae      	adds	r2, #174	; 0xae
 800a0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00f      	beq.n	800a0de <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	32ae      	adds	r2, #174	; 0xae
 800a0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	f107 020e 	add.w	r2, r7, #14
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	4798      	blx	r3
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	0800d0c0 	.word	0x0800d0c0
 800a0fc:	0800d0e0 	.word	0x0800d0e0

0800a100 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f001 fdab 	bl	800bc64 <USBD_LL_Start>
 800a10e:	4603      	mov	r3, r0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a120:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	460b      	mov	r3, r1
 800a138:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a144:	2b00      	cmp	r3, #0
 800a146:	d009      	beq.n	800a15c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	78fa      	ldrb	r2, [r7, #3]
 800a152:	4611      	mov	r1, r2
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	4798      	blx	r3
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	460b      	mov	r3, r1
 800a170:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	4611      	mov	r1, r2
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	4798      	blx	r3
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a18c:	2303      	movs	r3, #3
 800a18e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a190:	7bfb      	ldrb	r3, [r7, #15]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f001 f8ce 	bl	800b34e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1ce:	f003 031f 	and.w	r3, r3, #31
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d01a      	beq.n	800a20c <USBD_LL_SetupStage+0x72>
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d822      	bhi.n	800a220 <USBD_LL_SetupStage+0x86>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <USBD_LL_SetupStage+0x4a>
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d00a      	beq.n	800a1f8 <USBD_LL_SetupStage+0x5e>
 800a1e2:	e01d      	b.n	800a220 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fb25 	bl	800a83c <USBD_StdDevReq>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f6:	e020      	b.n	800a23a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fb8d 	bl	800a920 <USBD_StdItfReq>
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]
      break;
 800a20a:	e016      	b.n	800a23a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fbef 	bl	800a9f8 <USBD_StdEPReq>
 800a21a:	4603      	mov	r3, r0
 800a21c:	73fb      	strb	r3, [r7, #15]
      break;
 800a21e:	e00c      	b.n	800a23a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a226:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f001 fd78 	bl	800bd24 <USBD_LL_StallEP>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]
      break;
 800a238:	bf00      	nop
  }

  return ret;
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	460b      	mov	r3, r1
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a256:	7afb      	ldrb	r3, [r7, #11]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d16e      	bne.n	800a33a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a262:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	f040 8098 	bne.w	800a3a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d913      	bls.n	800a2a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	689a      	ldr	r2, [r3, #8]
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	1ad2      	subs	r2, r2, r3
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	4293      	cmp	r3, r2
 800a294:	bf28      	it	cs
 800a296:	4613      	movcs	r3, r2
 800a298:	461a      	mov	r2, r3
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f001 f94a 	bl	800b536 <USBD_CtlContinueRx>
 800a2a2:	e07d      	b.n	800a3a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2aa:	f003 031f 	and.w	r3, r3, #31
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d014      	beq.n	800a2dc <USBD_LL_DataOutStage+0x98>
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d81d      	bhi.n	800a2f2 <USBD_LL_DataOutStage+0xae>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d002      	beq.n	800a2c0 <USBD_LL_DataOutStage+0x7c>
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d003      	beq.n	800a2c6 <USBD_LL_DataOutStage+0x82>
 800a2be:	e018      	b.n	800a2f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	75bb      	strb	r3, [r7, #22]
            break;
 800a2c4:	e018      	b.n	800a2f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f000 fa5e 	bl	800a792 <USBD_CoreFindIF>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	75bb      	strb	r3, [r7, #22]
            break;
 800a2da:	e00d      	b.n	800a2f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 fa60 	bl	800a7ac <USBD_CoreFindEP>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	75bb      	strb	r3, [r7, #22]
            break;
 800a2f0:	e002      	b.n	800a2f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	75bb      	strb	r3, [r7, #22]
            break;
 800a2f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a2f8:	7dbb      	ldrb	r3, [r7, #22]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d119      	bne.n	800a332 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b03      	cmp	r3, #3
 800a308:	d113      	bne.n	800a332 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a30a:	7dba      	ldrb	r2, [r7, #22]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	32ae      	adds	r2, #174	; 0xae
 800a310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a31a:	7dba      	ldrb	r2, [r7, #22]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a322:	7dba      	ldrb	r2, [r7, #22]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	32ae      	adds	r2, #174	; 0xae
 800a328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f001 f910 	bl	800b558 <USBD_CtlSendStatus>
 800a338:	e032      	b.n	800a3a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a33a:	7afb      	ldrb	r3, [r7, #11]
 800a33c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a340:	b2db      	uxtb	r3, r3
 800a342:	4619      	mov	r1, r3
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f000 fa31 	bl	800a7ac <USBD_CoreFindEP>
 800a34a:	4603      	mov	r3, r0
 800a34c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a34e:	7dbb      	ldrb	r3, [r7, #22]
 800a350:	2bff      	cmp	r3, #255	; 0xff
 800a352:	d025      	beq.n	800a3a0 <USBD_LL_DataOutStage+0x15c>
 800a354:	7dbb      	ldrb	r3, [r7, #22]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d122      	bne.n	800a3a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b03      	cmp	r3, #3
 800a364:	d117      	bne.n	800a396 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a366:	7dba      	ldrb	r2, [r7, #22]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	32ae      	adds	r2, #174	; 0xae
 800a36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00f      	beq.n	800a396 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a376:	7dba      	ldrb	r2, [r7, #22]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a37e:	7dba      	ldrb	r2, [r7, #22]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	32ae      	adds	r2, #174	; 0xae
 800a384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	7afa      	ldrb	r2, [r7, #11]
 800a38c:	4611      	mov	r1, r2
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	4798      	blx	r3
 800a392:	4603      	mov	r3, r0
 800a394:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a396:	7dfb      	ldrb	r3, [r7, #23]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	e000      	b.n	800a3a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b086      	sub	sp, #24
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	607a      	str	r2, [r7, #4]
 800a3b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a3b8:	7afb      	ldrb	r3, [r7, #11]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d16f      	bne.n	800a49e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3314      	adds	r3, #20
 800a3c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d15a      	bne.n	800a484 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d914      	bls.n	800a404 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	1ad2      	subs	r2, r2, r3
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f001 f872 	bl	800b4da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f001 fd3b 	bl	800be78 <USBD_LL_PrepareReceive>
 800a402:	e03f      	b.n	800a484 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d11c      	bne.n	800a44a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a418:	429a      	cmp	r2, r3
 800a41a:	d316      	bcc.n	800a44a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a426:	429a      	cmp	r2, r3
 800a428:	d20f      	bcs.n	800a44a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a42a:	2200      	movs	r2, #0
 800a42c:	2100      	movs	r1, #0
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f001 f853 	bl	800b4da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a43c:	2300      	movs	r3, #0
 800a43e:	2200      	movs	r2, #0
 800a440:	2100      	movs	r1, #0
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f001 fd18 	bl	800be78 <USBD_LL_PrepareReceive>
 800a448:	e01c      	b.n	800a484 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b03      	cmp	r3, #3
 800a454:	d10f      	bne.n	800a476 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d009      	beq.n	800a476 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a476:	2180      	movs	r1, #128	; 0x80
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f001 fc53 	bl	800bd24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f001 f87d 	bl	800b57e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d03a      	beq.n	800a504 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff fe42 	bl	800a118 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a49c:	e032      	b.n	800a504 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 f97f 	bl	800a7ac <USBD_CoreFindEP>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
 800a4b4:	2bff      	cmp	r3, #255	; 0xff
 800a4b6:	d025      	beq.n	800a504 <USBD_LL_DataInStage+0x15a>
 800a4b8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d122      	bne.n	800a504 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	d11c      	bne.n	800a504 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a4ca:	7dfa      	ldrb	r2, [r7, #23]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	32ae      	adds	r2, #174	; 0xae
 800a4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d014      	beq.n	800a504 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a4da:	7dfa      	ldrb	r2, [r7, #23]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a4e2:	7dfa      	ldrb	r2, [r7, #23]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	32ae      	adds	r2, #174	; 0xae
 800a4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	7afa      	ldrb	r2, [r7, #11]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	4798      	blx	r3
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a4fa:	7dbb      	ldrb	r3, [r7, #22]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a500:	7dbb      	ldrb	r3, [r7, #22]
 800a502:	e000      	b.n	800a506 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a546:	2b00      	cmp	r3, #0
 800a548:	d014      	beq.n	800a574 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00e      	beq.n	800a574 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	6852      	ldr	r2, [r2, #4]
 800a562:	b2d2      	uxtb	r2, r2
 800a564:	4611      	mov	r1, r2
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	4798      	blx	r3
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a570:	2303      	movs	r3, #3
 800a572:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a574:	2340      	movs	r3, #64	; 0x40
 800a576:	2200      	movs	r2, #0
 800a578:	2100      	movs	r1, #0
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f001 fb8d 	bl	800bc9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2240      	movs	r2, #64	; 0x40
 800a58c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a590:	2340      	movs	r3, #64	; 0x40
 800a592:	2200      	movs	r2, #0
 800a594:	2180      	movs	r1, #128	; 0x80
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f001 fb7f 	bl	800bc9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2240      	movs	r2, #64	; 0x40
 800a5a6:	621a      	str	r2, [r3, #32]

  return ret;
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b083      	sub	sp, #12
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	78fa      	ldrb	r2, [r7, #3]
 800a5c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2204      	movs	r2, #4
 800a5ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b04      	cmp	r3, #4
 800a610:	d106      	bne.n	800a620 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b082      	sub	sp, #8
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b03      	cmp	r3, #3
 800a640:	d110      	bne.n	800a664 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a652:	69db      	ldr	r3, [r3, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d005      	beq.n	800a664 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65e:	69db      	ldr	r3, [r3, #28]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	32ae      	adds	r2, #174	; 0xae
 800a684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e01c      	b.n	800a6ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d115      	bne.n	800a6c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	32ae      	adds	r2, #174	; 0xae
 800a6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00b      	beq.n	800a6c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	32ae      	adds	r2, #174	; 0xae
 800a6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	78fa      	ldrb	r2, [r7, #3]
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	32ae      	adds	r2, #174	; 0xae
 800a6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e01c      	b.n	800a72e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d115      	bne.n	800a72c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32ae      	adds	r2, #174	; 0xae
 800a70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00b      	beq.n	800a72c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	32ae      	adds	r2, #174	; 0xae
 800a71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	78fa      	ldrb	r2, [r7, #3]
 800a726:	4611      	mov	r1, r2
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00e      	beq.n	800a788 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	6852      	ldr	r2, [r2, #4]
 800a776:	b2d2      	uxtb	r2, r2
 800a778:	4611      	mov	r1, r2
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	4798      	blx	r3
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a784:	2303      	movs	r3, #3
 800a786:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	460b      	mov	r3, r1
 800a79c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a79e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b085      	sub	sp, #20
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	881a      	ldrh	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	4413      	add	r3, r2
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a800:	b480      	push	{r7}
 800a802:	b087      	sub	sp, #28
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	3301      	adds	r3, #1
 800a816:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a81e:	8a3b      	ldrh	r3, [r7, #16]
 800a820:	021b      	lsls	r3, r3, #8
 800a822:	b21a      	sxth	r2, r3
 800a824:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a828:	4313      	orrs	r3, r2
 800a82a:	b21b      	sxth	r3, r3
 800a82c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a82e:	89fb      	ldrh	r3, [r7, #14]
}
 800a830:	4618      	mov	r0, r3
 800a832:	371c      	adds	r7, #28
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a852:	2b40      	cmp	r3, #64	; 0x40
 800a854:	d005      	beq.n	800a862 <USBD_StdDevReq+0x26>
 800a856:	2b40      	cmp	r3, #64	; 0x40
 800a858:	d857      	bhi.n	800a90a <USBD_StdDevReq+0xce>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00f      	beq.n	800a87e <USBD_StdDevReq+0x42>
 800a85e:	2b20      	cmp	r3, #32
 800a860:	d153      	bne.n	800a90a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	32ae      	adds	r2, #174	; 0xae
 800a86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	4798      	blx	r3
 800a878:	4603      	mov	r3, r0
 800a87a:	73fb      	strb	r3, [r7, #15]
      break;
 800a87c:	e04a      	b.n	800a914 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	785b      	ldrb	r3, [r3, #1]
 800a882:	2b09      	cmp	r3, #9
 800a884:	d83b      	bhi.n	800a8fe <USBD_StdDevReq+0xc2>
 800a886:	a201      	add	r2, pc, #4	; (adr r2, 800a88c <USBD_StdDevReq+0x50>)
 800a888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88c:	0800a8e1 	.word	0x0800a8e1
 800a890:	0800a8f5 	.word	0x0800a8f5
 800a894:	0800a8ff 	.word	0x0800a8ff
 800a898:	0800a8eb 	.word	0x0800a8eb
 800a89c:	0800a8ff 	.word	0x0800a8ff
 800a8a0:	0800a8bf 	.word	0x0800a8bf
 800a8a4:	0800a8b5 	.word	0x0800a8b5
 800a8a8:	0800a8ff 	.word	0x0800a8ff
 800a8ac:	0800a8d7 	.word	0x0800a8d7
 800a8b0:	0800a8c9 	.word	0x0800a8c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fa3c 	bl	800ad34 <USBD_GetDescriptor>
          break;
 800a8bc:	e024      	b.n	800a908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fba1 	bl	800b008 <USBD_SetAddress>
          break;
 800a8c6:	e01f      	b.n	800a908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fbe0 	bl	800b090 <USBD_SetConfig>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73fb      	strb	r3, [r7, #15]
          break;
 800a8d4:	e018      	b.n	800a908 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fc83 	bl	800b1e4 <USBD_GetConfig>
          break;
 800a8de:	e013      	b.n	800a908 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a8e0:	6839      	ldr	r1, [r7, #0]
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fcb4 	bl	800b250 <USBD_GetStatus>
          break;
 800a8e8:	e00e      	b.n	800a908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fce3 	bl	800b2b8 <USBD_SetFeature>
          break;
 800a8f2:	e009      	b.n	800a908 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fd07 	bl	800b30a <USBD_ClrFeature>
          break;
 800a8fc:	e004      	b.n	800a908 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fd5e 	bl	800b3c2 <USBD_CtlError>
          break;
 800a906:	bf00      	nop
      }
      break;
 800a908:	e004      	b.n	800a914 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fd58 	bl	800b3c2 <USBD_CtlError>
      break;
 800a912:	bf00      	nop
  }

  return ret;
 800a914:	7bfb      	ldrb	r3, [r7, #15]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop

0800a920 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a936:	2b40      	cmp	r3, #64	; 0x40
 800a938:	d005      	beq.n	800a946 <USBD_StdItfReq+0x26>
 800a93a:	2b40      	cmp	r3, #64	; 0x40
 800a93c:	d852      	bhi.n	800a9e4 <USBD_StdItfReq+0xc4>
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <USBD_StdItfReq+0x26>
 800a942:	2b20      	cmp	r3, #32
 800a944:	d14e      	bne.n	800a9e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	3b01      	subs	r3, #1
 800a950:	2b02      	cmp	r3, #2
 800a952:	d840      	bhi.n	800a9d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	889b      	ldrh	r3, [r3, #4]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d836      	bhi.n	800a9cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	889b      	ldrh	r3, [r3, #4]
 800a962:	b2db      	uxtb	r3, r3
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff ff13 	bl	800a792 <USBD_CoreFindIF>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2bff      	cmp	r3, #255	; 0xff
 800a974:	d01d      	beq.n	800a9b2 <USBD_StdItfReq+0x92>
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d11a      	bne.n	800a9b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a97c:	7bba      	ldrb	r2, [r7, #14]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	32ae      	adds	r2, #174	; 0xae
 800a982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00f      	beq.n	800a9ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a98c:	7bba      	ldrb	r2, [r7, #14]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a994:	7bba      	ldrb	r2, [r7, #14]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	32ae      	adds	r2, #174	; 0xae
 800a99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	4798      	blx	r3
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a9aa:	e004      	b.n	800a9b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a9b0:	e001      	b.n	800a9b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	88db      	ldrh	r3, [r3, #6]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d110      	bne.n	800a9e0 <USBD_StdItfReq+0xc0>
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10d      	bne.n	800a9e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fdc7 	bl	800b558 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9ca:	e009      	b.n	800a9e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fcf7 	bl	800b3c2 <USBD_CtlError>
          break;
 800a9d4:	e004      	b.n	800a9e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fcf2 	bl	800b3c2 <USBD_CtlError>
          break;
 800a9de:	e000      	b.n	800a9e2 <USBD_StdItfReq+0xc2>
          break;
 800a9e0:	bf00      	nop
      }
      break;
 800a9e2:	e004      	b.n	800a9ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fceb 	bl	800b3c2 <USBD_CtlError>
      break;
 800a9ec:	bf00      	nop
  }

  return ret;
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	889b      	ldrh	r3, [r3, #4]
 800aa0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa14:	2b40      	cmp	r3, #64	; 0x40
 800aa16:	d007      	beq.n	800aa28 <USBD_StdEPReq+0x30>
 800aa18:	2b40      	cmp	r3, #64	; 0x40
 800aa1a:	f200 817f 	bhi.w	800ad1c <USBD_StdEPReq+0x324>
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d02a      	beq.n	800aa78 <USBD_StdEPReq+0x80>
 800aa22:	2b20      	cmp	r3, #32
 800aa24:	f040 817a 	bne.w	800ad1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7ff febd 	bl	800a7ac <USBD_CoreFindEP>
 800aa32:	4603      	mov	r3, r0
 800aa34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa36:	7b7b      	ldrb	r3, [r7, #13]
 800aa38:	2bff      	cmp	r3, #255	; 0xff
 800aa3a:	f000 8174 	beq.w	800ad26 <USBD_StdEPReq+0x32e>
 800aa3e:	7b7b      	ldrb	r3, [r7, #13]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 8170 	bne.w	800ad26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aa46:	7b7a      	ldrb	r2, [r7, #13]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aa4e:	7b7a      	ldrb	r2, [r7, #13]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	32ae      	adds	r2, #174	; 0xae
 800aa54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f000 8163 	beq.w	800ad26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa60:	7b7a      	ldrb	r2, [r7, #13]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	32ae      	adds	r2, #174	; 0xae
 800aa66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	4798      	blx	r3
 800aa72:	4603      	mov	r3, r0
 800aa74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa76:	e156      	b.n	800ad26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	785b      	ldrb	r3, [r3, #1]
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d008      	beq.n	800aa92 <USBD_StdEPReq+0x9a>
 800aa80:	2b03      	cmp	r3, #3
 800aa82:	f300 8145 	bgt.w	800ad10 <USBD_StdEPReq+0x318>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 809b 	beq.w	800abc2 <USBD_StdEPReq+0x1ca>
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d03c      	beq.n	800ab0a <USBD_StdEPReq+0x112>
 800aa90:	e13e      	b.n	800ad10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d002      	beq.n	800aaa4 <USBD_StdEPReq+0xac>
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d016      	beq.n	800aad0 <USBD_StdEPReq+0xd8>
 800aaa2:	e02c      	b.n	800aafe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00d      	beq.n	800aac6 <USBD_StdEPReq+0xce>
 800aaaa:	7bbb      	ldrb	r3, [r7, #14]
 800aaac:	2b80      	cmp	r3, #128	; 0x80
 800aaae:	d00a      	beq.n	800aac6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 f935 	bl	800bd24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaba:	2180      	movs	r1, #128	; 0x80
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 f931 	bl	800bd24 <USBD_LL_StallEP>
 800aac2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aac4:	e020      	b.n	800ab08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fc7a 	bl	800b3c2 <USBD_CtlError>
              break;
 800aace:	e01b      	b.n	800ab08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	885b      	ldrh	r3, [r3, #2]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10e      	bne.n	800aaf6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00b      	beq.n	800aaf6 <USBD_StdEPReq+0xfe>
 800aade:	7bbb      	ldrb	r3, [r7, #14]
 800aae0:	2b80      	cmp	r3, #128	; 0x80
 800aae2:	d008      	beq.n	800aaf6 <USBD_StdEPReq+0xfe>
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	88db      	ldrh	r3, [r3, #6]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d104      	bne.n	800aaf6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f001 f917 	bl	800bd24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fd2e 	bl	800b558 <USBD_CtlSendStatus>

              break;
 800aafc:	e004      	b.n	800ab08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fc5e 	bl	800b3c2 <USBD_CtlError>
              break;
 800ab06:	bf00      	nop
          }
          break;
 800ab08:	e107      	b.n	800ad1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d002      	beq.n	800ab1c <USBD_StdEPReq+0x124>
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d016      	beq.n	800ab48 <USBD_StdEPReq+0x150>
 800ab1a:	e04b      	b.n	800abb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00d      	beq.n	800ab3e <USBD_StdEPReq+0x146>
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	2b80      	cmp	r3, #128	; 0x80
 800ab26:	d00a      	beq.n	800ab3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 f8f9 	bl	800bd24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab32:	2180      	movs	r1, #128	; 0x80
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 f8f5 	bl	800bd24 <USBD_LL_StallEP>
 800ab3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab3c:	e040      	b.n	800abc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fc3e 	bl	800b3c2 <USBD_CtlError>
              break;
 800ab46:	e03b      	b.n	800abc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	885b      	ldrh	r3, [r3, #2]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d136      	bne.n	800abbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d004      	beq.n	800ab64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 f8ff 	bl	800bd62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fcf7 	bl	800b558 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff fe1c 	bl	800a7ac <USBD_CoreFindEP>
 800ab74:	4603      	mov	r3, r0
 800ab76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab78:	7b7b      	ldrb	r3, [r7, #13]
 800ab7a:	2bff      	cmp	r3, #255	; 0xff
 800ab7c:	d01f      	beq.n	800abbe <USBD_StdEPReq+0x1c6>
 800ab7e:	7b7b      	ldrb	r3, [r7, #13]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d11c      	bne.n	800abbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab84:	7b7a      	ldrb	r2, [r7, #13]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab8c:	7b7a      	ldrb	r2, [r7, #13]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	32ae      	adds	r2, #174	; 0xae
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d010      	beq.n	800abbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab9c:	7b7a      	ldrb	r2, [r7, #13]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	32ae      	adds	r2, #174	; 0xae
 800aba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	4798      	blx	r3
 800abae:	4603      	mov	r3, r0
 800abb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800abb2:	e004      	b.n	800abbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fc03 	bl	800b3c2 <USBD_CtlError>
              break;
 800abbc:	e000      	b.n	800abc0 <USBD_StdEPReq+0x1c8>
              break;
 800abbe:	bf00      	nop
          }
          break;
 800abc0:	e0ab      	b.n	800ad1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d002      	beq.n	800abd4 <USBD_StdEPReq+0x1dc>
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d032      	beq.n	800ac38 <USBD_StdEPReq+0x240>
 800abd2:	e097      	b.n	800ad04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d007      	beq.n	800abea <USBD_StdEPReq+0x1f2>
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	2b80      	cmp	r3, #128	; 0x80
 800abde:	d004      	beq.n	800abea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fbed 	bl	800b3c2 <USBD_CtlError>
                break;
 800abe8:	e091      	b.n	800ad0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	da0b      	bge.n	800ac0a <USBD_StdEPReq+0x212>
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	3310      	adds	r3, #16
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	4413      	add	r3, r2
 800ac06:	3304      	adds	r3, #4
 800ac08:	e00b      	b.n	800ac22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
 800ac0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	4413      	add	r3, r2
 800ac20:	3304      	adds	r3, #4
 800ac22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2200      	movs	r2, #0
 800ac28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2202      	movs	r2, #2
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fc37 	bl	800b4a4 <USBD_CtlSendData>
              break;
 800ac36:	e06a      	b.n	800ad0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	da11      	bge.n	800ac64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
 800ac42:	f003 020f 	and.w	r2, r3, #15
 800ac46:	6879      	ldr	r1, [r7, #4]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	440b      	add	r3, r1
 800ac52:	3324      	adds	r3, #36	; 0x24
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d117      	bne.n	800ac8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fbb0 	bl	800b3c2 <USBD_CtlError>
                  break;
 800ac62:	e054      	b.n	800ad0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	f003 020f 	and.w	r2, r3, #15
 800ac6a:	6879      	ldr	r1, [r7, #4]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	440b      	add	r3, r1
 800ac76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac7a:	881b      	ldrh	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d104      	bne.n	800ac8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fb9d 	bl	800b3c2 <USBD_CtlError>
                  break;
 800ac88:	e041      	b.n	800ad0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	da0b      	bge.n	800acaa <USBD_StdEPReq+0x2b2>
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
 800ac94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac98:	4613      	mov	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	3310      	adds	r3, #16
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	4413      	add	r3, r2
 800aca6:	3304      	adds	r3, #4
 800aca8:	e00b      	b.n	800acc2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acaa:	7bbb      	ldrb	r3, [r7, #14]
 800acac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acb0:	4613      	mov	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	4413      	add	r3, r2
 800acc0:	3304      	adds	r3, #4
 800acc2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <USBD_StdEPReq+0x2d8>
 800acca:	7bbb      	ldrb	r3, [r7, #14]
 800accc:	2b80      	cmp	r3, #128	; 0x80
 800acce:	d103      	bne.n	800acd8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	e00e      	b.n	800acf6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f001 f85f 	bl	800bda0 <USBD_LL_IsStallEP>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d003      	beq.n	800acf0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	2201      	movs	r2, #1
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	e002      	b.n	800acf6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2202      	movs	r2, #2
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fbd1 	bl	800b4a4 <USBD_CtlSendData>
              break;
 800ad02:	e004      	b.n	800ad0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fb5b 	bl	800b3c2 <USBD_CtlError>
              break;
 800ad0c:	bf00      	nop
          }
          break;
 800ad0e:	e004      	b.n	800ad1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fb55 	bl	800b3c2 <USBD_CtlError>
          break;
 800ad18:	bf00      	nop
      }
      break;
 800ad1a:	e005      	b.n	800ad28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fb4f 	bl	800b3c2 <USBD_CtlError>
      break;
 800ad24:	e000      	b.n	800ad28 <USBD_StdEPReq+0x330>
      break;
 800ad26:	bf00      	nop
  }

  return ret;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
	...

0800ad34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
 800ad4e:	0a1b      	lsrs	r3, r3, #8
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	3b01      	subs	r3, #1
 800ad54:	2b06      	cmp	r3, #6
 800ad56:	f200 8128 	bhi.w	800afaa <USBD_GetDescriptor+0x276>
 800ad5a:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <USBD_GetDescriptor+0x2c>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800ad7d 	.word	0x0800ad7d
 800ad64:	0800ad95 	.word	0x0800ad95
 800ad68:	0800add5 	.word	0x0800add5
 800ad6c:	0800afab 	.word	0x0800afab
 800ad70:	0800afab 	.word	0x0800afab
 800ad74:	0800af4b 	.word	0x0800af4b
 800ad78:	0800af77 	.word	0x0800af77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	7c12      	ldrb	r2, [r2, #16]
 800ad88:	f107 0108 	add.w	r1, r7, #8
 800ad8c:	4610      	mov	r0, r2
 800ad8e:	4798      	blx	r3
 800ad90:	60f8      	str	r0, [r7, #12]
      break;
 800ad92:	e112      	b.n	800afba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	7c1b      	ldrb	r3, [r3, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10d      	bne.n	800adb8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada4:	f107 0208 	add.w	r2, r7, #8
 800ada8:	4610      	mov	r0, r2
 800adaa:	4798      	blx	r3
 800adac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3301      	adds	r3, #1
 800adb2:	2202      	movs	r2, #2
 800adb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adb6:	e100      	b.n	800afba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	f107 0208 	add.w	r2, r7, #8
 800adc4:	4610      	mov	r0, r2
 800adc6:	4798      	blx	r3
 800adc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3301      	adds	r3, #1
 800adce:	2202      	movs	r2, #2
 800add0:	701a      	strb	r2, [r3, #0]
      break;
 800add2:	e0f2      	b.n	800afba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	885b      	ldrh	r3, [r3, #2]
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2b05      	cmp	r3, #5
 800addc:	f200 80ac 	bhi.w	800af38 <USBD_GetDescriptor+0x204>
 800ade0:	a201      	add	r2, pc, #4	; (adr r2, 800ade8 <USBD_GetDescriptor+0xb4>)
 800ade2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade6:	bf00      	nop
 800ade8:	0800ae01 	.word	0x0800ae01
 800adec:	0800ae35 	.word	0x0800ae35
 800adf0:	0800ae69 	.word	0x0800ae69
 800adf4:	0800ae9d 	.word	0x0800ae9d
 800adf8:	0800aed1 	.word	0x0800aed1
 800adfc:	0800af05 	.word	0x0800af05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00b      	beq.n	800ae24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	7c12      	ldrb	r2, [r2, #16]
 800ae18:	f107 0108 	add.w	r1, r7, #8
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	4798      	blx	r3
 800ae20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae22:	e091      	b.n	800af48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 facb 	bl	800b3c2 <USBD_CtlError>
            err++;
 800ae2c:	7afb      	ldrb	r3, [r7, #11]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	72fb      	strb	r3, [r7, #11]
          break;
 800ae32:	e089      	b.n	800af48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00b      	beq.n	800ae58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	7c12      	ldrb	r2, [r2, #16]
 800ae4c:	f107 0108 	add.w	r1, r7, #8
 800ae50:	4610      	mov	r0, r2
 800ae52:	4798      	blx	r3
 800ae54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae56:	e077      	b.n	800af48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fab1 	bl	800b3c2 <USBD_CtlError>
            err++;
 800ae60:	7afb      	ldrb	r3, [r7, #11]
 800ae62:	3301      	adds	r3, #1
 800ae64:	72fb      	strb	r3, [r7, #11]
          break;
 800ae66:	e06f      	b.n	800af48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	7c12      	ldrb	r2, [r2, #16]
 800ae80:	f107 0108 	add.w	r1, r7, #8
 800ae84:	4610      	mov	r0, r2
 800ae86:	4798      	blx	r3
 800ae88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae8a:	e05d      	b.n	800af48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fa97 	bl	800b3c2 <USBD_CtlError>
            err++;
 800ae94:	7afb      	ldrb	r3, [r7, #11]
 800ae96:	3301      	adds	r3, #1
 800ae98:	72fb      	strb	r3, [r7, #11]
          break;
 800ae9a:	e055      	b.n	800af48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00b      	beq.n	800aec0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	7c12      	ldrb	r2, [r2, #16]
 800aeb4:	f107 0108 	add.w	r1, r7, #8
 800aeb8:	4610      	mov	r0, r2
 800aeba:	4798      	blx	r3
 800aebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aebe:	e043      	b.n	800af48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fa7d 	bl	800b3c2 <USBD_CtlError>
            err++;
 800aec8:	7afb      	ldrb	r3, [r7, #11]
 800aeca:	3301      	adds	r3, #1
 800aecc:	72fb      	strb	r3, [r7, #11]
          break;
 800aece:	e03b      	b.n	800af48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00b      	beq.n	800aef4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	7c12      	ldrb	r2, [r2, #16]
 800aee8:	f107 0108 	add.w	r1, r7, #8
 800aeec:	4610      	mov	r0, r2
 800aeee:	4798      	blx	r3
 800aef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aef2:	e029      	b.n	800af48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fa63 	bl	800b3c2 <USBD_CtlError>
            err++;
 800aefc:	7afb      	ldrb	r3, [r7, #11]
 800aefe:	3301      	adds	r3, #1
 800af00:	72fb      	strb	r3, [r7, #11]
          break;
 800af02:	e021      	b.n	800af48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00b      	beq.n	800af28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	7c12      	ldrb	r2, [r2, #16]
 800af1c:	f107 0108 	add.w	r1, r7, #8
 800af20:	4610      	mov	r0, r2
 800af22:	4798      	blx	r3
 800af24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af26:	e00f      	b.n	800af48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fa49 	bl	800b3c2 <USBD_CtlError>
            err++;
 800af30:	7afb      	ldrb	r3, [r7, #11]
 800af32:	3301      	adds	r3, #1
 800af34:	72fb      	strb	r3, [r7, #11]
          break;
 800af36:	e007      	b.n	800af48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa41 	bl	800b3c2 <USBD_CtlError>
          err++;
 800af40:	7afb      	ldrb	r3, [r7, #11]
 800af42:	3301      	adds	r3, #1
 800af44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af46:	bf00      	nop
      }
      break;
 800af48:	e037      	b.n	800afba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	7c1b      	ldrb	r3, [r3, #16]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d109      	bne.n	800af66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5a:	f107 0208 	add.w	r2, r7, #8
 800af5e:	4610      	mov	r0, r2
 800af60:	4798      	blx	r3
 800af62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af64:	e029      	b.n	800afba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fa2a 	bl	800b3c2 <USBD_CtlError>
        err++;
 800af6e:	7afb      	ldrb	r3, [r7, #11]
 800af70:	3301      	adds	r3, #1
 800af72:	72fb      	strb	r3, [r7, #11]
      break;
 800af74:	e021      	b.n	800afba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	7c1b      	ldrb	r3, [r3, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10d      	bne.n	800af9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af86:	f107 0208 	add.w	r2, r7, #8
 800af8a:	4610      	mov	r0, r2
 800af8c:	4798      	blx	r3
 800af8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3301      	adds	r3, #1
 800af94:	2207      	movs	r2, #7
 800af96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af98:	e00f      	b.n	800afba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fa10 	bl	800b3c2 <USBD_CtlError>
        err++;
 800afa2:	7afb      	ldrb	r3, [r7, #11]
 800afa4:	3301      	adds	r3, #1
 800afa6:	72fb      	strb	r3, [r7, #11]
      break;
 800afa8:	e007      	b.n	800afba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fa08 	bl	800b3c2 <USBD_CtlError>
      err++;
 800afb2:	7afb      	ldrb	r3, [r7, #11]
 800afb4:	3301      	adds	r3, #1
 800afb6:	72fb      	strb	r3, [r7, #11]
      break;
 800afb8:	bf00      	nop
  }

  if (err != 0U)
 800afba:	7afb      	ldrb	r3, [r7, #11]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d11e      	bne.n	800affe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	88db      	ldrh	r3, [r3, #6]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d016      	beq.n	800aff6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800afc8:	893b      	ldrh	r3, [r7, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00e      	beq.n	800afec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	88da      	ldrh	r2, [r3, #6]
 800afd2:	893b      	ldrh	r3, [r7, #8]
 800afd4:	4293      	cmp	r3, r2
 800afd6:	bf28      	it	cs
 800afd8:	4613      	movcs	r3, r2
 800afda:	b29b      	uxth	r3, r3
 800afdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afde:	893b      	ldrh	r3, [r7, #8]
 800afe0:	461a      	mov	r2, r3
 800afe2:	68f9      	ldr	r1, [r7, #12]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fa5d 	bl	800b4a4 <USBD_CtlSendData>
 800afea:	e009      	b.n	800b000 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f9e7 	bl	800b3c2 <USBD_CtlError>
 800aff4:	e004      	b.n	800b000 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 faae 	bl	800b558 <USBD_CtlSendStatus>
 800affc:	e000      	b.n	800b000 <USBD_GetDescriptor+0x2cc>
    return;
 800affe:	bf00      	nop
  }
}
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop

0800b008 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	889b      	ldrh	r3, [r3, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d131      	bne.n	800b07e <USBD_SetAddress+0x76>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	88db      	ldrh	r3, [r3, #6]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d12d      	bne.n	800b07e <USBD_SetAddress+0x76>
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	885b      	ldrh	r3, [r3, #2]
 800b026:	2b7f      	cmp	r3, #127	; 0x7f
 800b028:	d829      	bhi.n	800b07e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	885b      	ldrh	r3, [r3, #2]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b034:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d104      	bne.n	800b04c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f9bc 	bl	800b3c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04a:	e01d      	b.n	800b088 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	7bfa      	ldrb	r2, [r7, #15]
 800b050:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	4619      	mov	r1, r3
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fecd 	bl	800bdf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fa7a 	bl	800b558 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d004      	beq.n	800b074 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2202      	movs	r2, #2
 800b06e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b072:	e009      	b.n	800b088 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b07c:	e004      	b.n	800b088 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f99e 	bl	800b3c2 <USBD_CtlError>
  }
}
 800b086:	bf00      	nop
 800b088:	bf00      	nop
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	885b      	ldrh	r3, [r3, #2]
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	4b4e      	ldr	r3, [pc, #312]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b0a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0a8:	4b4d      	ldr	r3, [pc, #308]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d905      	bls.n	800b0bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f985 	bl	800b3c2 <USBD_CtlError>
    return USBD_FAIL;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e08c      	b.n	800b1d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d002      	beq.n	800b0ce <USBD_SetConfig+0x3e>
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	d029      	beq.n	800b120 <USBD_SetConfig+0x90>
 800b0cc:	e075      	b.n	800b1ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0ce:	4b44      	ldr	r3, [pc, #272]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d020      	beq.n	800b118 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b0d6:	4b42      	ldr	r3, [pc, #264]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0e0:	4b3f      	ldr	r3, [pc, #252]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff f821 	bl	800a12e <USBD_SetClassConfig>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d008      	beq.n	800b108 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f962 	bl	800b3c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2202      	movs	r2, #2
 800b102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b106:	e065      	b.n	800b1d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fa25 	bl	800b558 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2203      	movs	r2, #3
 800b112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b116:	e05d      	b.n	800b1d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fa1d 	bl	800b558 <USBD_CtlSendStatus>
      break;
 800b11e:	e059      	b.n	800b1d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b120:	4b2f      	ldr	r3, [pc, #188]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d112      	bne.n	800b14e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b130:	4b2b      	ldr	r3, [pc, #172]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	461a      	mov	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b13a:	4b29      	ldr	r3, [pc, #164]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff f810 	bl	800a166 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fa06 	bl	800b558 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b14c:	e042      	b.n	800b1d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b14e:	4b24      	ldr	r3, [pc, #144]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d02a      	beq.n	800b1b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	b2db      	uxtb	r3, r3
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7fe fffe 	bl	800a166 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b16a:	4b1d      	ldr	r3, [pc, #116]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b174:	4b1a      	ldr	r3, [pc, #104]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7fe ffd7 	bl	800a12e <USBD_SetClassConfig>
 800b180:	4603      	mov	r3, r0
 800b182:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b184:	7bfb      	ldrb	r3, [r7, #15]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00f      	beq.n	800b1aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f918 	bl	800b3c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	4619      	mov	r1, r3
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7fe ffe3 	bl	800a166 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1a8:	e014      	b.n	800b1d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f9d4 	bl	800b558 <USBD_CtlSendStatus>
      break;
 800b1b0:	e010      	b.n	800b1d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f9d0 	bl	800b558 <USBD_CtlSendStatus>
      break;
 800b1b8:	e00c      	b.n	800b1d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f900 	bl	800b3c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1c2:	4b07      	ldr	r3, [pc, #28]	; (800b1e0 <USBD_SetConfig+0x150>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f7fe ffcc 	bl	800a166 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d2:	bf00      	nop
  }

  return ret;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	240004f4 	.word	0x240004f4

0800b1e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	88db      	ldrh	r3, [r3, #6]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d004      	beq.n	800b200 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f8e2 	bl	800b3c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1fe:	e023      	b.n	800b248 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b02      	cmp	r3, #2
 800b20a:	dc02      	bgt.n	800b212 <USBD_GetConfig+0x2e>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dc03      	bgt.n	800b218 <USBD_GetConfig+0x34>
 800b210:	e015      	b.n	800b23e <USBD_GetConfig+0x5a>
 800b212:	2b03      	cmp	r3, #3
 800b214:	d00b      	beq.n	800b22e <USBD_GetConfig+0x4a>
 800b216:	e012      	b.n	800b23e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3308      	adds	r3, #8
 800b222:	2201      	movs	r2, #1
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f93c 	bl	800b4a4 <USBD_CtlSendData>
        break;
 800b22c:	e00c      	b.n	800b248 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	3304      	adds	r3, #4
 800b232:	2201      	movs	r2, #1
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f934 	bl	800b4a4 <USBD_CtlSendData>
        break;
 800b23c:	e004      	b.n	800b248 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f8be 	bl	800b3c2 <USBD_CtlError>
        break;
 800b246:	bf00      	nop
}
 800b248:	bf00      	nop
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b260:	b2db      	uxtb	r3, r3
 800b262:	3b01      	subs	r3, #1
 800b264:	2b02      	cmp	r3, #2
 800b266:	d81e      	bhi.n	800b2a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	88db      	ldrh	r3, [r3, #6]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d004      	beq.n	800b27a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f8a5 	bl	800b3c2 <USBD_CtlError>
        break;
 800b278:	e01a      	b.n	800b2b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b286:	2b00      	cmp	r3, #0
 800b288:	d005      	beq.n	800b296 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f043 0202 	orr.w	r2, r3, #2
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	330c      	adds	r3, #12
 800b29a:	2202      	movs	r2, #2
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f900 	bl	800b4a4 <USBD_CtlSendData>
      break;
 800b2a4:	e004      	b.n	800b2b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 f88a 	bl	800b3c2 <USBD_CtlError>
      break;
 800b2ae:	bf00      	nop
  }
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	885b      	ldrh	r3, [r3, #2]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d107      	bne.n	800b2da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f940 	bl	800b558 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b2d8:	e013      	b.n	800b302 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	885b      	ldrh	r3, [r3, #2]
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d10b      	bne.n	800b2fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	889b      	ldrh	r3, [r3, #4]
 800b2e6:	0a1b      	lsrs	r3, r3, #8
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f930 	bl	800b558 <USBD_CtlSendStatus>
}
 800b2f8:	e003      	b.n	800b302 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f860 	bl	800b3c2 <USBD_CtlError>
}
 800b302:	bf00      	nop
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b082      	sub	sp, #8
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	3b01      	subs	r3, #1
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d80b      	bhi.n	800b33a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	885b      	ldrh	r3, [r3, #2]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d10c      	bne.n	800b344 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f910 	bl	800b558 <USBD_CtlSendStatus>
      }
      break;
 800b338:	e004      	b.n	800b344 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f840 	bl	800b3c2 <USBD_CtlError>
      break;
 800b342:	e000      	b.n	800b346 <USBD_ClrFeature+0x3c>
      break;
 800b344:	bf00      	nop
  }
}
 800b346:	bf00      	nop
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	781a      	ldrb	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3301      	adds	r3, #1
 800b368:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	781a      	ldrb	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3301      	adds	r3, #1
 800b376:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7ff fa41 	bl	800a800 <SWAPBYTE>
 800b37e:	4603      	mov	r3, r0
 800b380:	461a      	mov	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3301      	adds	r3, #1
 800b38a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3301      	adds	r3, #1
 800b390:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7ff fa34 	bl	800a800 <SWAPBYTE>
 800b398:	4603      	mov	r3, r0
 800b39a:	461a      	mov	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f7ff fa27 	bl	800a800 <SWAPBYTE>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	80da      	strh	r2, [r3, #6]
}
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3cc:	2180      	movs	r1, #128	; 0x80
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fca8 	bl	800bd24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fca4 	bl	800bd24 <USBD_LL_StallEP>
}
 800b3dc:	bf00      	nop
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d036      	beq.n	800b468 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b3fe:	6938      	ldr	r0, [r7, #16]
 800b400:	f000 f836 	bl	800b470 <USBD_GetLen>
 800b404:	4603      	mov	r3, r0
 800b406:	3301      	adds	r3, #1
 800b408:	b29b      	uxth	r3, r3
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	4413      	add	r3, r2
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	7812      	ldrb	r2, [r2, #0]
 800b41c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
 800b420:	3301      	adds	r3, #1
 800b422:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b424:	7dfb      	ldrb	r3, [r7, #23]
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	4413      	add	r3, r2
 800b42a:	2203      	movs	r2, #3
 800b42c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	3301      	adds	r3, #1
 800b432:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b434:	e013      	b.n	800b45e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	4413      	add	r3, r2
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	7812      	ldrb	r2, [r2, #0]
 800b440:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	3301      	adds	r3, #1
 800b446:	613b      	str	r3, [r7, #16]
    idx++;
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	3301      	adds	r3, #1
 800b44c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	4413      	add	r3, r2
 800b454:	2200      	movs	r2, #0
 800b456:	701a      	strb	r2, [r3, #0]
    idx++;
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	3301      	adds	r3, #1
 800b45c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1e7      	bne.n	800b436 <USBD_GetString+0x52>
 800b466:	e000      	b.n	800b46a <USBD_GetString+0x86>
    return;
 800b468:	bf00      	nop
  }
}
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b480:	e005      	b.n	800b48e <USBD_GetLen+0x1e>
  {
    len++;
 800b482:	7bfb      	ldrb	r3, [r7, #15]
 800b484:	3301      	adds	r3, #1
 800b486:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	3301      	adds	r3, #1
 800b48c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1f5      	bne.n	800b482 <USBD_GetLen+0x12>
  }

  return len;
 800b496:	7bfb      	ldrb	r3, [r7, #15]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 fcb3 	bl	800be36 <USBD_LL_Transmit>

  return USBD_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	60f8      	str	r0, [r7, #12]
 800b4e2:	60b9      	str	r1, [r7, #8]
 800b4e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f000 fca2 	bl	800be36 <USBD_LL_Transmit>

  return USBD_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2203      	movs	r2, #3
 800b50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	2100      	movs	r1, #0
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f000 fca6 	bl	800be78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b084      	sub	sp, #16
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	60f8      	str	r0, [r7, #12]
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	2100      	movs	r1, #0
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 fc95 	bl	800be78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2204      	movs	r2, #4
 800b564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b568:	2300      	movs	r3, #0
 800b56a:	2200      	movs	r2, #0
 800b56c:	2100      	movs	r1, #0
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fc61 	bl	800be36 <USBD_LL_Transmit>

  return USBD_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2205      	movs	r2, #5
 800b58a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b58e:	2300      	movs	r3, #0
 800b590:	2200      	movs	r2, #0
 800b592:	2100      	movs	r1, #0
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fc6f 	bl	800be78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	4913      	ldr	r1, [pc, #76]	; (800b5f8 <MX_USB_DEVICE_Init+0x54>)
 800b5ac:	4813      	ldr	r0, [pc, #76]	; (800b5fc <MX_USB_DEVICE_Init+0x58>)
 800b5ae:	f7fe fd25 	bl	8009ffc <USBD_Init>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b5b8:	f7f5 f858 	bl	800066c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800b5bc:	4910      	ldr	r1, [pc, #64]	; (800b600 <MX_USB_DEVICE_Init+0x5c>)
 800b5be:	480f      	ldr	r0, [pc, #60]	; (800b5fc <MX_USB_DEVICE_Init+0x58>)
 800b5c0:	f7fe fd5a 	bl	800a078 <USBD_RegisterClass>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d001      	beq.n	800b5ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5ca:	f7f5 f84f 	bl	800066c <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800b5ce:	490d      	ldr	r1, [pc, #52]	; (800b604 <MX_USB_DEVICE_Init+0x60>)
 800b5d0:	480a      	ldr	r0, [pc, #40]	; (800b5fc <MX_USB_DEVICE_Init+0x58>)
 800b5d2:	f7fe fcc5 	bl	8009f60 <USBD_AUDIO_RegisterInterface>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d001      	beq.n	800b5e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b5dc:	f7f5 f846 	bl	800066c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5e0:	4806      	ldr	r0, [pc, #24]	; (800b5fc <MX_USB_DEVICE_Init+0x58>)
 800b5e2:	f7fe fd8d 	bl	800a100 <USBD_Start>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5ec:	f7f5 f83e 	bl	800066c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800b5f0:	f7f9 f856 	bl	80046a0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5f4:	bf00      	nop
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	240000e0 	.word	0x240000e0
 800b5fc:	240004f8 	.word	0x240004f8
 800b600:	24000010 	.word	0x24000010
 800b604:	240000c4 	.word	0x240000c4

0800b608 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800b614:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800b622:	b480      	push	{r7}
 800b624:	b083      	sub	sp, #12
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800b62a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	4613      	mov	r3, r2
 800b644:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d001      	beq.n	800b650 <AUDIO_AudioCmd_FS+0x18>
 800b64c:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800b64e:	e000      	b.n	800b652 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800b650:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800b652:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	4603      	mov	r3, r0
 800b668:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800b66a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800b682:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	4613      	mov	r3, r2
 800b69c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800b69e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800b6b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	6039      	str	r1, [r7, #0]
 800b6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2212      	movs	r2, #18
 800b6cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6ce:	4b03      	ldr	r3, [pc, #12]	; (800b6dc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	240000fc 	.word	0x240000fc

0800b6e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2204      	movs	r2, #4
 800b6f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6f2:	4b03      	ldr	r3, [pc, #12]	; (800b700 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	24000110 	.word	0x24000110

0800b704 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b710:	79fb      	ldrb	r3, [r7, #7]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d105      	bne.n	800b722 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	4907      	ldr	r1, [pc, #28]	; (800b738 <USBD_FS_ProductStrDescriptor+0x34>)
 800b71a:	4808      	ldr	r0, [pc, #32]	; (800b73c <USBD_FS_ProductStrDescriptor+0x38>)
 800b71c:	f7ff fe62 	bl	800b3e4 <USBD_GetString>
 800b720:	e004      	b.n	800b72c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	4904      	ldr	r1, [pc, #16]	; (800b738 <USBD_FS_ProductStrDescriptor+0x34>)
 800b726:	4805      	ldr	r0, [pc, #20]	; (800b73c <USBD_FS_ProductStrDescriptor+0x38>)
 800b728:	f7ff fe5c 	bl	800b3e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b72c:	4b02      	ldr	r3, [pc, #8]	; (800b738 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	240007d4 	.word	0x240007d4
 800b73c:	0800d0f8 	.word	0x0800d0f8

0800b740 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	4603      	mov	r3, r0
 800b748:	6039      	str	r1, [r7, #0]
 800b74a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	4904      	ldr	r1, [pc, #16]	; (800b760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b750:	4804      	ldr	r0, [pc, #16]	; (800b764 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b752:	f7ff fe47 	bl	800b3e4 <USBD_GetString>
  return USBD_StrDesc;
 800b756:	4b02      	ldr	r3, [pc, #8]	; (800b760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	240007d4 	.word	0x240007d4
 800b764:	0800d10c 	.word	0x0800d10c

0800b768 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	6039      	str	r1, [r7, #0]
 800b772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	221a      	movs	r2, #26
 800b778:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b77a:	f000 f843 	bl	800b804 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b77e:	4b02      	ldr	r3, [pc, #8]	; (800b788 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b780:	4618      	mov	r0, r3
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	24000114 	.word	0x24000114

0800b78c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d105      	bne.n	800b7aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	4907      	ldr	r1, [pc, #28]	; (800b7c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7a2:	4808      	ldr	r0, [pc, #32]	; (800b7c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7a4:	f7ff fe1e 	bl	800b3e4 <USBD_GetString>
 800b7a8:	e004      	b.n	800b7b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	4904      	ldr	r1, [pc, #16]	; (800b7c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7ae:	4805      	ldr	r0, [pc, #20]	; (800b7c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7b0:	f7ff fe18 	bl	800b3e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7b4:	4b02      	ldr	r3, [pc, #8]	; (800b7c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	240007d4 	.word	0x240007d4
 800b7c4:	0800d120 	.word	0x0800d120

0800b7c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	6039      	str	r1, [r7, #0]
 800b7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7d4:	79fb      	ldrb	r3, [r7, #7]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d105      	bne.n	800b7e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	4907      	ldr	r1, [pc, #28]	; (800b7fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7de:	4808      	ldr	r0, [pc, #32]	; (800b800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7e0:	f7ff fe00 	bl	800b3e4 <USBD_GetString>
 800b7e4:	e004      	b.n	800b7f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	4904      	ldr	r1, [pc, #16]	; (800b7fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7ea:	4805      	ldr	r0, [pc, #20]	; (800b800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7ec:	f7ff fdfa 	bl	800b3e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7f0:	4b02      	ldr	r3, [pc, #8]	; (800b7fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	240007d4 	.word	0x240007d4
 800b800:	0800d130 	.word	0x0800d130

0800b804 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b80a:	4b0f      	ldr	r3, [pc, #60]	; (800b848 <Get_SerialNum+0x44>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b810:	4b0e      	ldr	r3, [pc, #56]	; (800b84c <Get_SerialNum+0x48>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b816:	4b0e      	ldr	r3, [pc, #56]	; (800b850 <Get_SerialNum+0x4c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4413      	add	r3, r2
 800b822:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d009      	beq.n	800b83e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b82a:	2208      	movs	r2, #8
 800b82c:	4909      	ldr	r1, [pc, #36]	; (800b854 <Get_SerialNum+0x50>)
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f000 f814 	bl	800b85c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b834:	2204      	movs	r2, #4
 800b836:	4908      	ldr	r1, [pc, #32]	; (800b858 <Get_SerialNum+0x54>)
 800b838:	68b8      	ldr	r0, [r7, #8]
 800b83a:	f000 f80f 	bl	800b85c <IntToUnicode>
  }
}
 800b83e:	bf00      	nop
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	1ff1e800 	.word	0x1ff1e800
 800b84c:	1ff1e804 	.word	0x1ff1e804
 800b850:	1ff1e808 	.word	0x1ff1e808
 800b854:	24000116 	.word	0x24000116
 800b858:	24000126 	.word	0x24000126

0800b85c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b087      	sub	sp, #28
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b86e:	2300      	movs	r3, #0
 800b870:	75fb      	strb	r3, [r7, #23]
 800b872:	e027      	b.n	800b8c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	0f1b      	lsrs	r3, r3, #28
 800b878:	2b09      	cmp	r3, #9
 800b87a:	d80b      	bhi.n	800b894 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	0f1b      	lsrs	r3, r3, #28
 800b880:	b2da      	uxtb	r2, r3
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	4619      	mov	r1, r3
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	440b      	add	r3, r1
 800b88c:	3230      	adds	r2, #48	; 0x30
 800b88e:	b2d2      	uxtb	r2, r2
 800b890:	701a      	strb	r2, [r3, #0]
 800b892:	e00a      	b.n	800b8aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	0f1b      	lsrs	r3, r3, #28
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	4619      	mov	r1, r3
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	440b      	add	r3, r1
 800b8a4:	3237      	adds	r2, #55	; 0x37
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	75fb      	strb	r3, [r7, #23]
 800b8c4:	7dfa      	ldrb	r2, [r7, #23]
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d3d3      	bcc.n	800b874 <IntToUnicode+0x18>
  }
}
 800b8cc:	bf00      	nop
 800b8ce:	bf00      	nop
 800b8d0:	371c      	adds	r7, #28
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
	...

0800b8dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b0b8      	sub	sp, #224	; 0xe0
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	605a      	str	r2, [r3, #4]
 800b8ee:	609a      	str	r2, [r3, #8]
 800b8f0:	60da      	str	r2, [r3, #12]
 800b8f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b8f4:	f107 0310 	add.w	r3, r7, #16
 800b8f8:	22bc      	movs	r2, #188	; 0xbc
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 fb5d 	bl	800bfbc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a33      	ldr	r2, [pc, #204]	; (800b9d4 <HAL_PCD_MspInit+0xf8>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d15e      	bne.n	800b9ca <HAL_PCD_MspInit+0xee>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b90c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b910:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b912:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800b916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b91a:	f107 0310 	add.w	r3, r7, #16
 800b91e:	4618      	mov	r0, r3
 800b920:	f7f9 fe88 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800b92a:	f7f4 fe9f 	bl	800066c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800b92e:	f7f8 feb7 	bl	80046a0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b932:	4b29      	ldr	r3, [pc, #164]	; (800b9d8 <HAL_PCD_MspInit+0xfc>)
 800b934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b938:	4a27      	ldr	r2, [pc, #156]	; (800b9d8 <HAL_PCD_MspInit+0xfc>)
 800b93a:	f043 0301 	orr.w	r3, r3, #1
 800b93e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b942:	4b25      	ldr	r3, [pc, #148]	; (800b9d8 <HAL_PCD_MspInit+0xfc>)
 800b944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	60fb      	str	r3, [r7, #12]
 800b94e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b950:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b958:	2302      	movs	r3, #2
 800b95a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b95e:	2300      	movs	r3, #0
 800b960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b964:	2300      	movs	r3, #0
 800b966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b96a:	230a      	movs	r3, #10
 800b96c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b970:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b974:	4619      	mov	r1, r3
 800b976:	4819      	ldr	r0, [pc, #100]	; (800b9dc <HAL_PCD_MspInit+0x100>)
 800b978:	f7f7 f9ba 	bl	8002cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b97c:	4b16      	ldr	r3, [pc, #88]	; (800b9d8 <HAL_PCD_MspInit+0xfc>)
 800b97e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b982:	4a15      	ldr	r2, [pc, #84]	; (800b9d8 <HAL_PCD_MspInit+0xfc>)
 800b984:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b988:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b98c:	4b12      	ldr	r3, [pc, #72]	; (800b9d8 <HAL_PCD_MspInit+0xfc>)
 800b98e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b992:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b996:	60bb      	str	r3, [r7, #8]
 800b998:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800b99a:	2200      	movs	r2, #0
 800b99c:	2100      	movs	r1, #0
 800b99e:	2062      	movs	r0, #98	; 0x62
 800b9a0:	f7f5 fcaf 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800b9a4:	2062      	movs	r0, #98	; 0x62
 800b9a6:	f7f5 fcc6 	bl	8001336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	2063      	movs	r0, #99	; 0x63
 800b9b0:	f7f5 fca7 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800b9b4:	2063      	movs	r0, #99	; 0x63
 800b9b6:	f7f5 fcbe 	bl	8001336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2100      	movs	r1, #0
 800b9be:	2065      	movs	r0, #101	; 0x65
 800b9c0:	f7f5 fc9f 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b9c4:	2065      	movs	r0, #101	; 0x65
 800b9c6:	f7f5 fcb6 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	37e0      	adds	r7, #224	; 0xe0
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	40080000 	.word	0x40080000
 800b9d8:	58024400 	.word	0x58024400
 800b9dc:	58020000 	.word	0x58020000

0800b9e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	f7fe fbcf 	bl	800a19a <USBD_LL_SetupStage>
}
 800b9fc:	bf00      	nop
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ba16:	78fa      	ldrb	r2, [r7, #3]
 800ba18:	6879      	ldr	r1, [r7, #4]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	00db      	lsls	r3, r3, #3
 800ba1e:	4413      	add	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	440b      	add	r3, r1
 800ba24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	78fb      	ldrb	r3, [r7, #3]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	f7fe fc09 	bl	800a244 <USBD_LL_DataOutStage>
}
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	460b      	mov	r3, r1
 800ba44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ba4c:	78fa      	ldrb	r2, [r7, #3]
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	4613      	mov	r3, r2
 800ba52:	00db      	lsls	r3, r3, #3
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	440b      	add	r3, r1
 800ba5a:	334c      	adds	r3, #76	; 0x4c
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	78fb      	ldrb	r3, [r7, #3]
 800ba60:	4619      	mov	r1, r3
 800ba62:	f7fe fca2 	bl	800a3aa <USBD_LL_DataInStage>
}
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe fdd6 	bl	800a62e <USBD_LL_SOF>
}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba92:	2301      	movs	r3, #1
 800ba94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d102      	bne.n	800baa4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	73fb      	strb	r3, [r7, #15]
 800baa2:	e008      	b.n	800bab6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d102      	bne.n	800bab2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800baac:	2301      	movs	r3, #1
 800baae:	73fb      	strb	r3, [r7, #15]
 800bab0:	e001      	b.n	800bab6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bab2:	f7f4 fddb 	bl	800066c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800babc:	7bfa      	ldrb	r2, [r7, #15]
 800babe:	4611      	mov	r1, r2
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe fd76 	bl	800a5b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe fd1e 	bl	800a50e <USBD_LL_Reset>
}
 800bad2:	bf00      	nop
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
	...

0800badc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800baea:	4618      	mov	r0, r3
 800baec:	f7fe fd71 	bl	800a5d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	6812      	ldr	r2, [r2, #0]
 800bafe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb02:	f043 0301 	orr.w	r3, r3, #1
 800bb06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a1b      	ldr	r3, [r3, #32]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d005      	beq.n	800bb1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb10:	4b04      	ldr	r3, [pc, #16]	; (800bb24 <HAL_PCD_SuspendCallback+0x48>)
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	4a03      	ldr	r2, [pc, #12]	; (800bb24 <HAL_PCD_SuspendCallback+0x48>)
 800bb16:	f043 0306 	orr.w	r3, r3, #6
 800bb1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	e000ed00 	.word	0xe000ed00

0800bb28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fd61 	bl	800a5fe <USBD_LL_Resume>
}
 800bb3c:	bf00      	nop
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb56:	78fa      	ldrb	r2, [r7, #3]
 800bb58:	4611      	mov	r1, r2
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fe fdb9 	bl	800a6d2 <USBD_LL_IsoOUTIncomplete>
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb7a:	78fa      	ldrb	r2, [r7, #3]
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe fd75 	bl	800a66e <USBD_LL_IsoINIncomplete>
}
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe fdcb 	bl	800a736 <USBD_LL_DevConnected>
}
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe fdc8 	bl	800a74c <USBD_LL_DevDisconnected>
}
 800bbbc:	bf00      	nop
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d13e      	bne.n	800bc52 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bbd4:	4a21      	ldr	r2, [pc, #132]	; (800bc5c <USBD_LL_Init+0x98>)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a1f      	ldr	r2, [pc, #124]	; (800bc5c <USBD_LL_Init+0x98>)
 800bbe0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bbe4:	4b1d      	ldr	r3, [pc, #116]	; (800bc5c <USBD_LL_Init+0x98>)
 800bbe6:	4a1e      	ldr	r2, [pc, #120]	; (800bc60 <USBD_LL_Init+0x9c>)
 800bbe8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800bbea:	4b1c      	ldr	r3, [pc, #112]	; (800bc5c <USBD_LL_Init+0x98>)
 800bbec:	2209      	movs	r2, #9
 800bbee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bbf0:	4b1a      	ldr	r3, [pc, #104]	; (800bc5c <USBD_LL_Init+0x98>)
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bbf6:	4b19      	ldr	r3, [pc, #100]	; (800bc5c <USBD_LL_Init+0x98>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bbfc:	4b17      	ldr	r3, [pc, #92]	; (800bc5c <USBD_LL_Init+0x98>)
 800bbfe:	2202      	movs	r2, #2
 800bc00:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc02:	4b16      	ldr	r3, [pc, #88]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bc08:	4b14      	ldr	r3, [pc, #80]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bc0e:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bc14:	4b11      	ldr	r3, [pc, #68]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bc1a:	4b10      	ldr	r3, [pc, #64]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = ENABLE;
 800bc20:	4b0e      	ldr	r3, [pc, #56]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc22:	2201      	movs	r2, #1
 800bc24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bc26:	480d      	ldr	r0, [pc, #52]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc28:	f7f7 fa2b 	bl	8003082 <HAL_PCD_Init>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d001      	beq.n	800bc36 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800bc32:	f7f4 fd1b 	bl	800066c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bc36:	2180      	movs	r1, #128	; 0x80
 800bc38:	4808      	ldr	r0, [pc, #32]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc3a:	f7f8 fcb6 	bl	80045aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bc3e:	2240      	movs	r2, #64	; 0x40
 800bc40:	2100      	movs	r1, #0
 800bc42:	4806      	ldr	r0, [pc, #24]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc44:	f7f8 fc6a 	bl	800451c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bc48:	2280      	movs	r2, #128	; 0x80
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	4803      	ldr	r0, [pc, #12]	; (800bc5c <USBD_LL_Init+0x98>)
 800bc4e:	f7f8 fc65 	bl	800451c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	240009d4 	.word	0x240009d4
 800bc60:	40080000 	.word	0x40080000

0800bc64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7f7 fb25 	bl	80032ca <HAL_PCD_Start>
 800bc80:	4603      	mov	r3, r0
 800bc82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 f942 	bl	800bf10 <USBD_Get_USB_Status>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b084      	sub	sp, #16
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
 800bca2:	4608      	mov	r0, r1
 800bca4:	4611      	mov	r1, r2
 800bca6:	461a      	mov	r2, r3
 800bca8:	4603      	mov	r3, r0
 800bcaa:	70fb      	strb	r3, [r7, #3]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70bb      	strb	r3, [r7, #2]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcc2:	78bb      	ldrb	r3, [r7, #2]
 800bcc4:	883a      	ldrh	r2, [r7, #0]
 800bcc6:	78f9      	ldrb	r1, [r7, #3]
 800bcc8:	f7f8 f823 	bl	8003d12 <HAL_PCD_EP_Open>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 f91c 	bl	800bf10 <USBD_Get_USB_Status>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b084      	sub	sp, #16
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd00:	78fa      	ldrb	r2, [r7, #3]
 800bd02:	4611      	mov	r1, r2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7f8 f86c 	bl	8003de2 <HAL_PCD_EP_Close>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 f8fd 	bl	800bf10 <USBD_Get_USB_Status>
 800bd16:	4603      	mov	r3, r0
 800bd18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd3e:	78fa      	ldrb	r2, [r7, #3]
 800bd40:	4611      	mov	r1, r2
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f8 f944 	bl	8003fd0 <HAL_PCD_EP_SetStall>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 f8de 	bl	800bf10 <USBD_Get_USB_Status>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b084      	sub	sp, #16
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd7c:	78fa      	ldrb	r2, [r7, #3]
 800bd7e:	4611      	mov	r1, r2
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7f8 f989 	bl	8004098 <HAL_PCD_EP_ClrStall>
 800bd86:	4603      	mov	r3, r0
 800bd88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f000 f8bf 	bl	800bf10 <USBD_Get_USB_Status>
 800bd92:	4603      	mov	r3, r0
 800bd94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bdb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	da0b      	bge.n	800bdd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bdbc:	78fb      	ldrb	r3, [r7, #3]
 800bdbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdc2:	68f9      	ldr	r1, [r7, #12]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	4413      	add	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	440b      	add	r3, r1
 800bdce:	333e      	adds	r3, #62	; 0x3e
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	e00b      	b.n	800bdec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bdd4:	78fb      	ldrb	r3, [r7, #3]
 800bdd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdda:	68f9      	ldr	r1, [r7, #12]
 800bddc:	4613      	mov	r3, r2
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	4413      	add	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	440b      	add	r3, r1
 800bde6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bdea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	460b      	mov	r3, r1
 800be02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be12:	78fa      	ldrb	r2, [r7, #3]
 800be14:	4611      	mov	r1, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f7f7 ff56 	bl	8003cc8 <HAL_PCD_SetAddress>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	4618      	mov	r0, r3
 800be24:	f000 f874 	bl	800bf10 <USBD_Get_USB_Status>
 800be28:	4603      	mov	r3, r0
 800be2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b086      	sub	sp, #24
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	60f8      	str	r0, [r7, #12]
 800be3e:	607a      	str	r2, [r7, #4]
 800be40:	603b      	str	r3, [r7, #0]
 800be42:	460b      	mov	r3, r1
 800be44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be54:	7af9      	ldrb	r1, [r7, #11]
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	f7f8 f86f 	bl	8003f3c <HAL_PCD_EP_Transmit>
 800be5e:	4603      	mov	r3, r0
 800be60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be62:	7dfb      	ldrb	r3, [r7, #23]
 800be64:	4618      	mov	r0, r3
 800be66:	f000 f853 	bl	800bf10 <USBD_Get_USB_Status>
 800be6a:	4603      	mov	r3, r0
 800be6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3718      	adds	r7, #24
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	607a      	str	r2, [r7, #4]
 800be82:	603b      	str	r3, [r7, #0]
 800be84:	460b      	mov	r3, r1
 800be86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be96:	7af9      	ldrb	r1, [r7, #11]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	f7f7 ffeb 	bl	8003e76 <HAL_PCD_EP_Receive>
 800bea0:	4603      	mov	r3, r0
 800bea2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bea4:	7dfb      	ldrb	r3, [r7, #23]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 f832 	bl	800bf10 <USBD_Get_USB_Status>
 800beac:	4603      	mov	r3, r0
 800beae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800beb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3718      	adds	r7, #24
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b082      	sub	sp, #8
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	460b      	mov	r3, r1
 800bec4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800becc:	78fa      	ldrb	r2, [r7, #3]
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f8 f81b 	bl	8003f0c <HAL_PCD_EP_GetRxCount>
 800bed6:	4603      	mov	r3, r0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bee8:	4b03      	ldr	r3, [pc, #12]	; (800bef8 <USBD_static_malloc+0x18>)
}
 800beea:	4618      	mov	r0, r3
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	24000ee0 	.word	0x24000ee0

0800befc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]

}
 800bf04:	bf00      	nop
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	4603      	mov	r3, r0
 800bf18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf1e:	79fb      	ldrb	r3, [r7, #7]
 800bf20:	2b03      	cmp	r3, #3
 800bf22:	d817      	bhi.n	800bf54 <USBD_Get_USB_Status+0x44>
 800bf24:	a201      	add	r2, pc, #4	; (adr r2, 800bf2c <USBD_Get_USB_Status+0x1c>)
 800bf26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2a:	bf00      	nop
 800bf2c:	0800bf3d 	.word	0x0800bf3d
 800bf30:	0800bf43 	.word	0x0800bf43
 800bf34:	0800bf49 	.word	0x0800bf49
 800bf38:	0800bf4f 	.word	0x0800bf4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf40:	e00b      	b.n	800bf5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf42:	2303      	movs	r3, #3
 800bf44:	73fb      	strb	r3, [r7, #15]
    break;
 800bf46:	e008      	b.n	800bf5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf4c:	e005      	b.n	800bf5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	73fb      	strb	r3, [r7, #15]
    break;
 800bf52:	e002      	b.n	800bf5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bf54:	2303      	movs	r3, #3
 800bf56:	73fb      	strb	r3, [r7, #15]
    break;
 800bf58:	bf00      	nop
  }
  return usb_status;
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3714      	adds	r7, #20
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <__errno>:
 800bf68:	4b01      	ldr	r3, [pc, #4]	; (800bf70 <__errno+0x8>)
 800bf6a:	6818      	ldr	r0, [r3, #0]
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	24000130 	.word	0x24000130

0800bf74 <__libc_init_array>:
 800bf74:	b570      	push	{r4, r5, r6, lr}
 800bf76:	4d0d      	ldr	r5, [pc, #52]	; (800bfac <__libc_init_array+0x38>)
 800bf78:	4c0d      	ldr	r4, [pc, #52]	; (800bfb0 <__libc_init_array+0x3c>)
 800bf7a:	1b64      	subs	r4, r4, r5
 800bf7c:	10a4      	asrs	r4, r4, #2
 800bf7e:	2600      	movs	r6, #0
 800bf80:	42a6      	cmp	r6, r4
 800bf82:	d109      	bne.n	800bf98 <__libc_init_array+0x24>
 800bf84:	4d0b      	ldr	r5, [pc, #44]	; (800bfb4 <__libc_init_array+0x40>)
 800bf86:	4c0c      	ldr	r4, [pc, #48]	; (800bfb8 <__libc_init_array+0x44>)
 800bf88:	f001 f882 	bl	800d090 <_init>
 800bf8c:	1b64      	subs	r4, r4, r5
 800bf8e:	10a4      	asrs	r4, r4, #2
 800bf90:	2600      	movs	r6, #0
 800bf92:	42a6      	cmp	r6, r4
 800bf94:	d105      	bne.n	800bfa2 <__libc_init_array+0x2e>
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf9c:	4798      	blx	r3
 800bf9e:	3601      	adds	r6, #1
 800bfa0:	e7ee      	b.n	800bf80 <__libc_init_array+0xc>
 800bfa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa6:	4798      	blx	r3
 800bfa8:	3601      	adds	r6, #1
 800bfaa:	e7f2      	b.n	800bf92 <__libc_init_array+0x1e>
 800bfac:	0800d1f0 	.word	0x0800d1f0
 800bfb0:	0800d1f0 	.word	0x0800d1f0
 800bfb4:	0800d1f0 	.word	0x0800d1f0
 800bfb8:	0800d1f4 	.word	0x0800d1f4

0800bfbc <memset>:
 800bfbc:	4402      	add	r2, r0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d100      	bne.n	800bfc6 <memset+0xa>
 800bfc4:	4770      	bx	lr
 800bfc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfca:	e7f9      	b.n	800bfc0 <memset+0x4>

0800bfcc <iprintf>:
 800bfcc:	b40f      	push	{r0, r1, r2, r3}
 800bfce:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <iprintf+0x2c>)
 800bfd0:	b513      	push	{r0, r1, r4, lr}
 800bfd2:	681c      	ldr	r4, [r3, #0]
 800bfd4:	b124      	cbz	r4, 800bfe0 <iprintf+0x14>
 800bfd6:	69a3      	ldr	r3, [r4, #24]
 800bfd8:	b913      	cbnz	r3, 800bfe0 <iprintf+0x14>
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f000 fa74 	bl	800c4c8 <__sinit>
 800bfe0:	ab05      	add	r3, sp, #20
 800bfe2:	9a04      	ldr	r2, [sp, #16]
 800bfe4:	68a1      	ldr	r1, [r4, #8]
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 fc7d 	bl	800c8e8 <_vfiprintf_r>
 800bfee:	b002      	add	sp, #8
 800bff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bff4:	b004      	add	sp, #16
 800bff6:	4770      	bx	lr
 800bff8:	24000130 	.word	0x24000130

0800bffc <putchar>:
 800bffc:	4b09      	ldr	r3, [pc, #36]	; (800c024 <putchar+0x28>)
 800bffe:	b513      	push	{r0, r1, r4, lr}
 800c000:	681c      	ldr	r4, [r3, #0]
 800c002:	4601      	mov	r1, r0
 800c004:	b134      	cbz	r4, 800c014 <putchar+0x18>
 800c006:	69a3      	ldr	r3, [r4, #24]
 800c008:	b923      	cbnz	r3, 800c014 <putchar+0x18>
 800c00a:	9001      	str	r0, [sp, #4]
 800c00c:	4620      	mov	r0, r4
 800c00e:	f000 fa5b 	bl	800c4c8 <__sinit>
 800c012:	9901      	ldr	r1, [sp, #4]
 800c014:	68a2      	ldr	r2, [r4, #8]
 800c016:	4620      	mov	r0, r4
 800c018:	b002      	add	sp, #8
 800c01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c01e:	f000 bf27 	b.w	800ce70 <_putc_r>
 800c022:	bf00      	nop
 800c024:	24000130 	.word	0x24000130

0800c028 <_puts_r>:
 800c028:	b570      	push	{r4, r5, r6, lr}
 800c02a:	460e      	mov	r6, r1
 800c02c:	4605      	mov	r5, r0
 800c02e:	b118      	cbz	r0, 800c038 <_puts_r+0x10>
 800c030:	6983      	ldr	r3, [r0, #24]
 800c032:	b90b      	cbnz	r3, 800c038 <_puts_r+0x10>
 800c034:	f000 fa48 	bl	800c4c8 <__sinit>
 800c038:	69ab      	ldr	r3, [r5, #24]
 800c03a:	68ac      	ldr	r4, [r5, #8]
 800c03c:	b913      	cbnz	r3, 800c044 <_puts_r+0x1c>
 800c03e:	4628      	mov	r0, r5
 800c040:	f000 fa42 	bl	800c4c8 <__sinit>
 800c044:	4b2c      	ldr	r3, [pc, #176]	; (800c0f8 <_puts_r+0xd0>)
 800c046:	429c      	cmp	r4, r3
 800c048:	d120      	bne.n	800c08c <_puts_r+0x64>
 800c04a:	686c      	ldr	r4, [r5, #4]
 800c04c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c04e:	07db      	lsls	r3, r3, #31
 800c050:	d405      	bmi.n	800c05e <_puts_r+0x36>
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	0598      	lsls	r0, r3, #22
 800c056:	d402      	bmi.n	800c05e <_puts_r+0x36>
 800c058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c05a:	f000 fad3 	bl	800c604 <__retarget_lock_acquire_recursive>
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	0719      	lsls	r1, r3, #28
 800c062:	d51d      	bpl.n	800c0a0 <_puts_r+0x78>
 800c064:	6923      	ldr	r3, [r4, #16]
 800c066:	b1db      	cbz	r3, 800c0a0 <_puts_r+0x78>
 800c068:	3e01      	subs	r6, #1
 800c06a:	68a3      	ldr	r3, [r4, #8]
 800c06c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c070:	3b01      	subs	r3, #1
 800c072:	60a3      	str	r3, [r4, #8]
 800c074:	bb39      	cbnz	r1, 800c0c6 <_puts_r+0x9e>
 800c076:	2b00      	cmp	r3, #0
 800c078:	da38      	bge.n	800c0ec <_puts_r+0xc4>
 800c07a:	4622      	mov	r2, r4
 800c07c:	210a      	movs	r1, #10
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 f848 	bl	800c114 <__swbuf_r>
 800c084:	3001      	adds	r0, #1
 800c086:	d011      	beq.n	800c0ac <_puts_r+0x84>
 800c088:	250a      	movs	r5, #10
 800c08a:	e011      	b.n	800c0b0 <_puts_r+0x88>
 800c08c:	4b1b      	ldr	r3, [pc, #108]	; (800c0fc <_puts_r+0xd4>)
 800c08e:	429c      	cmp	r4, r3
 800c090:	d101      	bne.n	800c096 <_puts_r+0x6e>
 800c092:	68ac      	ldr	r4, [r5, #8]
 800c094:	e7da      	b.n	800c04c <_puts_r+0x24>
 800c096:	4b1a      	ldr	r3, [pc, #104]	; (800c100 <_puts_r+0xd8>)
 800c098:	429c      	cmp	r4, r3
 800c09a:	bf08      	it	eq
 800c09c:	68ec      	ldreq	r4, [r5, #12]
 800c09e:	e7d5      	b.n	800c04c <_puts_r+0x24>
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f000 f888 	bl	800c1b8 <__swsetup_r>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d0dd      	beq.n	800c068 <_puts_r+0x40>
 800c0ac:	f04f 35ff 	mov.w	r5, #4294967295
 800c0b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0b2:	07da      	lsls	r2, r3, #31
 800c0b4:	d405      	bmi.n	800c0c2 <_puts_r+0x9a>
 800c0b6:	89a3      	ldrh	r3, [r4, #12]
 800c0b8:	059b      	lsls	r3, r3, #22
 800c0ba:	d402      	bmi.n	800c0c2 <_puts_r+0x9a>
 800c0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0be:	f000 faa2 	bl	800c606 <__retarget_lock_release_recursive>
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	bd70      	pop	{r4, r5, r6, pc}
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da04      	bge.n	800c0d4 <_puts_r+0xac>
 800c0ca:	69a2      	ldr	r2, [r4, #24]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	dc06      	bgt.n	800c0de <_puts_r+0xb6>
 800c0d0:	290a      	cmp	r1, #10
 800c0d2:	d004      	beq.n	800c0de <_puts_r+0xb6>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	6022      	str	r2, [r4, #0]
 800c0da:	7019      	strb	r1, [r3, #0]
 800c0dc:	e7c5      	b.n	800c06a <_puts_r+0x42>
 800c0de:	4622      	mov	r2, r4
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f000 f817 	bl	800c114 <__swbuf_r>
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	d1bf      	bne.n	800c06a <_puts_r+0x42>
 800c0ea:	e7df      	b.n	800c0ac <_puts_r+0x84>
 800c0ec:	6823      	ldr	r3, [r4, #0]
 800c0ee:	250a      	movs	r5, #10
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	6022      	str	r2, [r4, #0]
 800c0f4:	701d      	strb	r5, [r3, #0]
 800c0f6:	e7db      	b.n	800c0b0 <_puts_r+0x88>
 800c0f8:	0800d17c 	.word	0x0800d17c
 800c0fc:	0800d19c 	.word	0x0800d19c
 800c100:	0800d15c 	.word	0x0800d15c

0800c104 <puts>:
 800c104:	4b02      	ldr	r3, [pc, #8]	; (800c110 <puts+0xc>)
 800c106:	4601      	mov	r1, r0
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f7ff bf8d 	b.w	800c028 <_puts_r>
 800c10e:	bf00      	nop
 800c110:	24000130 	.word	0x24000130

0800c114 <__swbuf_r>:
 800c114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c116:	460e      	mov	r6, r1
 800c118:	4614      	mov	r4, r2
 800c11a:	4605      	mov	r5, r0
 800c11c:	b118      	cbz	r0, 800c126 <__swbuf_r+0x12>
 800c11e:	6983      	ldr	r3, [r0, #24]
 800c120:	b90b      	cbnz	r3, 800c126 <__swbuf_r+0x12>
 800c122:	f000 f9d1 	bl	800c4c8 <__sinit>
 800c126:	4b21      	ldr	r3, [pc, #132]	; (800c1ac <__swbuf_r+0x98>)
 800c128:	429c      	cmp	r4, r3
 800c12a:	d12b      	bne.n	800c184 <__swbuf_r+0x70>
 800c12c:	686c      	ldr	r4, [r5, #4]
 800c12e:	69a3      	ldr	r3, [r4, #24]
 800c130:	60a3      	str	r3, [r4, #8]
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	071a      	lsls	r2, r3, #28
 800c136:	d52f      	bpl.n	800c198 <__swbuf_r+0x84>
 800c138:	6923      	ldr	r3, [r4, #16]
 800c13a:	b36b      	cbz	r3, 800c198 <__swbuf_r+0x84>
 800c13c:	6923      	ldr	r3, [r4, #16]
 800c13e:	6820      	ldr	r0, [r4, #0]
 800c140:	1ac0      	subs	r0, r0, r3
 800c142:	6963      	ldr	r3, [r4, #20]
 800c144:	b2f6      	uxtb	r6, r6
 800c146:	4283      	cmp	r3, r0
 800c148:	4637      	mov	r7, r6
 800c14a:	dc04      	bgt.n	800c156 <__swbuf_r+0x42>
 800c14c:	4621      	mov	r1, r4
 800c14e:	4628      	mov	r0, r5
 800c150:	f000 f926 	bl	800c3a0 <_fflush_r>
 800c154:	bb30      	cbnz	r0, 800c1a4 <__swbuf_r+0x90>
 800c156:	68a3      	ldr	r3, [r4, #8]
 800c158:	3b01      	subs	r3, #1
 800c15a:	60a3      	str	r3, [r4, #8]
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	6022      	str	r2, [r4, #0]
 800c162:	701e      	strb	r6, [r3, #0]
 800c164:	6963      	ldr	r3, [r4, #20]
 800c166:	3001      	adds	r0, #1
 800c168:	4283      	cmp	r3, r0
 800c16a:	d004      	beq.n	800c176 <__swbuf_r+0x62>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	07db      	lsls	r3, r3, #31
 800c170:	d506      	bpl.n	800c180 <__swbuf_r+0x6c>
 800c172:	2e0a      	cmp	r6, #10
 800c174:	d104      	bne.n	800c180 <__swbuf_r+0x6c>
 800c176:	4621      	mov	r1, r4
 800c178:	4628      	mov	r0, r5
 800c17a:	f000 f911 	bl	800c3a0 <_fflush_r>
 800c17e:	b988      	cbnz	r0, 800c1a4 <__swbuf_r+0x90>
 800c180:	4638      	mov	r0, r7
 800c182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c184:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <__swbuf_r+0x9c>)
 800c186:	429c      	cmp	r4, r3
 800c188:	d101      	bne.n	800c18e <__swbuf_r+0x7a>
 800c18a:	68ac      	ldr	r4, [r5, #8]
 800c18c:	e7cf      	b.n	800c12e <__swbuf_r+0x1a>
 800c18e:	4b09      	ldr	r3, [pc, #36]	; (800c1b4 <__swbuf_r+0xa0>)
 800c190:	429c      	cmp	r4, r3
 800c192:	bf08      	it	eq
 800c194:	68ec      	ldreq	r4, [r5, #12]
 800c196:	e7ca      	b.n	800c12e <__swbuf_r+0x1a>
 800c198:	4621      	mov	r1, r4
 800c19a:	4628      	mov	r0, r5
 800c19c:	f000 f80c 	bl	800c1b8 <__swsetup_r>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d0cb      	beq.n	800c13c <__swbuf_r+0x28>
 800c1a4:	f04f 37ff 	mov.w	r7, #4294967295
 800c1a8:	e7ea      	b.n	800c180 <__swbuf_r+0x6c>
 800c1aa:	bf00      	nop
 800c1ac:	0800d17c 	.word	0x0800d17c
 800c1b0:	0800d19c 	.word	0x0800d19c
 800c1b4:	0800d15c 	.word	0x0800d15c

0800c1b8 <__swsetup_r>:
 800c1b8:	4b32      	ldr	r3, [pc, #200]	; (800c284 <__swsetup_r+0xcc>)
 800c1ba:	b570      	push	{r4, r5, r6, lr}
 800c1bc:	681d      	ldr	r5, [r3, #0]
 800c1be:	4606      	mov	r6, r0
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	b125      	cbz	r5, 800c1ce <__swsetup_r+0x16>
 800c1c4:	69ab      	ldr	r3, [r5, #24]
 800c1c6:	b913      	cbnz	r3, 800c1ce <__swsetup_r+0x16>
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	f000 f97d 	bl	800c4c8 <__sinit>
 800c1ce:	4b2e      	ldr	r3, [pc, #184]	; (800c288 <__swsetup_r+0xd0>)
 800c1d0:	429c      	cmp	r4, r3
 800c1d2:	d10f      	bne.n	800c1f4 <__swsetup_r+0x3c>
 800c1d4:	686c      	ldr	r4, [r5, #4]
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1dc:	0719      	lsls	r1, r3, #28
 800c1de:	d42c      	bmi.n	800c23a <__swsetup_r+0x82>
 800c1e0:	06dd      	lsls	r5, r3, #27
 800c1e2:	d411      	bmi.n	800c208 <__swsetup_r+0x50>
 800c1e4:	2309      	movs	r3, #9
 800c1e6:	6033      	str	r3, [r6, #0]
 800c1e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1ec:	81a3      	strh	r3, [r4, #12]
 800c1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f2:	e03e      	b.n	800c272 <__swsetup_r+0xba>
 800c1f4:	4b25      	ldr	r3, [pc, #148]	; (800c28c <__swsetup_r+0xd4>)
 800c1f6:	429c      	cmp	r4, r3
 800c1f8:	d101      	bne.n	800c1fe <__swsetup_r+0x46>
 800c1fa:	68ac      	ldr	r4, [r5, #8]
 800c1fc:	e7eb      	b.n	800c1d6 <__swsetup_r+0x1e>
 800c1fe:	4b24      	ldr	r3, [pc, #144]	; (800c290 <__swsetup_r+0xd8>)
 800c200:	429c      	cmp	r4, r3
 800c202:	bf08      	it	eq
 800c204:	68ec      	ldreq	r4, [r5, #12]
 800c206:	e7e6      	b.n	800c1d6 <__swsetup_r+0x1e>
 800c208:	0758      	lsls	r0, r3, #29
 800c20a:	d512      	bpl.n	800c232 <__swsetup_r+0x7a>
 800c20c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c20e:	b141      	cbz	r1, 800c222 <__swsetup_r+0x6a>
 800c210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c214:	4299      	cmp	r1, r3
 800c216:	d002      	beq.n	800c21e <__swsetup_r+0x66>
 800c218:	4630      	mov	r0, r6
 800c21a:	f000 fa5b 	bl	800c6d4 <_free_r>
 800c21e:	2300      	movs	r3, #0
 800c220:	6363      	str	r3, [r4, #52]	; 0x34
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c228:	81a3      	strh	r3, [r4, #12]
 800c22a:	2300      	movs	r3, #0
 800c22c:	6063      	str	r3, [r4, #4]
 800c22e:	6923      	ldr	r3, [r4, #16]
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	f043 0308 	orr.w	r3, r3, #8
 800c238:	81a3      	strh	r3, [r4, #12]
 800c23a:	6923      	ldr	r3, [r4, #16]
 800c23c:	b94b      	cbnz	r3, 800c252 <__swsetup_r+0x9a>
 800c23e:	89a3      	ldrh	r3, [r4, #12]
 800c240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c248:	d003      	beq.n	800c252 <__swsetup_r+0x9a>
 800c24a:	4621      	mov	r1, r4
 800c24c:	4630      	mov	r0, r6
 800c24e:	f000 fa01 	bl	800c654 <__smakebuf_r>
 800c252:	89a0      	ldrh	r0, [r4, #12]
 800c254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c258:	f010 0301 	ands.w	r3, r0, #1
 800c25c:	d00a      	beq.n	800c274 <__swsetup_r+0xbc>
 800c25e:	2300      	movs	r3, #0
 800c260:	60a3      	str	r3, [r4, #8]
 800c262:	6963      	ldr	r3, [r4, #20]
 800c264:	425b      	negs	r3, r3
 800c266:	61a3      	str	r3, [r4, #24]
 800c268:	6923      	ldr	r3, [r4, #16]
 800c26a:	b943      	cbnz	r3, 800c27e <__swsetup_r+0xc6>
 800c26c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c270:	d1ba      	bne.n	800c1e8 <__swsetup_r+0x30>
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	0781      	lsls	r1, r0, #30
 800c276:	bf58      	it	pl
 800c278:	6963      	ldrpl	r3, [r4, #20]
 800c27a:	60a3      	str	r3, [r4, #8]
 800c27c:	e7f4      	b.n	800c268 <__swsetup_r+0xb0>
 800c27e:	2000      	movs	r0, #0
 800c280:	e7f7      	b.n	800c272 <__swsetup_r+0xba>
 800c282:	bf00      	nop
 800c284:	24000130 	.word	0x24000130
 800c288:	0800d17c 	.word	0x0800d17c
 800c28c:	0800d19c 	.word	0x0800d19c
 800c290:	0800d15c 	.word	0x0800d15c

0800c294 <__sflush_r>:
 800c294:	898a      	ldrh	r2, [r1, #12]
 800c296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29a:	4605      	mov	r5, r0
 800c29c:	0710      	lsls	r0, r2, #28
 800c29e:	460c      	mov	r4, r1
 800c2a0:	d458      	bmi.n	800c354 <__sflush_r+0xc0>
 800c2a2:	684b      	ldr	r3, [r1, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	dc05      	bgt.n	800c2b4 <__sflush_r+0x20>
 800c2a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	dc02      	bgt.n	800c2b4 <__sflush_r+0x20>
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2b6:	2e00      	cmp	r6, #0
 800c2b8:	d0f9      	beq.n	800c2ae <__sflush_r+0x1a>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2c0:	682f      	ldr	r7, [r5, #0]
 800c2c2:	602b      	str	r3, [r5, #0]
 800c2c4:	d032      	beq.n	800c32c <__sflush_r+0x98>
 800c2c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	075a      	lsls	r2, r3, #29
 800c2cc:	d505      	bpl.n	800c2da <__sflush_r+0x46>
 800c2ce:	6863      	ldr	r3, [r4, #4]
 800c2d0:	1ac0      	subs	r0, r0, r3
 800c2d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2d4:	b10b      	cbz	r3, 800c2da <__sflush_r+0x46>
 800c2d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2d8:	1ac0      	subs	r0, r0, r3
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4602      	mov	r2, r0
 800c2de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2e0:	6a21      	ldr	r1, [r4, #32]
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	47b0      	blx	r6
 800c2e6:	1c43      	adds	r3, r0, #1
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	d106      	bne.n	800c2fa <__sflush_r+0x66>
 800c2ec:	6829      	ldr	r1, [r5, #0]
 800c2ee:	291d      	cmp	r1, #29
 800c2f0:	d82c      	bhi.n	800c34c <__sflush_r+0xb8>
 800c2f2:	4a2a      	ldr	r2, [pc, #168]	; (800c39c <__sflush_r+0x108>)
 800c2f4:	40ca      	lsrs	r2, r1
 800c2f6:	07d6      	lsls	r6, r2, #31
 800c2f8:	d528      	bpl.n	800c34c <__sflush_r+0xb8>
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	6062      	str	r2, [r4, #4]
 800c2fe:	04d9      	lsls	r1, r3, #19
 800c300:	6922      	ldr	r2, [r4, #16]
 800c302:	6022      	str	r2, [r4, #0]
 800c304:	d504      	bpl.n	800c310 <__sflush_r+0x7c>
 800c306:	1c42      	adds	r2, r0, #1
 800c308:	d101      	bne.n	800c30e <__sflush_r+0x7a>
 800c30a:	682b      	ldr	r3, [r5, #0]
 800c30c:	b903      	cbnz	r3, 800c310 <__sflush_r+0x7c>
 800c30e:	6560      	str	r0, [r4, #84]	; 0x54
 800c310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c312:	602f      	str	r7, [r5, #0]
 800c314:	2900      	cmp	r1, #0
 800c316:	d0ca      	beq.n	800c2ae <__sflush_r+0x1a>
 800c318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c31c:	4299      	cmp	r1, r3
 800c31e:	d002      	beq.n	800c326 <__sflush_r+0x92>
 800c320:	4628      	mov	r0, r5
 800c322:	f000 f9d7 	bl	800c6d4 <_free_r>
 800c326:	2000      	movs	r0, #0
 800c328:	6360      	str	r0, [r4, #52]	; 0x34
 800c32a:	e7c1      	b.n	800c2b0 <__sflush_r+0x1c>
 800c32c:	6a21      	ldr	r1, [r4, #32]
 800c32e:	2301      	movs	r3, #1
 800c330:	4628      	mov	r0, r5
 800c332:	47b0      	blx	r6
 800c334:	1c41      	adds	r1, r0, #1
 800c336:	d1c7      	bne.n	800c2c8 <__sflush_r+0x34>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d0c4      	beq.n	800c2c8 <__sflush_r+0x34>
 800c33e:	2b1d      	cmp	r3, #29
 800c340:	d001      	beq.n	800c346 <__sflush_r+0xb2>
 800c342:	2b16      	cmp	r3, #22
 800c344:	d101      	bne.n	800c34a <__sflush_r+0xb6>
 800c346:	602f      	str	r7, [r5, #0]
 800c348:	e7b1      	b.n	800c2ae <__sflush_r+0x1a>
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c350:	81a3      	strh	r3, [r4, #12]
 800c352:	e7ad      	b.n	800c2b0 <__sflush_r+0x1c>
 800c354:	690f      	ldr	r7, [r1, #16]
 800c356:	2f00      	cmp	r7, #0
 800c358:	d0a9      	beq.n	800c2ae <__sflush_r+0x1a>
 800c35a:	0793      	lsls	r3, r2, #30
 800c35c:	680e      	ldr	r6, [r1, #0]
 800c35e:	bf08      	it	eq
 800c360:	694b      	ldreq	r3, [r1, #20]
 800c362:	600f      	str	r7, [r1, #0]
 800c364:	bf18      	it	ne
 800c366:	2300      	movne	r3, #0
 800c368:	eba6 0807 	sub.w	r8, r6, r7
 800c36c:	608b      	str	r3, [r1, #8]
 800c36e:	f1b8 0f00 	cmp.w	r8, #0
 800c372:	dd9c      	ble.n	800c2ae <__sflush_r+0x1a>
 800c374:	6a21      	ldr	r1, [r4, #32]
 800c376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c378:	4643      	mov	r3, r8
 800c37a:	463a      	mov	r2, r7
 800c37c:	4628      	mov	r0, r5
 800c37e:	47b0      	blx	r6
 800c380:	2800      	cmp	r0, #0
 800c382:	dc06      	bgt.n	800c392 <__sflush_r+0xfe>
 800c384:	89a3      	ldrh	r3, [r4, #12]
 800c386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c38a:	81a3      	strh	r3, [r4, #12]
 800c38c:	f04f 30ff 	mov.w	r0, #4294967295
 800c390:	e78e      	b.n	800c2b0 <__sflush_r+0x1c>
 800c392:	4407      	add	r7, r0
 800c394:	eba8 0800 	sub.w	r8, r8, r0
 800c398:	e7e9      	b.n	800c36e <__sflush_r+0xda>
 800c39a:	bf00      	nop
 800c39c:	20400001 	.word	0x20400001

0800c3a0 <_fflush_r>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	690b      	ldr	r3, [r1, #16]
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	b913      	cbnz	r3, 800c3b0 <_fflush_r+0x10>
 800c3aa:	2500      	movs	r5, #0
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	bd38      	pop	{r3, r4, r5, pc}
 800c3b0:	b118      	cbz	r0, 800c3ba <_fflush_r+0x1a>
 800c3b2:	6983      	ldr	r3, [r0, #24]
 800c3b4:	b90b      	cbnz	r3, 800c3ba <_fflush_r+0x1a>
 800c3b6:	f000 f887 	bl	800c4c8 <__sinit>
 800c3ba:	4b14      	ldr	r3, [pc, #80]	; (800c40c <_fflush_r+0x6c>)
 800c3bc:	429c      	cmp	r4, r3
 800c3be:	d11b      	bne.n	800c3f8 <_fflush_r+0x58>
 800c3c0:	686c      	ldr	r4, [r5, #4]
 800c3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0ef      	beq.n	800c3aa <_fflush_r+0xa>
 800c3ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3cc:	07d0      	lsls	r0, r2, #31
 800c3ce:	d404      	bmi.n	800c3da <_fflush_r+0x3a>
 800c3d0:	0599      	lsls	r1, r3, #22
 800c3d2:	d402      	bmi.n	800c3da <_fflush_r+0x3a>
 800c3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3d6:	f000 f915 	bl	800c604 <__retarget_lock_acquire_recursive>
 800c3da:	4628      	mov	r0, r5
 800c3dc:	4621      	mov	r1, r4
 800c3de:	f7ff ff59 	bl	800c294 <__sflush_r>
 800c3e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3e4:	07da      	lsls	r2, r3, #31
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	d4e0      	bmi.n	800c3ac <_fflush_r+0xc>
 800c3ea:	89a3      	ldrh	r3, [r4, #12]
 800c3ec:	059b      	lsls	r3, r3, #22
 800c3ee:	d4dd      	bmi.n	800c3ac <_fflush_r+0xc>
 800c3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3f2:	f000 f908 	bl	800c606 <__retarget_lock_release_recursive>
 800c3f6:	e7d9      	b.n	800c3ac <_fflush_r+0xc>
 800c3f8:	4b05      	ldr	r3, [pc, #20]	; (800c410 <_fflush_r+0x70>)
 800c3fa:	429c      	cmp	r4, r3
 800c3fc:	d101      	bne.n	800c402 <_fflush_r+0x62>
 800c3fe:	68ac      	ldr	r4, [r5, #8]
 800c400:	e7df      	b.n	800c3c2 <_fflush_r+0x22>
 800c402:	4b04      	ldr	r3, [pc, #16]	; (800c414 <_fflush_r+0x74>)
 800c404:	429c      	cmp	r4, r3
 800c406:	bf08      	it	eq
 800c408:	68ec      	ldreq	r4, [r5, #12]
 800c40a:	e7da      	b.n	800c3c2 <_fflush_r+0x22>
 800c40c:	0800d17c 	.word	0x0800d17c
 800c410:	0800d19c 	.word	0x0800d19c
 800c414:	0800d15c 	.word	0x0800d15c

0800c418 <std>:
 800c418:	2300      	movs	r3, #0
 800c41a:	b510      	push	{r4, lr}
 800c41c:	4604      	mov	r4, r0
 800c41e:	e9c0 3300 	strd	r3, r3, [r0]
 800c422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c426:	6083      	str	r3, [r0, #8]
 800c428:	8181      	strh	r1, [r0, #12]
 800c42a:	6643      	str	r3, [r0, #100]	; 0x64
 800c42c:	81c2      	strh	r2, [r0, #14]
 800c42e:	6183      	str	r3, [r0, #24]
 800c430:	4619      	mov	r1, r3
 800c432:	2208      	movs	r2, #8
 800c434:	305c      	adds	r0, #92	; 0x5c
 800c436:	f7ff fdc1 	bl	800bfbc <memset>
 800c43a:	4b05      	ldr	r3, [pc, #20]	; (800c450 <std+0x38>)
 800c43c:	6263      	str	r3, [r4, #36]	; 0x24
 800c43e:	4b05      	ldr	r3, [pc, #20]	; (800c454 <std+0x3c>)
 800c440:	62a3      	str	r3, [r4, #40]	; 0x28
 800c442:	4b05      	ldr	r3, [pc, #20]	; (800c458 <std+0x40>)
 800c444:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c446:	4b05      	ldr	r3, [pc, #20]	; (800c45c <std+0x44>)
 800c448:	6224      	str	r4, [r4, #32]
 800c44a:	6323      	str	r3, [r4, #48]	; 0x30
 800c44c:	bd10      	pop	{r4, pc}
 800c44e:	bf00      	nop
 800c450:	0800cf21 	.word	0x0800cf21
 800c454:	0800cf43 	.word	0x0800cf43
 800c458:	0800cf7b 	.word	0x0800cf7b
 800c45c:	0800cf9f 	.word	0x0800cf9f

0800c460 <_cleanup_r>:
 800c460:	4901      	ldr	r1, [pc, #4]	; (800c468 <_cleanup_r+0x8>)
 800c462:	f000 b8af 	b.w	800c5c4 <_fwalk_reent>
 800c466:	bf00      	nop
 800c468:	0800c3a1 	.word	0x0800c3a1

0800c46c <__sfmoreglue>:
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	2268      	movs	r2, #104	; 0x68
 800c470:	1e4d      	subs	r5, r1, #1
 800c472:	4355      	muls	r5, r2
 800c474:	460e      	mov	r6, r1
 800c476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c47a:	f000 f997 	bl	800c7ac <_malloc_r>
 800c47e:	4604      	mov	r4, r0
 800c480:	b140      	cbz	r0, 800c494 <__sfmoreglue+0x28>
 800c482:	2100      	movs	r1, #0
 800c484:	e9c0 1600 	strd	r1, r6, [r0]
 800c488:	300c      	adds	r0, #12
 800c48a:	60a0      	str	r0, [r4, #8]
 800c48c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c490:	f7ff fd94 	bl	800bfbc <memset>
 800c494:	4620      	mov	r0, r4
 800c496:	bd70      	pop	{r4, r5, r6, pc}

0800c498 <__sfp_lock_acquire>:
 800c498:	4801      	ldr	r0, [pc, #4]	; (800c4a0 <__sfp_lock_acquire+0x8>)
 800c49a:	f000 b8b3 	b.w	800c604 <__retarget_lock_acquire_recursive>
 800c49e:	bf00      	nop
 800c4a0:	24004b35 	.word	0x24004b35

0800c4a4 <__sfp_lock_release>:
 800c4a4:	4801      	ldr	r0, [pc, #4]	; (800c4ac <__sfp_lock_release+0x8>)
 800c4a6:	f000 b8ae 	b.w	800c606 <__retarget_lock_release_recursive>
 800c4aa:	bf00      	nop
 800c4ac:	24004b35 	.word	0x24004b35

0800c4b0 <__sinit_lock_acquire>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	; (800c4b8 <__sinit_lock_acquire+0x8>)
 800c4b2:	f000 b8a7 	b.w	800c604 <__retarget_lock_acquire_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	24004b36 	.word	0x24004b36

0800c4bc <__sinit_lock_release>:
 800c4bc:	4801      	ldr	r0, [pc, #4]	; (800c4c4 <__sinit_lock_release+0x8>)
 800c4be:	f000 b8a2 	b.w	800c606 <__retarget_lock_release_recursive>
 800c4c2:	bf00      	nop
 800c4c4:	24004b36 	.word	0x24004b36

0800c4c8 <__sinit>:
 800c4c8:	b510      	push	{r4, lr}
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	f7ff fff0 	bl	800c4b0 <__sinit_lock_acquire>
 800c4d0:	69a3      	ldr	r3, [r4, #24]
 800c4d2:	b11b      	cbz	r3, 800c4dc <__sinit+0x14>
 800c4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4d8:	f7ff bff0 	b.w	800c4bc <__sinit_lock_release>
 800c4dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4e0:	6523      	str	r3, [r4, #80]	; 0x50
 800c4e2:	4b13      	ldr	r3, [pc, #76]	; (800c530 <__sinit+0x68>)
 800c4e4:	4a13      	ldr	r2, [pc, #76]	; (800c534 <__sinit+0x6c>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4ea:	42a3      	cmp	r3, r4
 800c4ec:	bf04      	itt	eq
 800c4ee:	2301      	moveq	r3, #1
 800c4f0:	61a3      	streq	r3, [r4, #24]
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 f820 	bl	800c538 <__sfp>
 800c4f8:	6060      	str	r0, [r4, #4]
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 f81c 	bl	800c538 <__sfp>
 800c500:	60a0      	str	r0, [r4, #8]
 800c502:	4620      	mov	r0, r4
 800c504:	f000 f818 	bl	800c538 <__sfp>
 800c508:	2200      	movs	r2, #0
 800c50a:	60e0      	str	r0, [r4, #12]
 800c50c:	2104      	movs	r1, #4
 800c50e:	6860      	ldr	r0, [r4, #4]
 800c510:	f7ff ff82 	bl	800c418 <std>
 800c514:	68a0      	ldr	r0, [r4, #8]
 800c516:	2201      	movs	r2, #1
 800c518:	2109      	movs	r1, #9
 800c51a:	f7ff ff7d 	bl	800c418 <std>
 800c51e:	68e0      	ldr	r0, [r4, #12]
 800c520:	2202      	movs	r2, #2
 800c522:	2112      	movs	r1, #18
 800c524:	f7ff ff78 	bl	800c418 <std>
 800c528:	2301      	movs	r3, #1
 800c52a:	61a3      	str	r3, [r4, #24]
 800c52c:	e7d2      	b.n	800c4d4 <__sinit+0xc>
 800c52e:	bf00      	nop
 800c530:	0800d158 	.word	0x0800d158
 800c534:	0800c461 	.word	0x0800c461

0800c538 <__sfp>:
 800c538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53a:	4607      	mov	r7, r0
 800c53c:	f7ff ffac 	bl	800c498 <__sfp_lock_acquire>
 800c540:	4b1e      	ldr	r3, [pc, #120]	; (800c5bc <__sfp+0x84>)
 800c542:	681e      	ldr	r6, [r3, #0]
 800c544:	69b3      	ldr	r3, [r6, #24]
 800c546:	b913      	cbnz	r3, 800c54e <__sfp+0x16>
 800c548:	4630      	mov	r0, r6
 800c54a:	f7ff ffbd 	bl	800c4c8 <__sinit>
 800c54e:	3648      	adds	r6, #72	; 0x48
 800c550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c554:	3b01      	subs	r3, #1
 800c556:	d503      	bpl.n	800c560 <__sfp+0x28>
 800c558:	6833      	ldr	r3, [r6, #0]
 800c55a:	b30b      	cbz	r3, 800c5a0 <__sfp+0x68>
 800c55c:	6836      	ldr	r6, [r6, #0]
 800c55e:	e7f7      	b.n	800c550 <__sfp+0x18>
 800c560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c564:	b9d5      	cbnz	r5, 800c59c <__sfp+0x64>
 800c566:	4b16      	ldr	r3, [pc, #88]	; (800c5c0 <__sfp+0x88>)
 800c568:	60e3      	str	r3, [r4, #12]
 800c56a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c56e:	6665      	str	r5, [r4, #100]	; 0x64
 800c570:	f000 f847 	bl	800c602 <__retarget_lock_init_recursive>
 800c574:	f7ff ff96 	bl	800c4a4 <__sfp_lock_release>
 800c578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c57c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c580:	6025      	str	r5, [r4, #0]
 800c582:	61a5      	str	r5, [r4, #24]
 800c584:	2208      	movs	r2, #8
 800c586:	4629      	mov	r1, r5
 800c588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c58c:	f7ff fd16 	bl	800bfbc <memset>
 800c590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c598:	4620      	mov	r0, r4
 800c59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c59c:	3468      	adds	r4, #104	; 0x68
 800c59e:	e7d9      	b.n	800c554 <__sfp+0x1c>
 800c5a0:	2104      	movs	r1, #4
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	f7ff ff62 	bl	800c46c <__sfmoreglue>
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	6030      	str	r0, [r6, #0]
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	d1d5      	bne.n	800c55c <__sfp+0x24>
 800c5b0:	f7ff ff78 	bl	800c4a4 <__sfp_lock_release>
 800c5b4:	230c      	movs	r3, #12
 800c5b6:	603b      	str	r3, [r7, #0]
 800c5b8:	e7ee      	b.n	800c598 <__sfp+0x60>
 800c5ba:	bf00      	nop
 800c5bc:	0800d158 	.word	0x0800d158
 800c5c0:	ffff0001 	.word	0xffff0001

0800c5c4 <_fwalk_reent>:
 800c5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	4688      	mov	r8, r1
 800c5cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5d0:	2700      	movs	r7, #0
 800c5d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5d6:	f1b9 0901 	subs.w	r9, r9, #1
 800c5da:	d505      	bpl.n	800c5e8 <_fwalk_reent+0x24>
 800c5dc:	6824      	ldr	r4, [r4, #0]
 800c5de:	2c00      	cmp	r4, #0
 800c5e0:	d1f7      	bne.n	800c5d2 <_fwalk_reent+0xe>
 800c5e2:	4638      	mov	r0, r7
 800c5e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e8:	89ab      	ldrh	r3, [r5, #12]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d907      	bls.n	800c5fe <_fwalk_reent+0x3a>
 800c5ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	d003      	beq.n	800c5fe <_fwalk_reent+0x3a>
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	47c0      	blx	r8
 800c5fc:	4307      	orrs	r7, r0
 800c5fe:	3568      	adds	r5, #104	; 0x68
 800c600:	e7e9      	b.n	800c5d6 <_fwalk_reent+0x12>

0800c602 <__retarget_lock_init_recursive>:
 800c602:	4770      	bx	lr

0800c604 <__retarget_lock_acquire_recursive>:
 800c604:	4770      	bx	lr

0800c606 <__retarget_lock_release_recursive>:
 800c606:	4770      	bx	lr

0800c608 <__swhatbuf_r>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	460e      	mov	r6, r1
 800c60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c610:	2900      	cmp	r1, #0
 800c612:	b096      	sub	sp, #88	; 0x58
 800c614:	4614      	mov	r4, r2
 800c616:	461d      	mov	r5, r3
 800c618:	da08      	bge.n	800c62c <__swhatbuf_r+0x24>
 800c61a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	602a      	str	r2, [r5, #0]
 800c622:	061a      	lsls	r2, r3, #24
 800c624:	d410      	bmi.n	800c648 <__swhatbuf_r+0x40>
 800c626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c62a:	e00e      	b.n	800c64a <__swhatbuf_r+0x42>
 800c62c:	466a      	mov	r2, sp
 800c62e:	f000 fcdd 	bl	800cfec <_fstat_r>
 800c632:	2800      	cmp	r0, #0
 800c634:	dbf1      	blt.n	800c61a <__swhatbuf_r+0x12>
 800c636:	9a01      	ldr	r2, [sp, #4]
 800c638:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c63c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c640:	425a      	negs	r2, r3
 800c642:	415a      	adcs	r2, r3
 800c644:	602a      	str	r2, [r5, #0]
 800c646:	e7ee      	b.n	800c626 <__swhatbuf_r+0x1e>
 800c648:	2340      	movs	r3, #64	; 0x40
 800c64a:	2000      	movs	r0, #0
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	b016      	add	sp, #88	; 0x58
 800c650:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c654 <__smakebuf_r>:
 800c654:	898b      	ldrh	r3, [r1, #12]
 800c656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c658:	079d      	lsls	r5, r3, #30
 800c65a:	4606      	mov	r6, r0
 800c65c:	460c      	mov	r4, r1
 800c65e:	d507      	bpl.n	800c670 <__smakebuf_r+0x1c>
 800c660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	6123      	str	r3, [r4, #16]
 800c668:	2301      	movs	r3, #1
 800c66a:	6163      	str	r3, [r4, #20]
 800c66c:	b002      	add	sp, #8
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
 800c670:	ab01      	add	r3, sp, #4
 800c672:	466a      	mov	r2, sp
 800c674:	f7ff ffc8 	bl	800c608 <__swhatbuf_r>
 800c678:	9900      	ldr	r1, [sp, #0]
 800c67a:	4605      	mov	r5, r0
 800c67c:	4630      	mov	r0, r6
 800c67e:	f000 f895 	bl	800c7ac <_malloc_r>
 800c682:	b948      	cbnz	r0, 800c698 <__smakebuf_r+0x44>
 800c684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c688:	059a      	lsls	r2, r3, #22
 800c68a:	d4ef      	bmi.n	800c66c <__smakebuf_r+0x18>
 800c68c:	f023 0303 	bic.w	r3, r3, #3
 800c690:	f043 0302 	orr.w	r3, r3, #2
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	e7e3      	b.n	800c660 <__smakebuf_r+0xc>
 800c698:	4b0d      	ldr	r3, [pc, #52]	; (800c6d0 <__smakebuf_r+0x7c>)
 800c69a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	6020      	str	r0, [r4, #0]
 800c6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	9b00      	ldr	r3, [sp, #0]
 800c6a8:	6163      	str	r3, [r4, #20]
 800c6aa:	9b01      	ldr	r3, [sp, #4]
 800c6ac:	6120      	str	r0, [r4, #16]
 800c6ae:	b15b      	cbz	r3, 800c6c8 <__smakebuf_r+0x74>
 800c6b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f000 fcab 	bl	800d010 <_isatty_r>
 800c6ba:	b128      	cbz	r0, 800c6c8 <__smakebuf_r+0x74>
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	f023 0303 	bic.w	r3, r3, #3
 800c6c2:	f043 0301 	orr.w	r3, r3, #1
 800c6c6:	81a3      	strh	r3, [r4, #12]
 800c6c8:	89a0      	ldrh	r0, [r4, #12]
 800c6ca:	4305      	orrs	r5, r0
 800c6cc:	81a5      	strh	r5, [r4, #12]
 800c6ce:	e7cd      	b.n	800c66c <__smakebuf_r+0x18>
 800c6d0:	0800c461 	.word	0x0800c461

0800c6d4 <_free_r>:
 800c6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6d6:	2900      	cmp	r1, #0
 800c6d8:	d044      	beq.n	800c764 <_free_r+0x90>
 800c6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6de:	9001      	str	r0, [sp, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f1a1 0404 	sub.w	r4, r1, #4
 800c6e6:	bfb8      	it	lt
 800c6e8:	18e4      	addlt	r4, r4, r3
 800c6ea:	f000 fcb3 	bl	800d054 <__malloc_lock>
 800c6ee:	4a1e      	ldr	r2, [pc, #120]	; (800c768 <_free_r+0x94>)
 800c6f0:	9801      	ldr	r0, [sp, #4]
 800c6f2:	6813      	ldr	r3, [r2, #0]
 800c6f4:	b933      	cbnz	r3, 800c704 <_free_r+0x30>
 800c6f6:	6063      	str	r3, [r4, #4]
 800c6f8:	6014      	str	r4, [r2, #0]
 800c6fa:	b003      	add	sp, #12
 800c6fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c700:	f000 bcae 	b.w	800d060 <__malloc_unlock>
 800c704:	42a3      	cmp	r3, r4
 800c706:	d908      	bls.n	800c71a <_free_r+0x46>
 800c708:	6825      	ldr	r5, [r4, #0]
 800c70a:	1961      	adds	r1, r4, r5
 800c70c:	428b      	cmp	r3, r1
 800c70e:	bf01      	itttt	eq
 800c710:	6819      	ldreq	r1, [r3, #0]
 800c712:	685b      	ldreq	r3, [r3, #4]
 800c714:	1949      	addeq	r1, r1, r5
 800c716:	6021      	streq	r1, [r4, #0]
 800c718:	e7ed      	b.n	800c6f6 <_free_r+0x22>
 800c71a:	461a      	mov	r2, r3
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	b10b      	cbz	r3, 800c724 <_free_r+0x50>
 800c720:	42a3      	cmp	r3, r4
 800c722:	d9fa      	bls.n	800c71a <_free_r+0x46>
 800c724:	6811      	ldr	r1, [r2, #0]
 800c726:	1855      	adds	r5, r2, r1
 800c728:	42a5      	cmp	r5, r4
 800c72a:	d10b      	bne.n	800c744 <_free_r+0x70>
 800c72c:	6824      	ldr	r4, [r4, #0]
 800c72e:	4421      	add	r1, r4
 800c730:	1854      	adds	r4, r2, r1
 800c732:	42a3      	cmp	r3, r4
 800c734:	6011      	str	r1, [r2, #0]
 800c736:	d1e0      	bne.n	800c6fa <_free_r+0x26>
 800c738:	681c      	ldr	r4, [r3, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	6053      	str	r3, [r2, #4]
 800c73e:	4421      	add	r1, r4
 800c740:	6011      	str	r1, [r2, #0]
 800c742:	e7da      	b.n	800c6fa <_free_r+0x26>
 800c744:	d902      	bls.n	800c74c <_free_r+0x78>
 800c746:	230c      	movs	r3, #12
 800c748:	6003      	str	r3, [r0, #0]
 800c74a:	e7d6      	b.n	800c6fa <_free_r+0x26>
 800c74c:	6825      	ldr	r5, [r4, #0]
 800c74e:	1961      	adds	r1, r4, r5
 800c750:	428b      	cmp	r3, r1
 800c752:	bf04      	itt	eq
 800c754:	6819      	ldreq	r1, [r3, #0]
 800c756:	685b      	ldreq	r3, [r3, #4]
 800c758:	6063      	str	r3, [r4, #4]
 800c75a:	bf04      	itt	eq
 800c75c:	1949      	addeq	r1, r1, r5
 800c75e:	6021      	streq	r1, [r4, #0]
 800c760:	6054      	str	r4, [r2, #4]
 800c762:	e7ca      	b.n	800c6fa <_free_r+0x26>
 800c764:	b003      	add	sp, #12
 800c766:	bd30      	pop	{r4, r5, pc}
 800c768:	24004b38 	.word	0x24004b38

0800c76c <sbrk_aligned>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	4e0e      	ldr	r6, [pc, #56]	; (800c7a8 <sbrk_aligned+0x3c>)
 800c770:	460c      	mov	r4, r1
 800c772:	6831      	ldr	r1, [r6, #0]
 800c774:	4605      	mov	r5, r0
 800c776:	b911      	cbnz	r1, 800c77e <sbrk_aligned+0x12>
 800c778:	f000 fbc2 	bl	800cf00 <_sbrk_r>
 800c77c:	6030      	str	r0, [r6, #0]
 800c77e:	4621      	mov	r1, r4
 800c780:	4628      	mov	r0, r5
 800c782:	f000 fbbd 	bl	800cf00 <_sbrk_r>
 800c786:	1c43      	adds	r3, r0, #1
 800c788:	d00a      	beq.n	800c7a0 <sbrk_aligned+0x34>
 800c78a:	1cc4      	adds	r4, r0, #3
 800c78c:	f024 0403 	bic.w	r4, r4, #3
 800c790:	42a0      	cmp	r0, r4
 800c792:	d007      	beq.n	800c7a4 <sbrk_aligned+0x38>
 800c794:	1a21      	subs	r1, r4, r0
 800c796:	4628      	mov	r0, r5
 800c798:	f000 fbb2 	bl	800cf00 <_sbrk_r>
 800c79c:	3001      	adds	r0, #1
 800c79e:	d101      	bne.n	800c7a4 <sbrk_aligned+0x38>
 800c7a0:	f04f 34ff 	mov.w	r4, #4294967295
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}
 800c7a8:	24004b3c 	.word	0x24004b3c

0800c7ac <_malloc_r>:
 800c7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b0:	1ccd      	adds	r5, r1, #3
 800c7b2:	f025 0503 	bic.w	r5, r5, #3
 800c7b6:	3508      	adds	r5, #8
 800c7b8:	2d0c      	cmp	r5, #12
 800c7ba:	bf38      	it	cc
 800c7bc:	250c      	movcc	r5, #12
 800c7be:	2d00      	cmp	r5, #0
 800c7c0:	4607      	mov	r7, r0
 800c7c2:	db01      	blt.n	800c7c8 <_malloc_r+0x1c>
 800c7c4:	42a9      	cmp	r1, r5
 800c7c6:	d905      	bls.n	800c7d4 <_malloc_r+0x28>
 800c7c8:	230c      	movs	r3, #12
 800c7ca:	603b      	str	r3, [r7, #0]
 800c7cc:	2600      	movs	r6, #0
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d4:	4e2e      	ldr	r6, [pc, #184]	; (800c890 <_malloc_r+0xe4>)
 800c7d6:	f000 fc3d 	bl	800d054 <__malloc_lock>
 800c7da:	6833      	ldr	r3, [r6, #0]
 800c7dc:	461c      	mov	r4, r3
 800c7de:	bb34      	cbnz	r4, 800c82e <_malloc_r+0x82>
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4638      	mov	r0, r7
 800c7e4:	f7ff ffc2 	bl	800c76c <sbrk_aligned>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	d14d      	bne.n	800c88a <_malloc_r+0xde>
 800c7ee:	6834      	ldr	r4, [r6, #0]
 800c7f0:	4626      	mov	r6, r4
 800c7f2:	2e00      	cmp	r6, #0
 800c7f4:	d140      	bne.n	800c878 <_malloc_r+0xcc>
 800c7f6:	6823      	ldr	r3, [r4, #0]
 800c7f8:	4631      	mov	r1, r6
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	eb04 0803 	add.w	r8, r4, r3
 800c800:	f000 fb7e 	bl	800cf00 <_sbrk_r>
 800c804:	4580      	cmp	r8, r0
 800c806:	d13a      	bne.n	800c87e <_malloc_r+0xd2>
 800c808:	6821      	ldr	r1, [r4, #0]
 800c80a:	3503      	adds	r5, #3
 800c80c:	1a6d      	subs	r5, r5, r1
 800c80e:	f025 0503 	bic.w	r5, r5, #3
 800c812:	3508      	adds	r5, #8
 800c814:	2d0c      	cmp	r5, #12
 800c816:	bf38      	it	cc
 800c818:	250c      	movcc	r5, #12
 800c81a:	4629      	mov	r1, r5
 800c81c:	4638      	mov	r0, r7
 800c81e:	f7ff ffa5 	bl	800c76c <sbrk_aligned>
 800c822:	3001      	adds	r0, #1
 800c824:	d02b      	beq.n	800c87e <_malloc_r+0xd2>
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	442b      	add	r3, r5
 800c82a:	6023      	str	r3, [r4, #0]
 800c82c:	e00e      	b.n	800c84c <_malloc_r+0xa0>
 800c82e:	6822      	ldr	r2, [r4, #0]
 800c830:	1b52      	subs	r2, r2, r5
 800c832:	d41e      	bmi.n	800c872 <_malloc_r+0xc6>
 800c834:	2a0b      	cmp	r2, #11
 800c836:	d916      	bls.n	800c866 <_malloc_r+0xba>
 800c838:	1961      	adds	r1, r4, r5
 800c83a:	42a3      	cmp	r3, r4
 800c83c:	6025      	str	r5, [r4, #0]
 800c83e:	bf18      	it	ne
 800c840:	6059      	strne	r1, [r3, #4]
 800c842:	6863      	ldr	r3, [r4, #4]
 800c844:	bf08      	it	eq
 800c846:	6031      	streq	r1, [r6, #0]
 800c848:	5162      	str	r2, [r4, r5]
 800c84a:	604b      	str	r3, [r1, #4]
 800c84c:	4638      	mov	r0, r7
 800c84e:	f104 060b 	add.w	r6, r4, #11
 800c852:	f000 fc05 	bl	800d060 <__malloc_unlock>
 800c856:	f026 0607 	bic.w	r6, r6, #7
 800c85a:	1d23      	adds	r3, r4, #4
 800c85c:	1af2      	subs	r2, r6, r3
 800c85e:	d0b6      	beq.n	800c7ce <_malloc_r+0x22>
 800c860:	1b9b      	subs	r3, r3, r6
 800c862:	50a3      	str	r3, [r4, r2]
 800c864:	e7b3      	b.n	800c7ce <_malloc_r+0x22>
 800c866:	6862      	ldr	r2, [r4, #4]
 800c868:	42a3      	cmp	r3, r4
 800c86a:	bf0c      	ite	eq
 800c86c:	6032      	streq	r2, [r6, #0]
 800c86e:	605a      	strne	r2, [r3, #4]
 800c870:	e7ec      	b.n	800c84c <_malloc_r+0xa0>
 800c872:	4623      	mov	r3, r4
 800c874:	6864      	ldr	r4, [r4, #4]
 800c876:	e7b2      	b.n	800c7de <_malloc_r+0x32>
 800c878:	4634      	mov	r4, r6
 800c87a:	6876      	ldr	r6, [r6, #4]
 800c87c:	e7b9      	b.n	800c7f2 <_malloc_r+0x46>
 800c87e:	230c      	movs	r3, #12
 800c880:	603b      	str	r3, [r7, #0]
 800c882:	4638      	mov	r0, r7
 800c884:	f000 fbec 	bl	800d060 <__malloc_unlock>
 800c888:	e7a1      	b.n	800c7ce <_malloc_r+0x22>
 800c88a:	6025      	str	r5, [r4, #0]
 800c88c:	e7de      	b.n	800c84c <_malloc_r+0xa0>
 800c88e:	bf00      	nop
 800c890:	24004b38 	.word	0x24004b38

0800c894 <__sfputc_r>:
 800c894:	6893      	ldr	r3, [r2, #8]
 800c896:	3b01      	subs	r3, #1
 800c898:	2b00      	cmp	r3, #0
 800c89a:	b410      	push	{r4}
 800c89c:	6093      	str	r3, [r2, #8]
 800c89e:	da08      	bge.n	800c8b2 <__sfputc_r+0x1e>
 800c8a0:	6994      	ldr	r4, [r2, #24]
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	db01      	blt.n	800c8aa <__sfputc_r+0x16>
 800c8a6:	290a      	cmp	r1, #10
 800c8a8:	d103      	bne.n	800c8b2 <__sfputc_r+0x1e>
 800c8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ae:	f7ff bc31 	b.w	800c114 <__swbuf_r>
 800c8b2:	6813      	ldr	r3, [r2, #0]
 800c8b4:	1c58      	adds	r0, r3, #1
 800c8b6:	6010      	str	r0, [r2, #0]
 800c8b8:	7019      	strb	r1, [r3, #0]
 800c8ba:	4608      	mov	r0, r1
 800c8bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <__sfputs_r>:
 800c8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	460f      	mov	r7, r1
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	18d5      	adds	r5, r2, r3
 800c8cc:	42ac      	cmp	r4, r5
 800c8ce:	d101      	bne.n	800c8d4 <__sfputs_r+0x12>
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	e007      	b.n	800c8e4 <__sfputs_r+0x22>
 800c8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d8:	463a      	mov	r2, r7
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7ff ffda 	bl	800c894 <__sfputc_r>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d1f3      	bne.n	800c8cc <__sfputs_r+0xa>
 800c8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8e8 <_vfiprintf_r>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	b09d      	sub	sp, #116	; 0x74
 800c8f0:	4614      	mov	r4, r2
 800c8f2:	4698      	mov	r8, r3
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	b118      	cbz	r0, 800c900 <_vfiprintf_r+0x18>
 800c8f8:	6983      	ldr	r3, [r0, #24]
 800c8fa:	b90b      	cbnz	r3, 800c900 <_vfiprintf_r+0x18>
 800c8fc:	f7ff fde4 	bl	800c4c8 <__sinit>
 800c900:	4b89      	ldr	r3, [pc, #548]	; (800cb28 <_vfiprintf_r+0x240>)
 800c902:	429d      	cmp	r5, r3
 800c904:	d11b      	bne.n	800c93e <_vfiprintf_r+0x56>
 800c906:	6875      	ldr	r5, [r6, #4]
 800c908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c90a:	07d9      	lsls	r1, r3, #31
 800c90c:	d405      	bmi.n	800c91a <_vfiprintf_r+0x32>
 800c90e:	89ab      	ldrh	r3, [r5, #12]
 800c910:	059a      	lsls	r2, r3, #22
 800c912:	d402      	bmi.n	800c91a <_vfiprintf_r+0x32>
 800c914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c916:	f7ff fe75 	bl	800c604 <__retarget_lock_acquire_recursive>
 800c91a:	89ab      	ldrh	r3, [r5, #12]
 800c91c:	071b      	lsls	r3, r3, #28
 800c91e:	d501      	bpl.n	800c924 <_vfiprintf_r+0x3c>
 800c920:	692b      	ldr	r3, [r5, #16]
 800c922:	b9eb      	cbnz	r3, 800c960 <_vfiprintf_r+0x78>
 800c924:	4629      	mov	r1, r5
 800c926:	4630      	mov	r0, r6
 800c928:	f7ff fc46 	bl	800c1b8 <__swsetup_r>
 800c92c:	b1c0      	cbz	r0, 800c960 <_vfiprintf_r+0x78>
 800c92e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c930:	07dc      	lsls	r4, r3, #31
 800c932:	d50e      	bpl.n	800c952 <_vfiprintf_r+0x6a>
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	b01d      	add	sp, #116	; 0x74
 800c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93e:	4b7b      	ldr	r3, [pc, #492]	; (800cb2c <_vfiprintf_r+0x244>)
 800c940:	429d      	cmp	r5, r3
 800c942:	d101      	bne.n	800c948 <_vfiprintf_r+0x60>
 800c944:	68b5      	ldr	r5, [r6, #8]
 800c946:	e7df      	b.n	800c908 <_vfiprintf_r+0x20>
 800c948:	4b79      	ldr	r3, [pc, #484]	; (800cb30 <_vfiprintf_r+0x248>)
 800c94a:	429d      	cmp	r5, r3
 800c94c:	bf08      	it	eq
 800c94e:	68f5      	ldreq	r5, [r6, #12]
 800c950:	e7da      	b.n	800c908 <_vfiprintf_r+0x20>
 800c952:	89ab      	ldrh	r3, [r5, #12]
 800c954:	0598      	lsls	r0, r3, #22
 800c956:	d4ed      	bmi.n	800c934 <_vfiprintf_r+0x4c>
 800c958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c95a:	f7ff fe54 	bl	800c606 <__retarget_lock_release_recursive>
 800c95e:	e7e9      	b.n	800c934 <_vfiprintf_r+0x4c>
 800c960:	2300      	movs	r3, #0
 800c962:	9309      	str	r3, [sp, #36]	; 0x24
 800c964:	2320      	movs	r3, #32
 800c966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c96a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c96e:	2330      	movs	r3, #48	; 0x30
 800c970:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb34 <_vfiprintf_r+0x24c>
 800c974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c978:	f04f 0901 	mov.w	r9, #1
 800c97c:	4623      	mov	r3, r4
 800c97e:	469a      	mov	sl, r3
 800c980:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c984:	b10a      	cbz	r2, 800c98a <_vfiprintf_r+0xa2>
 800c986:	2a25      	cmp	r2, #37	; 0x25
 800c988:	d1f9      	bne.n	800c97e <_vfiprintf_r+0x96>
 800c98a:	ebba 0b04 	subs.w	fp, sl, r4
 800c98e:	d00b      	beq.n	800c9a8 <_vfiprintf_r+0xc0>
 800c990:	465b      	mov	r3, fp
 800c992:	4622      	mov	r2, r4
 800c994:	4629      	mov	r1, r5
 800c996:	4630      	mov	r0, r6
 800c998:	f7ff ff93 	bl	800c8c2 <__sfputs_r>
 800c99c:	3001      	adds	r0, #1
 800c99e:	f000 80aa 	beq.w	800caf6 <_vfiprintf_r+0x20e>
 800c9a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9a4:	445a      	add	r2, fp
 800c9a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 80a2 	beq.w	800caf6 <_vfiprintf_r+0x20e>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9bc:	f10a 0a01 	add.w	sl, sl, #1
 800c9c0:	9304      	str	r3, [sp, #16]
 800c9c2:	9307      	str	r3, [sp, #28]
 800c9c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c9ca:	4654      	mov	r4, sl
 800c9cc:	2205      	movs	r2, #5
 800c9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d2:	4858      	ldr	r0, [pc, #352]	; (800cb34 <_vfiprintf_r+0x24c>)
 800c9d4:	f7f3 fc84 	bl	80002e0 <memchr>
 800c9d8:	9a04      	ldr	r2, [sp, #16]
 800c9da:	b9d8      	cbnz	r0, 800ca14 <_vfiprintf_r+0x12c>
 800c9dc:	06d1      	lsls	r1, r2, #27
 800c9de:	bf44      	itt	mi
 800c9e0:	2320      	movmi	r3, #32
 800c9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9e6:	0713      	lsls	r3, r2, #28
 800c9e8:	bf44      	itt	mi
 800c9ea:	232b      	movmi	r3, #43	; 0x2b
 800c9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f6:	d015      	beq.n	800ca24 <_vfiprintf_r+0x13c>
 800c9f8:	9a07      	ldr	r2, [sp, #28]
 800c9fa:	4654      	mov	r4, sl
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	f04f 0c0a 	mov.w	ip, #10
 800ca02:	4621      	mov	r1, r4
 800ca04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca08:	3b30      	subs	r3, #48	; 0x30
 800ca0a:	2b09      	cmp	r3, #9
 800ca0c:	d94e      	bls.n	800caac <_vfiprintf_r+0x1c4>
 800ca0e:	b1b0      	cbz	r0, 800ca3e <_vfiprintf_r+0x156>
 800ca10:	9207      	str	r2, [sp, #28]
 800ca12:	e014      	b.n	800ca3e <_vfiprintf_r+0x156>
 800ca14:	eba0 0308 	sub.w	r3, r0, r8
 800ca18:	fa09 f303 	lsl.w	r3, r9, r3
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	9304      	str	r3, [sp, #16]
 800ca20:	46a2      	mov	sl, r4
 800ca22:	e7d2      	b.n	800c9ca <_vfiprintf_r+0xe2>
 800ca24:	9b03      	ldr	r3, [sp, #12]
 800ca26:	1d19      	adds	r1, r3, #4
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	9103      	str	r1, [sp, #12]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bfbb      	ittet	lt
 800ca30:	425b      	neglt	r3, r3
 800ca32:	f042 0202 	orrlt.w	r2, r2, #2
 800ca36:	9307      	strge	r3, [sp, #28]
 800ca38:	9307      	strlt	r3, [sp, #28]
 800ca3a:	bfb8      	it	lt
 800ca3c:	9204      	strlt	r2, [sp, #16]
 800ca3e:	7823      	ldrb	r3, [r4, #0]
 800ca40:	2b2e      	cmp	r3, #46	; 0x2e
 800ca42:	d10c      	bne.n	800ca5e <_vfiprintf_r+0x176>
 800ca44:	7863      	ldrb	r3, [r4, #1]
 800ca46:	2b2a      	cmp	r3, #42	; 0x2a
 800ca48:	d135      	bne.n	800cab6 <_vfiprintf_r+0x1ce>
 800ca4a:	9b03      	ldr	r3, [sp, #12]
 800ca4c:	1d1a      	adds	r2, r3, #4
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	9203      	str	r2, [sp, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bfb8      	it	lt
 800ca56:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca5a:	3402      	adds	r4, #2
 800ca5c:	9305      	str	r3, [sp, #20]
 800ca5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb44 <_vfiprintf_r+0x25c>
 800ca62:	7821      	ldrb	r1, [r4, #0]
 800ca64:	2203      	movs	r2, #3
 800ca66:	4650      	mov	r0, sl
 800ca68:	f7f3 fc3a 	bl	80002e0 <memchr>
 800ca6c:	b140      	cbz	r0, 800ca80 <_vfiprintf_r+0x198>
 800ca6e:	2340      	movs	r3, #64	; 0x40
 800ca70:	eba0 000a 	sub.w	r0, r0, sl
 800ca74:	fa03 f000 	lsl.w	r0, r3, r0
 800ca78:	9b04      	ldr	r3, [sp, #16]
 800ca7a:	4303      	orrs	r3, r0
 800ca7c:	3401      	adds	r4, #1
 800ca7e:	9304      	str	r3, [sp, #16]
 800ca80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca84:	482c      	ldr	r0, [pc, #176]	; (800cb38 <_vfiprintf_r+0x250>)
 800ca86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca8a:	2206      	movs	r2, #6
 800ca8c:	f7f3 fc28 	bl	80002e0 <memchr>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d03f      	beq.n	800cb14 <_vfiprintf_r+0x22c>
 800ca94:	4b29      	ldr	r3, [pc, #164]	; (800cb3c <_vfiprintf_r+0x254>)
 800ca96:	bb1b      	cbnz	r3, 800cae0 <_vfiprintf_r+0x1f8>
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	3307      	adds	r3, #7
 800ca9c:	f023 0307 	bic.w	r3, r3, #7
 800caa0:	3308      	adds	r3, #8
 800caa2:	9303      	str	r3, [sp, #12]
 800caa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa6:	443b      	add	r3, r7
 800caa8:	9309      	str	r3, [sp, #36]	; 0x24
 800caaa:	e767      	b.n	800c97c <_vfiprintf_r+0x94>
 800caac:	fb0c 3202 	mla	r2, ip, r2, r3
 800cab0:	460c      	mov	r4, r1
 800cab2:	2001      	movs	r0, #1
 800cab4:	e7a5      	b.n	800ca02 <_vfiprintf_r+0x11a>
 800cab6:	2300      	movs	r3, #0
 800cab8:	3401      	adds	r4, #1
 800caba:	9305      	str	r3, [sp, #20]
 800cabc:	4619      	mov	r1, r3
 800cabe:	f04f 0c0a 	mov.w	ip, #10
 800cac2:	4620      	mov	r0, r4
 800cac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cac8:	3a30      	subs	r2, #48	; 0x30
 800caca:	2a09      	cmp	r2, #9
 800cacc:	d903      	bls.n	800cad6 <_vfiprintf_r+0x1ee>
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0c5      	beq.n	800ca5e <_vfiprintf_r+0x176>
 800cad2:	9105      	str	r1, [sp, #20]
 800cad4:	e7c3      	b.n	800ca5e <_vfiprintf_r+0x176>
 800cad6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cada:	4604      	mov	r4, r0
 800cadc:	2301      	movs	r3, #1
 800cade:	e7f0      	b.n	800cac2 <_vfiprintf_r+0x1da>
 800cae0:	ab03      	add	r3, sp, #12
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	462a      	mov	r2, r5
 800cae6:	4b16      	ldr	r3, [pc, #88]	; (800cb40 <_vfiprintf_r+0x258>)
 800cae8:	a904      	add	r1, sp, #16
 800caea:	4630      	mov	r0, r6
 800caec:	f3af 8000 	nop.w
 800caf0:	4607      	mov	r7, r0
 800caf2:	1c78      	adds	r0, r7, #1
 800caf4:	d1d6      	bne.n	800caa4 <_vfiprintf_r+0x1bc>
 800caf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caf8:	07d9      	lsls	r1, r3, #31
 800cafa:	d405      	bmi.n	800cb08 <_vfiprintf_r+0x220>
 800cafc:	89ab      	ldrh	r3, [r5, #12]
 800cafe:	059a      	lsls	r2, r3, #22
 800cb00:	d402      	bmi.n	800cb08 <_vfiprintf_r+0x220>
 800cb02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb04:	f7ff fd7f 	bl	800c606 <__retarget_lock_release_recursive>
 800cb08:	89ab      	ldrh	r3, [r5, #12]
 800cb0a:	065b      	lsls	r3, r3, #25
 800cb0c:	f53f af12 	bmi.w	800c934 <_vfiprintf_r+0x4c>
 800cb10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb12:	e711      	b.n	800c938 <_vfiprintf_r+0x50>
 800cb14:	ab03      	add	r3, sp, #12
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	462a      	mov	r2, r5
 800cb1a:	4b09      	ldr	r3, [pc, #36]	; (800cb40 <_vfiprintf_r+0x258>)
 800cb1c:	a904      	add	r1, sp, #16
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f000 f880 	bl	800cc24 <_printf_i>
 800cb24:	e7e4      	b.n	800caf0 <_vfiprintf_r+0x208>
 800cb26:	bf00      	nop
 800cb28:	0800d17c 	.word	0x0800d17c
 800cb2c:	0800d19c 	.word	0x0800d19c
 800cb30:	0800d15c 	.word	0x0800d15c
 800cb34:	0800d1bc 	.word	0x0800d1bc
 800cb38:	0800d1c6 	.word	0x0800d1c6
 800cb3c:	00000000 	.word	0x00000000
 800cb40:	0800c8c3 	.word	0x0800c8c3
 800cb44:	0800d1c2 	.word	0x0800d1c2

0800cb48 <_printf_common>:
 800cb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb4c:	4616      	mov	r6, r2
 800cb4e:	4699      	mov	r9, r3
 800cb50:	688a      	ldr	r2, [r1, #8]
 800cb52:	690b      	ldr	r3, [r1, #16]
 800cb54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	bfb8      	it	lt
 800cb5c:	4613      	movlt	r3, r2
 800cb5e:	6033      	str	r3, [r6, #0]
 800cb60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb64:	4607      	mov	r7, r0
 800cb66:	460c      	mov	r4, r1
 800cb68:	b10a      	cbz	r2, 800cb6e <_printf_common+0x26>
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	6033      	str	r3, [r6, #0]
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	0699      	lsls	r1, r3, #26
 800cb72:	bf42      	ittt	mi
 800cb74:	6833      	ldrmi	r3, [r6, #0]
 800cb76:	3302      	addmi	r3, #2
 800cb78:	6033      	strmi	r3, [r6, #0]
 800cb7a:	6825      	ldr	r5, [r4, #0]
 800cb7c:	f015 0506 	ands.w	r5, r5, #6
 800cb80:	d106      	bne.n	800cb90 <_printf_common+0x48>
 800cb82:	f104 0a19 	add.w	sl, r4, #25
 800cb86:	68e3      	ldr	r3, [r4, #12]
 800cb88:	6832      	ldr	r2, [r6, #0]
 800cb8a:	1a9b      	subs	r3, r3, r2
 800cb8c:	42ab      	cmp	r3, r5
 800cb8e:	dc26      	bgt.n	800cbde <_printf_common+0x96>
 800cb90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb94:	1e13      	subs	r3, r2, #0
 800cb96:	6822      	ldr	r2, [r4, #0]
 800cb98:	bf18      	it	ne
 800cb9a:	2301      	movne	r3, #1
 800cb9c:	0692      	lsls	r2, r2, #26
 800cb9e:	d42b      	bmi.n	800cbf8 <_printf_common+0xb0>
 800cba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cba4:	4649      	mov	r1, r9
 800cba6:	4638      	mov	r0, r7
 800cba8:	47c0      	blx	r8
 800cbaa:	3001      	adds	r0, #1
 800cbac:	d01e      	beq.n	800cbec <_printf_common+0xa4>
 800cbae:	6823      	ldr	r3, [r4, #0]
 800cbb0:	68e5      	ldr	r5, [r4, #12]
 800cbb2:	6832      	ldr	r2, [r6, #0]
 800cbb4:	f003 0306 	and.w	r3, r3, #6
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	bf08      	it	eq
 800cbbc:	1aad      	subeq	r5, r5, r2
 800cbbe:	68a3      	ldr	r3, [r4, #8]
 800cbc0:	6922      	ldr	r2, [r4, #16]
 800cbc2:	bf0c      	ite	eq
 800cbc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbc8:	2500      	movne	r5, #0
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	bfc4      	itt	gt
 800cbce:	1a9b      	subgt	r3, r3, r2
 800cbd0:	18ed      	addgt	r5, r5, r3
 800cbd2:	2600      	movs	r6, #0
 800cbd4:	341a      	adds	r4, #26
 800cbd6:	42b5      	cmp	r5, r6
 800cbd8:	d11a      	bne.n	800cc10 <_printf_common+0xc8>
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e008      	b.n	800cbf0 <_printf_common+0xa8>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	4652      	mov	r2, sl
 800cbe2:	4649      	mov	r1, r9
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	47c0      	blx	r8
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d103      	bne.n	800cbf4 <_printf_common+0xac>
 800cbec:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf4:	3501      	adds	r5, #1
 800cbf6:	e7c6      	b.n	800cb86 <_printf_common+0x3e>
 800cbf8:	18e1      	adds	r1, r4, r3
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	2030      	movs	r0, #48	; 0x30
 800cbfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc02:	4422      	add	r2, r4
 800cc04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc0c:	3302      	adds	r3, #2
 800cc0e:	e7c7      	b.n	800cba0 <_printf_common+0x58>
 800cc10:	2301      	movs	r3, #1
 800cc12:	4622      	mov	r2, r4
 800cc14:	4649      	mov	r1, r9
 800cc16:	4638      	mov	r0, r7
 800cc18:	47c0      	blx	r8
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	d0e6      	beq.n	800cbec <_printf_common+0xa4>
 800cc1e:	3601      	adds	r6, #1
 800cc20:	e7d9      	b.n	800cbd6 <_printf_common+0x8e>
	...

0800cc24 <_printf_i>:
 800cc24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc28:	7e0f      	ldrb	r7, [r1, #24]
 800cc2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc2c:	2f78      	cmp	r7, #120	; 0x78
 800cc2e:	4691      	mov	r9, r2
 800cc30:	4680      	mov	r8, r0
 800cc32:	460c      	mov	r4, r1
 800cc34:	469a      	mov	sl, r3
 800cc36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc3a:	d807      	bhi.n	800cc4c <_printf_i+0x28>
 800cc3c:	2f62      	cmp	r7, #98	; 0x62
 800cc3e:	d80a      	bhi.n	800cc56 <_printf_i+0x32>
 800cc40:	2f00      	cmp	r7, #0
 800cc42:	f000 80d8 	beq.w	800cdf6 <_printf_i+0x1d2>
 800cc46:	2f58      	cmp	r7, #88	; 0x58
 800cc48:	f000 80a3 	beq.w	800cd92 <_printf_i+0x16e>
 800cc4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc54:	e03a      	b.n	800cccc <_printf_i+0xa8>
 800cc56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc5a:	2b15      	cmp	r3, #21
 800cc5c:	d8f6      	bhi.n	800cc4c <_printf_i+0x28>
 800cc5e:	a101      	add	r1, pc, #4	; (adr r1, 800cc64 <_printf_i+0x40>)
 800cc60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc64:	0800ccbd 	.word	0x0800ccbd
 800cc68:	0800ccd1 	.word	0x0800ccd1
 800cc6c:	0800cc4d 	.word	0x0800cc4d
 800cc70:	0800cc4d 	.word	0x0800cc4d
 800cc74:	0800cc4d 	.word	0x0800cc4d
 800cc78:	0800cc4d 	.word	0x0800cc4d
 800cc7c:	0800ccd1 	.word	0x0800ccd1
 800cc80:	0800cc4d 	.word	0x0800cc4d
 800cc84:	0800cc4d 	.word	0x0800cc4d
 800cc88:	0800cc4d 	.word	0x0800cc4d
 800cc8c:	0800cc4d 	.word	0x0800cc4d
 800cc90:	0800cddd 	.word	0x0800cddd
 800cc94:	0800cd01 	.word	0x0800cd01
 800cc98:	0800cdbf 	.word	0x0800cdbf
 800cc9c:	0800cc4d 	.word	0x0800cc4d
 800cca0:	0800cc4d 	.word	0x0800cc4d
 800cca4:	0800cdff 	.word	0x0800cdff
 800cca8:	0800cc4d 	.word	0x0800cc4d
 800ccac:	0800cd01 	.word	0x0800cd01
 800ccb0:	0800cc4d 	.word	0x0800cc4d
 800ccb4:	0800cc4d 	.word	0x0800cc4d
 800ccb8:	0800cdc7 	.word	0x0800cdc7
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	1d1a      	adds	r2, r3, #4
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	602a      	str	r2, [r5, #0]
 800ccc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cccc:	2301      	movs	r3, #1
 800ccce:	e0a3      	b.n	800ce18 <_printf_i+0x1f4>
 800ccd0:	6820      	ldr	r0, [r4, #0]
 800ccd2:	6829      	ldr	r1, [r5, #0]
 800ccd4:	0606      	lsls	r6, r0, #24
 800ccd6:	f101 0304 	add.w	r3, r1, #4
 800ccda:	d50a      	bpl.n	800ccf2 <_printf_i+0xce>
 800ccdc:	680e      	ldr	r6, [r1, #0]
 800ccde:	602b      	str	r3, [r5, #0]
 800cce0:	2e00      	cmp	r6, #0
 800cce2:	da03      	bge.n	800ccec <_printf_i+0xc8>
 800cce4:	232d      	movs	r3, #45	; 0x2d
 800cce6:	4276      	negs	r6, r6
 800cce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccec:	485e      	ldr	r0, [pc, #376]	; (800ce68 <_printf_i+0x244>)
 800ccee:	230a      	movs	r3, #10
 800ccf0:	e019      	b.n	800cd26 <_printf_i+0x102>
 800ccf2:	680e      	ldr	r6, [r1, #0]
 800ccf4:	602b      	str	r3, [r5, #0]
 800ccf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ccfa:	bf18      	it	ne
 800ccfc:	b236      	sxthne	r6, r6
 800ccfe:	e7ef      	b.n	800cce0 <_printf_i+0xbc>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	6820      	ldr	r0, [r4, #0]
 800cd04:	1d19      	adds	r1, r3, #4
 800cd06:	6029      	str	r1, [r5, #0]
 800cd08:	0601      	lsls	r1, r0, #24
 800cd0a:	d501      	bpl.n	800cd10 <_printf_i+0xec>
 800cd0c:	681e      	ldr	r6, [r3, #0]
 800cd0e:	e002      	b.n	800cd16 <_printf_i+0xf2>
 800cd10:	0646      	lsls	r6, r0, #25
 800cd12:	d5fb      	bpl.n	800cd0c <_printf_i+0xe8>
 800cd14:	881e      	ldrh	r6, [r3, #0]
 800cd16:	4854      	ldr	r0, [pc, #336]	; (800ce68 <_printf_i+0x244>)
 800cd18:	2f6f      	cmp	r7, #111	; 0x6f
 800cd1a:	bf0c      	ite	eq
 800cd1c:	2308      	moveq	r3, #8
 800cd1e:	230a      	movne	r3, #10
 800cd20:	2100      	movs	r1, #0
 800cd22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd26:	6865      	ldr	r5, [r4, #4]
 800cd28:	60a5      	str	r5, [r4, #8]
 800cd2a:	2d00      	cmp	r5, #0
 800cd2c:	bfa2      	ittt	ge
 800cd2e:	6821      	ldrge	r1, [r4, #0]
 800cd30:	f021 0104 	bicge.w	r1, r1, #4
 800cd34:	6021      	strge	r1, [r4, #0]
 800cd36:	b90e      	cbnz	r6, 800cd3c <_printf_i+0x118>
 800cd38:	2d00      	cmp	r5, #0
 800cd3a:	d04d      	beq.n	800cdd8 <_printf_i+0x1b4>
 800cd3c:	4615      	mov	r5, r2
 800cd3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd42:	fb03 6711 	mls	r7, r3, r1, r6
 800cd46:	5dc7      	ldrb	r7, [r0, r7]
 800cd48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd4c:	4637      	mov	r7, r6
 800cd4e:	42bb      	cmp	r3, r7
 800cd50:	460e      	mov	r6, r1
 800cd52:	d9f4      	bls.n	800cd3e <_printf_i+0x11a>
 800cd54:	2b08      	cmp	r3, #8
 800cd56:	d10b      	bne.n	800cd70 <_printf_i+0x14c>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	07de      	lsls	r6, r3, #31
 800cd5c:	d508      	bpl.n	800cd70 <_printf_i+0x14c>
 800cd5e:	6923      	ldr	r3, [r4, #16]
 800cd60:	6861      	ldr	r1, [r4, #4]
 800cd62:	4299      	cmp	r1, r3
 800cd64:	bfde      	ittt	le
 800cd66:	2330      	movle	r3, #48	; 0x30
 800cd68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd70:	1b52      	subs	r2, r2, r5
 800cd72:	6122      	str	r2, [r4, #16]
 800cd74:	f8cd a000 	str.w	sl, [sp]
 800cd78:	464b      	mov	r3, r9
 800cd7a:	aa03      	add	r2, sp, #12
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	4640      	mov	r0, r8
 800cd80:	f7ff fee2 	bl	800cb48 <_printf_common>
 800cd84:	3001      	adds	r0, #1
 800cd86:	d14c      	bne.n	800ce22 <_printf_i+0x1fe>
 800cd88:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8c:	b004      	add	sp, #16
 800cd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd92:	4835      	ldr	r0, [pc, #212]	; (800ce68 <_printf_i+0x244>)
 800cd94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cd98:	6829      	ldr	r1, [r5, #0]
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cda0:	6029      	str	r1, [r5, #0]
 800cda2:	061d      	lsls	r5, r3, #24
 800cda4:	d514      	bpl.n	800cdd0 <_printf_i+0x1ac>
 800cda6:	07df      	lsls	r7, r3, #31
 800cda8:	bf44      	itt	mi
 800cdaa:	f043 0320 	orrmi.w	r3, r3, #32
 800cdae:	6023      	strmi	r3, [r4, #0]
 800cdb0:	b91e      	cbnz	r6, 800cdba <_printf_i+0x196>
 800cdb2:	6823      	ldr	r3, [r4, #0]
 800cdb4:	f023 0320 	bic.w	r3, r3, #32
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	2310      	movs	r3, #16
 800cdbc:	e7b0      	b.n	800cd20 <_printf_i+0xfc>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	f043 0320 	orr.w	r3, r3, #32
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	2378      	movs	r3, #120	; 0x78
 800cdc8:	4828      	ldr	r0, [pc, #160]	; (800ce6c <_printf_i+0x248>)
 800cdca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cdce:	e7e3      	b.n	800cd98 <_printf_i+0x174>
 800cdd0:	0659      	lsls	r1, r3, #25
 800cdd2:	bf48      	it	mi
 800cdd4:	b2b6      	uxthmi	r6, r6
 800cdd6:	e7e6      	b.n	800cda6 <_printf_i+0x182>
 800cdd8:	4615      	mov	r5, r2
 800cdda:	e7bb      	b.n	800cd54 <_printf_i+0x130>
 800cddc:	682b      	ldr	r3, [r5, #0]
 800cdde:	6826      	ldr	r6, [r4, #0]
 800cde0:	6961      	ldr	r1, [r4, #20]
 800cde2:	1d18      	adds	r0, r3, #4
 800cde4:	6028      	str	r0, [r5, #0]
 800cde6:	0635      	lsls	r5, r6, #24
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	d501      	bpl.n	800cdf0 <_printf_i+0x1cc>
 800cdec:	6019      	str	r1, [r3, #0]
 800cdee:	e002      	b.n	800cdf6 <_printf_i+0x1d2>
 800cdf0:	0670      	lsls	r0, r6, #25
 800cdf2:	d5fb      	bpl.n	800cdec <_printf_i+0x1c8>
 800cdf4:	8019      	strh	r1, [r3, #0]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	6123      	str	r3, [r4, #16]
 800cdfa:	4615      	mov	r5, r2
 800cdfc:	e7ba      	b.n	800cd74 <_printf_i+0x150>
 800cdfe:	682b      	ldr	r3, [r5, #0]
 800ce00:	1d1a      	adds	r2, r3, #4
 800ce02:	602a      	str	r2, [r5, #0]
 800ce04:	681d      	ldr	r5, [r3, #0]
 800ce06:	6862      	ldr	r2, [r4, #4]
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	f7f3 fa68 	bl	80002e0 <memchr>
 800ce10:	b108      	cbz	r0, 800ce16 <_printf_i+0x1f2>
 800ce12:	1b40      	subs	r0, r0, r5
 800ce14:	6060      	str	r0, [r4, #4]
 800ce16:	6863      	ldr	r3, [r4, #4]
 800ce18:	6123      	str	r3, [r4, #16]
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce20:	e7a8      	b.n	800cd74 <_printf_i+0x150>
 800ce22:	6923      	ldr	r3, [r4, #16]
 800ce24:	462a      	mov	r2, r5
 800ce26:	4649      	mov	r1, r9
 800ce28:	4640      	mov	r0, r8
 800ce2a:	47d0      	blx	sl
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	d0ab      	beq.n	800cd88 <_printf_i+0x164>
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	079b      	lsls	r3, r3, #30
 800ce34:	d413      	bmi.n	800ce5e <_printf_i+0x23a>
 800ce36:	68e0      	ldr	r0, [r4, #12]
 800ce38:	9b03      	ldr	r3, [sp, #12]
 800ce3a:	4298      	cmp	r0, r3
 800ce3c:	bfb8      	it	lt
 800ce3e:	4618      	movlt	r0, r3
 800ce40:	e7a4      	b.n	800cd8c <_printf_i+0x168>
 800ce42:	2301      	movs	r3, #1
 800ce44:	4632      	mov	r2, r6
 800ce46:	4649      	mov	r1, r9
 800ce48:	4640      	mov	r0, r8
 800ce4a:	47d0      	blx	sl
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	d09b      	beq.n	800cd88 <_printf_i+0x164>
 800ce50:	3501      	adds	r5, #1
 800ce52:	68e3      	ldr	r3, [r4, #12]
 800ce54:	9903      	ldr	r1, [sp, #12]
 800ce56:	1a5b      	subs	r3, r3, r1
 800ce58:	42ab      	cmp	r3, r5
 800ce5a:	dcf2      	bgt.n	800ce42 <_printf_i+0x21e>
 800ce5c:	e7eb      	b.n	800ce36 <_printf_i+0x212>
 800ce5e:	2500      	movs	r5, #0
 800ce60:	f104 0619 	add.w	r6, r4, #25
 800ce64:	e7f5      	b.n	800ce52 <_printf_i+0x22e>
 800ce66:	bf00      	nop
 800ce68:	0800d1cd 	.word	0x0800d1cd
 800ce6c:	0800d1de 	.word	0x0800d1de

0800ce70 <_putc_r>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	460d      	mov	r5, r1
 800ce74:	4614      	mov	r4, r2
 800ce76:	4606      	mov	r6, r0
 800ce78:	b118      	cbz	r0, 800ce82 <_putc_r+0x12>
 800ce7a:	6983      	ldr	r3, [r0, #24]
 800ce7c:	b90b      	cbnz	r3, 800ce82 <_putc_r+0x12>
 800ce7e:	f7ff fb23 	bl	800c4c8 <__sinit>
 800ce82:	4b1c      	ldr	r3, [pc, #112]	; (800cef4 <_putc_r+0x84>)
 800ce84:	429c      	cmp	r4, r3
 800ce86:	d124      	bne.n	800ced2 <_putc_r+0x62>
 800ce88:	6874      	ldr	r4, [r6, #4]
 800ce8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce8c:	07d8      	lsls	r0, r3, #31
 800ce8e:	d405      	bmi.n	800ce9c <_putc_r+0x2c>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	0599      	lsls	r1, r3, #22
 800ce94:	d402      	bmi.n	800ce9c <_putc_r+0x2c>
 800ce96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce98:	f7ff fbb4 	bl	800c604 <__retarget_lock_acquire_recursive>
 800ce9c:	68a3      	ldr	r3, [r4, #8]
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	60a3      	str	r3, [r4, #8]
 800cea4:	da05      	bge.n	800ceb2 <_putc_r+0x42>
 800cea6:	69a2      	ldr	r2, [r4, #24]
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	db1c      	blt.n	800cee6 <_putc_r+0x76>
 800ceac:	b2eb      	uxtb	r3, r5
 800ceae:	2b0a      	cmp	r3, #10
 800ceb0:	d019      	beq.n	800cee6 <_putc_r+0x76>
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	1c5a      	adds	r2, r3, #1
 800ceb6:	6022      	str	r2, [r4, #0]
 800ceb8:	701d      	strb	r5, [r3, #0]
 800ceba:	b2ed      	uxtb	r5, r5
 800cebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cebe:	07da      	lsls	r2, r3, #31
 800cec0:	d405      	bmi.n	800cece <_putc_r+0x5e>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	059b      	lsls	r3, r3, #22
 800cec6:	d402      	bmi.n	800cece <_putc_r+0x5e>
 800cec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceca:	f7ff fb9c 	bl	800c606 <__retarget_lock_release_recursive>
 800cece:	4628      	mov	r0, r5
 800ced0:	bd70      	pop	{r4, r5, r6, pc}
 800ced2:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <_putc_r+0x88>)
 800ced4:	429c      	cmp	r4, r3
 800ced6:	d101      	bne.n	800cedc <_putc_r+0x6c>
 800ced8:	68b4      	ldr	r4, [r6, #8]
 800ceda:	e7d6      	b.n	800ce8a <_putc_r+0x1a>
 800cedc:	4b07      	ldr	r3, [pc, #28]	; (800cefc <_putc_r+0x8c>)
 800cede:	429c      	cmp	r4, r3
 800cee0:	bf08      	it	eq
 800cee2:	68f4      	ldreq	r4, [r6, #12]
 800cee4:	e7d1      	b.n	800ce8a <_putc_r+0x1a>
 800cee6:	4629      	mov	r1, r5
 800cee8:	4622      	mov	r2, r4
 800ceea:	4630      	mov	r0, r6
 800ceec:	f7ff f912 	bl	800c114 <__swbuf_r>
 800cef0:	4605      	mov	r5, r0
 800cef2:	e7e3      	b.n	800cebc <_putc_r+0x4c>
 800cef4:	0800d17c 	.word	0x0800d17c
 800cef8:	0800d19c 	.word	0x0800d19c
 800cefc:	0800d15c 	.word	0x0800d15c

0800cf00 <_sbrk_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4d06      	ldr	r5, [pc, #24]	; (800cf1c <_sbrk_r+0x1c>)
 800cf04:	2300      	movs	r3, #0
 800cf06:	4604      	mov	r4, r0
 800cf08:	4608      	mov	r0, r1
 800cf0a:	602b      	str	r3, [r5, #0]
 800cf0c:	f7f3 ff74 	bl	8000df8 <_sbrk>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_sbrk_r+0x1a>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_sbrk_r+0x1a>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	24004b40 	.word	0x24004b40

0800cf20 <__sread>:
 800cf20:	b510      	push	{r4, lr}
 800cf22:	460c      	mov	r4, r1
 800cf24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf28:	f000 f8a0 	bl	800d06c <_read_r>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	bfab      	itete	ge
 800cf30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf32:	89a3      	ldrhlt	r3, [r4, #12]
 800cf34:	181b      	addge	r3, r3, r0
 800cf36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf3a:	bfac      	ite	ge
 800cf3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf3e:	81a3      	strhlt	r3, [r4, #12]
 800cf40:	bd10      	pop	{r4, pc}

0800cf42 <__swrite>:
 800cf42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf46:	461f      	mov	r7, r3
 800cf48:	898b      	ldrh	r3, [r1, #12]
 800cf4a:	05db      	lsls	r3, r3, #23
 800cf4c:	4605      	mov	r5, r0
 800cf4e:	460c      	mov	r4, r1
 800cf50:	4616      	mov	r6, r2
 800cf52:	d505      	bpl.n	800cf60 <__swrite+0x1e>
 800cf54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf58:	2302      	movs	r3, #2
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f000 f868 	bl	800d030 <_lseek_r>
 800cf60:	89a3      	ldrh	r3, [r4, #12]
 800cf62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf6a:	81a3      	strh	r3, [r4, #12]
 800cf6c:	4632      	mov	r2, r6
 800cf6e:	463b      	mov	r3, r7
 800cf70:	4628      	mov	r0, r5
 800cf72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf76:	f000 b817 	b.w	800cfa8 <_write_r>

0800cf7a <__sseek>:
 800cf7a:	b510      	push	{r4, lr}
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf82:	f000 f855 	bl	800d030 <_lseek_r>
 800cf86:	1c43      	adds	r3, r0, #1
 800cf88:	89a3      	ldrh	r3, [r4, #12]
 800cf8a:	bf15      	itete	ne
 800cf8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf96:	81a3      	strheq	r3, [r4, #12]
 800cf98:	bf18      	it	ne
 800cf9a:	81a3      	strhne	r3, [r4, #12]
 800cf9c:	bd10      	pop	{r4, pc}

0800cf9e <__sclose>:
 800cf9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa2:	f000 b813 	b.w	800cfcc <_close_r>
	...

0800cfa8 <_write_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d07      	ldr	r5, [pc, #28]	; (800cfc8 <_write_r+0x20>)
 800cfac:	4604      	mov	r4, r0
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	602a      	str	r2, [r5, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	f7f3 fecd 	bl	8000d56 <_write>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_write_r+0x1e>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_write_r+0x1e>
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	24004b40 	.word	0x24004b40

0800cfcc <_close_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d06      	ldr	r5, [pc, #24]	; (800cfe8 <_close_r+0x1c>)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	602b      	str	r3, [r5, #0]
 800cfd8:	f7f3 fed9 	bl	8000d8e <_close>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_close_r+0x1a>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_close_r+0x1a>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	24004b40 	.word	0x24004b40

0800cfec <_fstat_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4d07      	ldr	r5, [pc, #28]	; (800d00c <_fstat_r+0x20>)
 800cff0:	2300      	movs	r3, #0
 800cff2:	4604      	mov	r4, r0
 800cff4:	4608      	mov	r0, r1
 800cff6:	4611      	mov	r1, r2
 800cff8:	602b      	str	r3, [r5, #0]
 800cffa:	f7f3 fed4 	bl	8000da6 <_fstat>
 800cffe:	1c43      	adds	r3, r0, #1
 800d000:	d102      	bne.n	800d008 <_fstat_r+0x1c>
 800d002:	682b      	ldr	r3, [r5, #0]
 800d004:	b103      	cbz	r3, 800d008 <_fstat_r+0x1c>
 800d006:	6023      	str	r3, [r4, #0]
 800d008:	bd38      	pop	{r3, r4, r5, pc}
 800d00a:	bf00      	nop
 800d00c:	24004b40 	.word	0x24004b40

0800d010 <_isatty_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d06      	ldr	r5, [pc, #24]	; (800d02c <_isatty_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	f7f3 fed3 	bl	8000dc6 <_isatty>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_isatty_r+0x1a>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_isatty_r+0x1a>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	24004b40 	.word	0x24004b40

0800d030 <_lseek_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	4d07      	ldr	r5, [pc, #28]	; (800d050 <_lseek_r+0x20>)
 800d034:	4604      	mov	r4, r0
 800d036:	4608      	mov	r0, r1
 800d038:	4611      	mov	r1, r2
 800d03a:	2200      	movs	r2, #0
 800d03c:	602a      	str	r2, [r5, #0]
 800d03e:	461a      	mov	r2, r3
 800d040:	f7f3 fecc 	bl	8000ddc <_lseek>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d102      	bne.n	800d04e <_lseek_r+0x1e>
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	b103      	cbz	r3, 800d04e <_lseek_r+0x1e>
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	24004b40 	.word	0x24004b40

0800d054 <__malloc_lock>:
 800d054:	4801      	ldr	r0, [pc, #4]	; (800d05c <__malloc_lock+0x8>)
 800d056:	f7ff bad5 	b.w	800c604 <__retarget_lock_acquire_recursive>
 800d05a:	bf00      	nop
 800d05c:	24004b34 	.word	0x24004b34

0800d060 <__malloc_unlock>:
 800d060:	4801      	ldr	r0, [pc, #4]	; (800d068 <__malloc_unlock+0x8>)
 800d062:	f7ff bad0 	b.w	800c606 <__retarget_lock_release_recursive>
 800d066:	bf00      	nop
 800d068:	24004b34 	.word	0x24004b34

0800d06c <_read_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4d07      	ldr	r5, [pc, #28]	; (800d08c <_read_r+0x20>)
 800d070:	4604      	mov	r4, r0
 800d072:	4608      	mov	r0, r1
 800d074:	4611      	mov	r1, r2
 800d076:	2200      	movs	r2, #0
 800d078:	602a      	str	r2, [r5, #0]
 800d07a:	461a      	mov	r2, r3
 800d07c:	f7f3 fe4e 	bl	8000d1c <_read>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d102      	bne.n	800d08a <_read_r+0x1e>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b103      	cbz	r3, 800d08a <_read_r+0x1e>
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	24004b40 	.word	0x24004b40

0800d090 <_init>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	bf00      	nop
 800d094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d096:	bc08      	pop	{r3}
 800d098:	469e      	mov	lr, r3
 800d09a:	4770      	bx	lr

0800d09c <_fini>:
 800d09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09e:	bf00      	nop
 800d0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a2:	bc08      	pop	{r3}
 800d0a4:	469e      	mov	lr, r3
 800d0a6:	4770      	bx	lr
