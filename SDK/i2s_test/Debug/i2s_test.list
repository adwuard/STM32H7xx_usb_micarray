
i2s_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3fc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800d694  0800d694  0001d694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d6f4  0800d6f4  0001d6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d6f8  0800d6f8  0001d6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000130  24000000  0800d6fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000049c0  24000130  0800d82c  00020130  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004af0  0800d82c  00024af0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b14e  00000000  00000000  0002015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003a5f  00000000  00000000  0003b2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013b8  00000000  00000000  0003ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001238  00000000  00000000  000400c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003992a  00000000  00000000  00041300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001bf1e  00000000  00000000  0007ac2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00159cc9  00000000  00000000  00096b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f0811  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005190  00000000  00000000  001f0864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000130 	.word	0x24000130
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d67c 	.word	0x0800d67c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000134 	.word	0x24000134
 80002d4:	0800d67c 	.word	0x0800d67c

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f000 fbfa 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f814 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f952 	bl	8000590 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002ec:	f000 f88e 	bl	800040c <MX_I2C1_Init>
  MX_DMA_Init();
 80002f0:	f000 f92e 	bl	8000550 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80002f4:	f00c fcc4 	bl	800cc80 <MX_USB_DEVICE_Init>
  MX_SAI1_Init();
 80002f8:	f000 f8c8 	bl	800048c <MX_SAI1_Init>

  uint8_t PlayBuff[1024];
    while (1)
    {
      /* USER CODE END WHILE */
  	  if(HAL_OK != HAL_SAI_Receive_DMA (&hsai_BlockA1, (uint8_t *) &PlayBuff[0], 128))
 80002fc:	463b      	mov	r3, r7
 80002fe:	2280      	movs	r2, #128	; 0x80
 8000300:	4619      	mov	r1, r3
 8000302:	4802      	ldr	r0, [pc, #8]	; (800030c <main+0x34>)
 8000304:	f008 fe5c 	bl	8008fc0 <HAL_SAI_Receive_DMA>
 8000308:	e7f8      	b.n	80002fc <main+0x24>
 800030a:	bf00      	nop
 800030c:	24000198 	.word	0x24000198

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b09c      	sub	sp, #112	; 0x70
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800031a:	224c      	movs	r2, #76	; 0x4c
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f00d f9a4 	bl	800d66c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2220      	movs	r2, #32
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f00d f99e 	bl	800d66c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000330:	2002      	movs	r0, #2
 8000332:	f005 f9b1 	bl	8005698 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	4b32      	ldr	r3, [pc, #200]	; (8000404 <SystemClock_Config+0xf4>)
 800033c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033e:	4a31      	ldr	r2, [pc, #196]	; (8000404 <SystemClock_Config+0xf4>)
 8000340:	f023 0301 	bic.w	r3, r3, #1
 8000344:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000346:	4b2f      	ldr	r3, [pc, #188]	; (8000404 <SystemClock_Config+0xf4>)
 8000348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	4b2d      	ldr	r3, [pc, #180]	; (8000408 <SystemClock_Config+0xf8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000358:	4a2b      	ldr	r2, [pc, #172]	; (8000408 <SystemClock_Config+0xf8>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b29      	ldr	r3, [pc, #164]	; (8000408 <SystemClock_Config+0xf8>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000368:	603b      	str	r3, [r7, #0]
 800036a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800036c:	bf00      	nop
 800036e:	4b26      	ldr	r3, [pc, #152]	; (8000408 <SystemClock_Config+0xf8>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800037a:	d1f8      	bne.n	800036e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800037c:	2322      	movs	r3, #34	; 0x22
 800037e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000380:	2301      	movs	r3, #1
 8000382:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000384:	2340      	movs	r3, #64	; 0x40
 8000386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	2302      	movs	r3, #2
 800038e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000390:	2300      	movs	r3, #0
 8000392:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000394:	2305      	movs	r3, #5
 8000396:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000398:	2318      	movs	r3, #24
 800039a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800039c:	2302      	movs	r3, #2
 800039e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 25;
 80003a0:	2319      	movs	r3, #25
 80003a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003a4:	2302      	movs	r3, #2
 80003a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003a8:	230c      	movs	r3, #12
 80003aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f005 f9b7 	bl	800572c <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80003c4:	f000 f964 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	233f      	movs	r3, #63	; 0x3f
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003dc:	2340      	movs	r3, #64	; 0x40
 80003de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2101      	movs	r1, #1
 80003ec:	4618      	mov	r0, r3
 80003ee:	f005 fdcb 	bl	8005f88 <HAL_RCC_ClockConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xec>
  {
    Error_Handler();
 80003f8:	f000 f94a 	bl	8000690 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	3770      	adds	r7, #112	; 0x70
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	58000400 	.word	0x58000400
 8000408:	58024800 	.word	0x58024800

0800040c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_I2C1_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_I2C1_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_I2C1_Init+0x74>)
 8000418:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <MX_I2C1_Init+0x7c>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_I2C1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_I2C1_Init+0x74>)
 8000424:	2201      	movs	r2, #1
 8000426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_I2C1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_I2C1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_I2C1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000446:	480e      	ldr	r0, [pc, #56]	; (8000480 <MX_I2C1_Init+0x74>)
 8000448:	f003 fd2a 	bl	8003ea0 <HAL_I2C_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000452:	f000 f91d 	bl	8000690 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000456:	2100      	movs	r1, #0
 8000458:	4809      	ldr	r0, [pc, #36]	; (8000480 <MX_I2C1_Init+0x74>)
 800045a:	f003 fdb1 	bl	8003fc0 <HAL_I2CEx_ConfigAnalogFilter>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000464:	f000 f914 	bl	8000690 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000468:	2100      	movs	r1, #0
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_I2C1_Init+0x74>)
 800046c:	f003 fdf3 	bl	8004056 <HAL_I2CEx_ConfigDigitalFilter>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 f90b 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	2400014c 	.word	0x2400014c
 8000484:	40005400 	.word	0x40005400
 8000488:	00707cbb 	.word	0x00707cbb

0800048c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000490:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <MX_SAI1_Init+0xbc>)
 8000492:	4a2e      	ldr	r2, [pc, #184]	; (800054c <MX_SAI1_Init+0xc0>)
 8000494:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000496:	4b2c      	ldr	r3, [pc, #176]	; (8000548 <MX_SAI1_Init+0xbc>)
 8000498:	2200      	movs	r2, #0
 800049a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <MX_SAI1_Init+0xbc>)
 800049e:	2201      	movs	r2, #1
 80004a0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 80004a2:	4b29      	ldr	r3, [pc, #164]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004a4:	2280      	movs	r2, #128	; 0x80
 80004a6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80004a8:	4b27      	ldr	r3, [pc, #156]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80004ae:	4b26      	ldr	r3, [pc, #152]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80004b4:	4b24      	ldr	r3, [pc, #144]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80004ba:	4b23      	ldr	r3, [pc, #140]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80004c0:	4b21      	ldr	r3, [pc, #132]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004ce:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80004d2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80004da:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004dc:	2200      	movs	r2, #0
 80004de:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80004e0:	4b19      	ldr	r3, [pc, #100]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 80004ee:	4b16      	ldr	r3, [pc, #88]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004fa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 128;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_SAI1_Init+0xbc>)
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <MX_SAI1_Init+0xbc>)
 8000504:	2201      	movs	r2, #1
 8000506:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_SAI1_Init+0xbc>)
 800050a:	2200      	movs	r2, #0
 800050c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_SAI1_Init+0xbc>)
 8000510:	2200      	movs	r2, #0
 8000512:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_SAI1_Init+0xbc>)
 8000516:	2200      	movs	r2, #0
 8000518:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_SAI1_Init+0xbc>)
 800051c:	2200      	movs	r2, #0
 800051e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_SAI1_Init+0xbc>)
 8000522:	2240      	movs	r2, #64	; 0x40
 8000524:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 8;
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_SAI1_Init+0xbc>)
 8000528:	2208      	movs	r2, #8
 800052a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <MX_SAI1_Init+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <MX_SAI1_Init+0xbc>)
 8000534:	f008 fa14 	bl	8008960 <HAL_SAI_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_SAI1_Init+0xb6>
  {
    Error_Handler();
 800053e:	f000 f8a7 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	24000198 	.word	0x24000198
 800054c:	40015804 	.word	0x40015804

08000550 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <MX_DMA_Init+0x3c>)
 8000558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800055c:	4a0b      	ldr	r2, [pc, #44]	; (800058c <MX_DMA_Init+0x3c>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_DMA_Init+0x3c>)
 8000568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	200b      	movs	r0, #11
 800057a:	f000 fc4a 	bl	8000e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800057e:	200b      	movs	r0, #11
 8000580:	f000 fc61 	bl	8000e46 <HAL_NVIC_EnableIRQ>

}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	58024400 	.word	0x58024400

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <MX_GPIO_Init+0xf4>)
 80005a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ac:	4a35      	ldr	r2, [pc, #212]	; (8000684 <MX_GPIO_Init+0xf4>)
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005b6:	4b33      	ldr	r3, [pc, #204]	; (8000684 <MX_GPIO_Init+0xf4>)
 80005b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005bc:	f003 0310 	and.w	r3, r3, #16
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <MX_GPIO_Init+0xf4>)
 80005c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ca:	4a2e      	ldr	r2, [pc, #184]	; (8000684 <MX_GPIO_Init+0xf4>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <MX_GPIO_Init+0xf4>)
 80005d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <MX_GPIO_Init+0xf4>)
 80005e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <MX_GPIO_Init+0xf4>)
 80005ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005f2:	4b24      	ldr	r3, [pc, #144]	; (8000684 <MX_GPIO_Init+0xf4>)
 80005f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_GPIO_Init+0xf4>)
 8000602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000606:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <MX_GPIO_Init+0xf4>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_GPIO_Init+0xf4>)
 8000612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_GPIO_Init+0xf4>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000624:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_GPIO_Init+0xf4>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0xf4>)
 8000630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2108      	movs	r1, #8
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_GPIO_Init+0xf8>)
 8000642:	f003 fc13 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000646:	2308      	movs	r3, #8
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800064e:	2302      	movs	r3, #2
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <MX_GPIO_Init+0xf8>)
 800065e:	f003 fa55 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : K1_Pin */
  GPIO_InitStruct.Pin = K1_Pin;
 8000662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(K1_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_GPIO_Init+0xfc>)
 8000678:	f003 fa48 	bl	8003b0c <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	58024400 	.word	0x58024400
 8000688:	58021000 	.word	0x58021000
 800068c:	58020800 	.word	0x58020800

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_MspInit+0x30>)
 80006a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006a8:	4a08      	ldr	r2, [pc, #32]	; (80006cc <HAL_MspInit+0x30>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_MspInit+0x30>)
 80006b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006b8:	f003 0302 	and.w	r3, r3, #2
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	58024400 	.word	0x58024400

080006d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0b8      	sub	sp, #224	; 0xe0
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	22bc      	movs	r2, #188	; 0xbc
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00c ffbb 	bl	800d66c <memset>
  if(hi2c->Instance==I2C1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <HAL_I2C_MspInit+0xbc>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d141      	bne.n	8000784 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000700:	2308      	movs	r3, #8
 8000702:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4618      	mov	r0, r3
 8000710:	f005 ff9a 	bl	8006648 <HAL_RCCEx_PeriphCLKConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800071a:	f7ff ffb9 	bl	8000690 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <HAL_I2C_MspInit+0xc0>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000724:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <HAL_I2C_MspInit+0xc0>)
 8000726:	f043 0302 	orr.w	r3, r3, #2
 800072a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_I2C_MspInit+0xc0>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800073c:	23c0      	movs	r3, #192	; 0xc0
 800073e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000742:	2312      	movs	r3, #18
 8000744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000754:	2304      	movs	r3, #4
 8000756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <HAL_I2C_MspInit+0xc4>)
 8000762:	f003 f9d3 	bl	8003b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_I2C_MspInit+0xc0>)
 8000768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_I2C_MspInit+0xc0>)
 800076e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000772:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_I2C_MspInit+0xc0>)
 8000778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800077c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	37e0      	adds	r7, #224	; 0xe0
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40005400 	.word	0x40005400
 8000790:	58024400 	.word	0x58024400
 8000794:	58020400 	.word	0x58020400

08000798 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0b8      	sub	sp, #224	; 0xe0
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	22bc      	movs	r2, #188	; 0xbc
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f00c ff5f 	bl	800d66c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a46      	ldr	r2, [pc, #280]	; (80008cc <HAL_SAI_MspInit+0x134>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	f040 8085 	bne.w	80008c4 <HAL_SAI_MspInit+0x12c>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80007ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007be:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4618      	mov	r0, r3
 80007ca:	f005 ff3d 	bl	8006648 <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 80007d4:	f7ff ff5c 	bl	8000690 <Error_Handler>
    }

    if (SAI1_client == 0)
 80007d8:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <HAL_SAI_MspInit+0x138>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d116      	bne.n	800080e <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80007e0:	4b3c      	ldr	r3, [pc, #240]	; (80008d4 <HAL_SAI_MspInit+0x13c>)
 80007e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007e6:	4a3b      	ldr	r2, [pc, #236]	; (80008d4 <HAL_SAI_MspInit+0x13c>)
 80007e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80007f0:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <HAL_SAI_MspInit+0x13c>)
 80007f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2057      	movs	r0, #87	; 0x57
 8000804:	f000 fb05 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8000808:	2057      	movs	r0, #87	; 0x57
 800080a:	f000 fb1c 	bl	8000e46 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 800080e:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <HAL_SAI_MspInit+0x138>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a2e      	ldr	r2, [pc, #184]	; (80008d0 <HAL_SAI_MspInit+0x138>)
 8000816:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000818:	2370      	movs	r3, #112	; 0x70
 800081a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000830:	2306      	movs	r3, #6
 8000832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000836:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800083a:	4619      	mov	r1, r3
 800083c:	4826      	ldr	r0, [pc, #152]	; (80008d8 <HAL_SAI_MspInit+0x140>)
 800083e:	f003 f965 	bl	8003b0c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <HAL_SAI_MspInit+0x144>)
 8000844:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <HAL_SAI_MspInit+0x148>)
 8000846:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <HAL_SAI_MspInit+0x144>)
 800084a:	2257      	movs	r2, #87	; 0x57
 800084c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <HAL_SAI_MspInit+0x144>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <HAL_SAI_MspInit+0x144>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <HAL_SAI_MspInit+0x144>)
 800085c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000860:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <HAL_SAI_MspInit+0x144>)
 8000864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000868:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <HAL_SAI_MspInit+0x144>)
 800086c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000870:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_SAI_MspInit+0x144>)
 8000874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000878:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_SAI_MspInit+0x144>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <HAL_SAI_MspInit+0x144>)
 8000882:	2204      	movs	r2, #4
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_SAI_MspInit+0x144>)
 8000888:	2203      	movs	r2, #3
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <HAL_SAI_MspInit+0x144>)
 800088e:	2200      	movs	r2, #0
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_SAI_MspInit+0x144>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000898:	4810      	ldr	r0, [pc, #64]	; (80008dc <HAL_SAI_MspInit+0x144>)
 800089a:	f000 faef 	bl	8000e7c <HAL_DMA_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_SAI_MspInit+0x110>
    {
      Error_Handler();
 80008a4:	f7ff fef4 	bl	8000690 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <HAL_SAI_MspInit+0x144>)
 80008ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_SAI_MspInit+0x144>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_SAI_MspInit+0x144>)
 80008ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80008be:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_SAI_MspInit+0x144>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80008c4:	bf00      	nop
 80008c6:	37e0      	adds	r7, #224	; 0xe0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40015804 	.word	0x40015804
 80008d0:	240002a8 	.word	0x240002a8
 80008d4:	58024400 	.word	0x58024400
 80008d8:	58021000 	.word	0x58021000
 80008dc:	24000230 	.word	0x24000230
 80008e0:	40020010 	.word	0x40020010

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f944 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <DMA1_Stream0_IRQHandler+0x10>)
 800093e:	f001 fdc7 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	24000230 	.word	0x24000230

0800094c <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <SAI1_IRQHandler+0x10>)
 8000952:	f008 fbc9 	bl	80090e8 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24000198 	.word	0x24000198

08000960 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <OTG_FS_IRQHandler+0x10>)
 8000966:	f003 fd19 	bl	800439c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	24000990 	.word	0x24000990

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <SystemInit+0xe4>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097e:	4a36      	ldr	r2, [pc, #216]	; (8000a58 <SystemInit+0xe4>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000988:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <SystemInit+0xe8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	2b06      	cmp	r3, #6
 8000992:	d807      	bhi.n	80009a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000994:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <SystemInit+0xe8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f023 030f 	bic.w	r3, r3, #15
 800099c:	4a2f      	ldr	r2, [pc, #188]	; (8000a5c <SystemInit+0xe8>)
 800099e:	f043 0307 	orr.w	r3, r3, #7
 80009a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009a4:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <SystemInit+0xec>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a2d      	ldr	r2, [pc, #180]	; (8000a60 <SystemInit+0xec>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <SystemInit+0xec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <SystemInit+0xec>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4929      	ldr	r1, [pc, #164]	; (8000a60 <SystemInit+0xec>)
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <SystemInit+0xf0>)
 80009be:	4013      	ands	r3, r2
 80009c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <SystemInit+0xe8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d007      	beq.n	80009de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <SystemInit+0xe8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f023 030f 	bic.w	r3, r3, #15
 80009d6:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <SystemInit+0xe8>)
 80009d8:	f043 0307 	orr.w	r3, r3, #7
 80009dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <SystemInit+0xec>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <SystemInit+0xec>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <SystemInit+0xec>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <SystemInit+0xec>)
 80009f2:	4a1d      	ldr	r2, [pc, #116]	; (8000a68 <SystemInit+0xf4>)
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <SystemInit+0xec>)
 80009f8:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <SystemInit+0xf8>)
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <SystemInit+0xec>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <SystemInit+0xfc>)
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <SystemInit+0xec>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <SystemInit+0xec>)
 8000a0a:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <SystemInit+0xfc>)
 8000a0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <SystemInit+0xec>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <SystemInit+0xec>)
 8000a16:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <SystemInit+0xfc>)
 8000a18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <SystemInit+0xec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <SystemInit+0xec>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <SystemInit+0xec>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <SystemInit+0xec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <SystemInit+0x100>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <SystemInit+0x104>)
 8000a38:	4013      	ands	r3, r2
 8000a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a3e:	d202      	bcs.n	8000a46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <SystemInit+0x108>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <SystemInit+0x10c>)
 8000a48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00
 8000a5c:	52002000 	.word	0x52002000
 8000a60:	58024400 	.word	0x58024400
 8000a64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a68:	02020200 	.word	0x02020200
 8000a6c:	01ff0000 	.word	0x01ff0000
 8000a70:	01010280 	.word	0x01010280
 8000a74:	5c001000 	.word	0x5c001000
 8000a78:	ffff0000 	.word	0xffff0000
 8000a7c:	51008108 	.word	0x51008108
 8000a80:	52004000 	.word	0x52004000

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a88:	f7ff ff74 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f00c fdb7 	bl	800d624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fc0f 	bl	80002d8 <main>
  bx  lr
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ac0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ac4:	24000130 	.word	0x24000130
  ldr r2, =_sidata
 8000ac8:	0800d6fc 	.word	0x0800d6fc
  ldr r2, =_sbss
 8000acc:	24000130 	.word	0x24000130
  ldr r4, =_ebss
 8000ad0:	24004af0 	.word	0x24004af0

08000ad4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC3_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f000 f98c 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ae4:	f005 fc06 	bl	80062f4 <HAL_RCC_GetSysClockFreq>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_Init+0x68>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	0a1b      	lsrs	r3, r3, #8
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	4913      	ldr	r1, [pc, #76]	; (8000b44 <HAL_Init+0x6c>)
 8000af6:	5ccb      	ldrb	r3, [r1, r3]
 8000af8:	f003 031f 	and.w	r3, r3, #31
 8000afc:	fa22 f303 	lsr.w	r3, r2, r3
 8000b00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_Init+0x68>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_Init+0x6c>)
 8000b0c:	5cd3      	ldrb	r3, [r2, r3]
 8000b0e:	f003 031f 	and.w	r3, r3, #31
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	fa22 f303 	lsr.w	r3, r2, r3
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <HAL_Init+0x70>)
 8000b1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <HAL_Init+0x74>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f814 	bl	8000b50 <HAL_InitTick>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e002      	b.n	8000b38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b32:	f7ff fdb3 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58024400 	.word	0x58024400
 8000b44:	0800d6dc 	.word	0x0800d6dc
 8000b48:	24000004 	.word	0x24000004
 8000b4c:	24000000 	.word	0x24000000

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_InitTick+0x60>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e021      	b.n	8000ba8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_InitTick+0x64>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_InitTick+0x60>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f971 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f000 f93b 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_InitTick+0x68>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2400000c 	.word	0x2400000c
 8000bb4:	24000000 	.word	0x24000000
 8000bb8:	24000008 	.word	0x24000008

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	2400000c 	.word	0x2400000c
 8000be0:	240002ac 	.word	0x240002ac

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	240002ac 	.word	0x240002ac

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff ffee 	bl	8000be4 <HAL_GetTick>
 8000c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	d005      	beq.n	8000c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_Delay+0x44>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c22:	bf00      	nop
 8000c24:	f7ff ffde 	bl	8000be4 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8f7      	bhi.n	8000c24 <HAL_Delay+0x28>
  {
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2400000c 	.word	0x2400000c

08000c44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetREVID+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	0c1b      	lsrs	r3, r3, #16
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	5c001000 	.word	0x5c001000

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <__NVIC_SetPriorityGrouping+0x40>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x40>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	05fa0000 	.word	0x05fa0000

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff29 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff40 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5f 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff33 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa4 	bl	8000db8 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff feae 	bl	8000be4 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e316      	b.n	80014c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a66      	ldr	r2, [pc, #408]	; (8001034 <HAL_DMA_Init+0x1b8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d04a      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a65      	ldr	r2, [pc, #404]	; (8001038 <HAL_DMA_Init+0x1bc>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d045      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a63      	ldr	r2, [pc, #396]	; (800103c <HAL_DMA_Init+0x1c0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d040      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a62      	ldr	r2, [pc, #392]	; (8001040 <HAL_DMA_Init+0x1c4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d03b      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a60      	ldr	r2, [pc, #384]	; (8001044 <HAL_DMA_Init+0x1c8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d036      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a5f      	ldr	r2, [pc, #380]	; (8001048 <HAL_DMA_Init+0x1cc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d031      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a5d      	ldr	r2, [pc, #372]	; (800104c <HAL_DMA_Init+0x1d0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d02c      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a5c      	ldr	r2, [pc, #368]	; (8001050 <HAL_DMA_Init+0x1d4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d027      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a5a      	ldr	r2, [pc, #360]	; (8001054 <HAL_DMA_Init+0x1d8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d022      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a59      	ldr	r2, [pc, #356]	; (8001058 <HAL_DMA_Init+0x1dc>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d01d      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a57      	ldr	r2, [pc, #348]	; (800105c <HAL_DMA_Init+0x1e0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d018      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_DMA_Init+0x1e4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d013      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a54      	ldr	r2, [pc, #336]	; (8001064 <HAL_DMA_Init+0x1e8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00e      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a53      	ldr	r2, [pc, #332]	; (8001068 <HAL_DMA_Init+0x1ec>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d009      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a51      	ldr	r2, [pc, #324]	; (800106c <HAL_DMA_Init+0x1f0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d004      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a50      	ldr	r2, [pc, #320]	; (8001070 <HAL_DMA_Init+0x1f4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d101      	bne.n	8000f38 <HAL_DMA_Init+0xbc>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_DMA_Init+0xbe>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 813b 	beq.w	80011b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2202      	movs	r2, #2
 8000f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a37      	ldr	r2, [pc, #220]	; (8001034 <HAL_DMA_Init+0x1b8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d04a      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a36      	ldr	r2, [pc, #216]	; (8001038 <HAL_DMA_Init+0x1bc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d045      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a34      	ldr	r2, [pc, #208]	; (800103c <HAL_DMA_Init+0x1c0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d040      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a33      	ldr	r2, [pc, #204]	; (8001040 <HAL_DMA_Init+0x1c4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d03b      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a31      	ldr	r2, [pc, #196]	; (8001044 <HAL_DMA_Init+0x1c8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d036      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a30      	ldr	r2, [pc, #192]	; (8001048 <HAL_DMA_Init+0x1cc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d031      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a2e      	ldr	r2, [pc, #184]	; (800104c <HAL_DMA_Init+0x1d0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d02c      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a2d      	ldr	r2, [pc, #180]	; (8001050 <HAL_DMA_Init+0x1d4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d027      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a2b      	ldr	r2, [pc, #172]	; (8001054 <HAL_DMA_Init+0x1d8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d022      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <HAL_DMA_Init+0x1dc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d01d      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a28      	ldr	r2, [pc, #160]	; (800105c <HAL_DMA_Init+0x1e0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d018      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a27      	ldr	r2, [pc, #156]	; (8001060 <HAL_DMA_Init+0x1e4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <HAL_DMA_Init+0x1e8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00e      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a24      	ldr	r2, [pc, #144]	; (8001068 <HAL_DMA_Init+0x1ec>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d009      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a22      	ldr	r2, [pc, #136]	; (800106c <HAL_DMA_Init+0x1f0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d004      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a21      	ldr	r2, [pc, #132]	; (8001070 <HAL_DMA_Init+0x1f4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d108      	bne.n	8001002 <HAL_DMA_Init+0x186>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e007      	b.n	8001012 <HAL_DMA_Init+0x196>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001012:	e02f      	b.n	8001074 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001014:	f7ff fde6 	bl	8000be4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b05      	cmp	r3, #5
 8001020:	d928      	bls.n	8001074 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2220      	movs	r2, #32
 8001026:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e246      	b.n	80014c2 <HAL_DMA_Init+0x646>
 8001034:	40020010 	.word	0x40020010
 8001038:	40020028 	.word	0x40020028
 800103c:	40020040 	.word	0x40020040
 8001040:	40020058 	.word	0x40020058
 8001044:	40020070 	.word	0x40020070
 8001048:	40020088 	.word	0x40020088
 800104c:	400200a0 	.word	0x400200a0
 8001050:	400200b8 	.word	0x400200b8
 8001054:	40020410 	.word	0x40020410
 8001058:	40020428 	.word	0x40020428
 800105c:	40020440 	.word	0x40020440
 8001060:	40020458 	.word	0x40020458
 8001064:	40020470 	.word	0x40020470
 8001068:	40020488 	.word	0x40020488
 800106c:	400204a0 	.word	0x400204a0
 8001070:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1c8      	bne.n	8001014 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4b83      	ldr	r3, [pc, #524]	; (800129c <HAL_DMA_Init+0x420>)
 800108e:	4013      	ands	r3, r2
 8001090:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800109a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d107      	bne.n	80010d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4313      	orrs	r3, r2
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80010d8:	4b71      	ldr	r3, [pc, #452]	; (80012a0 <HAL_DMA_Init+0x424>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b71      	ldr	r3, [pc, #452]	; (80012a4 <HAL_DMA_Init+0x428>)
 80010de:	4013      	ands	r3, r2
 80010e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010e4:	d328      	bcc.n	8001138 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b28      	cmp	r3, #40	; 0x28
 80010ec:	d903      	bls.n	80010f6 <HAL_DMA_Init+0x27a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b2e      	cmp	r3, #46	; 0x2e
 80010f4:	d917      	bls.n	8001126 <HAL_DMA_Init+0x2aa>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b3e      	cmp	r3, #62	; 0x3e
 80010fc:	d903      	bls.n	8001106 <HAL_DMA_Init+0x28a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b42      	cmp	r3, #66	; 0x42
 8001104:	d90f      	bls.n	8001126 <HAL_DMA_Init+0x2aa>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b46      	cmp	r3, #70	; 0x46
 800110c:	d903      	bls.n	8001116 <HAL_DMA_Init+0x29a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b48      	cmp	r3, #72	; 0x48
 8001114:	d907      	bls.n	8001126 <HAL_DMA_Init+0x2aa>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b4e      	cmp	r3, #78	; 0x4e
 800111c:	d905      	bls.n	800112a <HAL_DMA_Init+0x2ae>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b52      	cmp	r3, #82	; 0x52
 8001124:	d801      	bhi.n	800112a <HAL_DMA_Init+0x2ae>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_DMA_Init+0x2b0>
 800112a:	2300      	movs	r3, #0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001136:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f023 0307 	bic.w	r3, r3, #7
 800114e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4313      	orrs	r3, r2
 8001158:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	2b04      	cmp	r3, #4
 8001160:	d117      	bne.n	8001192 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00e      	beq.n	8001192 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f002 fb3f 	bl	80037f8 <DMA_CheckFifoParam>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e197      	b.n	80014c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f002 fa7a 	bl	8003694 <DMA_CalcBaseAndBitshift>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	223f      	movs	r2, #63	; 0x3f
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	e0cd      	b.n	8001352 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a3b      	ldr	r2, [pc, #236]	; (80012a8 <HAL_DMA_Init+0x42c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d022      	beq.n	8001206 <HAL_DMA_Init+0x38a>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a39      	ldr	r2, [pc, #228]	; (80012ac <HAL_DMA_Init+0x430>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01d      	beq.n	8001206 <HAL_DMA_Init+0x38a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <HAL_DMA_Init+0x434>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d018      	beq.n	8001206 <HAL_DMA_Init+0x38a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <HAL_DMA_Init+0x438>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_DMA_Init+0x38a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a35      	ldr	r2, [pc, #212]	; (80012b8 <HAL_DMA_Init+0x43c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d00e      	beq.n	8001206 <HAL_DMA_Init+0x38a>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a33      	ldr	r2, [pc, #204]	; (80012bc <HAL_DMA_Init+0x440>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d009      	beq.n	8001206 <HAL_DMA_Init+0x38a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a32      	ldr	r2, [pc, #200]	; (80012c0 <HAL_DMA_Init+0x444>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d004      	beq.n	8001206 <HAL_DMA_Init+0x38a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a30      	ldr	r2, [pc, #192]	; (80012c4 <HAL_DMA_Init+0x448>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_DMA_Init+0x38e>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_DMA_Init+0x390>
 800120a:	2300      	movs	r3, #0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8097 	beq.w	8001340 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a24      	ldr	r2, [pc, #144]	; (80012a8 <HAL_DMA_Init+0x42c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d021      	beq.n	8001260 <HAL_DMA_Init+0x3e4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a22      	ldr	r2, [pc, #136]	; (80012ac <HAL_DMA_Init+0x430>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01c      	beq.n	8001260 <HAL_DMA_Init+0x3e4>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <HAL_DMA_Init+0x434>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d017      	beq.n	8001260 <HAL_DMA_Init+0x3e4>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <HAL_DMA_Init+0x438>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d012      	beq.n	8001260 <HAL_DMA_Init+0x3e4>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_DMA_Init+0x43c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_DMA_Init+0x3e4>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <HAL_DMA_Init+0x440>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d008      	beq.n	8001260 <HAL_DMA_Init+0x3e4>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <HAL_DMA_Init+0x444>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d003      	beq.n	8001260 <HAL_DMA_Init+0x3e4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_DMA_Init+0x448>)
 800125e:	4293      	cmp	r3, r2
 8001260:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2202      	movs	r2, #2
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_DMA_Init+0x44c>)
 800127e:	4013      	ands	r3, r2
 8001280:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b40      	cmp	r3, #64	; 0x40
 8001288:	d020      	beq.n	80012cc <HAL_DMA_Init+0x450>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b80      	cmp	r3, #128	; 0x80
 8001290:	d102      	bne.n	8001298 <HAL_DMA_Init+0x41c>
 8001292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001296:	e01a      	b.n	80012ce <HAL_DMA_Init+0x452>
 8001298:	2300      	movs	r3, #0
 800129a:	e018      	b.n	80012ce <HAL_DMA_Init+0x452>
 800129c:	fe10803f 	.word	0xfe10803f
 80012a0:	5c001000 	.word	0x5c001000
 80012a4:	ffff0000 	.word	0xffff0000
 80012a8:	58025408 	.word	0x58025408
 80012ac:	5802541c 	.word	0x5802541c
 80012b0:	58025430 	.word	0x58025430
 80012b4:	58025444 	.word	0x58025444
 80012b8:	58025458 	.word	0x58025458
 80012bc:	5802546c 	.word	0x5802546c
 80012c0:	58025480 	.word	0x58025480
 80012c4:	58025494 	.word	0x58025494
 80012c8:	fffe000f 	.word	0xfffe000f
 80012cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68d2      	ldr	r2, [r2, #12]
 80012d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80012d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80012dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80012e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80012ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80012f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80012fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4313      	orrs	r3, r2
 8001302:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b6e      	ldr	r3, [pc, #440]	; (80014cc <HAL_DMA_Init+0x650>)
 8001314:	4413      	add	r3, r2
 8001316:	4a6e      	ldr	r2, [pc, #440]	; (80014d0 <HAL_DMA_Init+0x654>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	009a      	lsls	r2, r3, #2
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f002 f9b5 	bl	8003694 <DMA_CalcBaseAndBitshift>
 800132a:	4603      	mov	r3, r0
 800132c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	2201      	movs	r2, #1
 8001338:	409a      	lsls	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	e008      	b.n	8001352 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2240      	movs	r2, #64	; 0x40
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2203      	movs	r2, #3
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e0b7      	b.n	80014c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <HAL_DMA_Init+0x658>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d072      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a5d      	ldr	r2, [pc, #372]	; (80014d8 <HAL_DMA_Init+0x65c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d06d      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a5c      	ldr	r2, [pc, #368]	; (80014dc <HAL_DMA_Init+0x660>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d068      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <HAL_DMA_Init+0x664>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d063      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a59      	ldr	r2, [pc, #356]	; (80014e4 <HAL_DMA_Init+0x668>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d05e      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a57      	ldr	r2, [pc, #348]	; (80014e8 <HAL_DMA_Init+0x66c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d059      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a56      	ldr	r2, [pc, #344]	; (80014ec <HAL_DMA_Init+0x670>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d054      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a54      	ldr	r2, [pc, #336]	; (80014f0 <HAL_DMA_Init+0x674>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d04f      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a53      	ldr	r2, [pc, #332]	; (80014f4 <HAL_DMA_Init+0x678>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d04a      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_DMA_Init+0x67c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d045      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a50      	ldr	r2, [pc, #320]	; (80014fc <HAL_DMA_Init+0x680>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d040      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a4e      	ldr	r2, [pc, #312]	; (8001500 <HAL_DMA_Init+0x684>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d03b      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a4d      	ldr	r2, [pc, #308]	; (8001504 <HAL_DMA_Init+0x688>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d036      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_DMA_Init+0x68c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d031      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_DMA_Init+0x690>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d02c      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a48      	ldr	r2, [pc, #288]	; (8001510 <HAL_DMA_Init+0x694>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d027      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a47      	ldr	r2, [pc, #284]	; (8001514 <HAL_DMA_Init+0x698>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d022      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a45      	ldr	r2, [pc, #276]	; (8001518 <HAL_DMA_Init+0x69c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d01d      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a44      	ldr	r2, [pc, #272]	; (800151c <HAL_DMA_Init+0x6a0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d018      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a42      	ldr	r2, [pc, #264]	; (8001520 <HAL_DMA_Init+0x6a4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a41      	ldr	r2, [pc, #260]	; (8001524 <HAL_DMA_Init+0x6a8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d00e      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a3f      	ldr	r2, [pc, #252]	; (8001528 <HAL_DMA_Init+0x6ac>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d009      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a3e      	ldr	r2, [pc, #248]	; (800152c <HAL_DMA_Init+0x6b0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d004      	beq.n	8001442 <HAL_DMA_Init+0x5c6>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a3c      	ldr	r2, [pc, #240]	; (8001530 <HAL_DMA_Init+0x6b4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_DMA_Init+0x5ca>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_DMA_Init+0x5cc>
 8001446:	2300      	movs	r3, #0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d032      	beq.n	80014b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f002 fa4f 	bl	80038f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b80      	cmp	r3, #128	; 0x80
 8001458:	d102      	bne.n	8001460 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001474:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d010      	beq.n	80014a0 <HAL_DMA_Init+0x624>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b08      	cmp	r3, #8
 8001484:	d80c      	bhi.n	80014a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f002 facc 	bl	8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	e008      	b.n	80014b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	a7fdabf8 	.word	0xa7fdabf8
 80014d0:	cccccccd 	.word	0xcccccccd
 80014d4:	40020010 	.word	0x40020010
 80014d8:	40020028 	.word	0x40020028
 80014dc:	40020040 	.word	0x40020040
 80014e0:	40020058 	.word	0x40020058
 80014e4:	40020070 	.word	0x40020070
 80014e8:	40020088 	.word	0x40020088
 80014ec:	400200a0 	.word	0x400200a0
 80014f0:	400200b8 	.word	0x400200b8
 80014f4:	40020410 	.word	0x40020410
 80014f8:	40020428 	.word	0x40020428
 80014fc:	40020440 	.word	0x40020440
 8001500:	40020458 	.word	0x40020458
 8001504:	40020470 	.word	0x40020470
 8001508:	40020488 	.word	0x40020488
 800150c:	400204a0 	.word	0x400204a0
 8001510:	400204b8 	.word	0x400204b8
 8001514:	58025408 	.word	0x58025408
 8001518:	5802541c 	.word	0x5802541c
 800151c:	58025430 	.word	0x58025430
 8001520:	58025444 	.word	0x58025444
 8001524:	58025458 	.word	0x58025458
 8001528:	5802546c 	.word	0x5802546c
 800152c:	58025480 	.word	0x58025480
 8001530:	58025494 	.word	0x58025494

08001534 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e226      	b.n	800199e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_DMA_Start_IT+0x2a>
 800155a:	2302      	movs	r3, #2
 800155c:	e21f      	b.n	800199e <HAL_DMA_Start_IT+0x46a>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	f040 820a 	bne.w	8001988 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a68      	ldr	r2, [pc, #416]	; (8001728 <HAL_DMA_Start_IT+0x1f4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d04a      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a66      	ldr	r2, [pc, #408]	; (800172c <HAL_DMA_Start_IT+0x1f8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d045      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a65      	ldr	r2, [pc, #404]	; (8001730 <HAL_DMA_Start_IT+0x1fc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d040      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a63      	ldr	r2, [pc, #396]	; (8001734 <HAL_DMA_Start_IT+0x200>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d03b      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a62      	ldr	r2, [pc, #392]	; (8001738 <HAL_DMA_Start_IT+0x204>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d036      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a60      	ldr	r2, [pc, #384]	; (800173c <HAL_DMA_Start_IT+0x208>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d031      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <HAL_DMA_Start_IT+0x20c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d02c      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5d      	ldr	r2, [pc, #372]	; (8001744 <HAL_DMA_Start_IT+0x210>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d027      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a5c      	ldr	r2, [pc, #368]	; (8001748 <HAL_DMA_Start_IT+0x214>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d022      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a5a      	ldr	r2, [pc, #360]	; (800174c <HAL_DMA_Start_IT+0x218>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01d      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a59      	ldr	r2, [pc, #356]	; (8001750 <HAL_DMA_Start_IT+0x21c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d018      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a57      	ldr	r2, [pc, #348]	; (8001754 <HAL_DMA_Start_IT+0x220>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a56      	ldr	r2, [pc, #344]	; (8001758 <HAL_DMA_Start_IT+0x224>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00e      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a54      	ldr	r2, [pc, #336]	; (800175c <HAL_DMA_Start_IT+0x228>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d009      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a53      	ldr	r2, [pc, #332]	; (8001760 <HAL_DMA_Start_IT+0x22c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d004      	beq.n	8001622 <HAL_DMA_Start_IT+0xee>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a51      	ldr	r2, [pc, #324]	; (8001764 <HAL_DMA_Start_IT+0x230>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d108      	bne.n	8001634 <HAL_DMA_Start_IT+0x100>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0201 	bic.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e007      	b.n	8001644 <HAL_DMA_Start_IT+0x110>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f001 fe76 	bl	800333c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a34      	ldr	r2, [pc, #208]	; (8001728 <HAL_DMA_Start_IT+0x1f4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d04a      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a33      	ldr	r2, [pc, #204]	; (800172c <HAL_DMA_Start_IT+0x1f8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d045      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a31      	ldr	r2, [pc, #196]	; (8001730 <HAL_DMA_Start_IT+0x1fc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d040      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_DMA_Start_IT+0x200>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d03b      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a2e      	ldr	r2, [pc, #184]	; (8001738 <HAL_DMA_Start_IT+0x204>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d036      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a2d      	ldr	r2, [pc, #180]	; (800173c <HAL_DMA_Start_IT+0x208>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d031      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a2b      	ldr	r2, [pc, #172]	; (8001740 <HAL_DMA_Start_IT+0x20c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d02c      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a2a      	ldr	r2, [pc, #168]	; (8001744 <HAL_DMA_Start_IT+0x210>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d027      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a28      	ldr	r2, [pc, #160]	; (8001748 <HAL_DMA_Start_IT+0x214>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d022      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a27      	ldr	r2, [pc, #156]	; (800174c <HAL_DMA_Start_IT+0x218>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d01d      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a25      	ldr	r2, [pc, #148]	; (8001750 <HAL_DMA_Start_IT+0x21c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d018      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a24      	ldr	r2, [pc, #144]	; (8001754 <HAL_DMA_Start_IT+0x220>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d013      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_DMA_Start_IT+0x224>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d00e      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a21      	ldr	r2, [pc, #132]	; (800175c <HAL_DMA_Start_IT+0x228>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d009      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_DMA_Start_IT+0x22c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d004      	beq.n	80016f0 <HAL_DMA_Start_IT+0x1bc>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <HAL_DMA_Start_IT+0x230>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_DMA_Start_IT+0x1c0>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_DMA_Start_IT+0x1c2>
 80016f4:	2300      	movs	r3, #0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d036      	beq.n	8001768 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 021e 	bic.w	r2, r3, #30
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0216 	orr.w	r2, r2, #22
 800170c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2b00      	cmp	r3, #0
 8001714:	d03e      	beq.n	8001794 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0208 	orr.w	r2, r2, #8
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e035      	b.n	8001794 <HAL_DMA_Start_IT+0x260>
 8001728:	40020010 	.word	0x40020010
 800172c:	40020028 	.word	0x40020028
 8001730:	40020040 	.word	0x40020040
 8001734:	40020058 	.word	0x40020058
 8001738:	40020070 	.word	0x40020070
 800173c:	40020088 	.word	0x40020088
 8001740:	400200a0 	.word	0x400200a0
 8001744:	400200b8 	.word	0x400200b8
 8001748:	40020410 	.word	0x40020410
 800174c:	40020428 	.word	0x40020428
 8001750:	40020440 	.word	0x40020440
 8001754:	40020458 	.word	0x40020458
 8001758:	40020470 	.word	0x40020470
 800175c:	40020488 	.word	0x40020488
 8001760:	400204a0 	.word	0x400204a0
 8001764:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 020e 	bic.w	r2, r3, #14
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 020a 	orr.w	r2, r2, #10
 800177a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0204 	orr.w	r2, r2, #4
 8001792:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a83      	ldr	r2, [pc, #524]	; (80019a8 <HAL_DMA_Start_IT+0x474>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d072      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a82      	ldr	r2, [pc, #520]	; (80019ac <HAL_DMA_Start_IT+0x478>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d06d      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a80      	ldr	r2, [pc, #512]	; (80019b0 <HAL_DMA_Start_IT+0x47c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d068      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7f      	ldr	r2, [pc, #508]	; (80019b4 <HAL_DMA_Start_IT+0x480>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d063      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a7d      	ldr	r2, [pc, #500]	; (80019b8 <HAL_DMA_Start_IT+0x484>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d05e      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7c      	ldr	r2, [pc, #496]	; (80019bc <HAL_DMA_Start_IT+0x488>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d059      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a7a      	ldr	r2, [pc, #488]	; (80019c0 <HAL_DMA_Start_IT+0x48c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d054      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a79      	ldr	r2, [pc, #484]	; (80019c4 <HAL_DMA_Start_IT+0x490>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d04f      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a77      	ldr	r2, [pc, #476]	; (80019c8 <HAL_DMA_Start_IT+0x494>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d04a      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a76      	ldr	r2, [pc, #472]	; (80019cc <HAL_DMA_Start_IT+0x498>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d045      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a74      	ldr	r2, [pc, #464]	; (80019d0 <HAL_DMA_Start_IT+0x49c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d040      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a73      	ldr	r2, [pc, #460]	; (80019d4 <HAL_DMA_Start_IT+0x4a0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d03b      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a71      	ldr	r2, [pc, #452]	; (80019d8 <HAL_DMA_Start_IT+0x4a4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d036      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a70      	ldr	r2, [pc, #448]	; (80019dc <HAL_DMA_Start_IT+0x4a8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d031      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6e      	ldr	r2, [pc, #440]	; (80019e0 <HAL_DMA_Start_IT+0x4ac>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d02c      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6d      	ldr	r2, [pc, #436]	; (80019e4 <HAL_DMA_Start_IT+0x4b0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d027      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a6b      	ldr	r2, [pc, #428]	; (80019e8 <HAL_DMA_Start_IT+0x4b4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d022      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6a      	ldr	r2, [pc, #424]	; (80019ec <HAL_DMA_Start_IT+0x4b8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d01d      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a68      	ldr	r2, [pc, #416]	; (80019f0 <HAL_DMA_Start_IT+0x4bc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d018      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a67      	ldr	r2, [pc, #412]	; (80019f4 <HAL_DMA_Start_IT+0x4c0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d013      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <HAL_DMA_Start_IT+0x4c4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00e      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a64      	ldr	r2, [pc, #400]	; (80019fc <HAL_DMA_Start_IT+0x4c8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d009      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a62      	ldr	r2, [pc, #392]	; (8001a00 <HAL_DMA_Start_IT+0x4cc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d004      	beq.n	8001884 <HAL_DMA_Start_IT+0x350>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a61      	ldr	r2, [pc, #388]	; (8001a04 <HAL_DMA_Start_IT+0x4d0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d101      	bne.n	8001888 <HAL_DMA_Start_IT+0x354>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_DMA_Start_IT+0x356>
 8001888:	2300      	movs	r3, #0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01a      	beq.n	80018c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <HAL_DMA_Start_IT+0x474>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d04a      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a36      	ldr	r2, [pc, #216]	; (80019ac <HAL_DMA_Start_IT+0x478>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d045      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <HAL_DMA_Start_IT+0x47c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d040      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a33      	ldr	r2, [pc, #204]	; (80019b4 <HAL_DMA_Start_IT+0x480>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d03b      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_DMA_Start_IT+0x484>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d036      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a30      	ldr	r2, [pc, #192]	; (80019bc <HAL_DMA_Start_IT+0x488>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d031      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <HAL_DMA_Start_IT+0x48c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d02c      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <HAL_DMA_Start_IT+0x490>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d027      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2b      	ldr	r2, [pc, #172]	; (80019c8 <HAL_DMA_Start_IT+0x494>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d022      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2a      	ldr	r2, [pc, #168]	; (80019cc <HAL_DMA_Start_IT+0x498>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d01d      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <HAL_DMA_Start_IT+0x49c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d018      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <HAL_DMA_Start_IT+0x4a0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d013      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <HAL_DMA_Start_IT+0x4a4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00e      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_DMA_Start_IT+0x4a8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d009      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <HAL_DMA_Start_IT+0x4ac>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_DMA_Start_IT+0x430>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_DMA_Start_IT+0x4b0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d108      	bne.n	8001976 <HAL_DMA_Start_IT+0x442>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e012      	b.n	800199c <HAL_DMA_Start_IT+0x468>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e009      	b.n	800199c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800198e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800199c:	7dfb      	ldrb	r3, [r7, #23]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40020010 	.word	0x40020010
 80019ac:	40020028 	.word	0x40020028
 80019b0:	40020040 	.word	0x40020040
 80019b4:	40020058 	.word	0x40020058
 80019b8:	40020070 	.word	0x40020070
 80019bc:	40020088 	.word	0x40020088
 80019c0:	400200a0 	.word	0x400200a0
 80019c4:	400200b8 	.word	0x400200b8
 80019c8:	40020410 	.word	0x40020410
 80019cc:	40020428 	.word	0x40020428
 80019d0:	40020440 	.word	0x40020440
 80019d4:	40020458 	.word	0x40020458
 80019d8:	40020470 	.word	0x40020470
 80019dc:	40020488 	.word	0x40020488
 80019e0:	400204a0 	.word	0x400204a0
 80019e4:	400204b8 	.word	0x400204b8
 80019e8:	58025408 	.word	0x58025408
 80019ec:	5802541c 	.word	0x5802541c
 80019f0:	58025430 	.word	0x58025430
 80019f4:	58025444 	.word	0x58025444
 80019f8:	58025458 	.word	0x58025458
 80019fc:	5802546c 	.word	0x5802546c
 8001a00:	58025480 	.word	0x58025480
 8001a04:	58025494 	.word	0x58025494

08001a08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff f8e8 	bl	8000be4 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e2dc      	b.n	8001fda <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d008      	beq.n	8001a3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e2cd      	b.n	8001fda <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a76      	ldr	r2, [pc, #472]	; (8001c1c <HAL_DMA_Abort+0x214>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d04a      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a74      	ldr	r2, [pc, #464]	; (8001c20 <HAL_DMA_Abort+0x218>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d045      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a73      	ldr	r2, [pc, #460]	; (8001c24 <HAL_DMA_Abort+0x21c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d040      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a71      	ldr	r2, [pc, #452]	; (8001c28 <HAL_DMA_Abort+0x220>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d03b      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a70      	ldr	r2, [pc, #448]	; (8001c2c <HAL_DMA_Abort+0x224>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d036      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_DMA_Abort+0x228>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d031      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6d      	ldr	r2, [pc, #436]	; (8001c34 <HAL_DMA_Abort+0x22c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d02c      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a6b      	ldr	r2, [pc, #428]	; (8001c38 <HAL_DMA_Abort+0x230>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d027      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <HAL_DMA_Abort+0x234>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d022      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a68      	ldr	r2, [pc, #416]	; (8001c40 <HAL_DMA_Abort+0x238>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01d      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a67      	ldr	r2, [pc, #412]	; (8001c44 <HAL_DMA_Abort+0x23c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d018      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_DMA_Abort+0x240>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a64      	ldr	r2, [pc, #400]	; (8001c4c <HAL_DMA_Abort+0x244>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00e      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a62      	ldr	r2, [pc, #392]	; (8001c50 <HAL_DMA_Abort+0x248>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d009      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a61      	ldr	r2, [pc, #388]	; (8001c54 <HAL_DMA_Abort+0x24c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d004      	beq.n	8001ade <HAL_DMA_Abort+0xd6>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a5f      	ldr	r2, [pc, #380]	; (8001c58 <HAL_DMA_Abort+0x250>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_DMA_Abort+0xda>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_DMA_Abort+0xdc>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 021e 	bic.w	r2, r2, #30
 8001af6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e00a      	b.n	8001b26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 020e 	bic.w	r2, r2, #14
 8001b1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a3c      	ldr	r2, [pc, #240]	; (8001c1c <HAL_DMA_Abort+0x214>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d072      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a3a      	ldr	r2, [pc, #232]	; (8001c20 <HAL_DMA_Abort+0x218>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d06d      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a39      	ldr	r2, [pc, #228]	; (8001c24 <HAL_DMA_Abort+0x21c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d068      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a37      	ldr	r2, [pc, #220]	; (8001c28 <HAL_DMA_Abort+0x220>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d063      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a36      	ldr	r2, [pc, #216]	; (8001c2c <HAL_DMA_Abort+0x224>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d05e      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <HAL_DMA_Abort+0x228>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d059      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <HAL_DMA_Abort+0x22c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d054      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a31      	ldr	r2, [pc, #196]	; (8001c38 <HAL_DMA_Abort+0x230>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d04f      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <HAL_DMA_Abort+0x234>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d04a      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2e      	ldr	r2, [pc, #184]	; (8001c40 <HAL_DMA_Abort+0x238>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d045      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <HAL_DMA_Abort+0x23c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d040      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a2b      	ldr	r2, [pc, #172]	; (8001c48 <HAL_DMA_Abort+0x240>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d03b      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <HAL_DMA_Abort+0x244>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d036      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <HAL_DMA_Abort+0x248>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d031      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_DMA_Abort+0x24c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d02c      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_DMA_Abort+0x250>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d027      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_DMA_Abort+0x254>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d022      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <HAL_DMA_Abort+0x258>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01d      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <HAL_DMA_Abort+0x25c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d018      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HAL_DMA_Abort+0x260>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <HAL_DMA_Abort+0x264>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00e      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <HAL_DMA_Abort+0x268>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d009      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_DMA_Abort+0x26c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d004      	beq.n	8001c16 <HAL_DMA_Abort+0x20e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_DMA_Abort+0x270>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d132      	bne.n	8001c7c <HAL_DMA_Abort+0x274>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e031      	b.n	8001c7e <HAL_DMA_Abort+0x276>
 8001c1a:	bf00      	nop
 8001c1c:	40020010 	.word	0x40020010
 8001c20:	40020028 	.word	0x40020028
 8001c24:	40020040 	.word	0x40020040
 8001c28:	40020058 	.word	0x40020058
 8001c2c:	40020070 	.word	0x40020070
 8001c30:	40020088 	.word	0x40020088
 8001c34:	400200a0 	.word	0x400200a0
 8001c38:	400200b8 	.word	0x400200b8
 8001c3c:	40020410 	.word	0x40020410
 8001c40:	40020428 	.word	0x40020428
 8001c44:	40020440 	.word	0x40020440
 8001c48:	40020458 	.word	0x40020458
 8001c4c:	40020470 	.word	0x40020470
 8001c50:	40020488 	.word	0x40020488
 8001c54:	400204a0 	.word	0x400204a0
 8001c58:	400204b8 	.word	0x400204b8
 8001c5c:	58025408 	.word	0x58025408
 8001c60:	5802541c 	.word	0x5802541c
 8001c64:	58025430 	.word	0x58025430
 8001c68:	58025444 	.word	0x58025444
 8001c6c:	58025458 	.word	0x58025458
 8001c70:	5802546c 	.word	0x5802546c
 8001c74:	58025480 	.word	0x58025480
 8001c78:	58025494 	.word	0x58025494
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6d      	ldr	r2, [pc, #436]	; (8001e4c <HAL_DMA_Abort+0x444>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d04a      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6b      	ldr	r2, [pc, #428]	; (8001e50 <HAL_DMA_Abort+0x448>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d045      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <HAL_DMA_Abort+0x44c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d040      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a68      	ldr	r2, [pc, #416]	; (8001e58 <HAL_DMA_Abort+0x450>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d03b      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a67      	ldr	r2, [pc, #412]	; (8001e5c <HAL_DMA_Abort+0x454>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d036      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a65      	ldr	r2, [pc, #404]	; (8001e60 <HAL_DMA_Abort+0x458>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d031      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a64      	ldr	r2, [pc, #400]	; (8001e64 <HAL_DMA_Abort+0x45c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d02c      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a62      	ldr	r2, [pc, #392]	; (8001e68 <HAL_DMA_Abort+0x460>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d027      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a61      	ldr	r2, [pc, #388]	; (8001e6c <HAL_DMA_Abort+0x464>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d022      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a5f      	ldr	r2, [pc, #380]	; (8001e70 <HAL_DMA_Abort+0x468>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d01d      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5e      	ldr	r2, [pc, #376]	; (8001e74 <HAL_DMA_Abort+0x46c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d018      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <HAL_DMA_Abort+0x470>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5b      	ldr	r2, [pc, #364]	; (8001e7c <HAL_DMA_Abort+0x474>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00e      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a59      	ldr	r2, [pc, #356]	; (8001e80 <HAL_DMA_Abort+0x478>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d009      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_DMA_Abort+0x47c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d004      	beq.n	8001d32 <HAL_DMA_Abort+0x32a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_DMA_Abort+0x480>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d108      	bne.n	8001d44 <HAL_DMA_Abort+0x33c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e007      	b.n	8001d54 <HAL_DMA_Abort+0x34c>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d54:	e013      	b.n	8001d7e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d56:	f7fe ff45 	bl	8000be4 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d90c      	bls.n	8001d7e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e12d      	b.n	8001fda <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1e5      	bne.n	8001d56 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a2f      	ldr	r2, [pc, #188]	; (8001e4c <HAL_DMA_Abort+0x444>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04a      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a2d      	ldr	r2, [pc, #180]	; (8001e50 <HAL_DMA_Abort+0x448>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d045      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a2c      	ldr	r2, [pc, #176]	; (8001e54 <HAL_DMA_Abort+0x44c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d040      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2a      	ldr	r2, [pc, #168]	; (8001e58 <HAL_DMA_Abort+0x450>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d03b      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <HAL_DMA_Abort+0x454>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d036      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <HAL_DMA_Abort+0x458>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d031      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_DMA_Abort+0x45c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d02c      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <HAL_DMA_Abort+0x460>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d027      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_DMA_Abort+0x464>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d022      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <HAL_DMA_Abort+0x468>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01d      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_DMA_Abort+0x46c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d018      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <HAL_DMA_Abort+0x470>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_DMA_Abort+0x474>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00e      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <HAL_DMA_Abort+0x478>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_DMA_Abort+0x47c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d004      	beq.n	8001e2a <HAL_DMA_Abort+0x422>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_DMA_Abort+0x480>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_DMA_Abort+0x426>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_DMA_Abort+0x428>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d02b      	beq.n	8001e8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	223f      	movs	r2, #63	; 0x3f
 8001e44:	409a      	lsls	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	e02a      	b.n	8001ea2 <HAL_DMA_Abort+0x49a>
 8001e4c:	40020010 	.word	0x40020010
 8001e50:	40020028 	.word	0x40020028
 8001e54:	40020040 	.word	0x40020040
 8001e58:	40020058 	.word	0x40020058
 8001e5c:	40020070 	.word	0x40020070
 8001e60:	40020088 	.word	0x40020088
 8001e64:	400200a0 	.word	0x400200a0
 8001e68:	400200b8 	.word	0x400200b8
 8001e6c:	40020410 	.word	0x40020410
 8001e70:	40020428 	.word	0x40020428
 8001e74:	40020440 	.word	0x40020440
 8001e78:	40020458 	.word	0x40020458
 8001e7c:	40020470 	.word	0x40020470
 8001e80:	40020488 	.word	0x40020488
 8001e84:	400204a0 	.word	0x400204a0
 8001e88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a4f      	ldr	r2, [pc, #316]	; (8001fe4 <HAL_DMA_Abort+0x5dc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d072      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a4d      	ldr	r2, [pc, #308]	; (8001fe8 <HAL_DMA_Abort+0x5e0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d06d      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <HAL_DMA_Abort+0x5e4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d068      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a4a      	ldr	r2, [pc, #296]	; (8001ff0 <HAL_DMA_Abort+0x5e8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d063      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a49      	ldr	r2, [pc, #292]	; (8001ff4 <HAL_DMA_Abort+0x5ec>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d05e      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a47      	ldr	r2, [pc, #284]	; (8001ff8 <HAL_DMA_Abort+0x5f0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d059      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a46      	ldr	r2, [pc, #280]	; (8001ffc <HAL_DMA_Abort+0x5f4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d054      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a44      	ldr	r2, [pc, #272]	; (8002000 <HAL_DMA_Abort+0x5f8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d04f      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a43      	ldr	r2, [pc, #268]	; (8002004 <HAL_DMA_Abort+0x5fc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d04a      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a41      	ldr	r2, [pc, #260]	; (8002008 <HAL_DMA_Abort+0x600>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d045      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a40      	ldr	r2, [pc, #256]	; (800200c <HAL_DMA_Abort+0x604>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d040      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a3e      	ldr	r2, [pc, #248]	; (8002010 <HAL_DMA_Abort+0x608>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d03b      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a3d      	ldr	r2, [pc, #244]	; (8002014 <HAL_DMA_Abort+0x60c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d036      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3b      	ldr	r2, [pc, #236]	; (8002018 <HAL_DMA_Abort+0x610>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d031      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a3a      	ldr	r2, [pc, #232]	; (800201c <HAL_DMA_Abort+0x614>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d02c      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a38      	ldr	r2, [pc, #224]	; (8002020 <HAL_DMA_Abort+0x618>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d027      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a37      	ldr	r2, [pc, #220]	; (8002024 <HAL_DMA_Abort+0x61c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d022      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a35      	ldr	r2, [pc, #212]	; (8002028 <HAL_DMA_Abort+0x620>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01d      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_DMA_Abort+0x624>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d018      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a32      	ldr	r2, [pc, #200]	; (8002030 <HAL_DMA_Abort+0x628>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a31      	ldr	r2, [pc, #196]	; (8002034 <HAL_DMA_Abort+0x62c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <HAL_DMA_Abort+0x630>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2e      	ldr	r2, [pc, #184]	; (800203c <HAL_DMA_Abort+0x634>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_DMA_Abort+0x58a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <HAL_DMA_Abort+0x638>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Abort+0x58e>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_DMA_Abort+0x590>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d015      	beq.n	8001fc8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fa4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00c      	beq.n	8001fc8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fc6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40020010 	.word	0x40020010
 8001fe8:	40020028 	.word	0x40020028
 8001fec:	40020040 	.word	0x40020040
 8001ff0:	40020058 	.word	0x40020058
 8001ff4:	40020070 	.word	0x40020070
 8001ff8:	40020088 	.word	0x40020088
 8001ffc:	400200a0 	.word	0x400200a0
 8002000:	400200b8 	.word	0x400200b8
 8002004:	40020410 	.word	0x40020410
 8002008:	40020428 	.word	0x40020428
 800200c:	40020440 	.word	0x40020440
 8002010:	40020458 	.word	0x40020458
 8002014:	40020470 	.word	0x40020470
 8002018:	40020488 	.word	0x40020488
 800201c:	400204a0 	.word	0x400204a0
 8002020:	400204b8 	.word	0x400204b8
 8002024:	58025408 	.word	0x58025408
 8002028:	5802541c 	.word	0x5802541c
 800202c:	58025430 	.word	0x58025430
 8002030:	58025444 	.word	0x58025444
 8002034:	58025458 	.word	0x58025458
 8002038:	5802546c 	.word	0x5802546c
 800203c:	58025480 	.word	0x58025480
 8002040:	58025494 	.word	0x58025494

08002044 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e237      	b.n	80024c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d004      	beq.n	800206c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e22c      	b.n	80024c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a5c      	ldr	r2, [pc, #368]	; (80021e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d04a      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5b      	ldr	r2, [pc, #364]	; (80021e8 <HAL_DMA_Abort_IT+0x1a4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d045      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a59      	ldr	r2, [pc, #356]	; (80021ec <HAL_DMA_Abort_IT+0x1a8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d040      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d03b      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a56      	ldr	r2, [pc, #344]	; (80021f4 <HAL_DMA_Abort_IT+0x1b0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d036      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a55      	ldr	r2, [pc, #340]	; (80021f8 <HAL_DMA_Abort_IT+0x1b4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d031      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a53      	ldr	r2, [pc, #332]	; (80021fc <HAL_DMA_Abort_IT+0x1b8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02c      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a52      	ldr	r2, [pc, #328]	; (8002200 <HAL_DMA_Abort_IT+0x1bc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d027      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_DMA_Abort_IT+0x1c0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d022      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4f      	ldr	r2, [pc, #316]	; (8002208 <HAL_DMA_Abort_IT+0x1c4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d01d      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a4d      	ldr	r2, [pc, #308]	; (800220c <HAL_DMA_Abort_IT+0x1c8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d018      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a4c      	ldr	r2, [pc, #304]	; (8002210 <HAL_DMA_Abort_IT+0x1cc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d013      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a4a      	ldr	r2, [pc, #296]	; (8002214 <HAL_DMA_Abort_IT+0x1d0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00e      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a49      	ldr	r2, [pc, #292]	; (8002218 <HAL_DMA_Abort_IT+0x1d4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a47      	ldr	r2, [pc, #284]	; (800221c <HAL_DMA_Abort_IT+0x1d8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d004      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a46      	ldr	r2, [pc, #280]	; (8002220 <HAL_DMA_Abort_IT+0x1dc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_DMA_Abort_IT+0xcc>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_DMA_Abort_IT+0xce>
 8002110:	2300      	movs	r3, #0
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8086 	beq.w	8002224 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2204      	movs	r2, #4
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2f      	ldr	r2, [pc, #188]	; (80021e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d04a      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2e      	ldr	r2, [pc, #184]	; (80021e8 <HAL_DMA_Abort_IT+0x1a4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d045      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <HAL_DMA_Abort_IT+0x1a8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d040      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d03b      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <HAL_DMA_Abort_IT+0x1b0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d036      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <HAL_DMA_Abort_IT+0x1b4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d031      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a26      	ldr	r2, [pc, #152]	; (80021fc <HAL_DMA_Abort_IT+0x1b8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02c      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a25      	ldr	r2, [pc, #148]	; (8002200 <HAL_DMA_Abort_IT+0x1bc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d027      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a23      	ldr	r2, [pc, #140]	; (8002204 <HAL_DMA_Abort_IT+0x1c0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d022      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a22      	ldr	r2, [pc, #136]	; (8002208 <HAL_DMA_Abort_IT+0x1c4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d01d      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a20      	ldr	r2, [pc, #128]	; (800220c <HAL_DMA_Abort_IT+0x1c8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d018      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_DMA_Abort_IT+0x1cc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_DMA_Abort_IT+0x1d0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00e      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_DMA_Abort_IT+0x1d4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1a      	ldr	r2, [pc, #104]	; (800221c <HAL_DMA_Abort_IT+0x1d8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x17c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_DMA_Abort_IT+0x1dc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d108      	bne.n	80021d2 <HAL_DMA_Abort_IT+0x18e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e178      	b.n	80024c4 <HAL_DMA_Abort_IT+0x480>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e16f      	b.n	80024c4 <HAL_DMA_Abort_IT+0x480>
 80021e4:	40020010 	.word	0x40020010
 80021e8:	40020028 	.word	0x40020028
 80021ec:	40020040 	.word	0x40020040
 80021f0:	40020058 	.word	0x40020058
 80021f4:	40020070 	.word	0x40020070
 80021f8:	40020088 	.word	0x40020088
 80021fc:	400200a0 	.word	0x400200a0
 8002200:	400200b8 	.word	0x400200b8
 8002204:	40020410 	.word	0x40020410
 8002208:	40020428 	.word	0x40020428
 800220c:	40020440 	.word	0x40020440
 8002210:	40020458 	.word	0x40020458
 8002214:	40020470 	.word	0x40020470
 8002218:	40020488 	.word	0x40020488
 800221c:	400204a0 	.word	0x400204a0
 8002220:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 020e 	bic.w	r2, r2, #14
 8002232:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6c      	ldr	r2, [pc, #432]	; (80023ec <HAL_DMA_Abort_IT+0x3a8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d04a      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6b      	ldr	r2, [pc, #428]	; (80023f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d045      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a69      	ldr	r2, [pc, #420]	; (80023f4 <HAL_DMA_Abort_IT+0x3b0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d040      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a68      	ldr	r2, [pc, #416]	; (80023f8 <HAL_DMA_Abort_IT+0x3b4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d03b      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a66      	ldr	r2, [pc, #408]	; (80023fc <HAL_DMA_Abort_IT+0x3b8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d036      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a65      	ldr	r2, [pc, #404]	; (8002400 <HAL_DMA_Abort_IT+0x3bc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d031      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a63      	ldr	r2, [pc, #396]	; (8002404 <HAL_DMA_Abort_IT+0x3c0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d02c      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a62      	ldr	r2, [pc, #392]	; (8002408 <HAL_DMA_Abort_IT+0x3c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d027      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a60      	ldr	r2, [pc, #384]	; (800240c <HAL_DMA_Abort_IT+0x3c8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d022      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5f      	ldr	r2, [pc, #380]	; (8002410 <HAL_DMA_Abort_IT+0x3cc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d01d      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <HAL_DMA_Abort_IT+0x3d0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d018      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a5c      	ldr	r2, [pc, #368]	; (8002418 <HAL_DMA_Abort_IT+0x3d4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d013      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5a      	ldr	r2, [pc, #360]	; (800241c <HAL_DMA_Abort_IT+0x3d8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00e      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a59      	ldr	r2, [pc, #356]	; (8002420 <HAL_DMA_Abort_IT+0x3dc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d009      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a57      	ldr	r2, [pc, #348]	; (8002424 <HAL_DMA_Abort_IT+0x3e0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x290>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a56      	ldr	r2, [pc, #344]	; (8002428 <HAL_DMA_Abort_IT+0x3e4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d108      	bne.n	80022e6 <HAL_DMA_Abort_IT+0x2a2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e007      	b.n	80022f6 <HAL_DMA_Abort_IT+0x2b2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a3c      	ldr	r2, [pc, #240]	; (80023ec <HAL_DMA_Abort_IT+0x3a8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d072      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d06d      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <HAL_DMA_Abort_IT+0x3b0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d068      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a37      	ldr	r2, [pc, #220]	; (80023f8 <HAL_DMA_Abort_IT+0x3b4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d063      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a36      	ldr	r2, [pc, #216]	; (80023fc <HAL_DMA_Abort_IT+0x3b8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d05e      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a34      	ldr	r2, [pc, #208]	; (8002400 <HAL_DMA_Abort_IT+0x3bc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d059      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a33      	ldr	r2, [pc, #204]	; (8002404 <HAL_DMA_Abort_IT+0x3c0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d054      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a31      	ldr	r2, [pc, #196]	; (8002408 <HAL_DMA_Abort_IT+0x3c4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d04f      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a30      	ldr	r2, [pc, #192]	; (800240c <HAL_DMA_Abort_IT+0x3c8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d04a      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a2e      	ldr	r2, [pc, #184]	; (8002410 <HAL_DMA_Abort_IT+0x3cc>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d045      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2d      	ldr	r2, [pc, #180]	; (8002414 <HAL_DMA_Abort_IT+0x3d0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d040      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a2b      	ldr	r2, [pc, #172]	; (8002418 <HAL_DMA_Abort_IT+0x3d4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d03b      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a2a      	ldr	r2, [pc, #168]	; (800241c <HAL_DMA_Abort_IT+0x3d8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d036      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a28      	ldr	r2, [pc, #160]	; (8002420 <HAL_DMA_Abort_IT+0x3dc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d031      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a27      	ldr	r2, [pc, #156]	; (8002424 <HAL_DMA_Abort_IT+0x3e0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d02c      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a25      	ldr	r2, [pc, #148]	; (8002428 <HAL_DMA_Abort_IT+0x3e4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d027      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a24      	ldr	r2, [pc, #144]	; (800242c <HAL_DMA_Abort_IT+0x3e8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d022      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a22      	ldr	r2, [pc, #136]	; (8002430 <HAL_DMA_Abort_IT+0x3ec>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01d      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a21      	ldr	r2, [pc, #132]	; (8002434 <HAL_DMA_Abort_IT+0x3f0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d018      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_DMA_Abort_IT+0x3f4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_DMA_Abort_IT+0x3f8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00e      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <HAL_DMA_Abort_IT+0x3fc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d009      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_DMA_Abort_IT+0x400>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x3a2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_DMA_Abort_IT+0x404>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d132      	bne.n	800244c <HAL_DMA_Abort_IT+0x408>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e031      	b.n	800244e <HAL_DMA_Abort_IT+0x40a>
 80023ea:	bf00      	nop
 80023ec:	40020010 	.word	0x40020010
 80023f0:	40020028 	.word	0x40020028
 80023f4:	40020040 	.word	0x40020040
 80023f8:	40020058 	.word	0x40020058
 80023fc:	40020070 	.word	0x40020070
 8002400:	40020088 	.word	0x40020088
 8002404:	400200a0 	.word	0x400200a0
 8002408:	400200b8 	.word	0x400200b8
 800240c:	40020410 	.word	0x40020410
 8002410:	40020428 	.word	0x40020428
 8002414:	40020440 	.word	0x40020440
 8002418:	40020458 	.word	0x40020458
 800241c:	40020470 	.word	0x40020470
 8002420:	40020488 	.word	0x40020488
 8002424:	400204a0 	.word	0x400204a0
 8002428:	400204b8 	.word	0x400204b8
 800242c:	58025408 	.word	0x58025408
 8002430:	5802541c 	.word	0x5802541c
 8002434:	58025430 	.word	0x58025430
 8002438:	58025444 	.word	0x58025444
 800243c:	58025458 	.word	0x58025458
 8002440:	5802546c 	.word	0x5802546c
 8002444:	58025480 	.word	0x58025480
 8002448:	58025494 	.word	0x58025494
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d028      	beq.n	80024a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002460:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2201      	movs	r2, #1
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002480:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00c      	beq.n	80024a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002498:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop

080024d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024dc:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_DMA_IRQHandler+0x1ac>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a67      	ldr	r2, [pc, #412]	; (8002680 <HAL_DMA_IRQHandler+0x1b0>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0a9b      	lsrs	r3, r3, #10
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5f      	ldr	r2, [pc, #380]	; (8002684 <HAL_DMA_IRQHandler+0x1b4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d04a      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a5d      	ldr	r2, [pc, #372]	; (8002688 <HAL_DMA_IRQHandler+0x1b8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d045      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5c      	ldr	r2, [pc, #368]	; (800268c <HAL_DMA_IRQHandler+0x1bc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d040      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5a      	ldr	r2, [pc, #360]	; (8002690 <HAL_DMA_IRQHandler+0x1c0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d03b      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a59      	ldr	r2, [pc, #356]	; (8002694 <HAL_DMA_IRQHandler+0x1c4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d036      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a57      	ldr	r2, [pc, #348]	; (8002698 <HAL_DMA_IRQHandler+0x1c8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d031      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a56      	ldr	r2, [pc, #344]	; (800269c <HAL_DMA_IRQHandler+0x1cc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d02c      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a54      	ldr	r2, [pc, #336]	; (80026a0 <HAL_DMA_IRQHandler+0x1d0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d027      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a53      	ldr	r2, [pc, #332]	; (80026a4 <HAL_DMA_IRQHandler+0x1d4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d022      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <HAL_DMA_IRQHandler+0x1d8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01d      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_DMA_IRQHandler+0x1dc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d018      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <HAL_DMA_IRQHandler+0x1e0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a4d      	ldr	r2, [pc, #308]	; (80026b4 <HAL_DMA_IRQHandler+0x1e4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00e      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a4b      	ldr	r2, [pc, #300]	; (80026b8 <HAL_DMA_IRQHandler+0x1e8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a4a      	ldr	r2, [pc, #296]	; (80026bc <HAL_DMA_IRQHandler+0x1ec>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xd2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_DMA_IRQHandler+0x1f0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_DMA_IRQHandler+0xd6>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_DMA_IRQHandler+0xd8>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 842b 	beq.w	8002e04 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2208      	movs	r2, #8
 80025b8:	409a      	lsls	r2, r3
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80a2 	beq.w	8002708 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2e      	ldr	r2, [pc, #184]	; (8002684 <HAL_DMA_IRQHandler+0x1b4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d04a      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2d      	ldr	r2, [pc, #180]	; (8002688 <HAL_DMA_IRQHandler+0x1b8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d045      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a2b      	ldr	r2, [pc, #172]	; (800268c <HAL_DMA_IRQHandler+0x1bc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d040      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <HAL_DMA_IRQHandler+0x1c0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d03b      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a28      	ldr	r2, [pc, #160]	; (8002694 <HAL_DMA_IRQHandler+0x1c4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d036      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a27      	ldr	r2, [pc, #156]	; (8002698 <HAL_DMA_IRQHandler+0x1c8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d031      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a25      	ldr	r2, [pc, #148]	; (800269c <HAL_DMA_IRQHandler+0x1cc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d02c      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a24      	ldr	r2, [pc, #144]	; (80026a0 <HAL_DMA_IRQHandler+0x1d0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d027      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <HAL_DMA_IRQHandler+0x1d4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d022      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <HAL_DMA_IRQHandler+0x1d8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d01d      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <HAL_DMA_IRQHandler+0x1dc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d018      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_DMA_IRQHandler+0x1e0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <HAL_DMA_IRQHandler+0x1e4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00e      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <HAL_DMA_IRQHandler+0x1e8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d009      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a19      	ldr	r2, [pc, #100]	; (80026bc <HAL_DMA_IRQHandler+0x1ec>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_DMA_IRQHandler+0x194>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_DMA_IRQHandler+0x1f0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d12f      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x1f4>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	e02e      	b.n	80026d8 <HAL_DMA_IRQHandler+0x208>
 800267a:	bf00      	nop
 800267c:	24000000 	.word	0x24000000
 8002680:	1b4e81b5 	.word	0x1b4e81b5
 8002684:	40020010 	.word	0x40020010
 8002688:	40020028 	.word	0x40020028
 800268c:	40020040 	.word	0x40020040
 8002690:	40020058 	.word	0x40020058
 8002694:	40020070 	.word	0x40020070
 8002698:	40020088 	.word	0x40020088
 800269c:	400200a0 	.word	0x400200a0
 80026a0:	400200b8 	.word	0x400200b8
 80026a4:	40020410 	.word	0x40020410
 80026a8:	40020428 	.word	0x40020428
 80026ac:	40020440 	.word	0x40020440
 80026b0:	40020458 	.word	0x40020458
 80026b4:	40020470 	.word	0x40020470
 80026b8:	40020488 	.word	0x40020488
 80026bc:	400204a0 	.word	0x400204a0
 80026c0:	400204b8 	.word	0x400204b8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf14      	ite	ne
 80026d2:	2301      	movne	r3, #1
 80026d4:	2300      	moveq	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d015      	beq.n	8002708 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0204 	bic.w	r2, r2, #4
 80026ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2208      	movs	r2, #8
 80026f6:	409a      	lsls	r2, r3
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	fa22 f303 	lsr.w	r3, r2, r3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d06e      	beq.n	80027fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a69      	ldr	r2, [pc, #420]	; (80028c8 <HAL_DMA_IRQHandler+0x3f8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d04a      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a67      	ldr	r2, [pc, #412]	; (80028cc <HAL_DMA_IRQHandler+0x3fc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d045      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a66      	ldr	r2, [pc, #408]	; (80028d0 <HAL_DMA_IRQHandler+0x400>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d040      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a64      	ldr	r2, [pc, #400]	; (80028d4 <HAL_DMA_IRQHandler+0x404>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d03b      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a63      	ldr	r2, [pc, #396]	; (80028d8 <HAL_DMA_IRQHandler+0x408>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d036      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a61      	ldr	r2, [pc, #388]	; (80028dc <HAL_DMA_IRQHandler+0x40c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d031      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a60      	ldr	r2, [pc, #384]	; (80028e0 <HAL_DMA_IRQHandler+0x410>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d02c      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a5e      	ldr	r2, [pc, #376]	; (80028e4 <HAL_DMA_IRQHandler+0x414>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d027      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a5d      	ldr	r2, [pc, #372]	; (80028e8 <HAL_DMA_IRQHandler+0x418>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d022      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a5b      	ldr	r2, [pc, #364]	; (80028ec <HAL_DMA_IRQHandler+0x41c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01d      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a5a      	ldr	r2, [pc, #360]	; (80028f0 <HAL_DMA_IRQHandler+0x420>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d018      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <HAL_DMA_IRQHandler+0x424>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a57      	ldr	r2, [pc, #348]	; (80028f8 <HAL_DMA_IRQHandler+0x428>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00e      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a55      	ldr	r2, [pc, #340]	; (80028fc <HAL_DMA_IRQHandler+0x42c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a54      	ldr	r2, [pc, #336]	; (8002900 <HAL_DMA_IRQHandler+0x430>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_DMA_IRQHandler+0x2ee>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_DMA_IRQHandler+0x434>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10a      	bne.n	80027d4 <HAL_DMA_IRQHandler+0x304>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e003      	b.n	80027dc <HAL_DMA_IRQHandler+0x30c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2300      	movs	r3, #0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	2201      	movs	r2, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f043 0202 	orr.w	r2, r3, #2
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2204      	movs	r2, #4
 8002806:	409a      	lsls	r2, r3
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 808f 	beq.w	8002930 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <HAL_DMA_IRQHandler+0x3f8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d04a      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <HAL_DMA_IRQHandler+0x3fc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d045      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <HAL_DMA_IRQHandler+0x400>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d040      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <HAL_DMA_IRQHandler+0x404>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d03b      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <HAL_DMA_IRQHandler+0x408>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d036      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a24      	ldr	r2, [pc, #144]	; (80028dc <HAL_DMA_IRQHandler+0x40c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d031      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <HAL_DMA_IRQHandler+0x410>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d02c      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <HAL_DMA_IRQHandler+0x414>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d027      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <HAL_DMA_IRQHandler+0x418>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <HAL_DMA_IRQHandler+0x41c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01d      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_DMA_IRQHandler+0x420>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d018      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_DMA_IRQHandler+0x424>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <HAL_DMA_IRQHandler+0x428>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_DMA_IRQHandler+0x42c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a17      	ldr	r2, [pc, #92]	; (8002900 <HAL_DMA_IRQHandler+0x430>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x3e2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <HAL_DMA_IRQHandler+0x434>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12a      	bne.n	8002908 <HAL_DMA_IRQHandler+0x438>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e023      	b.n	8002910 <HAL_DMA_IRQHandler+0x440>
 80028c8:	40020010 	.word	0x40020010
 80028cc:	40020028 	.word	0x40020028
 80028d0:	40020040 	.word	0x40020040
 80028d4:	40020058 	.word	0x40020058
 80028d8:	40020070 	.word	0x40020070
 80028dc:	40020088 	.word	0x40020088
 80028e0:	400200a0 	.word	0x400200a0
 80028e4:	400200b8 	.word	0x400200b8
 80028e8:	40020410 	.word	0x40020410
 80028ec:	40020428 	.word	0x40020428
 80028f0:	40020440 	.word	0x40020440
 80028f4:	40020458 	.word	0x40020458
 80028f8:	40020470 	.word	0x40020470
 80028fc:	40020488 	.word	0x40020488
 8002900:	400204a0 	.word	0x400204a0
 8002904:	400204b8 	.word	0x400204b8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00d      	beq.n	8002930 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2204      	movs	r2, #4
 800291e:	409a      	lsls	r2, r3
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2210      	movs	r2, #16
 800293a:	409a      	lsls	r2, r3
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80a6 	beq.w	8002a92 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a85      	ldr	r2, [pc, #532]	; (8002b60 <HAL_DMA_IRQHandler+0x690>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04a      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a83      	ldr	r2, [pc, #524]	; (8002b64 <HAL_DMA_IRQHandler+0x694>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d045      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a82      	ldr	r2, [pc, #520]	; (8002b68 <HAL_DMA_IRQHandler+0x698>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d040      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a80      	ldr	r2, [pc, #512]	; (8002b6c <HAL_DMA_IRQHandler+0x69c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d03b      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7f      	ldr	r2, [pc, #508]	; (8002b70 <HAL_DMA_IRQHandler+0x6a0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d036      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a7d      	ldr	r2, [pc, #500]	; (8002b74 <HAL_DMA_IRQHandler+0x6a4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d031      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7c      	ldr	r2, [pc, #496]	; (8002b78 <HAL_DMA_IRQHandler+0x6a8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d02c      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a7a      	ldr	r2, [pc, #488]	; (8002b7c <HAL_DMA_IRQHandler+0x6ac>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d027      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a79      	ldr	r2, [pc, #484]	; (8002b80 <HAL_DMA_IRQHandler+0x6b0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a77      	ldr	r2, [pc, #476]	; (8002b84 <HAL_DMA_IRQHandler+0x6b4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01d      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a76      	ldr	r2, [pc, #472]	; (8002b88 <HAL_DMA_IRQHandler+0x6b8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d018      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a74      	ldr	r2, [pc, #464]	; (8002b8c <HAL_DMA_IRQHandler+0x6bc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a73      	ldr	r2, [pc, #460]	; (8002b90 <HAL_DMA_IRQHandler+0x6c0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00e      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a71      	ldr	r2, [pc, #452]	; (8002b94 <HAL_DMA_IRQHandler+0x6c4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a70      	ldr	r2, [pc, #448]	; (8002b98 <HAL_DMA_IRQHandler+0x6c8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x516>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a6e      	ldr	r2, [pc, #440]	; (8002b9c <HAL_DMA_IRQHandler+0x6cc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10a      	bne.n	80029fc <HAL_DMA_IRQHandler+0x52c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e009      	b.n	8002a10 <HAL_DMA_IRQHandler+0x540>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d03e      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d018      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d108      	bne.n	8002a52 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d024      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
 8002a50:	e01f      	b.n	8002a92 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01b      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
 8002a62:	e016      	b.n	8002a92 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0208 	bic.w	r2, r2, #8
 8002a80:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8110 	beq.w	8002cc8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a2c      	ldr	r2, [pc, #176]	; (8002b60 <HAL_DMA_IRQHandler+0x690>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d04a      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <HAL_DMA_IRQHandler+0x694>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d045      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <HAL_DMA_IRQHandler+0x698>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d040      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_DMA_IRQHandler+0x69c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d03b      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <HAL_DMA_IRQHandler+0x6a0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d036      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <HAL_DMA_IRQHandler+0x6a4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d031      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <HAL_DMA_IRQHandler+0x6a8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d02c      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_DMA_IRQHandler+0x6ac>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d027      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_DMA_IRQHandler+0x6b0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d022      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_DMA_IRQHandler+0x6b4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d01d      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_DMA_IRQHandler+0x6b8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d018      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_DMA_IRQHandler+0x6bc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d013      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <HAL_DMA_IRQHandler+0x6c0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00e      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_DMA_IRQHandler+0x6c4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_DMA_IRQHandler+0x6c8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x678>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <HAL_DMA_IRQHandler+0x6cc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d12b      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x6d0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	bf14      	ite	ne
 8002b56:	2301      	movne	r3, #1
 8002b58:	2300      	moveq	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	e02a      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x6e4>
 8002b5e:	bf00      	nop
 8002b60:	40020010 	.word	0x40020010
 8002b64:	40020028 	.word	0x40020028
 8002b68:	40020040 	.word	0x40020040
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	40020070 	.word	0x40020070
 8002b74:	40020088 	.word	0x40020088
 8002b78:	400200a0 	.word	0x400200a0
 8002b7c:	400200b8 	.word	0x400200b8
 8002b80:	40020410 	.word	0x40020410
 8002b84:	40020428 	.word	0x40020428
 8002b88:	40020440 	.word	0x40020440
 8002b8c:	40020458 	.word	0x40020458
 8002b90:	40020470 	.word	0x40020470
 8002b94:	40020488 	.word	0x40020488
 8002b98:	400204a0 	.word	0x400204a0
 8002b9c:	400204b8 	.word	0x400204b8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8087 	beq.w	8002cc8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d139      	bne.n	8002c4a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0216 	bic.w	r2, r2, #22
 8002be4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x736>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0208 	bic.w	r2, r2, #8
 8002c14:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	223f      	movs	r2, #63	; 0x3f
 8002c20:	409a      	lsls	r2, r3
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 834a 	beq.w	80032d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
          }
          return;
 8002c48:	e344      	b.n	80032d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d018      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d108      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d02c      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
 8002c76:	e027      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
 8002c88:	e01e      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10f      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0210 	bic.w	r2, r2, #16
 8002ca6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8306 	beq.w	80032de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8088 	beq.w	8002df0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a7a      	ldr	r2, [pc, #488]	; (8002ed8 <HAL_DMA_IRQHandler+0xa08>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d04a      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a79      	ldr	r2, [pc, #484]	; (8002edc <HAL_DMA_IRQHandler+0xa0c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d045      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a77      	ldr	r2, [pc, #476]	; (8002ee0 <HAL_DMA_IRQHandler+0xa10>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d040      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a76      	ldr	r2, [pc, #472]	; (8002ee4 <HAL_DMA_IRQHandler+0xa14>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d03b      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a74      	ldr	r2, [pc, #464]	; (8002ee8 <HAL_DMA_IRQHandler+0xa18>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d036      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a73      	ldr	r2, [pc, #460]	; (8002eec <HAL_DMA_IRQHandler+0xa1c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d031      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a71      	ldr	r2, [pc, #452]	; (8002ef0 <HAL_DMA_IRQHandler+0xa20>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02c      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a70      	ldr	r2, [pc, #448]	; (8002ef4 <HAL_DMA_IRQHandler+0xa24>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d027      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ef8 <HAL_DMA_IRQHandler+0xa28>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d022      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6d      	ldr	r2, [pc, #436]	; (8002efc <HAL_DMA_IRQHandler+0xa2c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d01d      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a6b      	ldr	r2, [pc, #428]	; (8002f00 <HAL_DMA_IRQHandler+0xa30>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d018      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6a      	ldr	r2, [pc, #424]	; (8002f04 <HAL_DMA_IRQHandler+0xa34>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d013      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a68      	ldr	r2, [pc, #416]	; (8002f08 <HAL_DMA_IRQHandler+0xa38>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00e      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a67      	ldr	r2, [pc, #412]	; (8002f0c <HAL_DMA_IRQHandler+0xa3c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d009      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <HAL_DMA_IRQHandler+0xa40>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x8b8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a64      	ldr	r2, [pc, #400]	; (8002f14 <HAL_DMA_IRQHandler+0xa44>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d108      	bne.n	8002d9a <HAL_DMA_IRQHandler+0x8ca>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e007      	b.n	8002daa <HAL_DMA_IRQHandler+0x8da>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3301      	adds	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d307      	bcc.n	8002dc6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f2      	bne.n	8002daa <HAL_DMA_IRQHandler+0x8da>
 8002dc4:	e000      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002dc6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002dde:	e003      	b.n	8002de8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8272 	beq.w	80032de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
 8002e02:	e26c      	b.n	80032de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a43      	ldr	r2, [pc, #268]	; (8002f18 <HAL_DMA_IRQHandler+0xa48>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x984>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a42      	ldr	r2, [pc, #264]	; (8002f1c <HAL_DMA_IRQHandler+0xa4c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x984>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a40      	ldr	r2, [pc, #256]	; (8002f20 <HAL_DMA_IRQHandler+0xa50>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x984>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a3f      	ldr	r2, [pc, #252]	; (8002f24 <HAL_DMA_IRQHandler+0xa54>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x984>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3d      	ldr	r2, [pc, #244]	; (8002f28 <HAL_DMA_IRQHandler+0xa58>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x984>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3c      	ldr	r2, [pc, #240]	; (8002f2c <HAL_DMA_IRQHandler+0xa5c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x984>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3a      	ldr	r2, [pc, #232]	; (8002f30 <HAL_DMA_IRQHandler+0xa60>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x984>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a39      	ldr	r2, [pc, #228]	; (8002f34 <HAL_DMA_IRQHandler+0xa64>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x988>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_DMA_IRQHandler+0x98a>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 823f 	beq.w	80032de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	2204      	movs	r2, #4
 8002e72:	409a      	lsls	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80cd 	beq.w	8003018 <HAL_DMA_IRQHandler+0xb48>
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80c7 	beq.w	8003018 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2204      	movs	r2, #4
 8002e94:	409a      	lsls	r2, r3
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d049      	beq.n	8002f38 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8210 	beq.w	80032d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ec0:	e20a      	b.n	80032d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8206 	beq.w	80032d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ed4:	e200      	b.n	80032d8 <HAL_DMA_IRQHandler+0xe08>
 8002ed6:	bf00      	nop
 8002ed8:	40020010 	.word	0x40020010
 8002edc:	40020028 	.word	0x40020028
 8002ee0:	40020040 	.word	0x40020040
 8002ee4:	40020058 	.word	0x40020058
 8002ee8:	40020070 	.word	0x40020070
 8002eec:	40020088 	.word	0x40020088
 8002ef0:	400200a0 	.word	0x400200a0
 8002ef4:	400200b8 	.word	0x400200b8
 8002ef8:	40020410 	.word	0x40020410
 8002efc:	40020428 	.word	0x40020428
 8002f00:	40020440 	.word	0x40020440
 8002f04:	40020458 	.word	0x40020458
 8002f08:	40020470 	.word	0x40020470
 8002f0c:	40020488 	.word	0x40020488
 8002f10:	400204a0 	.word	0x400204a0
 8002f14:	400204b8 	.word	0x400204b8
 8002f18:	58025408 	.word	0x58025408
 8002f1c:	5802541c 	.word	0x5802541c
 8002f20:	58025430 	.word	0x58025430
 8002f24:	58025444 	.word	0x58025444
 8002f28:	58025458 	.word	0x58025458
 8002f2c:	5802546c 	.word	0x5802546c
 8002f30:	58025480 	.word	0x58025480
 8002f34:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d160      	bne.n	8003004 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7f      	ldr	r2, [pc, #508]	; (8003144 <HAL_DMA_IRQHandler+0xc74>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04a      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a7d      	ldr	r2, [pc, #500]	; (8003148 <HAL_DMA_IRQHandler+0xc78>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d045      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7c      	ldr	r2, [pc, #496]	; (800314c <HAL_DMA_IRQHandler+0xc7c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d040      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a7a      	ldr	r2, [pc, #488]	; (8003150 <HAL_DMA_IRQHandler+0xc80>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d03b      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a79      	ldr	r2, [pc, #484]	; (8003154 <HAL_DMA_IRQHandler+0xc84>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d036      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a77      	ldr	r2, [pc, #476]	; (8003158 <HAL_DMA_IRQHandler+0xc88>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d031      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a76      	ldr	r2, [pc, #472]	; (800315c <HAL_DMA_IRQHandler+0xc8c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d02c      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a74      	ldr	r2, [pc, #464]	; (8003160 <HAL_DMA_IRQHandler+0xc90>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d027      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a73      	ldr	r2, [pc, #460]	; (8003164 <HAL_DMA_IRQHandler+0xc94>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a71      	ldr	r2, [pc, #452]	; (8003168 <HAL_DMA_IRQHandler+0xc98>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a70      	ldr	r2, [pc, #448]	; (800316c <HAL_DMA_IRQHandler+0xc9c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d018      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a6e      	ldr	r2, [pc, #440]	; (8003170 <HAL_DMA_IRQHandler+0xca0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a6d      	ldr	r2, [pc, #436]	; (8003174 <HAL_DMA_IRQHandler+0xca4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a6b      	ldr	r2, [pc, #428]	; (8003178 <HAL_DMA_IRQHandler+0xca8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6a      	ldr	r2, [pc, #424]	; (800317c <HAL_DMA_IRQHandler+0xcac>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xb12>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a68      	ldr	r2, [pc, #416]	; (8003180 <HAL_DMA_IRQHandler+0xcb0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d108      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0xb24>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0208 	bic.w	r2, r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_DMA_IRQHandler+0xb34>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0204 	bic.w	r2, r2, #4
 8003002:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8165 	beq.w	80032d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003016:	e15f      	b.n	80032d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2202      	movs	r2, #2
 8003022:	409a      	lsls	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80c5 	beq.w	80031b8 <HAL_DMA_IRQHandler+0xce8>
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80bf 	beq.w	80031b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	2202      	movs	r2, #2
 8003044:	409a      	lsls	r2, r3
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d018      	beq.n	8003086 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 813a 	beq.w	80032dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003070:	e134      	b.n	80032dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8130 	beq.w	80032dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003084:	e12a      	b.n	80032dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	f040 8089 	bne.w	80031a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2b      	ldr	r2, [pc, #172]	; (8003144 <HAL_DMA_IRQHandler+0xc74>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d04a      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a29      	ldr	r2, [pc, #164]	; (8003148 <HAL_DMA_IRQHandler+0xc78>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d045      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a28      	ldr	r2, [pc, #160]	; (800314c <HAL_DMA_IRQHandler+0xc7c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d040      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a26      	ldr	r2, [pc, #152]	; (8003150 <HAL_DMA_IRQHandler+0xc80>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d03b      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a25      	ldr	r2, [pc, #148]	; (8003154 <HAL_DMA_IRQHandler+0xc84>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d036      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a23      	ldr	r2, [pc, #140]	; (8003158 <HAL_DMA_IRQHandler+0xc88>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d031      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a22      	ldr	r2, [pc, #136]	; (800315c <HAL_DMA_IRQHandler+0xc8c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d02c      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a20      	ldr	r2, [pc, #128]	; (8003160 <HAL_DMA_IRQHandler+0xc90>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d027      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <HAL_DMA_IRQHandler+0xc94>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d022      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <HAL_DMA_IRQHandler+0xc98>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01d      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_DMA_IRQHandler+0xc9c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d018      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_DMA_IRQHandler+0xca0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_DMA_IRQHandler+0xca4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00e      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_DMA_IRQHandler+0xca8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a16      	ldr	r2, [pc, #88]	; (800317c <HAL_DMA_IRQHandler+0xcac>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_DMA_IRQHandler+0xc62>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <HAL_DMA_IRQHandler+0xcb0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d128      	bne.n	8003184 <HAL_DMA_IRQHandler+0xcb4>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0214 	bic.w	r2, r2, #20
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e027      	b.n	8003194 <HAL_DMA_IRQHandler+0xcc4>
 8003144:	40020010 	.word	0x40020010
 8003148:	40020028 	.word	0x40020028
 800314c:	40020040 	.word	0x40020040
 8003150:	40020058 	.word	0x40020058
 8003154:	40020070 	.word	0x40020070
 8003158:	40020088 	.word	0x40020088
 800315c:	400200a0 	.word	0x400200a0
 8003160:	400200b8 	.word	0x400200b8
 8003164:	40020410 	.word	0x40020410
 8003168:	40020428 	.word	0x40020428
 800316c:	40020440 	.word	0x40020440
 8003170:	40020458 	.word	0x40020458
 8003174:	40020470 	.word	0x40020470
 8003178:	40020488 	.word	0x40020488
 800317c:	400204a0 	.word	0x400204a0
 8003180:	400204b8 	.word	0x400204b8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 020a 	bic.w	r2, r2, #10
 8003192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8097 	beq.w	80032dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031b6:	e091      	b.n	80032dc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	2208      	movs	r2, #8
 80031c2:	409a      	lsls	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8088 	beq.w	80032de <HAL_DMA_IRQHandler+0xe0e>
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8082 	beq.w	80032de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a41      	ldr	r2, [pc, #260]	; (80032e4 <HAL_DMA_IRQHandler+0xe14>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a3f      	ldr	r2, [pc, #252]	; (80032e8 <HAL_DMA_IRQHandler+0xe18>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3e      	ldr	r2, [pc, #248]	; (80032ec <HAL_DMA_IRQHandler+0xe1c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3c      	ldr	r2, [pc, #240]	; (80032f0 <HAL_DMA_IRQHandler+0xe20>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3b      	ldr	r2, [pc, #236]	; (80032f4 <HAL_DMA_IRQHandler+0xe24>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a39      	ldr	r2, [pc, #228]	; (80032f8 <HAL_DMA_IRQHandler+0xe28>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a38      	ldr	r2, [pc, #224]	; (80032fc <HAL_DMA_IRQHandler+0xe2c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a36      	ldr	r2, [pc, #216]	; (8003300 <HAL_DMA_IRQHandler+0xe30>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a35      	ldr	r2, [pc, #212]	; (8003304 <HAL_DMA_IRQHandler+0xe34>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a33      	ldr	r2, [pc, #204]	; (8003308 <HAL_DMA_IRQHandler+0xe38>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a32      	ldr	r2, [pc, #200]	; (800330c <HAL_DMA_IRQHandler+0xe3c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a30      	ldr	r2, [pc, #192]	; (8003310 <HAL_DMA_IRQHandler+0xe40>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2f      	ldr	r2, [pc, #188]	; (8003314 <HAL_DMA_IRQHandler+0xe44>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2d      	ldr	r2, [pc, #180]	; (8003318 <HAL_DMA_IRQHandler+0xe48>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2c      	ldr	r2, [pc, #176]	; (800331c <HAL_DMA_IRQHandler+0xe4c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_DMA_IRQHandler+0xdaa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_DMA_IRQHandler+0xe50>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d108      	bne.n	800328c <HAL_DMA_IRQHandler+0xdbc>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 021c 	bic.w	r2, r2, #28
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e007      	b.n	800329c <HAL_DMA_IRQHandler+0xdcc>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 020e 	bic.w	r2, r2, #14
 800329a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
 80032d2:	e004      	b.n	80032de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80032d4:	bf00      	nop
 80032d6:	e002      	b.n	80032de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032d8:	bf00      	nop
 80032da:	e000      	b.n	80032de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80032de:	3728      	adds	r7, #40	; 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40020010 	.word	0x40020010
 80032e8:	40020028 	.word	0x40020028
 80032ec:	40020040 	.word	0x40020040
 80032f0:	40020058 	.word	0x40020058
 80032f4:	40020070 	.word	0x40020070
 80032f8:	40020088 	.word	0x40020088
 80032fc:	400200a0 	.word	0x400200a0
 8003300:	400200b8 	.word	0x400200b8
 8003304:	40020410 	.word	0x40020410
 8003308:	40020428 	.word	0x40020428
 800330c:	40020440 	.word	0x40020440
 8003310:	40020458 	.word	0x40020458
 8003314:	40020470 	.word	0x40020470
 8003318:	40020488 	.word	0x40020488
 800331c:	400204a0 	.word	0x400204a0
 8003320:	400204b8 	.word	0x400204b8

08003324 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7f      	ldr	r2, [pc, #508]	; (8003558 <DMA_SetConfig+0x21c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d072      	beq.n	8003446 <DMA_SetConfig+0x10a>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7d      	ldr	r2, [pc, #500]	; (800355c <DMA_SetConfig+0x220>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d06d      	beq.n	8003446 <DMA_SetConfig+0x10a>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7c      	ldr	r2, [pc, #496]	; (8003560 <DMA_SetConfig+0x224>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d068      	beq.n	8003446 <DMA_SetConfig+0x10a>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a7a      	ldr	r2, [pc, #488]	; (8003564 <DMA_SetConfig+0x228>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d063      	beq.n	8003446 <DMA_SetConfig+0x10a>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a79      	ldr	r2, [pc, #484]	; (8003568 <DMA_SetConfig+0x22c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d05e      	beq.n	8003446 <DMA_SetConfig+0x10a>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a77      	ldr	r2, [pc, #476]	; (800356c <DMA_SetConfig+0x230>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d059      	beq.n	8003446 <DMA_SetConfig+0x10a>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a76      	ldr	r2, [pc, #472]	; (8003570 <DMA_SetConfig+0x234>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d054      	beq.n	8003446 <DMA_SetConfig+0x10a>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a74      	ldr	r2, [pc, #464]	; (8003574 <DMA_SetConfig+0x238>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d04f      	beq.n	8003446 <DMA_SetConfig+0x10a>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a73      	ldr	r2, [pc, #460]	; (8003578 <DMA_SetConfig+0x23c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d04a      	beq.n	8003446 <DMA_SetConfig+0x10a>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a71      	ldr	r2, [pc, #452]	; (800357c <DMA_SetConfig+0x240>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d045      	beq.n	8003446 <DMA_SetConfig+0x10a>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a70      	ldr	r2, [pc, #448]	; (8003580 <DMA_SetConfig+0x244>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d040      	beq.n	8003446 <DMA_SetConfig+0x10a>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6e      	ldr	r2, [pc, #440]	; (8003584 <DMA_SetConfig+0x248>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d03b      	beq.n	8003446 <DMA_SetConfig+0x10a>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6d      	ldr	r2, [pc, #436]	; (8003588 <DMA_SetConfig+0x24c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d036      	beq.n	8003446 <DMA_SetConfig+0x10a>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6b      	ldr	r2, [pc, #428]	; (800358c <DMA_SetConfig+0x250>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d031      	beq.n	8003446 <DMA_SetConfig+0x10a>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6a      	ldr	r2, [pc, #424]	; (8003590 <DMA_SetConfig+0x254>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d02c      	beq.n	8003446 <DMA_SetConfig+0x10a>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a68      	ldr	r2, [pc, #416]	; (8003594 <DMA_SetConfig+0x258>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d027      	beq.n	8003446 <DMA_SetConfig+0x10a>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a67      	ldr	r2, [pc, #412]	; (8003598 <DMA_SetConfig+0x25c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d022      	beq.n	8003446 <DMA_SetConfig+0x10a>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a65      	ldr	r2, [pc, #404]	; (800359c <DMA_SetConfig+0x260>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d01d      	beq.n	8003446 <DMA_SetConfig+0x10a>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a64      	ldr	r2, [pc, #400]	; (80035a0 <DMA_SetConfig+0x264>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d018      	beq.n	8003446 <DMA_SetConfig+0x10a>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a62      	ldr	r2, [pc, #392]	; (80035a4 <DMA_SetConfig+0x268>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <DMA_SetConfig+0x10a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <DMA_SetConfig+0x26c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00e      	beq.n	8003446 <DMA_SetConfig+0x10a>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a5f      	ldr	r2, [pc, #380]	; (80035ac <DMA_SetConfig+0x270>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d009      	beq.n	8003446 <DMA_SetConfig+0x10a>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a5e      	ldr	r2, [pc, #376]	; (80035b0 <DMA_SetConfig+0x274>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <DMA_SetConfig+0x10a>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a5c      	ldr	r2, [pc, #368]	; (80035b4 <DMA_SetConfig+0x278>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <DMA_SetConfig+0x10e>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <DMA_SetConfig+0x110>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003458:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800346a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a39      	ldr	r2, [pc, #228]	; (8003558 <DMA_SetConfig+0x21c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d04a      	beq.n	800350c <DMA_SetConfig+0x1d0>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a38      	ldr	r2, [pc, #224]	; (800355c <DMA_SetConfig+0x220>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d045      	beq.n	800350c <DMA_SetConfig+0x1d0>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a36      	ldr	r2, [pc, #216]	; (8003560 <DMA_SetConfig+0x224>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d040      	beq.n	800350c <DMA_SetConfig+0x1d0>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a35      	ldr	r2, [pc, #212]	; (8003564 <DMA_SetConfig+0x228>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d03b      	beq.n	800350c <DMA_SetConfig+0x1d0>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a33      	ldr	r2, [pc, #204]	; (8003568 <DMA_SetConfig+0x22c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d036      	beq.n	800350c <DMA_SetConfig+0x1d0>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a32      	ldr	r2, [pc, #200]	; (800356c <DMA_SetConfig+0x230>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d031      	beq.n	800350c <DMA_SetConfig+0x1d0>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a30      	ldr	r2, [pc, #192]	; (8003570 <DMA_SetConfig+0x234>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d02c      	beq.n	800350c <DMA_SetConfig+0x1d0>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <DMA_SetConfig+0x238>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d027      	beq.n	800350c <DMA_SetConfig+0x1d0>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <DMA_SetConfig+0x23c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <DMA_SetConfig+0x1d0>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2c      	ldr	r2, [pc, #176]	; (800357c <DMA_SetConfig+0x240>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d01d      	beq.n	800350c <DMA_SetConfig+0x1d0>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <DMA_SetConfig+0x244>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <DMA_SetConfig+0x1d0>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a29      	ldr	r2, [pc, #164]	; (8003584 <DMA_SetConfig+0x248>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <DMA_SetConfig+0x1d0>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a27      	ldr	r2, [pc, #156]	; (8003588 <DMA_SetConfig+0x24c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <DMA_SetConfig+0x1d0>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a26      	ldr	r2, [pc, #152]	; (800358c <DMA_SetConfig+0x250>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <DMA_SetConfig+0x1d0>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a24      	ldr	r2, [pc, #144]	; (8003590 <DMA_SetConfig+0x254>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <DMA_SetConfig+0x1d0>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a23      	ldr	r2, [pc, #140]	; (8003594 <DMA_SetConfig+0x258>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <DMA_SetConfig+0x1d4>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <DMA_SetConfig+0x1d6>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d059      	beq.n	80035ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	223f      	movs	r2, #63	; 0x3f
 8003520:	409a      	lsls	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003534:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b40      	cmp	r3, #64	; 0x40
 8003544:	d138      	bne.n	80035b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003556:	e086      	b.n	8003666 <DMA_SetConfig+0x32a>
 8003558:	40020010 	.word	0x40020010
 800355c:	40020028 	.word	0x40020028
 8003560:	40020040 	.word	0x40020040
 8003564:	40020058 	.word	0x40020058
 8003568:	40020070 	.word	0x40020070
 800356c:	40020088 	.word	0x40020088
 8003570:	400200a0 	.word	0x400200a0
 8003574:	400200b8 	.word	0x400200b8
 8003578:	40020410 	.word	0x40020410
 800357c:	40020428 	.word	0x40020428
 8003580:	40020440 	.word	0x40020440
 8003584:	40020458 	.word	0x40020458
 8003588:	40020470 	.word	0x40020470
 800358c:	40020488 	.word	0x40020488
 8003590:	400204a0 	.word	0x400204a0
 8003594:	400204b8 	.word	0x400204b8
 8003598:	58025408 	.word	0x58025408
 800359c:	5802541c 	.word	0x5802541c
 80035a0:	58025430 	.word	0x58025430
 80035a4:	58025444 	.word	0x58025444
 80035a8:	58025458 	.word	0x58025458
 80035ac:	5802546c 	.word	0x5802546c
 80035b0:	58025480 	.word	0x58025480
 80035b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]
}
 80035c8:	e04d      	b.n	8003666 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a29      	ldr	r2, [pc, #164]	; (8003674 <DMA_SetConfig+0x338>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <DMA_SetConfig+0x2de>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a27      	ldr	r2, [pc, #156]	; (8003678 <DMA_SetConfig+0x33c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01d      	beq.n	800361a <DMA_SetConfig+0x2de>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a26      	ldr	r2, [pc, #152]	; (800367c <DMA_SetConfig+0x340>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <DMA_SetConfig+0x2de>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a24      	ldr	r2, [pc, #144]	; (8003680 <DMA_SetConfig+0x344>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <DMA_SetConfig+0x2de>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a23      	ldr	r2, [pc, #140]	; (8003684 <DMA_SetConfig+0x348>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <DMA_SetConfig+0x2de>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a21      	ldr	r2, [pc, #132]	; (8003688 <DMA_SetConfig+0x34c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <DMA_SetConfig+0x2de>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a20      	ldr	r2, [pc, #128]	; (800368c <DMA_SetConfig+0x350>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <DMA_SetConfig+0x2de>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <DMA_SetConfig+0x354>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <DMA_SetConfig+0x2e2>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <DMA_SetConfig+0x2e4>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2201      	movs	r2, #1
 800362e:	409a      	lsls	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d108      	bne.n	8003656 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	60da      	str	r2, [r3, #12]
}
 8003654:	e007      	b.n	8003666 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	60da      	str	r2, [r3, #12]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	58025408 	.word	0x58025408
 8003678:	5802541c 	.word	0x5802541c
 800367c:	58025430 	.word	0x58025430
 8003680:	58025444 	.word	0x58025444
 8003684:	58025458 	.word	0x58025458
 8003688:	5802546c 	.word	0x5802546c
 800368c:	58025480 	.word	0x58025480
 8003690:	58025494 	.word	0x58025494

08003694 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a42      	ldr	r2, [pc, #264]	; (80037ac <DMA_CalcBaseAndBitshift+0x118>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d04a      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a41      	ldr	r2, [pc, #260]	; (80037b0 <DMA_CalcBaseAndBitshift+0x11c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d045      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3f      	ldr	r2, [pc, #252]	; (80037b4 <DMA_CalcBaseAndBitshift+0x120>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d040      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3e      	ldr	r2, [pc, #248]	; (80037b8 <DMA_CalcBaseAndBitshift+0x124>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d03b      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3c      	ldr	r2, [pc, #240]	; (80037bc <DMA_CalcBaseAndBitshift+0x128>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d036      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <DMA_CalcBaseAndBitshift+0x12c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d031      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a39      	ldr	r2, [pc, #228]	; (80037c4 <DMA_CalcBaseAndBitshift+0x130>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02c      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a38      	ldr	r2, [pc, #224]	; (80037c8 <DMA_CalcBaseAndBitshift+0x134>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d027      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a36      	ldr	r2, [pc, #216]	; (80037cc <DMA_CalcBaseAndBitshift+0x138>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d022      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a35      	ldr	r2, [pc, #212]	; (80037d0 <DMA_CalcBaseAndBitshift+0x13c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d01d      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a33      	ldr	r2, [pc, #204]	; (80037d4 <DMA_CalcBaseAndBitshift+0x140>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d018      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a32      	ldr	r2, [pc, #200]	; (80037d8 <DMA_CalcBaseAndBitshift+0x144>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a30      	ldr	r2, [pc, #192]	; (80037dc <DMA_CalcBaseAndBitshift+0x148>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2d      	ldr	r2, [pc, #180]	; (80037e4 <DMA_CalcBaseAndBitshift+0x150>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <DMA_CalcBaseAndBitshift+0xa8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <DMA_CalcBaseAndBitshift+0x154>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <DMA_CalcBaseAndBitshift+0xac>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <DMA_CalcBaseAndBitshift+0xae>
 8003740:	2300      	movs	r3, #0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d024      	beq.n	8003790 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3b10      	subs	r3, #16
 800374e:	4a27      	ldr	r2, [pc, #156]	; (80037ec <DMA_CalcBaseAndBitshift+0x158>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	4a24      	ldr	r2, [pc, #144]	; (80037f0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003760:	5cd3      	ldrb	r3, [r2, r3]
 8003762:	461a      	mov	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d908      	bls.n	8003780 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <DMA_CalcBaseAndBitshift+0x160>)
 8003776:	4013      	ands	r3, r2
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	659a      	str	r2, [r3, #88]	; 0x58
 800377e:	e00d      	b.n	800379c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <DMA_CalcBaseAndBitshift+0x160>)
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6593      	str	r3, [r2, #88]	; 0x58
 800378e:	e005      	b.n	800379c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40020010 	.word	0x40020010
 80037b0:	40020028 	.word	0x40020028
 80037b4:	40020040 	.word	0x40020040
 80037b8:	40020058 	.word	0x40020058
 80037bc:	40020070 	.word	0x40020070
 80037c0:	40020088 	.word	0x40020088
 80037c4:	400200a0 	.word	0x400200a0
 80037c8:	400200b8 	.word	0x400200b8
 80037cc:	40020410 	.word	0x40020410
 80037d0:	40020428 	.word	0x40020428
 80037d4:	40020440 	.word	0x40020440
 80037d8:	40020458 	.word	0x40020458
 80037dc:	40020470 	.word	0x40020470
 80037e0:	40020488 	.word	0x40020488
 80037e4:	400204a0 	.word	0x400204a0
 80037e8:	400204b8 	.word	0x400204b8
 80037ec:	aaaaaaab 	.word	0xaaaaaaab
 80037f0:	0800d6ec 	.word	0x0800d6ec
 80037f4:	fffffc00 	.word	0xfffffc00

080037f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d120      	bne.n	800384e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	2b03      	cmp	r3, #3
 8003812:	d858      	bhi.n	80038c6 <DMA_CheckFifoParam+0xce>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <DMA_CheckFifoParam+0x24>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	0800382d 	.word	0x0800382d
 8003820:	0800383f 	.word	0x0800383f
 8003824:	0800382d 	.word	0x0800382d
 8003828:	080038c7 	.word	0x080038c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d048      	beq.n	80038ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800383c:	e045      	b.n	80038ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003846:	d142      	bne.n	80038ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800384c:	e03f      	b.n	80038ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003856:	d123      	bne.n	80038a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	2b03      	cmp	r3, #3
 800385e:	d838      	bhi.n	80038d2 <DMA_CheckFifoParam+0xda>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <DMA_CheckFifoParam+0x70>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	08003879 	.word	0x08003879
 800386c:	0800387f 	.word	0x0800387f
 8003870:	08003879 	.word	0x08003879
 8003874:	08003891 	.word	0x08003891
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
        break;
 800387c:	e030      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d025      	beq.n	80038d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800388e:	e022      	b.n	80038d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003898:	d11f      	bne.n	80038da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800389e:	e01c      	b.n	80038da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d902      	bls.n	80038ae <DMA_CheckFifoParam+0xb6>
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d003      	beq.n	80038b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80038ac:	e018      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
        break;
 80038b2:	e015      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00e      	beq.n	80038de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
    break;
 80038c4:	e00b      	b.n	80038de <DMA_CheckFifoParam+0xe6>
        break;
 80038c6:	bf00      	nop
 80038c8:	e00a      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
        break;
 80038ca:	bf00      	nop
 80038cc:	e008      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
        break;
 80038ce:	bf00      	nop
 80038d0:	e006      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
        break;
 80038d2:	bf00      	nop
 80038d4:	e004      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
        break;
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
        break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
    break;
 80038de:	bf00      	nop
    }
  }

  return status;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop

080038f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a38      	ldr	r2, [pc, #224]	; (80039e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a36      	ldr	r2, [pc, #216]	; (80039e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01d      	beq.n	800394e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a35      	ldr	r2, [pc, #212]	; (80039ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a33      	ldr	r2, [pc, #204]	; (80039f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a32      	ldr	r2, [pc, #200]	; (80039f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a30      	ldr	r2, [pc, #192]	; (80039f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01a      	beq.n	800398e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3b08      	subs	r3, #8
 8003960:	4a28      	ldr	r2, [pc, #160]	; (8003a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a24      	ldr	r2, [pc, #144]	; (8003a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800397c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2201      	movs	r2, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800398c:	e024      	b.n	80039d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3b10      	subs	r3, #16
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d806      	bhi.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d902      	bls.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3308      	adds	r3, #8
 80039b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80039c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	2201      	movs	r2, #1
 80039d2:	409a      	lsls	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	58025408 	.word	0x58025408
 80039e8:	5802541c 	.word	0x5802541c
 80039ec:	58025430 	.word	0x58025430
 80039f0:	58025444 	.word	0x58025444
 80039f4:	58025458 	.word	0x58025458
 80039f8:	5802546c 	.word	0x5802546c
 80039fc:	58025480 	.word	0x58025480
 8003a00:	58025494 	.word	0x58025494
 8003a04:	cccccccd 	.word	0xcccccccd
 8003a08:	16009600 	.word	0x16009600
 8003a0c:	58025880 	.word	0x58025880
 8003a10:	aaaaaaab 	.word	0xaaaaaaab
 8003a14:	400204b8 	.word	0x400204b8
 8003a18:	4002040f 	.word	0x4002040f
 8003a1c:	10008200 	.word	0x10008200
 8003a20:	40020880 	.word	0x40020880

08003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d04a      	beq.n	8003ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d847      	bhi.n	8003ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d022      	beq.n	8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d01d      	beq.n	8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d018      	beq.n	8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00e      	beq.n	8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d009      	beq.n	8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003a94:	2300      	movs	r3, #0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003aac:	671a      	str	r2, [r3, #112]	; 0x70
 8003aae:	e009      	b.n	8003ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a11      	ldr	r2, [pc, #68]	; (8003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003ac2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	2201      	movs	r2, #1
 8003aca:	409a      	lsls	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	58025408 	.word	0x58025408
 8003ae0:	5802541c 	.word	0x5802541c
 8003ae4:	58025430 	.word	0x58025430
 8003ae8:	58025444 	.word	0x58025444
 8003aec:	58025458 	.word	0x58025458
 8003af0:	5802546c 	.word	0x5802546c
 8003af4:	58025480 	.word	0x58025480
 8003af8:	58025494 	.word	0x58025494
 8003afc:	1600963f 	.word	0x1600963f
 8003b00:	58025940 	.word	0x58025940
 8003b04:	1000823f 	.word	0x1000823f
 8003b08:	40020940 	.word	0x40020940

08003b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	; 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b1a:	4b89      	ldr	r3, [pc, #548]	; (8003d40 <HAL_GPIO_Init+0x234>)
 8003b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b1e:	e194      	b.n	8003e4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	2101      	movs	r1, #1
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8186 	beq.w	8003e44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d005      	beq.n	8003b50 <HAL_GPIO_Init+0x44>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d130      	bne.n	8003bb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b86:	2201      	movs	r2, #1
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 0201 	and.w	r2, r3, #1
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d017      	beq.n	8003bee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	2203      	movs	r2, #3
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d123      	bne.n	8003c42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	08da      	lsrs	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	08da      	lsrs	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3208      	adds	r2, #8
 8003c3c:	69b9      	ldr	r1, [r7, #24]
 8003c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0203 	and.w	r2, r3, #3
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80e0 	beq.w	8003e44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c84:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_GPIO_Init+0x238>)
 8003c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c8a:	4a2e      	ldr	r2, [pc, #184]	; (8003d44 <HAL_GPIO_Init+0x238>)
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c94:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_GPIO_Init+0x238>)
 8003c96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca2:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <HAL_GPIO_Init+0x23c>)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	3302      	adds	r3, #2
 8003caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	220f      	movs	r2, #15
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <HAL_GPIO_Init+0x240>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d052      	beq.n	8003d74 <HAL_GPIO_Init+0x268>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <HAL_GPIO_Init+0x244>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d031      	beq.n	8003d3a <HAL_GPIO_Init+0x22e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_GPIO_Init+0x248>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d02b      	beq.n	8003d36 <HAL_GPIO_Init+0x22a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <HAL_GPIO_Init+0x24c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d025      	beq.n	8003d32 <HAL_GPIO_Init+0x226>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <HAL_GPIO_Init+0x250>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01f      	beq.n	8003d2e <HAL_GPIO_Init+0x222>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1b      	ldr	r2, [pc, #108]	; (8003d60 <HAL_GPIO_Init+0x254>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d019      	beq.n	8003d2a <HAL_GPIO_Init+0x21e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <HAL_GPIO_Init+0x258>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_GPIO_Init+0x21a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_GPIO_Init+0x25c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00d      	beq.n	8003d22 <HAL_GPIO_Init+0x216>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HAL_GPIO_Init+0x260>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <HAL_GPIO_Init+0x212>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <HAL_GPIO_Init+0x264>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <HAL_GPIO_Init+0x20e>
 8003d16:	2309      	movs	r3, #9
 8003d18:	e02d      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d1a:	230a      	movs	r3, #10
 8003d1c:	e02b      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d1e:	2308      	movs	r3, #8
 8003d20:	e029      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d22:	2307      	movs	r3, #7
 8003d24:	e027      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d26:	2306      	movs	r3, #6
 8003d28:	e025      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	e023      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	e021      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d32:	2303      	movs	r3, #3
 8003d34:	e01f      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e01d      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e01b      	b.n	8003d76 <HAL_GPIO_Init+0x26a>
 8003d3e:	bf00      	nop
 8003d40:	58000080 	.word	0x58000080
 8003d44:	58024400 	.word	0x58024400
 8003d48:	58000400 	.word	0x58000400
 8003d4c:	58020000 	.word	0x58020000
 8003d50:	58020400 	.word	0x58020400
 8003d54:	58020800 	.word	0x58020800
 8003d58:	58020c00 	.word	0x58020c00
 8003d5c:	58021000 	.word	0x58021000
 8003d60:	58021400 	.word	0x58021400
 8003d64:	58021800 	.word	0x58021800
 8003d68:	58021c00 	.word	0x58021c00
 8003d6c:	58022000 	.word	0x58022000
 8003d70:	58022400 	.word	0x58022400
 8003d74:	2300      	movs	r3, #0
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	f002 0203 	and.w	r2, r2, #3
 8003d7c:	0092      	lsls	r2, r2, #2
 8003d7e:	4093      	lsls	r3, r2
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d86:	4938      	ldr	r1, [pc, #224]	; (8003e68 <HAL_GPIO_Init+0x35c>)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	3301      	adds	r3, #1
 8003e48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f47f ae63 	bne.w	8003b20 <HAL_GPIO_Init+0x14>
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	3724      	adds	r7, #36	; 0x24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	58000400 	.word	0x58000400

08003e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	807b      	strh	r3, [r7, #2]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e7c:	787b      	ldrb	r3, [r7, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e88:	e003      	b.n	8003e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	041a      	lsls	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	619a      	str	r2, [r3, #24]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07f      	b.n	8003fb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fc fc02 	bl	80006d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2224      	movs	r2, #36	; 0x24
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ef0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d107      	bne.n	8003f1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	e006      	b.n	8003f28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d104      	bne.n	8003f3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_I2C_Init+0x11c>)
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	02008000 	.word	0x02008000

08003fc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d138      	bne.n	8004048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e032      	b.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	; 0x24
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b20      	cmp	r3, #32
 800406a:	d139      	bne.n	80040e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004076:	2302      	movs	r3, #2
 8004078:	e033      	b.n	80040e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2224      	movs	r2, #36	; 0x24
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f0:	b08f      	sub	sp, #60	; 0x3c
 80040f2:	af0a      	add	r7, sp, #40	; 0x28
 80040f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e116      	b.n	800432e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f008 ff4c 	bl	800cfb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2203      	movs	r2, #3
 8004124:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f005 fbdf 	bl	8009902 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	687e      	ldr	r6, [r7, #4]
 800414c:	466d      	mov	r5, sp
 800414e:	f106 0410 	add.w	r4, r6, #16
 8004152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800415a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800415e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004162:	1d33      	adds	r3, r6, #4
 8004164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004166:	6838      	ldr	r0, [r7, #0]
 8004168:	f005 faaa 	bl	80096c0 <USB_CoreInit>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0d7      	b.n	800432e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f005 fbcd 	bl	8009924 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
 800418e:	e04a      	b.n	8004226 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	333d      	adds	r3, #61	; 0x3d
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	333c      	adds	r3, #60	; 0x3c
 80041b4:	7bfa      	ldrb	r2, [r7, #15]
 80041b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041b8:	7bfa      	ldrb	r2, [r7, #15]
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	b298      	uxth	r0, r3
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	3344      	adds	r3, #68	; 0x44
 80041cc:	4602      	mov	r2, r0
 80041ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3340      	adds	r3, #64	; 0x40
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3348      	adds	r3, #72	; 0x48
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	334c      	adds	r3, #76	; 0x4c
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	3354      	adds	r3, #84	; 0x54
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	3301      	adds	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d3af      	bcc.n	8004190 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	e044      	b.n	80042c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800425e:	7bfa      	ldrb	r2, [r7, #15]
 8004260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004262:	7bfa      	ldrb	r2, [r7, #15]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042a4:	7bfa      	ldrb	r2, [r7, #15]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	3301      	adds	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d3b5      	bcc.n	8004236 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	687e      	ldr	r6, [r7, #4]
 80042d2:	466d      	mov	r5, sp
 80042d4:	f106 0410 	add.w	r4, r6, #16
 80042d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80042e8:	1d33      	adds	r3, r6, #4
 80042ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ec:	6838      	ldr	r0, [r7, #0]
 80042ee:	f005 fb65 	bl	80099bc <USB_DevInit>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e014      	b.n	800432e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2b01      	cmp	r3, #1
 800431a:	d102      	bne.n	8004322 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f001 f98b 	bl	8005638 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f006 fcb3 	bl	800ac92 <USB_DevDisconnect>

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004336 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_PCD_Start+0x1c>
 800434e:	2302      	movs	r3, #2
 8004350:	e020      	b.n	8004394 <HAL_PCD_Start+0x5e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	2b01      	cmp	r3, #1
 8004360:	d109      	bne.n	8004376 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004366:	2b01      	cmp	r3, #1
 8004368:	d005      	beq.n	8004376 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f005 fab0 	bl	80098e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f006 fc63 	bl	800ac50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b08d      	sub	sp, #52	; 0x34
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f006 fd21 	bl	800adfa <USB_GetMode>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 84b7 	bne.w	8004d2e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f006 fc85 	bl	800acd4 <USB_ReadInterrupts>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 84ad 	beq.w	8004d2c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f006 fc72 	bl	800acd4 <USB_ReadInterrupts>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d107      	bne.n	800440a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f002 0202 	and.w	r2, r2, #2
 8004408:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f006 fc60 	bl	800acd4 <USB_ReadInterrupts>
 8004414:	4603      	mov	r3, r0
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b10      	cmp	r3, #16
 800441c:	d161      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0210 	bic.w	r2, r2, #16
 800442c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 020f 	and.w	r2, r3, #15
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	3304      	adds	r3, #4
 800444c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	0c5b      	lsrs	r3, r3, #17
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	2b02      	cmp	r3, #2
 8004458:	d124      	bne.n	80044a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d035      	beq.n	80044d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004474:	b29b      	uxth	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	6a38      	ldr	r0, [r7, #32]
 800447a:	f006 fa97 	bl	800a9ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800448a:	441a      	add	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800449c:	441a      	add	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	621a      	str	r2, [r3, #32]
 80044a2:	e016      	b.n	80044d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	0c5b      	lsrs	r3, r3, #17
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d110      	bne.n	80044d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044b6:	2208      	movs	r2, #8
 80044b8:	4619      	mov	r1, r3
 80044ba:	6a38      	ldr	r0, [r7, #32]
 80044bc:	f006 fa76 	bl	800a9ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044cc:	441a      	add	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0210 	orr.w	r2, r2, #16
 80044e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f006 fbf4 	bl	800acd4 <USB_ReadInterrupts>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044f6:	f040 80a7 	bne.w	8004648 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f006 fbf9 	bl	800acfa <USB_ReadDevAllOutEpInterrupt>
 8004508:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800450a:	e099      	b.n	8004640 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 808e 	beq.w	8004634 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f006 fc1d 	bl	800ad62 <USB_ReadDevOutEPInterrupt>
 8004528:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00c      	beq.n	800454e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004540:	461a      	mov	r2, r3
 8004542:	2301      	movs	r3, #1
 8004544:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 feef 	bl	800532c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00c      	beq.n	8004572 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	2308      	movs	r3, #8
 8004568:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800456a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 ffc5 	bl	80054fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004588:	461a      	mov	r2, r3
 800458a:	2310      	movs	r3, #16
 800458c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d030      	beq.n	80045fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d109      	bne.n	80045b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	4613      	mov	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	3304      	adds	r3, #4
 80045cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	78db      	ldrb	r3, [r3, #3]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d108      	bne.n	80045e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f008 fe0c 	bl	800d200 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	461a      	mov	r2, r3
 80045f6:	2302      	movs	r3, #2
 80045f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	2320      	movs	r3, #32
 8004614:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462c:	461a      	mov	r2, r3
 800462e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004632:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	3301      	adds	r3, #1
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	f47f af62 	bne.w	800450c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f006 fb41 	bl	800acd4 <USB_ReadInterrupts>
 8004652:	4603      	mov	r3, r0
 8004654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800465c:	f040 80db 	bne.w	8004816 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f006 fb62 	bl	800ad2e <USB_ReadDevAllInEpInterrupt>
 800466a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004670:	e0cd      	b.n	800480e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80c2 	beq.w	8004802 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f006 fb88 	bl	800ad9e <USB_ReadDevInEPInterrupt>
 800468e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d057      	beq.n	800474a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	2201      	movs	r2, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69f9      	ldr	r1, [r7, #28]
 80046b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ba:	4013      	ands	r3, r2
 80046bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	461a      	mov	r2, r3
 80046cc:	2301      	movs	r3, #1
 80046ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d132      	bne.n	800473e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	334c      	adds	r3, #76	; 0x4c
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4403      	add	r3, r0
 80046f8:	3348      	adds	r3, #72	; 0x48
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4419      	add	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4403      	add	r3, r0
 800470c:	334c      	adds	r3, #76	; 0x4c
 800470e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d113      	bne.n	800473e <HAL_PCD_IRQHandler+0x3a2>
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3354      	adds	r3, #84	; 0x54
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d108      	bne.n	800473e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004736:	461a      	mov	r2, r3
 8004738:	2101      	movs	r1, #1
 800473a:	f006 fb91 	bl	800ae60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	b2db      	uxtb	r3, r3
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f008 fcd6 	bl	800d0f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	461a      	mov	r2, r3
 8004762:	2308      	movs	r3, #8
 8004764:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	461a      	mov	r2, r3
 800477e:	2310      	movs	r3, #16
 8004780:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	461a      	mov	r2, r3
 800479a:	2340      	movs	r3, #64	; 0x40
 800479c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d023      	beq.n	80047f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80047a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047aa:	6a38      	ldr	r0, [r7, #32]
 80047ac:	f005 fa64 	bl	8009c78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80047b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b2:	4613      	mov	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	3338      	adds	r3, #56	; 0x38
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	3304      	adds	r3, #4
 80047c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	78db      	ldrb	r3, [r3, #3]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d108      	bne.n	80047de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2200      	movs	r2, #0
 80047d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f008 fd23 	bl	800d224 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	461a      	mov	r2, r3
 80047ec:	2302      	movs	r3, #2
 80047ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fd08 	bl	8005212 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	3301      	adds	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	f47f af2e 	bne.w	8004672 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f006 fa5a 	bl	800acd4 <USB_ReadInterrupts>
 8004820:	4603      	mov	r3, r0
 8004822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800482a:	d122      	bne.n	8004872 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004846:	2b01      	cmp	r3, #1
 8004848:	d108      	bne.n	800485c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004852:	2100      	movs	r1, #0
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 ff13 	bl	8005680 <HAL_PCDEx_LPM_Callback>
 800485a:	e002      	b.n	8004862 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f008 fcc1 	bl	800d1e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f006 fa2c 	bl	800acd4 <USB_ReadInterrupts>
 800487c:	4603      	mov	r3, r0
 800487e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004886:	d112      	bne.n	80048ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b01      	cmp	r3, #1
 8004896:	d102      	bne.n	800489e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f008 fc7d 	bl	800d198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80048ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f006 fa0e 	bl	800acd4 <USB_ReadInterrupts>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c2:	d121      	bne.n	8004908 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80048d2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d111      	bne.n	8004902 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	f003 020f 	and.w	r2, r3, #15
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048f8:	2101      	movs	r1, #1
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fec0 	bl	8005680 <HAL_PCDEx_LPM_Callback>
 8004900:	e002      	b.n	8004908 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f008 fc48 	bl	800d198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f006 f9e1 	bl	800acd4 <USB_ReadInterrupts>
 8004912:	4603      	mov	r3, r0
 8004914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491c:	f040 80b7 	bne.w	8004a8e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2110      	movs	r1, #16
 800493a:	4618      	mov	r0, r3
 800493c:	f005 f99c 	bl	8009c78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004940:	2300      	movs	r3, #0
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004944:	e046      	b.n	80049d4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	461a      	mov	r2, r3
 8004954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004958:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004978:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	461a      	mov	r2, r3
 8004988:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800498c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800499e:	0151      	lsls	r1, r2, #5
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	440a      	add	r2, r1
 80049a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	3301      	adds	r3, #1
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049da:	429a      	cmp	r2, r3
 80049dc:	d3b3      	bcc.n	8004946 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80049f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0a:	f043 030b 	orr.w	r3, r3, #11
 8004a0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a20:	f043 030b 	orr.w	r3, r3, #11
 8004a24:	6453      	str	r3, [r2, #68]	; 0x44
 8004a26:	e015      	b.n	8004a54 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	4619      	mov	r1, r3
 8004a38:	f242 032b 	movw	r3, #8235	; 0x202b
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4e:	f043 030b 	orr.w	r3, r3, #11
 8004a52:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a66:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f006 f9f1 	bl	800ae60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f006 f91e 	bl	800acd4 <USB_ReadInterrupts>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa2:	d124      	bne.n	8004aee <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f006 f9b5 	bl	800ae18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f005 f95d 	bl	8009d72 <USB_GetDevSpeed>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681c      	ldr	r4, [r3, #0]
 8004ac4:	f001 fd90 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f004 fe62 	bl	800979c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f008 fb34 	bl	800d146 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f006 f8ee 	bl	800acd4 <USB_ReadInterrupts>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d10a      	bne.n	8004b18 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f008 fb11 	bl	800d12a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f002 0208 	and.w	r2, r2, #8
 8004b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f006 f8d9 	bl	800acd4 <USB_ReadInterrupts>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b28:	2b80      	cmp	r3, #128	; 0x80
 8004b2a:	d122      	bne.n	8004b72 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b38:	2301      	movs	r3, #1
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	e014      	b.n	8004b68 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d105      	bne.n	8004b62 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fb27 	bl	80051b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	3301      	adds	r3, #1
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d3e5      	bcc.n	8004b3e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f006 f8ac 	bl	800acd4 <USB_ReadInterrupts>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b86:	d13b      	bne.n	8004c00 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b88:	2301      	movs	r3, #1
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8c:	e02b      	b.n	8004be6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3340      	adds	r3, #64	; 0x40
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d115      	bne.n	8004be0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004bb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da12      	bge.n	8004be0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	333f      	adds	r3, #63	; 0x3f
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fae8 	bl	80051b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	3301      	adds	r3, #1
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d3ce      	bcc.n	8004b8e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f006 f865 	bl	800acd4 <USB_ReadInterrupts>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c14:	d155      	bne.n	8004cc2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c16:	2301      	movs	r3, #1
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1a:	e045      	b.n	8004ca8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d12e      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	da2b      	bge.n	8004ca2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004c56:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d121      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c62:	4613      	mov	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c9e:	6053      	str	r3, [r2, #4]
            break;
 8004ca0:	e007      	b.n	8004cb2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3b4      	bcc.n	8004c1c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f006 f804 	bl	800acd4 <USB_ReadInterrupts>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d10a      	bne.n	8004cee <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f008 fab5 	bl	800d248 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f005 ffee 	bl	800acd4 <USB_ReadInterrupts>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d115      	bne.n	8004d2e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f008 faa5 	bl	800d264 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	e000      	b.n	8004d2e <HAL_PCD_IRQHandler+0x992>
      return;
 8004d2c:	bf00      	nop
    }
  }
}
 8004d2e:	3734      	adds	r7, #52	; 0x34
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd90      	pop	{r4, r7, pc}

08004d34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_PCD_SetAddress+0x1a>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e013      	b.n	8004d76 <HAL_PCD_SetAddress+0x42>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f005 ff4c 	bl	800ac04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	4608      	mov	r0, r1
 8004d88:	4611      	mov	r1, r2
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	70fb      	strb	r3, [r7, #3]
 8004d90:	460b      	mov	r3, r1
 8004d92:	803b      	strh	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	da0f      	bge.n	8004dc4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	f003 020f 	and.w	r2, r3, #15
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	3338      	adds	r3, #56	; 0x38
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	4413      	add	r3, r2
 8004db8:	3304      	adds	r3, #4
 8004dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	705a      	strb	r2, [r3, #1]
 8004dc2:	e00f      	b.n	8004de4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	4613      	mov	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	3304      	adds	r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004df0:	883a      	ldrh	r2, [r7, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	78ba      	ldrb	r2, [r7, #2]
 8004dfa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e0e:	78bb      	ldrb	r3, [r7, #2]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d102      	bne.n	8004e1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_PCD_EP_Open+0xaa>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e00e      	b.n	8004e46 <HAL_PCD_EP_Open+0xc8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68f9      	ldr	r1, [r7, #12]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f004 ffc0 	bl	8009dbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004e44:	7afb      	ldrb	r3, [r7, #11]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	460b      	mov	r3, r1
 8004e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	da0f      	bge.n	8004e82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	3338      	adds	r3, #56	; 0x38
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	705a      	strb	r2, [r3, #1]
 8004e80:	e00f      	b.n	8004ea2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_PCD_EP_Close+0x6e>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e00e      	b.n	8004eda <HAL_PCD_EP_Close+0x8c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f004 fffe 	bl	8009ecc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b086      	sub	sp, #24
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
 8004ef4:	f003 020f 	and.w	r2, r3, #15
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	3304      	adds	r3, #4
 8004f0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f24:	7afb      	ldrb	r3, [r7, #11]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d102      	bne.n	8004f3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f3e:	7afb      	ldrb	r3, [r7, #11]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	f005 fae5 	bl	800a524 <USB_EP0StartXfer>
 8004f5a:	e008      	b.n	8004f6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	f005 f88b 	bl	800a084 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	f003 020f 	and.w	r2, r3, #15
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fb8:	7afb      	ldrb	r3, [r7, #11]
 8004fba:	f003 020f 	and.w	r2, r3, #15
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	3338      	adds	r3, #56	; 0x38
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	3304      	adds	r3, #4
 8004fce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fe8:	7afb      	ldrb	r3, [r7, #11]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d102      	bne.n	8005002 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005002:	7afb      	ldrb	r3, [r7, #11]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	f005 fa83 	bl	800a524 <USB_EP0StartXfer>
 800501e:	e008      	b.n	8005032 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	6979      	ldr	r1, [r7, #20]
 800502e:	f005 f829 	bl	800a084 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	f003 020f 	and.w	r2, r3, #15
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d901      	bls.n	800505a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e050      	b.n	80050fc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800505a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800505e:	2b00      	cmp	r3, #0
 8005060:	da0f      	bge.n	8005082 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	3338      	adds	r3, #56	; 0x38
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	3304      	adds	r3, #4
 8005078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	705a      	strb	r2, [r3, #1]
 8005080:	e00d      	b.n	800509e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	4413      	add	r3, r2
 8005094:	3304      	adds	r3, #4
 8005096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_PCD_EP_SetStall+0x82>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e01e      	b.n	80050fc <HAL_PCD_EP_SetStall+0xc0>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f005 fcc5 	bl	800aa5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	b2d9      	uxtb	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050ec:	461a      	mov	r2, r3
 80050ee:	f005 feb7 	bl	800ae60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	f003 020f 	and.w	r2, r3, #15
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	d901      	bls.n	8005122 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e042      	b.n	80051a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005126:	2b00      	cmp	r3, #0
 8005128:	da0f      	bge.n	800514a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	f003 020f 	and.w	r2, r3, #15
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	3338      	adds	r3, #56	; 0x38
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	3304      	adds	r3, #4
 8005140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	705a      	strb	r2, [r3, #1]
 8005148:	e00f      	b.n	800516a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	f003 020f 	and.w	r2, r3, #15
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	3304      	adds	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	b2da      	uxtb	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_PCD_EP_ClrStall+0x86>
 8005186:	2302      	movs	r3, #2
 8005188:	e00e      	b.n	80051a8 <HAL_PCD_EP_ClrStall+0xa4>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68f9      	ldr	r1, [r7, #12]
 8005198:	4618      	mov	r0, r3
 800519a:	f005 fccd 	bl	800ab38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80051bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	da0c      	bge.n	80051de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	f003 020f 	and.w	r2, r3, #15
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	3338      	adds	r3, #56	; 0x38
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	3304      	adds	r3, #4
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e00c      	b.n	80051f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051de:	78fb      	ldrb	r3, [r7, #3]
 80051e0:	f003 020f 	and.w	r2, r3, #15
 80051e4:	4613      	mov	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	3304      	adds	r3, #4
 80051f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	4618      	mov	r0, r3
 8005200:	f005 faec 	bl	800a7dc <USB_EPStopXfer>
 8005204:	4603      	mov	r3, r0
 8005206:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005208:	7afb      	ldrb	r3, [r7, #11]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b08a      	sub	sp, #40	; 0x28
 8005216:	af02      	add	r7, sp, #8
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	3338      	adds	r3, #56	; 0x38
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4413      	add	r3, r2
 8005236:	3304      	adds	r3, #4
 8005238:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	429a      	cmp	r2, r3
 8005244:	d901      	bls.n	800524a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06c      	b.n	8005324 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	429a      	cmp	r2, r3
 800525e:	d902      	bls.n	8005266 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	3303      	adds	r3, #3
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800526e:	e02b      	b.n	80052c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	699a      	ldr	r2, [r3, #24]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	429a      	cmp	r2, r3
 8005284:	d902      	bls.n	800528c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3303      	adds	r3, #3
 8005290:	089b      	lsrs	r3, r3, #2
 8005292:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6919      	ldr	r1, [r3, #16]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	4603      	mov	r3, r0
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f005 fb40 	bl	800a930 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	441a      	add	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a1a      	ldr	r2, [r3, #32]
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	441a      	add	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d809      	bhi.n	80052f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1a      	ldr	r2, [r3, #32]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d203      	bcs.n	80052f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1be      	bne.n	8005270 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d811      	bhi.n	8005322 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	2201      	movs	r2, #1
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	43db      	mvns	r3, r3
 8005318:	6939      	ldr	r1, [r7, #16]
 800531a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800531e:	4013      	ands	r3, r2
 8005320:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3720      	adds	r7, #32
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	333c      	adds	r3, #60	; 0x3c
 8005344:	3304      	adds	r3, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d17b      	bne.n	800545a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	4a61      	ldr	r2, [pc, #388]	; (80054f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	f240 80b9 	bls.w	80054e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 80b3 	beq.w	80054e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	461a      	mov	r2, r3
 8005390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005394:	6093      	str	r3, [r2, #8]
 8005396:	e0a7      	b.n	80054e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	461a      	mov	r2, r3
 80053b0:	2320      	movs	r3, #32
 80053b2:	6093      	str	r3, [r2, #8]
 80053b4:	e098      	b.n	80054e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 8093 	bne.w	80054e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4a4b      	ldr	r2, [pc, #300]	; (80054f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d90f      	bls.n	80053ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e0:	461a      	mov	r2, r3
 80053e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e6:	6093      	str	r3, [r2, #8]
 80053e8:	e07e      	b.n	80054e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	4413      	add	r3, r2
 80053fc:	3304      	adds	r3, #4
 80053fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	0159      	lsls	r1, r3, #5
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	440b      	add	r3, r1
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d114      	bne.n	800544c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005434:	461a      	mov	r2, r3
 8005436:	2101      	movs	r1, #1
 8005438:	f005 fd12 	bl	800ae60 <USB_EP0_OutStart>
 800543c:	e006      	b.n	800544c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f007 fe34 	bl	800d0c0 <HAL_PCD_DataOutStageCallback>
 8005458:	e046      	b.n	80054e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	4a26      	ldr	r2, [pc, #152]	; (80054f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d124      	bne.n	80054ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	461a      	mov	r2, r3
 800547a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547e:	6093      	str	r3, [r2, #8]
 8005480:	e032      	b.n	80054e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	461a      	mov	r2, r3
 800549a:	2320      	movs	r3, #32
 800549c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f007 fe0b 	bl	800d0c0 <HAL_PCD_DataOutStageCallback>
 80054aa:	e01d      	b.n	80054e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d114      	bne.n	80054dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d108      	bne.n	80054dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054d4:	461a      	mov	r2, r3
 80054d6:	2100      	movs	r1, #0
 80054d8:	f005 fcc2 	bl	800ae60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f007 fdec 	bl	800d0c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	4f54300a 	.word	0x4f54300a
 80054f8:	4f54310a 	.word	0x4f54310a

080054fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	333c      	adds	r3, #60	; 0x3c
 8005514:	3304      	adds	r3, #4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <PCD_EP_OutSetupPacket_int+0x88>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d90e      	bls.n	8005550 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005538:	2b00      	cmp	r3, #0
 800553a:	d009      	beq.n	8005550 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	461a      	mov	r2, r3
 800554a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800554e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f007 fda3 	bl	800d09c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <PCD_EP_OutSetupPacket_int+0x88>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d90c      	bls.n	8005578 <PCD_EP_OutSetupPacket_int+0x7c>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d108      	bne.n	8005578 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005570:	461a      	mov	r2, r3
 8005572:	2101      	movs	r1, #1
 8005574:	f005 fc74 	bl	800ae60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	4f54300a 	.word	0x4f54300a

08005588 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
 8005594:	4613      	mov	r3, r2
 8005596:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d107      	bne.n	80055b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055a6:	883b      	ldrh	r3, [r7, #0]
 80055a8:	0419      	lsls	r1, r3, #16
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28
 80055b4:	e028      	b.n	8005608 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4413      	add	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055c4:	2300      	movs	r3, #0
 80055c6:	73fb      	strb	r3, [r7, #15]
 80055c8:	e00d      	b.n	80055e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	3340      	adds	r3, #64	; 0x40
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4413      	add	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	3301      	adds	r3, #1
 80055e4:	73fb      	strb	r3, [r7, #15]
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d3ec      	bcc.n	80055ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80055f0:	883b      	ldrh	r3, [r7, #0]
 80055f2:	0418      	lsls	r0, r3, #16
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6819      	ldr	r1, [r3, #0]
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	4302      	orrs	r2, r0
 8005600:	3340      	adds	r3, #64	; 0x40
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <HAL_PCDEx_ActivateLPM+0x44>)
 8005668:	4313      	orrs	r3, r2
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	10000003 	.word	0x10000003

08005680 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <HAL_PWREx_ConfigSupply+0x70>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d00a      	beq.n	80056c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056ac:	4b16      	ldr	r3, [pc, #88]	; (8005708 <HAL_PWREx_ConfigSupply+0x70>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d001      	beq.n	80056be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e01f      	b.n	80056fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e01d      	b.n	80056fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056c2:	4b11      	ldr	r3, [pc, #68]	; (8005708 <HAL_PWREx_ConfigSupply+0x70>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f023 0207 	bic.w	r2, r3, #7
 80056ca:	490f      	ldr	r1, [pc, #60]	; (8005708 <HAL_PWREx_ConfigSupply+0x70>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056d2:	f7fb fa87 	bl	8000be4 <HAL_GetTick>
 80056d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056d8:	e009      	b.n	80056ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056da:	f7fb fa83 	bl	8000be4 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056e8:	d901      	bls.n	80056ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e007      	b.n	80056fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <HAL_PWREx_ConfigSupply+0x70>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fa:	d1ee      	bne.n	80056da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	58024800 	.word	0x58024800

0800570c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800571a:	60d3      	str	r3, [r2, #12]
}
 800571c:	bf00      	nop
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	58024800 	.word	0x58024800

0800572c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08c      	sub	sp, #48	; 0x30
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f000 bc1d 	b.w	8005f7a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8087 	beq.w	800585c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800574e:	4b99      	ldr	r3, [pc, #612]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005758:	4b96      	ldr	r3, [pc, #600]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	2b10      	cmp	r3, #16
 8005762:	d007      	beq.n	8005774 <HAL_RCC_OscConfig+0x48>
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	2b18      	cmp	r3, #24
 8005768:	d110      	bne.n	800578c <HAL_RCC_OscConfig+0x60>
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d10b      	bne.n	800578c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005774:	4b8f      	ldr	r3, [pc, #572]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d06c      	beq.n	800585a <HAL_RCC_OscConfig+0x12e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d168      	bne.n	800585a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e3f6      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005794:	d106      	bne.n	80057a4 <HAL_RCC_OscConfig+0x78>
 8005796:	4b87      	ldr	r3, [pc, #540]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a86      	ldr	r2, [pc, #536]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800579c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e02e      	b.n	8005802 <HAL_RCC_OscConfig+0xd6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10c      	bne.n	80057c6 <HAL_RCC_OscConfig+0x9a>
 80057ac:	4b81      	ldr	r3, [pc, #516]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a80      	ldr	r2, [pc, #512]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	4b7e      	ldr	r3, [pc, #504]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a7d      	ldr	r2, [pc, #500]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e01d      	b.n	8005802 <HAL_RCC_OscConfig+0xd6>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057ce:	d10c      	bne.n	80057ea <HAL_RCC_OscConfig+0xbe>
 80057d0:	4b78      	ldr	r3, [pc, #480]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a77      	ldr	r2, [pc, #476]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	4b75      	ldr	r3, [pc, #468]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a74      	ldr	r2, [pc, #464]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e00b      	b.n	8005802 <HAL_RCC_OscConfig+0xd6>
 80057ea:	4b72      	ldr	r3, [pc, #456]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a71      	ldr	r2, [pc, #452]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b6f      	ldr	r3, [pc, #444]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6e      	ldr	r2, [pc, #440]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005800:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d013      	beq.n	8005832 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580a:	f7fb f9eb 	bl	8000be4 <HAL_GetTick>
 800580e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005812:	f7fb f9e7 	bl	8000be4 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b64      	cmp	r3, #100	; 0x64
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e3aa      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005824:	4b63      	ldr	r3, [pc, #396]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0xe6>
 8005830:	e014      	b.n	800585c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005832:	f7fb f9d7 	bl	8000be4 <HAL_GetTick>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800583a:	f7fb f9d3 	bl	8000be4 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b64      	cmp	r3, #100	; 0x64
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e396      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800584c:	4b59      	ldr	r3, [pc, #356]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f0      	bne.n	800583a <HAL_RCC_OscConfig+0x10e>
 8005858:	e000      	b.n	800585c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800585a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80cb 	beq.w	8005a00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800586a:	4b52      	ldr	r3, [pc, #328]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005872:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005874:	4b4f      	ldr	r3, [pc, #316]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <HAL_RCC_OscConfig+0x164>
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	2b18      	cmp	r3, #24
 8005884:	d156      	bne.n	8005934 <HAL_RCC_OscConfig+0x208>
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d151      	bne.n	8005934 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005890:	4b48      	ldr	r3, [pc, #288]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_OscConfig+0x17c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e368      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058a8:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f023 0219 	bic.w	r2, r3, #25
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	493f      	ldr	r1, [pc, #252]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058ba:	f7fb f993 	bl	8000be4 <HAL_GetTick>
 80058be:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058c2:	f7fb f98f 	bl	8000be4 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e352      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058d4:	4b37      	ldr	r3, [pc, #220]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e0:	f7fb f9b0 	bl	8000c44 <HAL_GetREVID>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d817      	bhi.n	800591e <HAL_RCC_OscConfig+0x1f2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d108      	bne.n	8005908 <HAL_RCC_OscConfig+0x1dc>
 80058f6:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80058fe:	4a2d      	ldr	r2, [pc, #180]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005904:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005906:	e07b      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005908:	4b2a      	ldr	r3, [pc, #168]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	031b      	lsls	r3, r3, #12
 8005916:	4927      	ldr	r1, [pc, #156]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800591c:	e070      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591e:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	061b      	lsls	r3, r3, #24
 800592c:	4921      	ldr	r1, [pc, #132]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800592e:	4313      	orrs	r3, r2
 8005930:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005932:	e065      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d048      	beq.n	80059ce <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800593c:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f023 0219 	bic.w	r2, r3, #25
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	491a      	ldr	r1, [pc, #104]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fb f949 	bl	8000be4 <HAL_GetTick>
 8005952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005956:	f7fb f945 	bl	8000be4 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e308      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005968:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005974:	f7fb f966 	bl	8000c44 <HAL_GetREVID>
 8005978:	4603      	mov	r3, r0
 800597a:	f241 0203 	movw	r2, #4099	; 0x1003
 800597e:	4293      	cmp	r3, r2
 8005980:	d81a      	bhi.n	80059b8 <HAL_RCC_OscConfig+0x28c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b40      	cmp	r3, #64	; 0x40
 8005988:	d108      	bne.n	800599c <HAL_RCC_OscConfig+0x270>
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005992:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005998:	6053      	str	r3, [r2, #4]
 800599a:	e031      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	031b      	lsls	r3, r3, #12
 80059aa:	4902      	ldr	r1, [pc, #8]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	604b      	str	r3, [r1, #4]
 80059b0:	e026      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
 80059b2:	bf00      	nop
 80059b4:	58024400 	.word	0x58024400
 80059b8:	4b9a      	ldr	r3, [pc, #616]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	061b      	lsls	r3, r3, #24
 80059c6:	4997      	ldr	r1, [pc, #604]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	604b      	str	r3, [r1, #4]
 80059cc:	e018      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ce:	4b95      	ldr	r3, [pc, #596]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a94      	ldr	r2, [pc, #592]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059da:	f7fb f903 	bl	8000be4 <HAL_GetTick>
 80059de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059e2:	f7fb f8ff 	bl	8000be4 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e2c2      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059f4:	4b8b      	ldr	r3, [pc, #556]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f0      	bne.n	80059e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80a9 	beq.w	8005b60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0e:	4b85      	ldr	r3, [pc, #532]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a18:	4b82      	ldr	r3, [pc, #520]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d007      	beq.n	8005a34 <HAL_RCC_OscConfig+0x308>
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b18      	cmp	r3, #24
 8005a28:	d13a      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x374>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d135      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a34:	4b7b      	ldr	r3, [pc, #492]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_RCC_OscConfig+0x320>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2b80      	cmp	r3, #128	; 0x80
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e296      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a4c:	f7fb f8fa 	bl	8000c44 <HAL_GetREVID>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d817      	bhi.n	8005a8a <HAL_RCC_OscConfig+0x35e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d108      	bne.n	8005a74 <HAL_RCC_OscConfig+0x348>
 8005a62:	4b70      	ldr	r3, [pc, #448]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005a6a:	4a6e      	ldr	r2, [pc, #440]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a72:	e075      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a74:	4b6b      	ldr	r3, [pc, #428]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	069b      	lsls	r3, r3, #26
 8005a82:	4968      	ldr	r1, [pc, #416]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a88:	e06a      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a8a:	4b66      	ldr	r3, [pc, #408]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	4962      	ldr	r1, [pc, #392]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a9e:	e05f      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d042      	beq.n	8005b2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005aa8:	4b5e      	ldr	r3, [pc, #376]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a5d      	ldr	r2, [pc, #372]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fb f896 	bl	8000be4 <HAL_GetTick>
 8005ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005abc:	f7fb f892 	bl	8000be4 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e255      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ace:	4b55      	ldr	r3, [pc, #340]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ada:	f7fb f8b3 	bl	8000c44 <HAL_GetREVID>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d817      	bhi.n	8005b18 <HAL_RCC_OscConfig+0x3ec>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d108      	bne.n	8005b02 <HAL_RCC_OscConfig+0x3d6>
 8005af0:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005af8:	4a4a      	ldr	r2, [pc, #296]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005afa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005afe:	6053      	str	r3, [r2, #4]
 8005b00:	e02e      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
 8005b02:	4b48      	ldr	r3, [pc, #288]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	069b      	lsls	r3, r3, #26
 8005b10:	4944      	ldr	r1, [pc, #272]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	604b      	str	r3, [r1, #4]
 8005b16:	e023      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
 8005b18:	4b42      	ldr	r3, [pc, #264]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	061b      	lsls	r3, r3, #24
 8005b26:	493f      	ldr	r1, [pc, #252]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60cb      	str	r3, [r1, #12]
 8005b2c:	e018      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b2e:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fb f853 	bl	8000be4 <HAL_GetTick>
 8005b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b42:	f7fb f84f 	bl	8000be4 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e212      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b54:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f0      	bne.n	8005b42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d036      	beq.n	8005bda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d019      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b74:	4b2b      	ldr	r3, [pc, #172]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b78:	4a2a      	ldr	r2, [pc, #168]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b80:	f7fb f830 	bl	8000be4 <HAL_GetTick>
 8005b84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b88:	f7fb f82c 	bl	8000be4 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e1ef      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b9a:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f0      	beq.n	8005b88 <HAL_RCC_OscConfig+0x45c>
 8005ba6:	e018      	b.n	8005bda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba8:	4b1e      	ldr	r3, [pc, #120]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb4:	f7fb f816 	bl	8000be4 <HAL_GetTick>
 8005bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bbc:	f7fb f812 	bl	8000be4 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e1d5      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bce:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d039      	beq.n	8005c5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01c      	beq.n	8005c28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bee:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005bfa:	f7fa fff3 	bl	8000be4 <HAL_GetTick>
 8005bfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c02:	f7fa ffef 	bl	8000be4 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e1b2      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c14:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x4d6>
 8005c20:	e01b      	b.n	8005c5a <HAL_RCC_OscConfig+0x52e>
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c28:	4b9b      	ldr	r3, [pc, #620]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a9a      	ldr	r2, [pc, #616]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c34:	f7fa ffd6 	bl	8000be4 <HAL_GetTick>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c3c:	f7fa ffd2 	bl	8000be4 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e195      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c4e:	4b92      	ldr	r3, [pc, #584]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8081 	beq.w	8005d6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c68:	4b8c      	ldr	r3, [pc, #560]	; (8005e9c <HAL_RCC_OscConfig+0x770>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a8b      	ldr	r2, [pc, #556]	; (8005e9c <HAL_RCC_OscConfig+0x770>)
 8005c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c74:	f7fa ffb6 	bl	8000be4 <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c7c:	f7fa ffb2 	bl	8000be4 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	; 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e175      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c8e:	4b83      	ldr	r3, [pc, #524]	; (8005e9c <HAL_RCC_OscConfig+0x770>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d106      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x584>
 8005ca2:	4b7d      	ldr	r3, [pc, #500]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	4a7c      	ldr	r2, [pc, #496]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6713      	str	r3, [r2, #112]	; 0x70
 8005cae:	e02d      	b.n	8005d0c <HAL_RCC_OscConfig+0x5e0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10c      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x5a6>
 8005cb8:	4b77      	ldr	r3, [pc, #476]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	4a76      	ldr	r2, [pc, #472]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc4:	4b74      	ldr	r3, [pc, #464]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc8:	4a73      	ldr	r2, [pc, #460]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cca:	f023 0304 	bic.w	r3, r3, #4
 8005cce:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd0:	e01c      	b.n	8005d0c <HAL_RCC_OscConfig+0x5e0>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c8>
 8005cda:	4b6f      	ldr	r3, [pc, #444]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	4a6e      	ldr	r2, [pc, #440]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005ce0:	f043 0304 	orr.w	r3, r3, #4
 8005ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce6:	4b6c      	ldr	r3, [pc, #432]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	4a6b      	ldr	r2, [pc, #428]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCC_OscConfig+0x5e0>
 8005cf4:	4b68      	ldr	r3, [pc, #416]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf8:	4a67      	ldr	r2, [pc, #412]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005d00:	4b65      	ldr	r3, [pc, #404]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d04:	4a64      	ldr	r2, [pc, #400]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d06:	f023 0304 	bic.w	r3, r3, #4
 8005d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d015      	beq.n	8005d40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d14:	f7fa ff66 	bl	8000be4 <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d1c:	f7fa ff62 	bl	8000be4 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e123      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d32:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0ee      	beq.n	8005d1c <HAL_RCC_OscConfig+0x5f0>
 8005d3e:	e014      	b.n	8005d6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fa ff50 	bl	8000be4 <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d48:	f7fa ff4c 	bl	8000be4 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e10d      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d5e:	4b4e      	ldr	r3, [pc, #312]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ee      	bne.n	8005d48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8102 	beq.w	8005f78 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d74:	4b48      	ldr	r3, [pc, #288]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d7c:	2b18      	cmp	r3, #24
 8005d7e:	f000 80bd 	beq.w	8005efc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	f040 809e 	bne.w	8005ec8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8c:	4b42      	ldr	r3, [pc, #264]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a41      	ldr	r2, [pc, #260]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fa ff24 	bl	8000be4 <HAL_GetTick>
 8005d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fa ff20 	bl	8000be4 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0e3      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005db2:	4b39      	ldr	r3, [pc, #228]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dbe:	4b36      	ldr	r3, [pc, #216]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dc2:	4b37      	ldr	r3, [pc, #220]	; (8005ea0 <HAL_RCC_OscConfig+0x774>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dce:	0112      	lsls	r2, r2, #4
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	4931      	ldr	r1, [pc, #196]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	628b      	str	r3, [r1, #40]	; 0x28
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	3b01      	subs	r3, #1
 8005de8:	025b      	lsls	r3, r3, #9
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	3b01      	subs	r3, #1
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e00:	3b01      	subs	r3, #1
 8005e02:	061b      	lsls	r3, r3, #24
 8005e04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e08:	4923      	ldr	r1, [pc, #140]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005e0e:	4b22      	ldr	r3, [pc, #136]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e1a:	4b1f      	ldr	r3, [pc, #124]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1e:	4b21      	ldr	r3, [pc, #132]	; (8005ea4 <HAL_RCC_OscConfig+0x778>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e26:	00d2      	lsls	r2, r2, #3
 8005e28:	491b      	ldr	r1, [pc, #108]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e2e:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	f023 020c 	bic.w	r2, r3, #12
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	4917      	ldr	r1, [pc, #92]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e40:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	f023 0202 	bic.w	r2, r3, #2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	4912      	ldr	r1, [pc, #72]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e52:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	4a10      	ldr	r2, [pc, #64]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5e:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005e76:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8e:	f7fa fea9 	bl	8000be4 <HAL_GetTick>
 8005e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e94:	e011      	b.n	8005eba <HAL_RCC_OscConfig+0x78e>
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
 8005e9c:	58024800 	.word	0x58024800
 8005ea0:	fffffc0c 	.word	0xfffffc0c
 8005ea4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea8:	f7fa fe9c 	bl	8000be4 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e05f      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eba:	4b32      	ldr	r3, [pc, #200]	; (8005f84 <HAL_RCC_OscConfig+0x858>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x77c>
 8005ec6:	e057      	b.n	8005f78 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec8:	4b2e      	ldr	r3, [pc, #184]	; (8005f84 <HAL_RCC_OscConfig+0x858>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a2d      	ldr	r2, [pc, #180]	; (8005f84 <HAL_RCC_OscConfig+0x858>)
 8005ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed4:	f7fa fe86 	bl	8000be4 <HAL_GetTick>
 8005ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fa fe82 	bl	8000be4 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e045      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eee:	4b25      	ldr	r3, [pc, #148]	; (8005f84 <HAL_RCC_OscConfig+0x858>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0x7b0>
 8005efa:	e03d      	b.n	8005f78 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005efc:	4b21      	ldr	r3, [pc, #132]	; (8005f84 <HAL_RCC_OscConfig+0x858>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f02:	4b20      	ldr	r3, [pc, #128]	; (8005f84 <HAL_RCC_OscConfig+0x858>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d031      	beq.n	8005f74 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f003 0203 	and.w	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d12a      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d122      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d11a      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	0a5b      	lsrs	r3, r3, #9
 8005f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d111      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d108      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	0e1b      	lsrs	r3, r3, #24
 8005f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3730      	adds	r7, #48	; 0x30
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	58024400 	.word	0x58024400

08005f88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e19c      	b.n	80062d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f9c:	4b8a      	ldr	r3, [pc, #552]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 030f 	and.w	r3, r3, #15
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d910      	bls.n	8005fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005faa:	4b87      	ldr	r3, [pc, #540]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 020f 	bic.w	r2, r3, #15
 8005fb2:	4985      	ldr	r1, [pc, #532]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fba:	4b83      	ldr	r3, [pc, #524]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e184      	b.n	80062d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d010      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	4b7b      	ldr	r3, [pc, #492]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d908      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fe8:	4b78      	ldr	r3, [pc, #480]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	4975      	ldr	r1, [pc, #468]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d010      	beq.n	8006028 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	4b70      	ldr	r3, [pc, #448]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006012:	429a      	cmp	r2, r3
 8006014:	d908      	bls.n	8006028 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006016:	4b6d      	ldr	r3, [pc, #436]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	496a      	ldr	r1, [pc, #424]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006024:	4313      	orrs	r3, r2
 8006026:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699a      	ldr	r2, [r3, #24]
 8006038:	4b64      	ldr	r3, [pc, #400]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006040:	429a      	cmp	r2, r3
 8006042:	d908      	bls.n	8006056 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006044:	4b61      	ldr	r3, [pc, #388]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	495e      	ldr	r1, [pc, #376]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006052:	4313      	orrs	r3, r2
 8006054:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d010      	beq.n	8006084 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	4b59      	ldr	r3, [pc, #356]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800606e:	429a      	cmp	r2, r3
 8006070:	d908      	bls.n	8006084 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006072:	4b56      	ldr	r3, [pc, #344]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	4953      	ldr	r1, [pc, #332]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006080:	4313      	orrs	r3, r2
 8006082:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d010      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	4b4d      	ldr	r3, [pc, #308]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	429a      	cmp	r2, r3
 800609e:	d908      	bls.n	80060b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a0:	4b4a      	ldr	r3, [pc, #296]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	f023 020f 	bic.w	r2, r3, #15
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4947      	ldr	r1, [pc, #284]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d055      	beq.n	800616a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80060be:	4b43      	ldr	r3, [pc, #268]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	4940      	ldr	r1, [pc, #256]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d107      	bne.n	80060e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060d8:	4b3c      	ldr	r3, [pc, #240]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d121      	bne.n	8006128 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e0f6      	b.n	80062d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d107      	bne.n	8006100 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060f0:	4b36      	ldr	r3, [pc, #216]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d115      	bne.n	8006128 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0ea      	b.n	80062d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d107      	bne.n	8006118 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006108:	4b30      	ldr	r3, [pc, #192]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	d109      	bne.n	8006128 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e0de      	b.n	80062d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006118:	4b2c      	ldr	r3, [pc, #176]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e0d6      	b.n	80062d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006128:	4b28      	ldr	r3, [pc, #160]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f023 0207 	bic.w	r2, r3, #7
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	4925      	ldr	r1, [pc, #148]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006136:	4313      	orrs	r3, r2
 8006138:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613a:	f7fa fd53 	bl	8000be4 <HAL_GetTick>
 800613e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006140:	e00a      	b.n	8006158 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006142:	f7fa fd4f 	bl	8000be4 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006150:	4293      	cmp	r3, r2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e0be      	b.n	80062d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006158:	4b1c      	ldr	r3, [pc, #112]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	429a      	cmp	r2, r3
 8006168:	d1eb      	bne.n	8006142 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d010      	beq.n	8006198 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	429a      	cmp	r2, r3
 8006184:	d208      	bcs.n	8006198 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f023 020f 	bic.w	r2, r3, #15
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	490e      	ldr	r1, [pc, #56]	; (80061cc <HAL_RCC_ClockConfig+0x244>)
 8006194:	4313      	orrs	r3, r2
 8006196:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006198:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d214      	bcs.n	80061d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a6:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 020f 	bic.w	r2, r3, #15
 80061ae:	4906      	ldr	r1, [pc, #24]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b6:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <HAL_RCC_ClockConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d005      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e086      	b.n	80062d6 <HAL_RCC_ClockConfig+0x34e>
 80061c8:	52002000 	.word	0x52002000
 80061cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d010      	beq.n	80061fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	4b3f      	ldr	r3, [pc, #252]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d208      	bcs.n	80061fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061ec:	4b3c      	ldr	r3, [pc, #240]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	4939      	ldr	r1, [pc, #228]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d010      	beq.n	800622c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	4b34      	ldr	r3, [pc, #208]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006216:	429a      	cmp	r2, r3
 8006218:	d208      	bcs.n	800622c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800621a:	4b31      	ldr	r3, [pc, #196]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	492e      	ldr	r1, [pc, #184]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 8006228:	4313      	orrs	r3, r2
 800622a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	d010      	beq.n	800625a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699a      	ldr	r2, [r3, #24]
 800623c:	4b28      	ldr	r3, [pc, #160]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006244:	429a      	cmp	r2, r3
 8006246:	d208      	bcs.n	800625a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	4922      	ldr	r1, [pc, #136]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 8006256:	4313      	orrs	r3, r2
 8006258:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d010      	beq.n	8006288 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69da      	ldr	r2, [r3, #28]
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006272:	429a      	cmp	r2, r3
 8006274:	d208      	bcs.n	8006288 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006276:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	4917      	ldr	r1, [pc, #92]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 8006284:	4313      	orrs	r3, r2
 8006286:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006288:	f000 f834 	bl	80062f4 <HAL_RCC_GetSysClockFreq>
 800628c:	4602      	mov	r2, r0
 800628e:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	4912      	ldr	r1, [pc, #72]	; (80062e4 <HAL_RCC_ClockConfig+0x35c>)
 800629a:	5ccb      	ldrb	r3, [r1, r3]
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	fa22 f303 	lsr.w	r3, r2, r3
 80062a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062a6:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <HAL_RCC_ClockConfig+0x358>)
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	4a0d      	ldr	r2, [pc, #52]	; (80062e4 <HAL_RCC_ClockConfig+0x35c>)
 80062b0:	5cd3      	ldrb	r3, [r2, r3]
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	fa22 f303 	lsr.w	r3, r2, r3
 80062bc:	4a0a      	ldr	r2, [pc, #40]	; (80062e8 <HAL_RCC_ClockConfig+0x360>)
 80062be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062c0:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <HAL_RCC_ClockConfig+0x364>)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80062c6:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <HAL_RCC_ClockConfig+0x368>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fa fc40 	bl	8000b50 <HAL_InitTick>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	58024400 	.word	0x58024400
 80062e4:	0800d6dc 	.word	0x0800d6dc
 80062e8:	24000004 	.word	0x24000004
 80062ec:	24000000 	.word	0x24000000
 80062f0:	24000008 	.word	0x24000008

080062f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b089      	sub	sp, #36	; 0x24
 80062f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062fa:	4bb3      	ldr	r3, [pc, #716]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006302:	2b18      	cmp	r3, #24
 8006304:	f200 8155 	bhi.w	80065b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006308:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <HAL_RCC_GetSysClockFreq+0x1c>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006375 	.word	0x08006375
 8006314:	080065b3 	.word	0x080065b3
 8006318:	080065b3 	.word	0x080065b3
 800631c:	080065b3 	.word	0x080065b3
 8006320:	080065b3 	.word	0x080065b3
 8006324:	080065b3 	.word	0x080065b3
 8006328:	080065b3 	.word	0x080065b3
 800632c:	080065b3 	.word	0x080065b3
 8006330:	0800639b 	.word	0x0800639b
 8006334:	080065b3 	.word	0x080065b3
 8006338:	080065b3 	.word	0x080065b3
 800633c:	080065b3 	.word	0x080065b3
 8006340:	080065b3 	.word	0x080065b3
 8006344:	080065b3 	.word	0x080065b3
 8006348:	080065b3 	.word	0x080065b3
 800634c:	080065b3 	.word	0x080065b3
 8006350:	080063a1 	.word	0x080063a1
 8006354:	080065b3 	.word	0x080065b3
 8006358:	080065b3 	.word	0x080065b3
 800635c:	080065b3 	.word	0x080065b3
 8006360:	080065b3 	.word	0x080065b3
 8006364:	080065b3 	.word	0x080065b3
 8006368:	080065b3 	.word	0x080065b3
 800636c:	080065b3 	.word	0x080065b3
 8006370:	080063a7 	.word	0x080063a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006374:	4b94      	ldr	r3, [pc, #592]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006380:	4b91      	ldr	r3, [pc, #580]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	08db      	lsrs	r3, r3, #3
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	4a90      	ldr	r2, [pc, #576]	; (80065cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
 8006390:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006392:	e111      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006394:	4b8d      	ldr	r3, [pc, #564]	; (80065cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006396:	61bb      	str	r3, [r7, #24]
    break;
 8006398:	e10e      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800639a:	4b8d      	ldr	r3, [pc, #564]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800639c:	61bb      	str	r3, [r7, #24]
    break;
 800639e:	e10b      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80063a0:	4b8c      	ldr	r3, [pc, #560]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063a2:	61bb      	str	r3, [r7, #24]
    break;
 80063a4:	e108      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063a6:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063b0:	4b85      	ldr	r3, [pc, #532]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063bc:	4b82      	ldr	r3, [pc, #520]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063c6:	4b80      	ldr	r3, [pc, #512]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	08db      	lsrs	r3, r3, #3
 80063cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80e1 	beq.w	80065ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	f000 8083 	beq.w	80064f8 <HAL_RCC_GetSysClockFreq+0x204>
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	f200 80a1 	bhi.w	800653c <HAL_RCC_GetSysClockFreq+0x248>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_RCC_GetSysClockFreq+0x114>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d056      	beq.n	80064b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006406:	e099      	b.n	800653c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006408:	4b6f      	ldr	r3, [pc, #444]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d02d      	beq.n	8006470 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006414:	4b6c      	ldr	r3, [pc, #432]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	08db      	lsrs	r3, r3, #3
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	4a6b      	ldr	r2, [pc, #428]	; (80065cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006420:	fa22 f303 	lsr.w	r3, r2, r3
 8006424:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	ee07 3a90 	vmov	s15, r3
 800642c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643e:	4b62      	ldr	r3, [pc, #392]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006452:	eddf 5a61 	vldr	s11, [pc, #388]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800646e:	e087      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80065dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800647e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006482:	4b51      	ldr	r3, [pc, #324]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006492:	ed97 6a02 	vldr	s12, [r7, #8]
 8006496:	eddf 5a50 	vldr	s11, [pc, #320]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800649a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064b2:	e065      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80064c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c6:	4b40      	ldr	r3, [pc, #256]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064f6:	e043      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eddf 6a38 	vldr	s13, [pc, #224]	; 80065e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650a:	4b2f      	ldr	r3, [pc, #188]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651a:	ed97 6a02 	vldr	s12, [r7, #8]
 800651e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800652e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800653a:	e021      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	eddf 6a26 	vldr	s13, [pc, #152]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800654a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654e:	4b1e      	ldr	r3, [pc, #120]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006562:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800657e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006580:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	0a5b      	lsrs	r3, r3, #9
 8006586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658a:	3301      	adds	r3, #1
 800658c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	ee07 3a90 	vmov	s15, r3
 8006594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006598:	edd7 6a07 	vldr	s13, [r7, #28]
 800659c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a4:	ee17 3a90 	vmov	r3, s15
 80065a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80065aa:	e005      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	61bb      	str	r3, [r7, #24]
    break;
 80065b0:	e002      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80065b2:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065b4:	61bb      	str	r3, [r7, #24]
    break;
 80065b6:	bf00      	nop
  }

  return sysclockfreq;
 80065b8:	69bb      	ldr	r3, [r7, #24]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3724      	adds	r7, #36	; 0x24
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	58024400 	.word	0x58024400
 80065cc:	03d09000 	.word	0x03d09000
 80065d0:	003d0900 	.word	0x003d0900
 80065d4:	017d7840 	.word	0x017d7840
 80065d8:	46000000 	.word	0x46000000
 80065dc:	4c742400 	.word	0x4c742400
 80065e0:	4a742400 	.word	0x4a742400
 80065e4:	4bbebc20 	.word	0x4bbebc20

080065e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80065ee:	f7ff fe81 	bl	80062f4 <HAL_RCC_GetSysClockFreq>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4b10      	ldr	r3, [pc, #64]	; (8006638 <HAL_RCC_GetHCLKFreq+0x50>)
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	0a1b      	lsrs	r3, r3, #8
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	490f      	ldr	r1, [pc, #60]	; (800663c <HAL_RCC_GetHCLKFreq+0x54>)
 8006600:	5ccb      	ldrb	r3, [r1, r3]
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <HAL_RCC_GetHCLKFreq+0x50>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	4a09      	ldr	r2, [pc, #36]	; (800663c <HAL_RCC_GetHCLKFreq+0x54>)
 8006616:	5cd3      	ldrb	r3, [r2, r3]
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	fa22 f303 	lsr.w	r3, r2, r3
 8006622:	4a07      	ldr	r2, [pc, #28]	; (8006640 <HAL_RCC_GetHCLKFreq+0x58>)
 8006624:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006626:	4a07      	ldr	r2, [pc, #28]	; (8006644 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800662c:	4b04      	ldr	r3, [pc, #16]	; (8006640 <HAL_RCC_GetHCLKFreq+0x58>)
 800662e:	681b      	ldr	r3, [r3, #0]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	58024400 	.word	0x58024400
 800663c:	0800d6dc 	.word	0x0800d6dc
 8006640:	24000004 	.word	0x24000004
 8006644:	24000000 	.word	0x24000000

08006648 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006650:	2300      	movs	r3, #0
 8006652:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006654:	2300      	movs	r3, #0
 8006656:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d03f      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006668:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800666c:	d02a      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800666e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006672:	d824      	bhi.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006678:	d018      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800667a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800667e:	d81e      	bhi.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006688:	d007      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800668a:	e018      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800668c:	4ba3      	ldr	r3, [pc, #652]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4aa2      	ldr	r2, [pc, #648]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006698:	e015      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3304      	adds	r3, #4
 800669e:	2102      	movs	r1, #2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 fff9 	bl	8008698 <RCCEx_PLL2_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066aa:	e00c      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3324      	adds	r3, #36	; 0x24
 80066b0:	2102      	movs	r1, #2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f002 f8a2 	bl	80087fc <RCCEx_PLL3_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066bc:	e003      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
      break;
 80066c2:	e000      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80066c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80066cc:	4b93      	ldr	r3, [pc, #588]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80066ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d8:	4990      	ldr	r1, [pc, #576]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	650b      	str	r3, [r1, #80]	; 0x50
 80066de:	e001      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d03d      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d826      	bhi.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80066f8:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	08006715 	.word	0x08006715
 8006704:	08006723 	.word	0x08006723
 8006708:	08006735 	.word	0x08006735
 800670c:	0800674d 	.word	0x0800674d
 8006710:	0800674d 	.word	0x0800674d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4b81      	ldr	r3, [pc, #516]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a80      	ldr	r2, [pc, #512]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006720:	e015      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3304      	adds	r3, #4
 8006726:	2100      	movs	r1, #0
 8006728:	4618      	mov	r0, r3
 800672a:	f001 ffb5 	bl	8008698 <RCCEx_PLL2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006732:	e00c      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3324      	adds	r3, #36	; 0x24
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f002 f85e 	bl	80087fc <RCCEx_PLL3_Config>
 8006740:	4603      	mov	r3, r0
 8006742:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006744:	e003      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	75fb      	strb	r3, [r7, #23]
      break;
 800674a:	e000      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800674c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800674e:	7dfb      	ldrb	r3, [r7, #23]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d109      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006754:	4b71      	ldr	r3, [pc, #452]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006758:	f023 0207 	bic.w	r2, r3, #7
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006760:	496e      	ldr	r1, [pc, #440]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006762:	4313      	orrs	r3, r2
 8006764:	650b      	str	r3, [r1, #80]	; 0x50
 8006766:	e001      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006774:	2b00      	cmp	r3, #0
 8006776:	d042      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006780:	d02b      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006786:	d825      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006788:	2bc0      	cmp	r3, #192	; 0xc0
 800678a:	d028      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800678c:	2bc0      	cmp	r3, #192	; 0xc0
 800678e:	d821      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006790:	2b80      	cmp	r3, #128	; 0x80
 8006792:	d016      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006794:	2b80      	cmp	r3, #128	; 0x80
 8006796:	d81d      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d007      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80067a0:	e018      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a2:	4b5e      	ldr	r3, [pc, #376]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	4a5d      	ldr	r2, [pc, #372]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80067ae:	e017      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3304      	adds	r3, #4
 80067b4:	2100      	movs	r1, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 ff6e 	bl	8008698 <RCCEx_PLL2_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80067c0:	e00e      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3324      	adds	r3, #36	; 0x24
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f002 f817 	bl	80087fc <RCCEx_PLL3_Config>
 80067ce:	4603      	mov	r3, r0
 80067d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80067d2:	e005      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	75fb      	strb	r3, [r7, #23]
      break;
 80067d8:	e002      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80067da:	bf00      	nop
 80067dc:	e000      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80067de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80067e6:	4b4d      	ldr	r3, [pc, #308]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	494a      	ldr	r1, [pc, #296]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	650b      	str	r3, [r1, #80]	; 0x50
 80067f8:	e001      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006806:	2b00      	cmp	r3, #0
 8006808:	d049      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006810:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006814:	d030      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800681a:	d82a      	bhi.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800681c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006820:	d02c      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006822:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006826:	d824      	bhi.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800682c:	d018      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800682e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006832:	d81e      	bhi.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800683c:	d007      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800683e:	e018      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006840:	4b36      	ldr	r3, [pc, #216]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	4a35      	ldr	r2, [pc, #212]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800684a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800684c:	e017      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3304      	adds	r3, #4
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f001 ff1f 	bl	8008698 <RCCEx_PLL2_Config>
 800685a:	4603      	mov	r3, r0
 800685c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800685e:	e00e      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3324      	adds	r3, #36	; 0x24
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f001 ffc8 	bl	80087fc <RCCEx_PLL3_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006870:	e005      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
      break;
 8006876:	e002      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006878:	bf00      	nop
 800687a:	e000      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800687c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10a      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006884:	4b25      	ldr	r3, [pc, #148]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006888:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006892:	4922      	ldr	r1, [pc, #136]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006894:	4313      	orrs	r3, r2
 8006896:	658b      	str	r3, [r1, #88]	; 0x58
 8006898:	e001      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d04b      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068b4:	d030      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80068b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ba:	d82a      	bhi.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80068bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068c0:	d02e      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80068c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068c6:	d824      	bhi.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80068c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068cc:	d018      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80068ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d2:	d81e      	bhi.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80068d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068dc:	d007      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80068de:	e018      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e0:	4b0e      	ldr	r3, [pc, #56]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a0d      	ldr	r2, [pc, #52]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068ec:	e019      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3304      	adds	r3, #4
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 fecf 	bl	8008698 <RCCEx_PLL2_Config>
 80068fa:	4603      	mov	r3, r0
 80068fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80068fe:	e010      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3324      	adds	r3, #36	; 0x24
 8006904:	2100      	movs	r1, #0
 8006906:	4618      	mov	r0, r3
 8006908:	f001 ff78 	bl	80087fc <RCCEx_PLL3_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006910:	e007      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	75fb      	strb	r3, [r7, #23]
      break;
 8006916:	e004      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006918:	bf00      	nop
 800691a:	e002      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800691c:	58024400 	.word	0x58024400
      break;
 8006920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006928:	4b99      	ldr	r3, [pc, #612]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800692a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006936:	4996      	ldr	r1, [pc, #600]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006938:	4313      	orrs	r3, r2
 800693a:	658b      	str	r3, [r1, #88]	; 0x58
 800693c:	e001      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
 8006940:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d032      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006952:	2b30      	cmp	r3, #48	; 0x30
 8006954:	d01c      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006956:	2b30      	cmp	r3, #48	; 0x30
 8006958:	d817      	bhi.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800695a:	2b20      	cmp	r3, #32
 800695c:	d00c      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800695e:	2b20      	cmp	r3, #32
 8006960:	d813      	bhi.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006966:	2b10      	cmp	r3, #16
 8006968:	d10f      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800696a:	4b89      	ldr	r3, [pc, #548]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	4a88      	ldr	r2, [pc, #544]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006974:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006976:	e00e      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	2102      	movs	r1, #2
 800697e:	4618      	mov	r0, r3
 8006980:	f001 fe8a 	bl	8008698 <RCCEx_PLL2_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006988:	e005      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	75fb      	strb	r3, [r7, #23]
      break;
 800698e:	e002      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006990:	bf00      	nop
 8006992:	e000      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800699c:	4b7c      	ldr	r3, [pc, #496]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800699e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a8:	4979      	ldr	r1, [pc, #484]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069ae:	e001      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d047      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069c8:	d030      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80069ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ce:	d82a      	bhi.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80069d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069d4:	d02c      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80069d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069da:	d824      	bhi.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80069dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e0:	d018      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80069e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e6:	d81e      	bhi.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80069ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f0:	d007      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80069f2:	e018      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f4:	4b66      	ldr	r3, [pc, #408]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	4a65      	ldr	r2, [pc, #404]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a00:	e017      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3304      	adds	r3, #4
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fe45 	bl	8008698 <RCCEx_PLL2_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a12:	e00e      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3324      	adds	r3, #36	; 0x24
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 feee 	bl	80087fc <RCCEx_PLL3_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a24:	e005      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2a:	e002      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a38:	4b55      	ldr	r3, [pc, #340]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	4952      	ldr	r1, [pc, #328]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	650b      	str	r3, [r1, #80]	; 0x50
 8006a4a:	e001      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d049      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a64:	d02e      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006a66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a6a:	d828      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a70:	d02a      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a76:	d822      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006a78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a7c:	d026      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006a7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a82:	d81c      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a88:	d010      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a8e:	d816      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01d      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a98:	d111      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 fdf9 	bl	8008698 <RCCEx_PLL2_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006aaa:	e012      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3324      	adds	r3, #36	; 0x24
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 fea2 	bl	80087fc <RCCEx_PLL3_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006abc:	e009      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac2:	e006      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006ac4:	bf00      	nop
 8006ac6:	e004      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ad8:	4b2d      	ldr	r3, [pc, #180]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006adc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae4:	492a      	ldr	r1, [pc, #168]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	650b      	str	r3, [r1, #80]	; 0x50
 8006aea:	e001      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d04d      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b06:	d02e      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b0c:	d828      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b12:	d02a      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b18:	d822      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b1e:	d026      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006b20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b24:	d81c      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b2a:	d010      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b30:	d816      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01d      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b3a:	d111      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	2101      	movs	r1, #1
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 fda8 	bl	8008698 <RCCEx_PLL2_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b4c:	e012      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3324      	adds	r3, #36	; 0x24
 8006b52:	2101      	movs	r1, #1
 8006b54:	4618      	mov	r0, r3
 8006b56:	f001 fe51 	bl	80087fc <RCCEx_PLL3_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b5e:	e009      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	75fb      	strb	r3, [r7, #23]
      break;
 8006b64:	e006      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006b66:	bf00      	nop
 8006b68:	e004      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006b6a:	bf00      	nop
 8006b6c:	e002      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006b6e:	bf00      	nop
 8006b70:	e000      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b7a:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b88:	4901      	ldr	r1, [pc, #4]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	658b      	str	r3, [r1, #88]	; 0x58
 8006b8e:	e003      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d02f      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bac:	d00e      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb2:	d814      	bhi.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d015      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bbc:	d10f      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bbe:	4baf      	ldr	r3, [pc, #700]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	4aae      	ldr	r2, [pc, #696]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006bca:	e00c      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 fd60 	bl	8008698 <RCCEx_PLL2_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006bdc:	e003      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	75fb      	strb	r3, [r7, #23]
      break;
 8006be2:	e000      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bec:	4ba3      	ldr	r3, [pc, #652]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bf8:	49a0      	ldr	r1, [pc, #640]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	650b      	str	r3, [r1, #80]	; 0x50
 8006bfe:	e001      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
 8006c02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d032      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d81b      	bhi.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c57 	.word	0x08006c57
 8006c24:	08006c31 	.word	0x08006c31
 8006c28:	08006c3f 	.word	0x08006c3f
 8006c2c:	08006c57 	.word	0x08006c57
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c30:	4b92      	ldr	r3, [pc, #584]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	4a91      	ldr	r2, [pc, #580]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c3c:	e00c      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3304      	adds	r3, #4
 8006c42:	2102      	movs	r1, #2
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 fd27 	bl	8008698 <RCCEx_PLL2_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c4e:	e003      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]
      break;
 8006c54:	e000      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c5e:	4b87      	ldr	r3, [pc, #540]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	f023 0203 	bic.w	r2, r3, #3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6a:	4984      	ldr	r1, [pc, #528]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c70:	e001      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 8086 	beq.w	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c84:	4b7e      	ldr	r3, [pc, #504]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a7d      	ldr	r2, [pc, #500]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c90:	f7f9 ffa8 	bl	8000be4 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c96:	e009      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c98:	f7f9 ffa4 	bl	8000be4 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b64      	cmp	r3, #100	; 0x64
 8006ca4:	d902      	bls.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	75fb      	strb	r3, [r7, #23]
        break;
 8006caa:	e005      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cac:	4b74      	ldr	r3, [pc, #464]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0ef      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d166      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006cbe:	4b6f      	ldr	r3, [pc, #444]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cc8:	4053      	eors	r3, r2
 8006cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d013      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cd2:	4b6a      	ldr	r3, [pc, #424]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cda:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cdc:	4b67      	ldr	r3, [pc, #412]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce0:	4a66      	ldr	r2, [pc, #408]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ce8:	4b64      	ldr	r3, [pc, #400]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cec:	4a63      	ldr	r2, [pc, #396]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006cf4:	4a61      	ldr	r2, [pc, #388]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d04:	d115      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d06:	f7f9 ff6d 	bl	8000be4 <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d0c:	e00b      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d0e:	f7f9 ff69 	bl	8000be4 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d902      	bls.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	75fb      	strb	r3, [r7, #23]
            break;
 8006d24:	e005      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d26:	4b55      	ldr	r3, [pc, #340]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0ed      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d126      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d46:	d10d      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006d48:	4b4c      	ldr	r3, [pc, #304]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d56:	0919      	lsrs	r1, r3, #4
 8006d58:	4b4a      	ldr	r3, [pc, #296]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006d5a:	400b      	ands	r3, r1
 8006d5c:	4947      	ldr	r1, [pc, #284]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	610b      	str	r3, [r1, #16]
 8006d62:	e005      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006d64:	4b45      	ldr	r3, [pc, #276]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	4a44      	ldr	r2, [pc, #272]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d6e:	6113      	str	r3, [r2, #16]
 8006d70:	4b42      	ldr	r3, [pc, #264]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d7e:	493f      	ldr	r1, [pc, #252]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	670b      	str	r3, [r1, #112]	; 0x70
 8006d84:	e004      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	75bb      	strb	r3, [r7, #22]
 8006d8a:	e001      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8085 	beq.w	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006da2:	2b28      	cmp	r3, #40	; 0x28
 8006da4:	d866      	bhi.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006e89 	.word	0x08006e89
 8006db0:	08006e75 	.word	0x08006e75
 8006db4:	08006e75 	.word	0x08006e75
 8006db8:	08006e75 	.word	0x08006e75
 8006dbc:	08006e75 	.word	0x08006e75
 8006dc0:	08006e75 	.word	0x08006e75
 8006dc4:	08006e75 	.word	0x08006e75
 8006dc8:	08006e75 	.word	0x08006e75
 8006dcc:	08006e51 	.word	0x08006e51
 8006dd0:	08006e75 	.word	0x08006e75
 8006dd4:	08006e75 	.word	0x08006e75
 8006dd8:	08006e75 	.word	0x08006e75
 8006ddc:	08006e75 	.word	0x08006e75
 8006de0:	08006e75 	.word	0x08006e75
 8006de4:	08006e75 	.word	0x08006e75
 8006de8:	08006e75 	.word	0x08006e75
 8006dec:	08006e63 	.word	0x08006e63
 8006df0:	08006e75 	.word	0x08006e75
 8006df4:	08006e75 	.word	0x08006e75
 8006df8:	08006e75 	.word	0x08006e75
 8006dfc:	08006e75 	.word	0x08006e75
 8006e00:	08006e75 	.word	0x08006e75
 8006e04:	08006e75 	.word	0x08006e75
 8006e08:	08006e75 	.word	0x08006e75
 8006e0c:	08006e89 	.word	0x08006e89
 8006e10:	08006e75 	.word	0x08006e75
 8006e14:	08006e75 	.word	0x08006e75
 8006e18:	08006e75 	.word	0x08006e75
 8006e1c:	08006e75 	.word	0x08006e75
 8006e20:	08006e75 	.word	0x08006e75
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	08006e75 	.word	0x08006e75
 8006e2c:	08006e89 	.word	0x08006e89
 8006e30:	08006e75 	.word	0x08006e75
 8006e34:	08006e75 	.word	0x08006e75
 8006e38:	08006e75 	.word	0x08006e75
 8006e3c:	08006e75 	.word	0x08006e75
 8006e40:	08006e75 	.word	0x08006e75
 8006e44:	08006e75 	.word	0x08006e75
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	08006e89 	.word	0x08006e89
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3304      	adds	r3, #4
 8006e54:	2101      	movs	r1, #1
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 fc1e 	bl	8008698 <RCCEx_PLL2_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e60:	e013      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3324      	adds	r3, #36	; 0x24
 8006e66:	2101      	movs	r1, #1
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 fcc7 	bl	80087fc <RCCEx_PLL3_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e72:	e00a      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	75fb      	strb	r3, [r7, #23]
      break;
 8006e78:	e007      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006e7a:	bf00      	nop
 8006e7c:	58024400 	.word	0x58024400
 8006e80:	58024800 	.word	0x58024800
 8006e84:	00ffffcf 	.word	0x00ffffcf
      break;
 8006e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d109      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e90:	4b96      	ldr	r3, [pc, #600]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e94:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e9c:	4993      	ldr	r1, [pc, #588]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	654b      	str	r3, [r1, #84]	; 0x54
 8006ea2:	e001      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d038      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	d821      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006f07 	.word	0x08006f07
 8006ec8:	08006edd 	.word	0x08006edd
 8006ecc:	08006eef 	.word	0x08006eef
 8006ed0:	08006f07 	.word	0x08006f07
 8006ed4:	08006f07 	.word	0x08006f07
 8006ed8:	08006f07 	.word	0x08006f07
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f001 fbd8 	bl	8008698 <RCCEx_PLL2_Config>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006eec:	e00c      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3324      	adds	r3, #36	; 0x24
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 fc81 	bl	80087fc <RCCEx_PLL3_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006efe:	e003      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	75fb      	strb	r3, [r7, #23]
      break;
 8006f04:	e000      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f0e:	4b77      	ldr	r3, [pc, #476]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f12:	f023 0207 	bic.w	r2, r3, #7
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1a:	4974      	ldr	r1, [pc, #464]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f20:	e001      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d03a      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f38:	2b05      	cmp	r3, #5
 8006f3a:	d821      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006f3c:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f87 	.word	0x08006f87
 8006f48:	08006f5d 	.word	0x08006f5d
 8006f4c:	08006f6f 	.word	0x08006f6f
 8006f50:	08006f87 	.word	0x08006f87
 8006f54:	08006f87 	.word	0x08006f87
 8006f58:	08006f87 	.word	0x08006f87
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	2101      	movs	r1, #1
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 fb98 	bl	8008698 <RCCEx_PLL2_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f6c:	e00c      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3324      	adds	r3, #36	; 0x24
 8006f72:	2101      	movs	r1, #1
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fc41 	bl	80087fc <RCCEx_PLL3_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f7e:	e003      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
      break;
 8006f84:	e000      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f8e:	4b57      	ldr	r3, [pc, #348]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f92:	f023 0207 	bic.w	r2, r3, #7
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9c:	4953      	ldr	r1, [pc, #332]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	658b      	str	r3, [r1, #88]	; 0x58
 8006fa2:	e001      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d04b      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fbe:	d02e      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fc4:	d828      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fca:	d02a      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd0:	d822      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006fd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fd6:	d026      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006fd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fdc:	d81c      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fe2:	d010      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fe8:	d816      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d01d      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ff2:	d111      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 fb4c 	bl	8008698 <RCCEx_PLL2_Config>
 8007000:	4603      	mov	r3, r0
 8007002:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007004:	e012      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3324      	adds	r3, #36	; 0x24
 800700a:	2102      	movs	r1, #2
 800700c:	4618      	mov	r0, r3
 800700e:	f001 fbf5 	bl	80087fc <RCCEx_PLL3_Config>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007016:	e009      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	75fb      	strb	r3, [r7, #23]
      break;
 800701c:	e006      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800701e:	bf00      	nop
 8007020:	e004      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007022:	bf00      	nop
 8007024:	e002      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007026:	bf00      	nop
 8007028:	e000      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800702a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007032:	4b2e      	ldr	r3, [pc, #184]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007040:	492a      	ldr	r1, [pc, #168]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007042:	4313      	orrs	r3, r2
 8007044:	654b      	str	r3, [r1, #84]	; 0x54
 8007046:	e001      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d04d      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800705e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007062:	d02e      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007064:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007068:	d828      	bhi.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800706a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800706e:	d02a      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007074:	d822      	bhi.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007076:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800707a:	d026      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800707c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007080:	d81c      	bhi.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007086:	d010      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708c:	d816      	bhi.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d01d      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007096:	d111      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f001 fafa 	bl	8008698 <RCCEx_PLL2_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070a8:	e012      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3324      	adds	r3, #36	; 0x24
 80070ae:	2102      	movs	r1, #2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f001 fba3 	bl	80087fc <RCCEx_PLL3_Config>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070ba:	e009      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	75fb      	strb	r3, [r7, #23]
      break;
 80070c0:	e006      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80070c2:	bf00      	nop
 80070c4:	e004      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80070c6:	bf00      	nop
 80070c8:	e002      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80070ca:	bf00      	nop
 80070cc:	e000      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80070ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10c      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070d6:	4b05      	ldr	r3, [pc, #20]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070e4:	4901      	ldr	r1, [pc, #4]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	658b      	str	r3, [r1, #88]	; 0x58
 80070ea:	e003      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80070ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d04b      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007106:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800710a:	d02e      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800710c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007110:	d828      	bhi.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007116:	d02a      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800711c:	d822      	bhi.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800711e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007122:	d026      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007124:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007128:	d81c      	bhi.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800712a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800712e:	d010      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007134:	d816      	bhi.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d01d      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800713a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713e:	d111      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	2100      	movs	r1, #0
 8007146:	4618      	mov	r0, r3
 8007148:	f001 faa6 	bl	8008698 <RCCEx_PLL2_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007150:	e012      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3324      	adds	r3, #36	; 0x24
 8007156:	2102      	movs	r1, #2
 8007158:	4618      	mov	r0, r3
 800715a:	f001 fb4f 	bl	80087fc <RCCEx_PLL3_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007162:	e009      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	75fb      	strb	r3, [r7, #23]
      break;
 8007168:	e006      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800716a:	bf00      	nop
 800716c:	e004      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800717e:	4b9d      	ldr	r3, [pc, #628]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800718c:	4999      	ldr	r1, [pc, #612]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800718e:	4313      	orrs	r3, r2
 8007190:	658b      	str	r3, [r1, #88]	; 0x58
 8007192:	e001      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01a      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ae:	d10a      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	2102      	movs	r1, #2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fb20 	bl	80087fc <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80071c6:	4b8b      	ldr	r3, [pc, #556]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d4:	4987      	ldr	r1, [pc, #540]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d01a      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f0:	d10a      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3324      	adds	r3, #36	; 0x24
 80071f6:	2102      	movs	r1, #2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 faff 	bl	80087fc <RCCEx_PLL3_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007208:	4b7a      	ldr	r3, [pc, #488]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800720a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007216:	4977      	ldr	r1, [pc, #476]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007218:	4313      	orrs	r3, r2
 800721a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d034      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800722e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007232:	d01d      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007238:	d817      	bhi.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800723e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007242:	d009      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007244:	e011      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	2100      	movs	r1, #0
 800724c:	4618      	mov	r0, r3
 800724e:	f001 fa23 	bl	8008698 <RCCEx_PLL2_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007256:	e00c      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3324      	adds	r3, #36	; 0x24
 800725c:	2102      	movs	r1, #2
 800725e:	4618      	mov	r0, r3
 8007260:	f001 facc 	bl	80087fc <RCCEx_PLL3_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007268:	e003      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]
      break;
 800726e:	e000      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007278:	4b5e      	ldr	r3, [pc, #376]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800727a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007286:	495b      	ldr	r1, [pc, #364]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007288:	4313      	orrs	r3, r2
 800728a:	658b      	str	r3, [r1, #88]	; 0x58
 800728c:	e001      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d033      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072a8:	d01c      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80072aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072ae:	d816      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80072b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072b4:	d003      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80072b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ba:	d007      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80072bc:	e00f      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072be:	4b4d      	ldr	r3, [pc, #308]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	4a4c      	ldr	r2, [pc, #304]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80072ca:	e00c      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3324      	adds	r3, #36	; 0x24
 80072d0:	2101      	movs	r1, #1
 80072d2:	4618      	mov	r0, r3
 80072d4:	f001 fa92 	bl	80087fc <RCCEx_PLL3_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80072dc:	e003      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	75fb      	strb	r3, [r7, #23]
      break;
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80072e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072ec:	4b41      	ldr	r3, [pc, #260]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fa:	493e      	ldr	r1, [pc, #248]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	654b      	str	r3, [r1, #84]	; 0x54
 8007300:	e001      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d029      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800731a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731e:	d007      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007320:	e00f      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007322:	4b34      	ldr	r3, [pc, #208]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	4a33      	ldr	r2, [pc, #204]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800732c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800732e:	e00b      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	2102      	movs	r1, #2
 8007336:	4618      	mov	r0, r3
 8007338:	f001 f9ae 	bl	8008698 <RCCEx_PLL2_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007340:	e002      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]
      break;
 8007346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800734e:	4b29      	ldr	r3, [pc, #164]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007352:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735a:	4926      	ldr	r1, [pc, #152]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800735c:	4313      	orrs	r3, r2
 800735e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007360:	e001      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3324      	adds	r3, #36	; 0x24
 8007376:	2102      	movs	r1, #2
 8007378:	4618      	mov	r0, r3
 800737a:	f001 fa3f 	bl	80087fc <RCCEx_PLL3_Config>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d033      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800739c:	d017      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800739e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073a2:	d811      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80073a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a8:	d013      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80073aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ae:	d80b      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d010      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80073b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b8:	d106      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ba:	4b0e      	ldr	r3, [pc, #56]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	4a0d      	ldr	r2, [pc, #52]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80073c6:	e007      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	75fb      	strb	r3, [r7, #23]
      break;
 80073cc:	e004      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80073ce:	bf00      	nop
 80073d0:	e002      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80073d2:	bf00      	nop
 80073d4:	e000      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80073d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10c      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073de:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ea:	4902      	ldr	r1, [pc, #8]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	654b      	str	r3, [r1, #84]	; 0x54
 80073f0:	e004      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80073f2:	bf00      	nop
 80073f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d008      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007408:	4b31      	ldr	r3, [pc, #196]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800740a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007414:	492e      	ldr	r1, [pc, #184]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007416:	4313      	orrs	r3, r2
 8007418:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d009      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007426:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007434:	4926      	ldr	r1, [pc, #152]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007436:	4313      	orrs	r3, r2
 8007438:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d008      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007446:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007452:	491f      	ldr	r1, [pc, #124]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007454:	4313      	orrs	r3, r2
 8007456:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00d      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007464:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800746a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800746e:	6113      	str	r3, [r2, #16]
 8007470:	4b17      	ldr	r3, [pc, #92]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800747a:	4915      	ldr	r1, [pc, #84]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800747c:	4313      	orrs	r3, r2
 800747e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	da08      	bge.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007488:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800748a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007494:	490e      	ldr	r1, [pc, #56]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007496:	4313      	orrs	r3, r2
 8007498:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074a6:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b4:	4906      	ldr	r1, [pc, #24]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80074ba:	7dbb      	ldrb	r3, [r7, #22]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	e000      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	58024400 	.word	0x58024400

080074d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b090      	sub	sp, #64	; 0x40
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e2:	f040 8095 	bne.w	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80074e6:	4b97      	ldr	r3, [pc, #604]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	f200 8088 	bhi.w	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80074f8:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	08007515 	.word	0x08007515
 8007504:	0800753d 	.word	0x0800753d
 8007508:	08007565 	.word	0x08007565
 800750c:	08007601 	.word	0x08007601
 8007510:	0800758d 	.word	0x0800758d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007514:	4b8b      	ldr	r3, [pc, #556]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007520:	d108      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007526:	4618      	mov	r0, r3
 8007528:	f000 ff64 	bl	80083f4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007530:	f000 bc94 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007538:	f000 bc90 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800753c:	4b81      	ldr	r3, [pc, #516]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007548:	d108      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800754a:	f107 0318 	add.w	r3, r7, #24
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fca8 	bl	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007558:	f000 bc80 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007560:	f000 bc7c 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007564:	4b77      	ldr	r3, [pc, #476]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800756c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007570:	d108      	bne.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007572:	f107 030c 	add.w	r3, r7, #12
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fde8 	bl	800814c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007580:	f000 bc6c 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007588:	f000 bc68 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800758c:	4b6d      	ldr	r3, [pc, #436]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800758e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007590:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007594:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007596:	4b6b      	ldr	r3, [pc, #428]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d10c      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80075a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d109      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075a8:	4b66      	ldr	r3, [pc, #408]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	08db      	lsrs	r3, r3, #3
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	4a65      	ldr	r2, [pc, #404]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80075b4:	fa22 f303 	lsr.w	r3, r2, r3
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ba:	e01f      	b.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075bc:	4b61      	ldr	r3, [pc, #388]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c8:	d106      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80075ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075d0:	d102      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80075d2:	4b5e      	ldr	r3, [pc, #376]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80075d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075d6:	e011      	b.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075d8:	4b5a      	ldr	r3, [pc, #360]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075e4:	d106      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80075e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ec:	d102      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80075ee:	4b58      	ldr	r3, [pc, #352]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075f2:	e003      	b.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80075f8:	f000 bc30 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80075fc:	f000 bc2e 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007600:	4b54      	ldr	r3, [pc, #336]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007604:	f000 bc2a 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800760c:	f000 bc26 	b.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007616:	f040 809f 	bne.w	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800761a:	4b4a      	ldr	r3, [pc, #296]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007622:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762a:	d04d      	beq.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007632:	f200 8084 	bhi.w	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	2bc0      	cmp	r3, #192	; 0xc0
 800763a:	d07d      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	2bc0      	cmp	r3, #192	; 0xc0
 8007640:	d87d      	bhi.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	2b80      	cmp	r3, #128	; 0x80
 8007646:	d02d      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	2b80      	cmp	r3, #128	; 0x80
 800764c:	d877      	bhi.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	2b40      	cmp	r3, #64	; 0x40
 8007658:	d012      	beq.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800765a:	e070      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800765c:	4b39      	ldr	r3, [pc, #228]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007668:	d107      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800766a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fec0 	bl	80083f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007678:	e3f0      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800767e:	e3ed      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007680:	4b30      	ldr	r3, [pc, #192]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800768c:	d107      	bne.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800768e:	f107 0318 	add.w	r3, r7, #24
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fc06 	bl	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800769c:	e3de      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076a2:	e3db      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076a4:	4b27      	ldr	r3, [pc, #156]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b0:	d107      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076b2:	f107 030c 	add.w	r3, r7, #12
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fd48 	bl	800814c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076c0:	e3cc      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c6:	e3c9      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80076c8:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076d2:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d10c      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80076de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d109      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	08db      	lsrs	r3, r3, #3
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	4a16      	ldr	r2, [pc, #88]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
 80076f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f6:	e01e      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076f8:	4b12      	ldr	r3, [pc, #72]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007704:	d106      	bne.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800770c:	d102      	bne.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007712:	e010      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007714:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007720:	d106      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007728:	d102      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800772a:	4b09      	ldr	r3, [pc, #36]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800772c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800772e:	e002      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007734:	e392      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007736:	e391      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007738:	4b06      	ldr	r3, [pc, #24]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800773c:	e38e      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007742:	e38b      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007744:	58024400 	.word	0x58024400
 8007748:	03d09000 	.word	0x03d09000
 800774c:	003d0900 	.word	0x003d0900
 8007750:	017d7840 	.word	0x017d7840
 8007754:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800775e:	f040 809c 	bne.w	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007762:	4b9d      	ldr	r3, [pc, #628]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800776a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007772:	d054      	beq.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800777a:	f200 808b 	bhi.w	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007784:	f000 8083 	beq.w	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800778e:	f200 8081 	bhi.w	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007798:	d02f      	beq.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077a0:	d878      	bhi.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ae:	d012      	beq.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80077b0:	e070      	b.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077b2:	4b89      	ldr	r3, [pc, #548]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077be:	d107      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fe15 	bl	80083f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077ce:	e345      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077d4:	e342      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077d6:	4b80      	ldr	r3, [pc, #512]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077e2:	d107      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077e4:	f107 0318 	add.w	r3, r7, #24
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fb5b 	bl	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077f2:	e333      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077f8:	e330      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077fa:	4b77      	ldr	r3, [pc, #476]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007806:	d107      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007808:	f107 030c 	add.w	r3, r7, #12
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fc9d 	bl	800814c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007816:	e321      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781c:	e31e      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800781e:	4b6e      	ldr	r3, [pc, #440]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007822:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007826:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007828:	4b6b      	ldr	r3, [pc, #428]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b04      	cmp	r3, #4
 8007832:	d10c      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007836:	2b00      	cmp	r3, #0
 8007838:	d109      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800783a:	4b67      	ldr	r3, [pc, #412]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	08db      	lsrs	r3, r3, #3
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	4a65      	ldr	r2, [pc, #404]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007846:	fa22 f303 	lsr.w	r3, r2, r3
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800784c:	e01e      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800784e:	4b62      	ldr	r3, [pc, #392]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785a:	d106      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007862:	d102      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007864:	4b5e      	ldr	r3, [pc, #376]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007868:	e010      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800786a:	4b5b      	ldr	r3, [pc, #364]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007872:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007876:	d106      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787e:	d102      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007880:	4b58      	ldr	r3, [pc, #352]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007884:	e002      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800788a:	e2e7      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800788c:	e2e6      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800788e:	4b56      	ldr	r3, [pc, #344]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007892:	e2e3      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007898:	e2e0      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a0:	f040 80a7 	bne.w	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80078a4:	4b4c      	ldr	r3, [pc, #304]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80078a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80078ac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078b4:	d055      	beq.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078bc:	f200 8096 	bhi.w	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80078c6:	f000 8084 	beq.w	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80078d0:	f200 808c 	bhi.w	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078da:	d030      	beq.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078e2:	f200 8083 	bhi.w	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d004      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078f2:	d012      	beq.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80078f4:	e07a      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078f6:	4b38      	ldr	r3, [pc, #224]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007902:	d107      	bne.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fd73 	bl	80083f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007912:	e2a3      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007918:	e2a0      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800791a:	4b2f      	ldr	r3, [pc, #188]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007926:	d107      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007928:	f107 0318 	add.w	r3, r7, #24
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fab9 	bl	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007936:	e291      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800793c:	e28e      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800793e:	4b26      	ldr	r3, [pc, #152]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800794a:	d107      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800794c:	f107 030c 	add.w	r3, r7, #12
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fbfb 	bl	800814c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800795a:	e27f      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007960:	e27c      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007962:	4b1d      	ldr	r3, [pc, #116]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800796a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800796c:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b04      	cmp	r3, #4
 8007976:	d10c      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797a:	2b00      	cmp	r3, #0
 800797c:	d109      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800797e:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	08db      	lsrs	r3, r3, #3
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	4a14      	ldr	r2, [pc, #80]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800798a:	fa22 f303 	lsr.w	r3, r2, r3
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007990:	e01e      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799e:	d106      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80079a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a6:	d102      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079a8:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ac:	e010      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079ae:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ba:	d106      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80079bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c2:	d102      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80079c4:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80079c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079c8:	e002      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80079ce:	e245      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80079d0:	e244      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d6:	e241      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80079d8:	58024400 	.word	0x58024400
 80079dc:	03d09000 	.word	0x03d09000
 80079e0:	003d0900 	.word	0x003d0900
 80079e4:	017d7840 	.word	0x017d7840
 80079e8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079f0:	e234      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f8:	f040 809c 	bne.w	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80079fc:	4b9b      	ldr	r3, [pc, #620]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80079fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a0c:	d054      	beq.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a14:	f200 808b 	bhi.w	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a1e:	f000 8083 	beq.w	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a28:	f200 8081 	bhi.w	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a32:	d02f      	beq.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a3a:	d878      	bhi.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a48:	d012      	beq.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007a4a:	e070      	b.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a4c:	4b87      	ldr	r3, [pc, #540]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a58:	d107      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fcc8 	bl	80083f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a68:	e1f8      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a6e:	e1f5      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a70:	4b7e      	ldr	r3, [pc, #504]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a7c:	d107      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a7e:	f107 0318 	add.w	r3, r7, #24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fa0e 	bl	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a8c:	e1e6      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a92:	e1e3      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a94:	4b75      	ldr	r3, [pc, #468]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa0:	d107      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aa2:	f107 030c 	add.w	r3, r7, #12
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fb50 	bl	800814c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ab0:	e1d4      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab6:	e1d1      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ab8:	4b6c      	ldr	r3, [pc, #432]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ac2:	4b6a      	ldr	r3, [pc, #424]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0304 	and.w	r3, r3, #4
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d10c      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ad4:	4b65      	ldr	r3, [pc, #404]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	08db      	lsrs	r3, r3, #3
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	4a64      	ldr	r2, [pc, #400]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae6:	e01e      	b.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ae8:	4b60      	ldr	r3, [pc, #384]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af4:	d106      	bne.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8007af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007afc:	d102      	bne.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007afe:	4b5d      	ldr	r3, [pc, #372]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b02:	e010      	b.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b04:	4b59      	ldr	r3, [pc, #356]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b10:	d106      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b18:	d102      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b1a:	4b57      	ldr	r3, [pc, #348]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b1e:	e002      	b.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b24:	e19a      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007b26:	e199      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b28:	4b54      	ldr	r3, [pc, #336]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b2c:	e196      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b32:	e193      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b3a:	d173      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007b3c:	4b4b      	ldr	r3, [pc, #300]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b4c:	d02f      	beq.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b54:	d863      	bhi.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8007b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b62:	d012      	beq.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007b64:	e05b      	b.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b66:	4b41      	ldr	r3, [pc, #260]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b72:	d107      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b74:	f107 0318 	add.w	r3, r7, #24
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f993 	bl	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b82:	e16b      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b88:	e168      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b8a:	4b38      	ldr	r3, [pc, #224]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b96:	d107      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b98:	f107 030c 	add.w	r3, r7, #12
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fad5 	bl	800814c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ba6:	e159      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bac:	e156      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bae:	4b2f      	ldr	r3, [pc, #188]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bb8:	4b2c      	ldr	r3, [pc, #176]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d10c      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8007bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bca:	4b28      	ldr	r3, [pc, #160]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	08db      	lsrs	r3, r3, #3
 8007bd0:	f003 0303 	and.w	r3, r3, #3
 8007bd4:	4a26      	ldr	r2, [pc, #152]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bdc:	e01e      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bde:	4b23      	ldr	r3, [pc, #140]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bea:	d106      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8007bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bf2:	d102      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007bf4:	4b1f      	ldr	r3, [pc, #124]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf8:	e010      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bfa:	4b1c      	ldr	r3, [pc, #112]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c06:	d106      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8007c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c0e:	d102      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c10:	4b19      	ldr	r3, [pc, #100]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c14:	e002      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c1a:	e11f      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007c1c:	e11e      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c22:	e11b      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c2a:	d13e      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007c2c:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c34:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d004      	beq.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c42:	d01d      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007c44:	e02e      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c46:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c52:	d107      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fbcb 	bl	80083f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c62:	e0fb      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c68:	e0f8      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007c6a:	bf00      	nop
 8007c6c:	58024400 	.word	0x58024400
 8007c70:	03d09000 	.word	0x03d09000
 8007c74:	003d0900 	.word	0x003d0900
 8007c78:	017d7840 	.word	0x017d7840
 8007c7c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c80:	4b79      	ldr	r3, [pc, #484]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c8c:	d107      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c8e:	f107 0318 	add.w	r3, r7, #24
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 f906 	bl	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c9c:	e0de      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca2:	e0db      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca8:	e0d8      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb0:	f040 8085 	bne.w	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007cb4:	4b6c      	ldr	r3, [pc, #432]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cc4:	d06b      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ccc:	d874      	bhi.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd4:	d056      	beq.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cdc:	d86c      	bhi.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ce4:	d03b      	beq.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cec:	d864      	bhi.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cf4:	d021      	beq.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cfc:	d85c      	bhi.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d0a:	d004      	beq.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007d0c:	e054      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d0e:	f000 f8b3 	bl	8007e78 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d12:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007d14:	e0a2      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d16:	4b54      	ldr	r3, [pc, #336]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d22:	d107      	bne.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d24:	f107 0318 	add.w	r3, r7, #24
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 f8bb 	bl	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d32:	e093      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d38:	e090      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d3a:	4b4b      	ldr	r3, [pc, #300]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d46:	d107      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d48:	f107 030c 	add.w	r3, r7, #12
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 f9fd 	bl	800814c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d56:	e081      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d5c:	e07e      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d5e:	4b42      	ldr	r3, [pc, #264]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0304 	and.w	r3, r3, #4
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d109      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d6a:	4b3f      	ldr	r3, [pc, #252]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	08db      	lsrs	r3, r3, #3
 8007d70:	f003 0303 	and.w	r3, r3, #3
 8007d74:	4a3d      	ldr	r2, [pc, #244]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007d76:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d7c:	e06e      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d82:	e06b      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007d84:	4b38      	ldr	r3, [pc, #224]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d90:	d102      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8007d92:	4b37      	ldr	r3, [pc, #220]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d96:	e061      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d9c:	e05e      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d9e:	4b32      	ldr	r3, [pc, #200]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007daa:	d102      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8007dac:	4b31      	ldr	r3, [pc, #196]	; (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007db0:	e054      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db6:	e051      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dbc:	e04e      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc4:	d148      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007dc6:	4b28      	ldr	r3, [pc, #160]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd6:	d02a      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dde:	d838      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dec:	d00d      	beq.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8007dee:	e030      	b.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007df0:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dfc:	d102      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8007dfe:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e02:	e02b      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e08:	e028      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e0a:	4b17      	ldr	r3, [pc, #92]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e16:	d107      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fae9 	bl	80083f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e26:	e019      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2c:	e016      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e2e:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e3a:	d107      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e3c:	f107 0318 	add.w	r3, r7, #24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 f82f 	bl	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e4a:	e007      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e50:	e004      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e56:	e001      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3740      	adds	r7, #64	; 0x40
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	58024400 	.word	0x58024400
 8007e6c:	03d09000 	.word	0x03d09000
 8007e70:	003d0900 	.word	0x003d0900
 8007e74:	017d7840 	.word	0x017d7840

08007e78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007e7c:	f7fe fbb4 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8007e80:	4602      	mov	r2, r0
 8007e82:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	091b      	lsrs	r3, r3, #4
 8007e88:	f003 0307 	and.w	r3, r3, #7
 8007e8c:	4904      	ldr	r1, [pc, #16]	; (8007ea0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007e8e:	5ccb      	ldrb	r3, [r1, r3]
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	58024400 	.word	0x58024400
 8007ea0:	0800d6dc 	.word	0x0800d6dc

08007ea4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b089      	sub	sp, #36	; 0x24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007eac:	4ba1      	ldr	r3, [pc, #644]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	f003 0303 	and.w	r3, r3, #3
 8007eb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007eb6:	4b9f      	ldr	r3, [pc, #636]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	0b1b      	lsrs	r3, r3, #12
 8007ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ec0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ec2:	4b9c      	ldr	r3, [pc, #624]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec6:	091b      	lsrs	r3, r3, #4
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007ece:	4b99      	ldr	r3, [pc, #612]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed2:	08db      	lsrs	r3, r3, #3
 8007ed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	fb02 f303 	mul.w	r3, r2, r3
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 8111 	beq.w	8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	f000 8083 	beq.w	8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	f200 80a1 	bhi.w	8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d056      	beq.n	8007fbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f0e:	e099      	b.n	8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f10:	4b88      	ldr	r3, [pc, #544]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d02d      	beq.n	8007f78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f1c:	4b85      	ldr	r3, [pc, #532]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	08db      	lsrs	r3, r3, #3
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	4a84      	ldr	r2, [pc, #528]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f28:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	ee07 3a90 	vmov	s15, r3
 8007f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f46:	4b7b      	ldr	r3, [pc, #492]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4e:	ee07 3a90 	vmov	s15, r3
 8007f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800813c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f72:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f76:	e087      	b.n	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f8a:	4b6a      	ldr	r3, [pc, #424]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800813c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fba:	e065      	b.n	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	ee07 3a90 	vmov	s15, r3
 8007fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fce:	4b59      	ldr	r3, [pc, #356]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800813c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ffe:	e043      	b.n	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008148 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800800e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008012:	4b48      	ldr	r3, [pc, #288]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008022:	ed97 6a03 	vldr	s12, [r7, #12]
 8008026:	eddf 5a45 	vldr	s11, [pc, #276]	; 800813c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800802a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008042:	e021      	b.n	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	ee07 3a90 	vmov	s15, r3
 800804a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008056:	4b37      	ldr	r3, [pc, #220]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008066:	ed97 6a03 	vldr	s12, [r7, #12]
 800806a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800813c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800806e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008086:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008088:	4b2a      	ldr	r3, [pc, #168]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	0a5b      	lsrs	r3, r3, #9
 800808e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008092:	ee07 3a90 	vmov	s15, r3
 8008096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800809e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ae:	ee17 2a90 	vmov	r2, s15
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80080b6:	4b1f      	ldr	r3, [pc, #124]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	0c1b      	lsrs	r3, r3, #16
 80080bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80080d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080dc:	ee17 2a90 	vmov	r2, s15
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80080e4:	4b13      	ldr	r3, [pc, #76]	; (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	0e1b      	lsrs	r3, r3, #24
 80080ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810a:	ee17 2a90 	vmov	r2, s15
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008112:	e008      	b.n	8008126 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	609a      	str	r2, [r3, #8]
}
 8008126:	bf00      	nop
 8008128:	3724      	adds	r7, #36	; 0x24
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	58024400 	.word	0x58024400
 8008138:	03d09000 	.word	0x03d09000
 800813c:	46000000 	.word	0x46000000
 8008140:	4c742400 	.word	0x4c742400
 8008144:	4a742400 	.word	0x4a742400
 8008148:	4bbebc20 	.word	0x4bbebc20

0800814c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800814c:	b480      	push	{r7}
 800814e:	b089      	sub	sp, #36	; 0x24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008154:	4ba1      	ldr	r3, [pc, #644]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f003 0303 	and.w	r3, r3, #3
 800815c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800815e:	4b9f      	ldr	r3, [pc, #636]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008162:	0d1b      	lsrs	r3, r3, #20
 8008164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008168:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800816a:	4b9c      	ldr	r3, [pc, #624]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	0a1b      	lsrs	r3, r3, #8
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008176:	4b99      	ldr	r3, [pc, #612]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817a:	08db      	lsrs	r3, r3, #3
 800817c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	fb02 f303 	mul.w	r3, r2, r3
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 8111 	beq.w	80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b02      	cmp	r3, #2
 800819e:	f000 8083 	beq.w	80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	f200 80a1 	bhi.w	80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d056      	beq.n	8008264 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80081b6:	e099      	b.n	80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081b8:	4b88      	ldr	r3, [pc, #544]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d02d      	beq.n	8008220 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081c4:	4b85      	ldr	r3, [pc, #532]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	08db      	lsrs	r3, r3, #3
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	4a84      	ldr	r2, [pc, #528]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80081d0:	fa22 f303 	lsr.w	r3, r2, r3
 80081d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	ee07 3a90 	vmov	s15, r3
 80081dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ee:	4b7b      	ldr	r3, [pc, #492]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008202:	eddf 5a78 	vldr	s11, [pc, #480]	; 80083e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800820a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800820e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800821e:	e087      	b.n	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80083e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800822e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008232:	4b6a      	ldr	r3, [pc, #424]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008242:	ed97 6a03 	vldr	s12, [r7, #12]
 8008246:	eddf 5a67 	vldr	s11, [pc, #412]	; 80083e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800824a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800824e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800825a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800825e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008262:	e065      	b.n	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80083ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008276:	4b59      	ldr	r3, [pc, #356]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008286:	ed97 6a03 	vldr	s12, [r7, #12]
 800828a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80083e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800828e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800829a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082a6:	e043      	b.n	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80083f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80082b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ba:	4b48      	ldr	r3, [pc, #288]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80083e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ea:	e021      	b.n	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80083ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fe:	4b37      	ldr	r3, [pc, #220]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008312:	eddf 5a34 	vldr	s11, [pc, #208]	; 80083e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800832e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008330:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	0a5b      	lsrs	r3, r3, #9
 8008336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008346:	ee37 7a87 	vadd.f32	s14, s15, s14
 800834a:	edd7 6a07 	vldr	s13, [r7, #28]
 800834e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008356:	ee17 2a90 	vmov	r2, s15
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800835e:	4b1f      	ldr	r3, [pc, #124]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	0c1b      	lsrs	r3, r3, #16
 8008364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008368:	ee07 3a90 	vmov	s15, r3
 800836c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008374:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008378:	edd7 6a07 	vldr	s13, [r7, #28]
 800837c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008384:	ee17 2a90 	vmov	r2, s15
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800838c:	4b13      	ldr	r3, [pc, #76]	; (80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	0e1b      	lsrs	r3, r3, #24
 8008392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b2:	ee17 2a90 	vmov	r2, s15
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80083ba:	e008      	b.n	80083ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	609a      	str	r2, [r3, #8]
}
 80083ce:	bf00      	nop
 80083d0:	3724      	adds	r7, #36	; 0x24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	58024400 	.word	0x58024400
 80083e0:	03d09000 	.word	0x03d09000
 80083e4:	46000000 	.word	0x46000000
 80083e8:	4c742400 	.word	0x4c742400
 80083ec:	4a742400 	.word	0x4a742400
 80083f0:	4bbebc20 	.word	0x4bbebc20

080083f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b089      	sub	sp, #36	; 0x24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083fc:	4ba0      	ldr	r3, [pc, #640]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	f003 0303 	and.w	r3, r3, #3
 8008404:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008406:	4b9e      	ldr	r3, [pc, #632]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840a:	091b      	lsrs	r3, r3, #4
 800840c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008410:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008412:	4b9b      	ldr	r3, [pc, #620]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800841c:	4b98      	ldr	r3, [pc, #608]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800841e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008420:	08db      	lsrs	r3, r3, #3
 8008422:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	fb02 f303 	mul.w	r3, r2, r3
 800842c:	ee07 3a90 	vmov	s15, r3
 8008430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008434:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 8111 	beq.w	8008662 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2b02      	cmp	r3, #2
 8008444:	f000 8083 	beq.w	800854e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2b02      	cmp	r3, #2
 800844c:	f200 80a1 	bhi.w	8008592 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d056      	beq.n	800850a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800845c:	e099      	b.n	8008592 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800845e:	4b88      	ldr	r3, [pc, #544]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b00      	cmp	r3, #0
 8008468:	d02d      	beq.n	80084c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800846a:	4b85      	ldr	r3, [pc, #532]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	08db      	lsrs	r3, r3, #3
 8008470:	f003 0303 	and.w	r3, r3, #3
 8008474:	4a83      	ldr	r2, [pc, #524]	; (8008684 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008476:	fa22 f303 	lsr.w	r3, r2, r3
 800847a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008494:	4b7a      	ldr	r3, [pc, #488]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008688 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80084c4:	e087      	b.n	80085d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800868c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80084d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d8:	4b69      	ldr	r3, [pc, #420]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e0:	ee07 3a90 	vmov	s15, r3
 80084e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008688 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008508:	e065      	b.n	80085d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008514:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008690 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851c:	4b58      	ldr	r3, [pc, #352]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008524:	ee07 3a90 	vmov	s15, r3
 8008528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008530:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008688 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800854c:	e043      	b.n	80085d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008558:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008694 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800855c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008560:	4b47      	ldr	r3, [pc, #284]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008570:	ed97 6a03 	vldr	s12, [r7, #12]
 8008574:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008688 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008590:	e021      	b.n	80085d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800868c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80085a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a4:	4b36      	ldr	r3, [pc, #216]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	ee07 3a90 	vmov	s15, r3
 80085b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008688 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80085d6:	4b2a      	ldr	r3, [pc, #168]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	0a5b      	lsrs	r3, r3, #9
 80085dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e0:	ee07 3a90 	vmov	s15, r3
 80085e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085fc:	ee17 2a90 	vmov	r2, s15
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008604:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	0c1b      	lsrs	r3, r3, #16
 800860a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800861a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800861e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800862a:	ee17 2a90 	vmov	r2, s15
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008632:	4b13      	ldr	r3, [pc, #76]	; (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	0e1b      	lsrs	r3, r3, #24
 8008638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863c:	ee07 3a90 	vmov	s15, r3
 8008640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800864c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008658:	ee17 2a90 	vmov	r2, s15
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008660:	e008      	b.n	8008674 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	609a      	str	r2, [r3, #8]
}
 8008674:	bf00      	nop
 8008676:	3724      	adds	r7, #36	; 0x24
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	58024400 	.word	0x58024400
 8008684:	03d09000 	.word	0x03d09000
 8008688:	46000000 	.word	0x46000000
 800868c:	4c742400 	.word	0x4c742400
 8008690:	4a742400 	.word	0x4a742400
 8008694:	4bbebc20 	.word	0x4bbebc20

08008698 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086a6:	4b53      	ldr	r3, [pc, #332]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	f003 0303 	and.w	r3, r3, #3
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d101      	bne.n	80086b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e099      	b.n	80087ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80086b6:	4b4f      	ldr	r3, [pc, #316]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a4e      	ldr	r2, [pc, #312]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80086bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c2:	f7f8 fa8f 	bl	8000be4 <HAL_GetTick>
 80086c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086c8:	e008      	b.n	80086dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80086ca:	f7f8 fa8b 	bl	8000be4 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e086      	b.n	80087ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086dc:	4b45      	ldr	r3, [pc, #276]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f0      	bne.n	80086ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80086e8:	4b42      	ldr	r3, [pc, #264]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	031b      	lsls	r3, r3, #12
 80086f6:	493f      	ldr	r1, [pc, #252]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	628b      	str	r3, [r1, #40]	; 0x28
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	3b01      	subs	r3, #1
 8008702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	3b01      	subs	r3, #1
 800870c:	025b      	lsls	r3, r3, #9
 800870e:	b29b      	uxth	r3, r3
 8008710:	431a      	orrs	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	3b01      	subs	r3, #1
 8008718:	041b      	lsls	r3, r3, #16
 800871a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	3b01      	subs	r3, #1
 8008726:	061b      	lsls	r3, r3, #24
 8008728:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800872c:	4931      	ldr	r1, [pc, #196]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008732:	4b30      	ldr	r3, [pc, #192]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	492d      	ldr	r1, [pc, #180]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 8008740:	4313      	orrs	r3, r2
 8008742:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008744:	4b2b      	ldr	r3, [pc, #172]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	f023 0220 	bic.w	r2, r3, #32
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	4928      	ldr	r1, [pc, #160]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 8008752:	4313      	orrs	r3, r2
 8008754:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008756:	4b27      	ldr	r3, [pc, #156]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	4a26      	ldr	r2, [pc, #152]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 800875c:	f023 0310 	bic.w	r3, r3, #16
 8008760:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008762:	4b24      	ldr	r3, [pc, #144]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 8008764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008766:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <RCCEx_PLL2_Config+0x160>)
 8008768:	4013      	ands	r3, r2
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	69d2      	ldr	r2, [r2, #28]
 800876e:	00d2      	lsls	r2, r2, #3
 8008770:	4920      	ldr	r1, [pc, #128]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 8008772:	4313      	orrs	r3, r2
 8008774:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008776:	4b1f      	ldr	r3, [pc, #124]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 8008778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 800877c:	f043 0310 	orr.w	r3, r3, #16
 8008780:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d106      	bne.n	8008796 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008788:	4b1a      	ldr	r3, [pc, #104]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	4a19      	ldr	r2, [pc, #100]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 800878e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008792:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008794:	e00f      	b.n	80087b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d106      	bne.n	80087aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800879c:	4b15      	ldr	r3, [pc, #84]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	4a14      	ldr	r2, [pc, #80]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80087a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087a8:	e005      	b.n	80087b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087aa:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	4a11      	ldr	r2, [pc, #68]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80087b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80087b6:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a0e      	ldr	r2, [pc, #56]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80087bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087c2:	f7f8 fa0f 	bl	8000be4 <HAL_GetTick>
 80087c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087c8:	e008      	b.n	80087dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087ca:	f7f8 fa0b 	bl	8000be4 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d901      	bls.n	80087dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e006      	b.n	80087ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087dc:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <RCCEx_PLL2_Config+0x15c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d0f0      	beq.n	80087ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	58024400 	.word	0x58024400
 80087f8:	ffff0007 	.word	0xffff0007

080087fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800880a:	4b53      	ldr	r3, [pc, #332]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	2b03      	cmp	r3, #3
 8008814:	d101      	bne.n	800881a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e099      	b.n	800894e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800881a:	4b4f      	ldr	r3, [pc, #316]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a4e      	ldr	r2, [pc, #312]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008826:	f7f8 f9dd 	bl	8000be4 <HAL_GetTick>
 800882a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800882c:	e008      	b.n	8008840 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800882e:	f7f8 f9d9 	bl	8000be4 <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d901      	bls.n	8008840 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e086      	b.n	800894e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008840:	4b45      	ldr	r3, [pc, #276]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1f0      	bne.n	800882e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800884c:	4b42      	ldr	r3, [pc, #264]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 800884e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008850:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	051b      	lsls	r3, r3, #20
 800885a:	493f      	ldr	r1, [pc, #252]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 800885c:	4313      	orrs	r3, r2
 800885e:	628b      	str	r3, [r1, #40]	; 0x28
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	3b01      	subs	r3, #1
 8008866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	3b01      	subs	r3, #1
 8008870:	025b      	lsls	r3, r3, #9
 8008872:	b29b      	uxth	r3, r3
 8008874:	431a      	orrs	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	3b01      	subs	r3, #1
 800887c:	041b      	lsls	r3, r3, #16
 800887e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	3b01      	subs	r3, #1
 800888a:	061b      	lsls	r3, r3, #24
 800888c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008890:	4931      	ldr	r1, [pc, #196]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008892:	4313      	orrs	r3, r2
 8008894:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008896:	4b30      	ldr	r3, [pc, #192]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	492d      	ldr	r1, [pc, #180]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088a8:	4b2b      	ldr	r3, [pc, #172]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	4928      	ldr	r1, [pc, #160]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80088ba:	4b27      	ldr	r3, [pc, #156]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	4a26      	ldr	r2, [pc, #152]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80088c6:	4b24      	ldr	r3, [pc, #144]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ca:	4b24      	ldr	r3, [pc, #144]	; (800895c <RCCEx_PLL3_Config+0x160>)
 80088cc:	4013      	ands	r3, r2
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	69d2      	ldr	r2, [r2, #28]
 80088d2:	00d2      	lsls	r2, r2, #3
 80088d4:	4920      	ldr	r1, [pc, #128]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80088da:	4b1f      	ldr	r3, [pc, #124]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	4a1e      	ldr	r2, [pc, #120]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d106      	bne.n	80088fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80088ec:	4b1a      	ldr	r3, [pc, #104]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	4a19      	ldr	r2, [pc, #100]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 80088f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80088f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088f8:	e00f      	b.n	800891a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d106      	bne.n	800890e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008900:	4b15      	ldr	r3, [pc, #84]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	4a14      	ldr	r2, [pc, #80]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008906:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800890a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800890c:	e005      	b.n	800891a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800890e:	4b12      	ldr	r3, [pc, #72]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	4a11      	ldr	r2, [pc, #68]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008918:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800891a:	4b0f      	ldr	r3, [pc, #60]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a0e      	ldr	r2, [pc, #56]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008926:	f7f8 f95d 	bl	8000be4 <HAL_GetTick>
 800892a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800892c:	e008      	b.n	8008940 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800892e:	f7f8 f959 	bl	8000be4 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e006      	b.n	800894e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008940:	4b05      	ldr	r3, [pc, #20]	; (8008958 <RCCEx_PLL3_Config+0x15c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0f0      	beq.n	800892e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	58024400 	.word	0x58024400
 800895c:	ffff0007 	.word	0xffff0007

08008960 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b08a      	sub	sp, #40	; 0x28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e283      	b.n	8008e7a <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008972:	f7f8 f967 	bl	8000c44 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800897c:	2b01      	cmp	r3, #1
 800897e:	d113      	bne.n	80089a8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a94      	ldr	r2, [pc, #592]	; (8008bd8 <HAL_SAI_Init+0x278>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d004      	beq.n	8008994 <HAL_SAI_Init+0x34>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a93      	ldr	r2, [pc, #588]	; (8008bdc <HAL_SAI_Init+0x27c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d107      	bne.n	80089a4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008998:	2b01      	cmp	r3, #1
 800899a:	d103      	bne.n	80089a4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e268      	b.n	8008e7a <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a8a      	ldr	r2, [pc, #552]	; (8008bd8 <HAL_SAI_Init+0x278>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d004      	beq.n	80089bc <HAL_SAI_Init+0x5c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a8a      	ldr	r2, [pc, #552]	; (8008be0 <HAL_SAI_Init+0x280>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d102      	bne.n	80089c2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80089bc:	4b89      	ldr	r3, [pc, #548]	; (8008be4 <HAL_SAI_Init+0x284>)
 80089be:	61bb      	str	r3, [r7, #24]
 80089c0:	e028      	b.n	8008a14 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a88      	ldr	r2, [pc, #544]	; (8008be8 <HAL_SAI_Init+0x288>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d004      	beq.n	80089d6 <HAL_SAI_Init+0x76>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a86      	ldr	r2, [pc, #536]	; (8008bec <HAL_SAI_Init+0x28c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d102      	bne.n	80089dc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80089d6:	4b86      	ldr	r3, [pc, #536]	; (8008bf0 <HAL_SAI_Init+0x290>)
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	e01b      	b.n	8008a14 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a84      	ldr	r2, [pc, #528]	; (8008bf4 <HAL_SAI_Init+0x294>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d004      	beq.n	80089f0 <HAL_SAI_Init+0x90>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a83      	ldr	r2, [pc, #524]	; (8008bf8 <HAL_SAI_Init+0x298>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d102      	bne.n	80089f6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80089f0:	4b82      	ldr	r3, [pc, #520]	; (8008bfc <HAL_SAI_Init+0x29c>)
 80089f2:	61bb      	str	r3, [r7, #24]
 80089f4:	e00e      	b.n	8008a14 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a78      	ldr	r2, [pc, #480]	; (8008bdc <HAL_SAI_Init+0x27c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d004      	beq.n	8008a0a <HAL_SAI_Init+0xaa>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a7e      	ldr	r2, [pc, #504]	; (8008c00 <HAL_SAI_Init+0x2a0>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d102      	bne.n	8008a10 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8008a0a:	4b7e      	ldr	r3, [pc, #504]	; (8008c04 <HAL_SAI_Init+0x2a4>)
 8008a0c:	61bb      	str	r3, [r7, #24]
 8008a0e:	e001      	b.n	8008a14 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e232      	b.n	8008e7a <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d106      	bne.n	8008a2e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7f7 feb5 	bl	8000798 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fd68 	bl	8009504 <SAI_Disable>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e21d      	b.n	8008e7a <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2202      	movs	r2, #2
 8008a42:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d00c      	beq.n	8008a68 <HAL_SAI_Init+0x108>
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d80d      	bhi.n	8008a6e <HAL_SAI_Init+0x10e>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <HAL_SAI_Init+0xfc>
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d003      	beq.n	8008a62 <HAL_SAI_Init+0x102>
 8008a5a:	e008      	b.n	8008a6e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008a60:	e008      	b.n	8008a74 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008a62:	2310      	movs	r3, #16
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008a66:	e005      	b.n	8008a74 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008a68:	2320      	movs	r3, #32
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008a6c:	e002      	b.n	8008a74 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008a72:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b05      	cmp	r3, #5
 8008a7a:	d832      	bhi.n	8008ae2 <HAL_SAI_Init+0x182>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <HAL_SAI_Init+0x124>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008a9d 	.word	0x08008a9d
 8008a88:	08008aa3 	.word	0x08008aa3
 8008a8c:	08008aab 	.word	0x08008aab
 8008a90:	08008ab3 	.word	0x08008ab3
 8008a94:	08008ac3 	.word	0x08008ac3
 8008a98:	08008ad3 	.word	0x08008ad3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	61fb      	str	r3, [r7, #28]
      break;
 8008aa0:	e022      	b.n	8008ae8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aa6:	61fb      	str	r3, [r7, #28]
      break;
 8008aa8:	e01e      	b.n	8008ae8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008aae:	61fb      	str	r3, [r7, #28]
      break;
 8008ab0:	e01a      	b.n	8008ae8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ab6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	f043 0301 	orr.w	r3, r3, #1
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008ac0:	e012      	b.n	8008ae8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ac2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ac6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	f043 0302 	orr.w	r3, r3, #2
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008ad0:	e00a      	b.n	8008ae8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ad6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	f043 0303 	orr.w	r3, r3, #3
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008ae0:	e002      	b.n	8008ae8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61fb      	str	r3, [r7, #28]
      break;
 8008ae6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aec:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 80ba 	beq.w	8008c6c <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a35      	ldr	r2, [pc, #212]	; (8008bd8 <HAL_SAI_Init+0x278>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d004      	beq.n	8008b10 <HAL_SAI_Init+0x1b0>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a35      	ldr	r2, [pc, #212]	; (8008be0 <HAL_SAI_Init+0x280>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d104      	bne.n	8008b1a <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008b14:	f7fe fcde 	bl	80074d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b18:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a32      	ldr	r2, [pc, #200]	; (8008be8 <HAL_SAI_Init+0x288>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d004      	beq.n	8008b2e <HAL_SAI_Init+0x1ce>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a30      	ldr	r2, [pc, #192]	; (8008bec <HAL_SAI_Init+0x28c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d104      	bne.n	8008b38 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b32:	f7fe fccf 	bl	80074d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b36:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a2d      	ldr	r2, [pc, #180]	; (8008bf4 <HAL_SAI_Init+0x294>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d004      	beq.n	8008b4c <HAL_SAI_Init+0x1ec>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a2c      	ldr	r2, [pc, #176]	; (8008bf8 <HAL_SAI_Init+0x298>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d104      	bne.n	8008b56 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008b4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b50:	f7fe fcc0 	bl	80074d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b54:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a20      	ldr	r2, [pc, #128]	; (8008bdc <HAL_SAI_Init+0x27c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d104      	bne.n	8008b6a <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008b60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008b64:	f7fe fcb6 	bl	80074d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b68:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a24      	ldr	r2, [pc, #144]	; (8008c00 <HAL_SAI_Init+0x2a0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d104      	bne.n	8008b7e <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008b74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008b78:	f7fe fcac 	bl	80074d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b7c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b86:	d120      	bne.n	8008bca <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	d102      	bne.n	8008b96 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008b90:	2340      	movs	r3, #64	; 0x40
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	e00a      	b.n	8008bac <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9a:	2b08      	cmp	r3, #8
 8008b9c:	d103      	bne.n	8008ba6 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e002      	b.n	8008bac <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008baa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
 8008bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bc6:	613b      	str	r3, [r7, #16]
 8008bc8:	e02f      	b.n	8008c2a <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bd2:	d119      	bne.n	8008c08 <HAL_SAI_Init+0x2a8>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e018      	b.n	8008c0a <HAL_SAI_Init+0x2aa>
 8008bd8:	40015804 	.word	0x40015804
 8008bdc:	58005404 	.word	0x58005404
 8008be0:	40015824 	.word	0x40015824
 8008be4:	40015800 	.word	0x40015800
 8008be8:	40015c04 	.word	0x40015c04
 8008bec:	40015c24 	.word	0x40015c24
 8008bf0:	40015c00 	.word	0x40015c00
 8008bf4:	40016004 	.word	0x40016004
 8008bf8:	40016024 	.word	0x40016024
 8008bfc:	40016000 	.word	0x40016000
 8008c00:	58005424 	.word	0x58005424
 8008c04:	58005400 	.word	0x58005400
 8008c08:	2301      	movs	r3, #1
 8008c0a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	4619      	mov	r1, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	fb02 f303 	mul.w	r3, r2, r3
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c28:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	4a95      	ldr	r2, [pc, #596]	; (8008e84 <HAL_SAI_Init+0x524>)
 8008c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c32:	08da      	lsrs	r2, r3, #3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008c38:	6939      	ldr	r1, [r7, #16]
 8008c3a:	4b92      	ldr	r3, [pc, #584]	; (8008e84 <HAL_SAI_Init+0x524>)
 8008c3c:	fba3 2301 	umull	r2, r3, r3, r1
 8008c40:	08da      	lsrs	r2, r3, #3
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	1aca      	subs	r2, r1, r3
 8008c4c:	2a08      	cmp	r2, #8
 8008c4e:	d904      	bls.n	8008c5a <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	d104      	bne.n	8008c6c <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	085a      	lsrs	r2, r3, #1
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_SAI_Init+0x31c>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d109      	bne.n	8008c90 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_SAI_Init+0x328>
 8008c84:	2300      	movs	r3, #0
 8008c86:	e001      	b.n	8008c8c <HAL_SAI_Init+0x32c>
 8008c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c8c:	623b      	str	r3, [r7, #32]
 8008c8e:	e008      	b.n	8008ca2 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d102      	bne.n	8008c9e <HAL_SAI_Init+0x33e>
 8008c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c9c:	e000      	b.n	8008ca0 <HAL_SAI_Init+0x340>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008ca2:	f7f7 ffcf 	bl	8000c44 <HAL_GetREVID>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cac:	d331      	bcc.n	8008d12 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6819      	ldr	r1, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b73      	ldr	r3, [pc, #460]	; (8008e88 <HAL_SAI_Init+0x528>)
 8008cba:	400b      	ands	r3, r1
 8008cbc:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6819      	ldr	r1, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ccc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008cd2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008ce6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cf2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	051b      	lsls	r3, r3, #20
 8008cfa:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008d00:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	e02d      	b.n	8008d6e <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6819      	ldr	r1, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	4b5b      	ldr	r3, [pc, #364]	; (8008e8c <HAL_SAI_Init+0x52c>)
 8008d1e:	400b      	ands	r3, r1
 8008d20:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6819      	ldr	r1, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d30:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d36:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008d4a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d56:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	051b      	lsls	r3, r3, #20
 8008d5e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008d64:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6859      	ldr	r1, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	4b45      	ldr	r3, [pc, #276]	; (8008e90 <HAL_SAI_Init+0x530>)
 8008d7a:	400b      	ands	r3, r1
 8008d7c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6859      	ldr	r1, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	69da      	ldr	r2, [r3, #28]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	431a      	orrs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6899      	ldr	r1, [r3, #8]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	4b3b      	ldr	r3, [pc, #236]	; (8008e94 <HAL_SAI_Init+0x534>)
 8008da8:	400b      	ands	r3, r1
 8008daa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6899      	ldr	r1, [r3, #8]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008dbc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008dc2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008dc8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008dd2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68d9      	ldr	r1, [r3, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008dea:	400b      	ands	r3, r1
 8008dec:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68d9      	ldr	r1, [r3, #12]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dfc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e02:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e04:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	430a      	orrs	r2, r1
 8008e16:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a1e      	ldr	r2, [pc, #120]	; (8008e98 <HAL_SAI_Init+0x538>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d004      	beq.n	8008e2c <HAL_SAI_Init+0x4cc>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a1d      	ldr	r2, [pc, #116]	; (8008e9c <HAL_SAI_Init+0x53c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d119      	bne.n	8008e60 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e30:	f023 0201 	bic.w	r2, r3, #1
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d10e      	bne.n	8008e60 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e58:	f043 0201 	orr.w	r2, r3, #1
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3728      	adds	r7, #40	; 0x28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	cccccccd 	.word	0xcccccccd
 8008e88:	f005c010 	.word	0xf005c010
 8008e8c:	f805c010 	.word	0xf805c010
 8008e90:	ffff1ff0 	.word	0xffff1ff0
 8008e94:	fff88000 	.word	0xfff88000
 8008e98:	40015804 	.word	0x40015804
 8008e9c:	58005404 	.word	0x58005404

08008ea0 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_SAI_Abort+0x1a>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e07d      	b.n	8008fb6 <HAL_SAI_Abort+0x116>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ed0:	d14f      	bne.n	8008f72 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008ee0:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b12      	cmp	r3, #18
 8008eec:	d11d      	bne.n	8008f2a <HAL_SAI_Abort+0x8a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d018      	beq.n	8008f2a <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7f8 fd82 	bl	8001a08 <HAL_DMA_Abort>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00f      	beq.n	8008f2a <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f12:	2b80      	cmp	r3, #128	; 0x80
 8008f14:	d009      	beq.n	8008f2a <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b22      	cmp	r3, #34	; 0x22
 8008f34:	d11d      	bne.n	8008f72 <HAL_SAI_Abort+0xd2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d018      	beq.n	8008f72 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f8 fd5e 	bl	8001a08 <HAL_DMA_Abort>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00f      	beq.n	8008f72 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5a:	2b80      	cmp	r3, #128	; 0x80
 8008f5c:	d009      	beq.n	8008f72 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f82:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fabd 	bl	8009504 <SAI_Disable>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0208 	orr.w	r2, r2, #8
 8008fa2:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <HAL_SAI_Receive_DMA+0x1a>
 8008fd4:	88fb      	ldrh	r3, [r7, #6]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e079      	b.n	80090d2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d172      	bne.n	80090d0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_SAI_Receive_DMA+0x38>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e06c      	b.n	80090d2 <HAL_SAI_Receive_DMA+0x112>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	88fa      	ldrh	r2, [r7, #6]
 800900a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	88fa      	ldrh	r2, [r7, #6]
 8009012:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2222      	movs	r2, #34	; 0x22
 8009022:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800902c:	4a2b      	ldr	r2, [pc, #172]	; (80090dc <HAL_SAI_Receive_DMA+0x11c>)
 800902e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009036:	4a2a      	ldr	r2, [pc, #168]	; (80090e0 <HAL_SAI_Receive_DMA+0x120>)
 8009038:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009040:	4a28      	ldr	r2, [pc, #160]	; (80090e4 <HAL_SAI_Receive_DMA+0x124>)
 8009042:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800904a:	2200      	movs	r2, #0
 800904c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	331c      	adds	r3, #28
 800905a:	4619      	mov	r1, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009060:	461a      	mov	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009068:	f7f8 fa64 	bl	8001534 <HAL_DMA_Start_IT>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d005      	beq.n	800907e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e029      	b.n	80090d2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800907e:	2100      	movs	r1, #0
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 fa07 	bl	8009494 <SAI_InterruptFlag>
 8009086:	4601      	mov	r1, r0
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	691a      	ldr	r2, [r3, #16]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	430a      	orrs	r2, r1
 8009094:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80090a4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d107      	bne.n	80090c4 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80090c2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e000      	b.n	80090d2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80090d0:	2302      	movs	r3, #2
  }
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	080095d9 	.word	0x080095d9
 80090e0:	08009579 	.word	0x08009579
 80090e4:	080095f5 	.word	0x080095f5

080090e8 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 81a7 	beq.w	800944c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f003 0308 	and.w	r3, r3, #8
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00a      	beq.n	8009136 <HAL_SAI_IRQHandler+0x4e>
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f003 0308 	and.w	r3, r3, #8
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
 8009134:	e18a      	b.n	800944c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01e      	beq.n	800917e <HAL_SAI_IRQHandler+0x96>
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d019      	beq.n	800917e <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2201      	movs	r2, #1
 8009150:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b22      	cmp	r3, #34	; 0x22
 800915c:	d101      	bne.n	8009162 <HAL_SAI_IRQHandler+0x7a>
 800915e:	2301      	movs	r3, #1
 8009160:	e000      	b.n	8009164 <HAL_SAI_IRQHandler+0x7c>
 8009162:	2302      	movs	r3, #2
 8009164:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	431a      	orrs	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f982 	bl	8009480 <HAL_SAI_ErrorCallback>
 800917c:	e166      	b.n	800944c <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b00      	cmp	r3, #0
 8009186:	d013      	beq.n	80091b0 <HAL_SAI_IRQHandler+0xc8>
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00e      	beq.n	80091b0 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2202      	movs	r2, #2
 8009198:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 8153 	beq.w	800944c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ac:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80091ae:	e14d      	b.n	800944c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f003 0320 	and.w	r3, r3, #32
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d05b      	beq.n	8009272 <HAL_SAI_IRQHandler+0x18a>
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f003 0320 	and.w	r3, r3, #32
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d056      	beq.n	8009272 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2220      	movs	r2, #32
 80091ca:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091d2:	f043 0204 	orr.w	r2, r3, #4
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d03e      	beq.n	8009264 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d018      	beq.n	8009222 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091f6:	4a97      	ldr	r2, [pc, #604]	; (8009454 <HAL_SAI_IRQHandler+0x36c>)
 80091f8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009200:	4618      	mov	r0, r3
 8009202:	f7f8 ff1f 	bl	8002044 <HAL_DMA_Abort_IT>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009212:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f92f 	bl	8009480 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 810a 	beq.w	8009442 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009234:	4a87      	ldr	r2, [pc, #540]	; (8009454 <HAL_SAI_IRQHandler+0x36c>)
 8009236:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800923e:	4618      	mov	r0, r3
 8009240:	f7f8 ff00 	bl	8002044 <HAL_DMA_Abort_IT>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 80fb 	beq.w	8009442 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009252:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f90f 	bl	8009480 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009262:	e0ee      	b.n	8009442 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff fe1b 	bl	8008ea0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f908 	bl	8009480 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009270:	e0e7      	b.n	8009442 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d05b      	beq.n	8009334 <HAL_SAI_IRQHandler+0x24c>
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009282:	2b00      	cmp	r3, #0
 8009284:	d056      	beq.n	8009334 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2240      	movs	r2, #64	; 0x40
 800928c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009294:	f043 0208 	orr.w	r2, r3, #8
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d03e      	beq.n	8009326 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d018      	beq.n	80092e4 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092b8:	4a66      	ldr	r2, [pc, #408]	; (8009454 <HAL_SAI_IRQHandler+0x36c>)
 80092ba:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f8 febe 	bl	8002044 <HAL_DMA_Abort_IT>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f8ce 	bl	8009480 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 80ab 	beq.w	8009446 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f6:	4a57      	ldr	r2, [pc, #348]	; (8009454 <HAL_SAI_IRQHandler+0x36c>)
 80092f8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009300:	4618      	mov	r0, r3
 8009302:	f7f8 fe9f 	bl	8002044 <HAL_DMA_Abort_IT>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 809c 	beq.w	8009446 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009314:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f8ae 	bl	8009480 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009324:	e08f      	b.n	8009446 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff fdba 	bl	8008ea0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f8a7 	bl	8009480 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009332:	e088      	b.n	8009446 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d067      	beq.n	800940e <HAL_SAI_IRQHandler+0x326>
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	2b00      	cmp	r3, #0
 8009346:	d062      	beq.n	800940e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2204      	movs	r2, #4
 800934e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009356:	f043 0220 	orr.w	r2, r3, #32
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d03c      	beq.n	80093e4 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009370:	2b00      	cmp	r3, #0
 8009372:	d018      	beq.n	80093a6 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800937a:	4a36      	ldr	r2, [pc, #216]	; (8009454 <HAL_SAI_IRQHandler+0x36c>)
 800937c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009384:	4618      	mov	r0, r3
 8009386:	f7f8 fe5d 	bl	8002044 <HAL_DMA_Abort_IT>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009396:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f86d 	bl	8009480 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d04c      	beq.n	800944a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093b6:	4a27      	ldr	r2, [pc, #156]	; (8009454 <HAL_SAI_IRQHandler+0x36c>)
 80093b8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7f8 fe3f 	bl	8002044 <HAL_DMA_Abort_IT>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d03e      	beq.n	800944a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f84f 	bl	8009480 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80093e2:	e032      	b.n	800944a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2200      	movs	r2, #0
 80093ea:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f04f 32ff 	mov.w	r2, #4294967295
 80093f4:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f83a 	bl	8009480 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800940c:	e01d      	b.n	800944a <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2b00      	cmp	r3, #0
 8009416:	d019      	beq.n	800944c <HAL_SAI_IRQHandler+0x364>
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f003 0310 	and.w	r3, r3, #16
 800941e:	2b00      	cmp	r3, #0
 8009420:	d014      	beq.n	800944c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2210      	movs	r2, #16
 8009428:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009430:	f043 0210 	orr.w	r2, r3, #16
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f820 	bl	8009480 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8009440:	e004      	b.n	800944c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009442:	bf00      	nop
 8009444:	e002      	b.n	800944c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009446:	bf00      	nop
 8009448:	e000      	b.n	800944c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800944a:	bf00      	nop
}
 800944c:	bf00      	nop
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	08009653 	.word	0x08009653

08009458 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d103      	bne.n	80094b2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f043 0308 	orr.w	r3, r3, #8
 80094b0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b6:	2b08      	cmp	r3, #8
 80094b8:	d10b      	bne.n	80094d2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d003      	beq.n	80094ca <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d103      	bne.n	80094d2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f043 0310 	orr.w	r3, r3, #16
 80094d0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d003      	beq.n	80094e2 <SAI_InterruptFlag+0x4e>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d104      	bne.n	80094ec <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	e003      	b.n	80094f4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f043 0304 	orr.w	r3, r3, #4
 80094f2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80094f4:	68fb      	ldr	r3, [r7, #12]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
	...

08009504 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800950c:	4b18      	ldr	r3, [pc, #96]	; (8009570 <SAI_Disable+0x6c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a18      	ldr	r2, [pc, #96]	; (8009574 <SAI_Disable+0x70>)
 8009512:	fba2 2303 	umull	r2, r3, r2, r3
 8009516:	0b1b      	lsrs	r3, r3, #12
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800952e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10a      	bne.n	800954c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800953c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	72fb      	strb	r3, [r7, #11]
      break;
 800954a:	e009      	b.n	8009560 <SAI_Disable+0x5c>
    }
    count--;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3b01      	subs	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e7      	bne.n	8009530 <SAI_Disable+0x2c>

  return status;
 8009560:	7afb      	ldrb	r3, [r7, #11]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	24000000 	.word	0x24000000
 8009574:	95cbec1b 	.word	0x95cbec1b

08009578 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009584:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800958e:	d01c      	beq.n	80095ca <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800959e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80095a8:	2100      	movs	r1, #0
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f7ff ff72 	bl	8009494 <SAI_InterruptFlag>
 80095b0:	4603      	mov	r3, r0
 80095b2:	43d9      	mvns	r1, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691a      	ldr	r2, [r3, #16]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	400a      	ands	r2, r1
 80095c0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff ff44 	bl	8009458 <HAL_SAI_RxCpltCallback>
#endif
}
 80095d0:	bf00      	nop
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7ff ff40 	bl	800946c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80095ec:	bf00      	nop
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009600:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7f9 fe8e 	bl	8003324 <HAL_DMA_GetError>
 8009608:	4603      	mov	r3, r0
 800960a:	2b02      	cmp	r3, #2
 800960c:	d01d      	beq.n	800964a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009614:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800962c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff ff68 	bl	8009504 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff ff1b 	bl	8009480 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800966e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2200      	movs	r2, #0
 8009676:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f04f 32ff 	mov.w	r2, #4294967295
 8009680:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009688:	2b20      	cmp	r3, #32
 800968a:	d00a      	beq.n	80096a2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7ff ff39 	bl	8009504 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f042 0208 	orr.w	r2, r2, #8
 80096a0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff fee4 	bl	8009480 <HAL_SAI_ErrorCallback>
#endif
}
 80096b8:	bf00      	nop
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096c0:	b084      	sub	sp, #16
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	f107 001c 	add.w	r0, r7, #28
 80096ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d120      	bne.n	800971a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	4b2a      	ldr	r3, [pc, #168]	; (8009794 <USB_CoreInit+0xd4>)
 80096ea:	4013      	ands	r3, r2
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d105      	bne.n	800970e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 fc04 	bl	800af1c <USB_CoreReset>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
 8009718:	e01a      	b.n	8009750 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fbf8 	bl	800af1c <USB_CoreReset>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	d106      	bne.n	8009744 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	639a      	str	r2, [r3, #56]	; 0x38
 8009742:	e005      	b.n	8009750 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	2b01      	cmp	r3, #1
 8009754:	d116      	bne.n	8009784 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800975a:	b29a      	uxth	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009764:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <USB_CoreInit+0xd8>)
 8009766:	4313      	orrs	r3, r2
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f043 0206 	orr.w	r2, r3, #6
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f043 0220 	orr.w	r2, r3, #32
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009790:	b004      	add	sp, #16
 8009792:	4770      	bx	lr
 8009794:	ffbdffbf 	.word	0xffbdffbf
 8009798:	03ee0000 	.word	0x03ee0000

0800979c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	4613      	mov	r3, r2
 80097a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d165      	bne.n	800987c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	4a41      	ldr	r2, [pc, #260]	; (80098b8 <USB_SetTurnaroundTime+0x11c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d906      	bls.n	80097c6 <USB_SetTurnaroundTime+0x2a>
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4a40      	ldr	r2, [pc, #256]	; (80098bc <USB_SetTurnaroundTime+0x120>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d202      	bcs.n	80097c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80097c0:	230f      	movs	r3, #15
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	e062      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	4a3c      	ldr	r2, [pc, #240]	; (80098bc <USB_SetTurnaroundTime+0x120>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d306      	bcc.n	80097dc <USB_SetTurnaroundTime+0x40>
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	4a3b      	ldr	r2, [pc, #236]	; (80098c0 <USB_SetTurnaroundTime+0x124>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d202      	bcs.n	80097dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80097d6:	230e      	movs	r3, #14
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	e057      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	4a38      	ldr	r2, [pc, #224]	; (80098c0 <USB_SetTurnaroundTime+0x124>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d306      	bcc.n	80097f2 <USB_SetTurnaroundTime+0x56>
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	4a37      	ldr	r2, [pc, #220]	; (80098c4 <USB_SetTurnaroundTime+0x128>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d202      	bcs.n	80097f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80097ec:	230d      	movs	r3, #13
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	e04c      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	4a33      	ldr	r2, [pc, #204]	; (80098c4 <USB_SetTurnaroundTime+0x128>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d306      	bcc.n	8009808 <USB_SetTurnaroundTime+0x6c>
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	4a32      	ldr	r2, [pc, #200]	; (80098c8 <USB_SetTurnaroundTime+0x12c>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d802      	bhi.n	8009808 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009802:	230c      	movs	r3, #12
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	e041      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	4a2f      	ldr	r2, [pc, #188]	; (80098c8 <USB_SetTurnaroundTime+0x12c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d906      	bls.n	800981e <USB_SetTurnaroundTime+0x82>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4a2e      	ldr	r2, [pc, #184]	; (80098cc <USB_SetTurnaroundTime+0x130>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d802      	bhi.n	800981e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009818:	230b      	movs	r3, #11
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e036      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	4a2a      	ldr	r2, [pc, #168]	; (80098cc <USB_SetTurnaroundTime+0x130>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d906      	bls.n	8009834 <USB_SetTurnaroundTime+0x98>
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	4a29      	ldr	r2, [pc, #164]	; (80098d0 <USB_SetTurnaroundTime+0x134>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d802      	bhi.n	8009834 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800982e:	230a      	movs	r3, #10
 8009830:	617b      	str	r3, [r7, #20]
 8009832:	e02b      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4a26      	ldr	r2, [pc, #152]	; (80098d0 <USB_SetTurnaroundTime+0x134>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d906      	bls.n	800984a <USB_SetTurnaroundTime+0xae>
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4a25      	ldr	r2, [pc, #148]	; (80098d4 <USB_SetTurnaroundTime+0x138>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d202      	bcs.n	800984a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009844:	2309      	movs	r3, #9
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	e020      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	4a21      	ldr	r2, [pc, #132]	; (80098d4 <USB_SetTurnaroundTime+0x138>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d306      	bcc.n	8009860 <USB_SetTurnaroundTime+0xc4>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	4a20      	ldr	r2, [pc, #128]	; (80098d8 <USB_SetTurnaroundTime+0x13c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d802      	bhi.n	8009860 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800985a:	2308      	movs	r3, #8
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	e015      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	4a1d      	ldr	r2, [pc, #116]	; (80098d8 <USB_SetTurnaroundTime+0x13c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d906      	bls.n	8009876 <USB_SetTurnaroundTime+0xda>
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4a1c      	ldr	r2, [pc, #112]	; (80098dc <USB_SetTurnaroundTime+0x140>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d202      	bcs.n	8009876 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009870:	2307      	movs	r3, #7
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	e00a      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009876:	2306      	movs	r3, #6
 8009878:	617b      	str	r3, [r7, #20]
 800987a:	e007      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d102      	bne.n	8009888 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009882:	2309      	movs	r3, #9
 8009884:	617b      	str	r3, [r7, #20]
 8009886:	e001      	b.n	800988c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009888:	2309      	movs	r3, #9
 800988a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	68da      	ldr	r2, [r3, #12]
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	029b      	lsls	r3, r3, #10
 80098a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80098a4:	431a      	orrs	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	00d8acbf 	.word	0x00d8acbf
 80098bc:	00e4e1c0 	.word	0x00e4e1c0
 80098c0:	00f42400 	.word	0x00f42400
 80098c4:	01067380 	.word	0x01067380
 80098c8:	011a499f 	.word	0x011a499f
 80098cc:	01312cff 	.word	0x01312cff
 80098d0:	014ca43f 	.word	0x014ca43f
 80098d4:	016e3600 	.word	0x016e3600
 80098d8:	01a6ab1f 	.word	0x01a6ab1f
 80098dc:	01e84800 	.word	0x01e84800

080098e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f043 0201 	orr.w	r2, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f023 0201 	bic.w	r2, r3, #1
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d115      	bne.n	8009972 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009952:	2001      	movs	r0, #1
 8009954:	f7f7 f952 	bl	8000bfc <HAL_Delay>
      ms++;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 fa4b 	bl	800adfa <USB_GetMode>
 8009964:	4603      	mov	r3, r0
 8009966:	2b01      	cmp	r3, #1
 8009968:	d01e      	beq.n	80099a8 <USB_SetCurrentMode+0x84>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b31      	cmp	r3, #49	; 0x31
 800996e:	d9f0      	bls.n	8009952 <USB_SetCurrentMode+0x2e>
 8009970:	e01a      	b.n	80099a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009972:	78fb      	ldrb	r3, [r7, #3]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d115      	bne.n	80099a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009984:	2001      	movs	r0, #1
 8009986:	f7f7 f939 	bl	8000bfc <HAL_Delay>
      ms++;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3301      	adds	r3, #1
 800998e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 fa32 	bl	800adfa <USB_GetMode>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <USB_SetCurrentMode+0x84>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b31      	cmp	r3, #49	; 0x31
 80099a0:	d9f0      	bls.n	8009984 <USB_SetCurrentMode+0x60>
 80099a2:	e001      	b.n	80099a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e005      	b.n	80099b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b32      	cmp	r3, #50	; 0x32
 80099ac:	d101      	bne.n	80099b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e000      	b.n	80099b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099bc:	b084      	sub	sp, #16
 80099be:	b580      	push	{r7, lr}
 80099c0:	b086      	sub	sp, #24
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80099ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80099d6:	2300      	movs	r3, #0
 80099d8:	613b      	str	r3, [r7, #16]
 80099da:	e009      	b.n	80099f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	3340      	adds	r3, #64	; 0x40
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	2200      	movs	r2, #0
 80099e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	3301      	adds	r3, #1
 80099ee:	613b      	str	r3, [r7, #16]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2b0e      	cmp	r3, #14
 80099f4:	d9f2      	bls.n	80099dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80099f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d11c      	bne.n	8009a36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a0a:	f043 0302 	orr.w	r3, r3, #2
 8009a0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	e005      	b.n	8009a42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a48:	461a      	mov	r2, r3
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a54:	4619      	mov	r1, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	680b      	ldr	r3, [r1, #0]
 8009a60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d10c      	bne.n	8009a82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d104      	bne.n	8009a78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a6e:	2100      	movs	r1, #0
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f965 	bl	8009d40 <USB_SetDevSpeed>
 8009a76:	e008      	b.n	8009a8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a78:	2101      	movs	r1, #1
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f960 	bl	8009d40 <USB_SetDevSpeed>
 8009a80:	e003      	b.n	8009a8a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a82:	2103      	movs	r1, #3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f95b 	bl	8009d40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a8a:	2110      	movs	r1, #16
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f8f3 	bl	8009c78 <USB_FlushTxFifo>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f91f 	bl	8009ce0 <USB_FlushRxFifo>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009abe:	461a      	mov	r2, r3
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aca:	461a      	mov	r2, r3
 8009acc:	2300      	movs	r3, #0
 8009ace:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	e043      	b.n	8009b5e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aec:	d118      	bne.n	8009b20 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10a      	bne.n	8009b0a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b00:	461a      	mov	r2, r3
 8009b02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	e013      	b.n	8009b32 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b16:	461a      	mov	r2, r3
 8009b18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	e008      	b.n	8009b32 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	2300      	movs	r3, #0
 8009b30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b3e:	461a      	mov	r2, r3
 8009b40:	2300      	movs	r3, #0
 8009b42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b50:	461a      	mov	r2, r3
 8009b52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	613b      	str	r3, [r7, #16]
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d3b7      	bcc.n	8009ad6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b66:	2300      	movs	r3, #0
 8009b68:	613b      	str	r3, [r7, #16]
 8009b6a:	e043      	b.n	8009bf4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b82:	d118      	bne.n	8009bb6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10a      	bne.n	8009ba0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b96:	461a      	mov	r2, r3
 8009b98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	e013      	b.n	8009bc8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bac:	461a      	mov	r2, r3
 8009bae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	e008      	b.n	8009bc8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be6:	461a      	mov	r2, r3
 8009be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	613b      	str	r3, [r7, #16]
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d3b7      	bcc.n	8009b6c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009c1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d105      	bne.n	8009c30 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f043 0210 	orr.w	r2, r3, #16
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	699a      	ldr	r2, [r3, #24]
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <USB_DevInit+0x2b4>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d005      	beq.n	8009c4e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	f043 0208 	orr.w	r2, r3, #8
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d105      	bne.n	8009c60 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	699a      	ldr	r2, [r3, #24]
 8009c58:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <USB_DevInit+0x2b8>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c6c:	b004      	add	sp, #16
 8009c6e:	4770      	bx	lr
 8009c70:	803c3800 	.word	0x803c3800
 8009c74:	40000004 	.word	0x40000004

08009c78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4a13      	ldr	r2, [pc, #76]	; (8009cdc <USB_FlushTxFifo+0x64>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d901      	bls.n	8009c98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e01b      	b.n	8009cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	daf2      	bge.n	8009c86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	019b      	lsls	r3, r3, #6
 8009ca8:	f043 0220 	orr.w	r2, r3, #32
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a08      	ldr	r2, [pc, #32]	; (8009cdc <USB_FlushTxFifo+0x64>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d901      	bls.n	8009cc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e006      	b.n	8009cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	d0f0      	beq.n	8009cb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	00030d40 	.word	0x00030d40

08009ce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	4a11      	ldr	r2, [pc, #68]	; (8009d3c <USB_FlushRxFifo+0x5c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d901      	bls.n	8009cfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e018      	b.n	8009d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	daf2      	bge.n	8009cec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2210      	movs	r2, #16
 8009d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	3301      	adds	r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4a08      	ldr	r2, [pc, #32]	; (8009d3c <USB_FlushRxFifo+0x5c>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d901      	bls.n	8009d22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e006      	b.n	8009d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f003 0310 	and.w	r3, r3, #16
 8009d2a:	2b10      	cmp	r3, #16
 8009d2c:	d0f0      	beq.n	8009d10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	00030d40 	.word	0x00030d40

08009d40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	78fb      	ldrb	r3, [r7, #3]
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d60:	4313      	orrs	r3, r2
 8009d62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b087      	sub	sp, #28
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f003 0306 	and.w	r3, r3, #6
 8009d8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009d92:	2300      	movs	r3, #0
 8009d94:	75fb      	strb	r3, [r7, #23]
 8009d96:	e00a      	b.n	8009dae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d002      	beq.n	8009da4 <USB_GetDevSpeed+0x32>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b06      	cmp	r3, #6
 8009da2:	d102      	bne.n	8009daa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009da4:	2302      	movs	r3, #2
 8009da6:	75fb      	strb	r3, [r7, #23]
 8009da8:	e001      	b.n	8009dae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009daa:	230f      	movs	r3, #15
 8009dac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	371c      	adds	r7, #28
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	785b      	ldrb	r3, [r3, #1]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d139      	bne.n	8009e4c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dde:	69da      	ldr	r2, [r3, #28]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	f003 030f 	and.w	r3, r3, #15
 8009de8:	2101      	movs	r1, #1
 8009dea:	fa01 f303 	lsl.w	r3, r1, r3
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	68f9      	ldr	r1, [r7, #12]
 8009df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009df6:	4313      	orrs	r3, r2
 8009df8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d153      	bne.n	8009eb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	791b      	ldrb	r3, [r3, #4]
 8009e2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	059b      	lsls	r3, r3, #22
 8009e32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e34:	431a      	orrs	r2, r3
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	0159      	lsls	r1, r3, #5
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	440b      	add	r3, r1
 8009e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e42:	4619      	mov	r1, r3
 8009e44:	4b20      	ldr	r3, [pc, #128]	; (8009ec8 <USB_ActivateEndpoint+0x10c>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	600b      	str	r3, [r1, #0]
 8009e4a:	e035      	b.n	8009eb8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e52:	69da      	ldr	r2, [r3, #28]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	f003 030f 	and.w	r3, r3, #15
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e62:	041b      	lsls	r3, r3, #16
 8009e64:	68f9      	ldr	r1, [r7, #12]
 8009e66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d119      	bne.n	8009eb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	791b      	ldrb	r3, [r3, #4]
 8009e9e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	0159      	lsls	r1, r3, #5
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	440b      	add	r3, r1
 8009eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <USB_ActivateEndpoint+0x10c>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	10008000 	.word	0x10008000

08009ecc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d161      	bne.n	8009fac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009efe:	d11f      	bne.n	8009f40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	0151      	lsls	r1, r2, #5
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	440a      	add	r2, r1
 8009f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	0151      	lsls	r1, r2, #5
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	440a      	add	r2, r1
 8009f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	f003 030f 	and.w	r3, r3, #15
 8009f50:	2101      	movs	r1, #1
 8009f52:	fa01 f303 	lsl.w	r3, r1, r3
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	68f9      	ldr	r1, [r7, #12]
 8009f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f60:	4013      	ands	r3, r2
 8009f62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f6a:	69da      	ldr	r2, [r3, #28]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	f003 030f 	and.w	r3, r3, #15
 8009f74:	2101      	movs	r1, #1
 8009f76:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	43db      	mvns	r3, r3
 8009f7e:	68f9      	ldr	r1, [r7, #12]
 8009f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f84:	4013      	ands	r3, r2
 8009f86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	0159      	lsls	r1, r3, #5
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	440b      	add	r3, r1
 8009f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4b35      	ldr	r3, [pc, #212]	; (800a07c <USB_DeactivateEndpoint+0x1b0>)
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	600b      	str	r3, [r1, #0]
 8009faa:	e060      	b.n	800a06e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fc2:	d11f      	bne.n	800a004 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	0151      	lsls	r1, r2, #5
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	440a      	add	r2, r1
 8009fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fe2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	0151      	lsls	r1, r2, #5
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	440a      	add	r2, r1
 8009ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a002:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a00a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	f003 030f 	and.w	r3, r3, #15
 800a014:	2101      	movs	r1, #1
 800a016:	fa01 f303 	lsl.w	r3, r1, r3
 800a01a:	041b      	lsls	r3, r3, #16
 800a01c:	43db      	mvns	r3, r3
 800a01e:	68f9      	ldr	r1, [r7, #12]
 800a020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a024:	4013      	ands	r3, r2
 800a026:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02e:	69da      	ldr	r2, [r3, #28]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	2101      	movs	r1, #1
 800a03a:	fa01 f303 	lsl.w	r3, r1, r3
 800a03e:	041b      	lsls	r3, r3, #16
 800a040:	43db      	mvns	r3, r3
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a048:	4013      	ands	r3, r2
 800a04a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	0159      	lsls	r1, r3, #5
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	440b      	add	r3, r1
 800a062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a066:	4619      	mov	r1, r3
 800a068:	4b05      	ldr	r3, [pc, #20]	; (800a080 <USB_DeactivateEndpoint+0x1b4>)
 800a06a:	4013      	ands	r3, r2
 800a06c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	ec337800 	.word	0xec337800
 800a080:	eff37800 	.word	0xeff37800

0800a084 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08a      	sub	sp, #40	; 0x28
 800a088:	af02      	add	r7, sp, #8
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	4613      	mov	r3, r2
 800a090:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	785b      	ldrb	r3, [r3, #1]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	f040 8163 	bne.w	800a36c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d132      	bne.n	800a114 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	0159      	lsls	r1, r3, #5
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	440b      	add	r3, r1
 800a0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4ba5      	ldr	r3, [pc, #660]	; (800a360 <USB_EPStartXfer+0x2dc>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fc:	691a      	ldr	r2, [r3, #16]
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	0159      	lsls	r1, r3, #5
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	440b      	add	r3, r1
 800a106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10a:	4619      	mov	r1, r3
 800a10c:	4b95      	ldr	r3, [pc, #596]	; (800a364 <USB_EPStartXfer+0x2e0>)
 800a10e:	4013      	ands	r3, r2
 800a110:	610b      	str	r3, [r1, #16]
 800a112:	e074      	b.n	800a1fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a120:	691a      	ldr	r2, [r3, #16]
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	0159      	lsls	r1, r3, #5
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	440b      	add	r3, r1
 800a12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12e:	4619      	mov	r1, r3
 800a130:	4b8c      	ldr	r3, [pc, #560]	; (800a364 <USB_EPStartXfer+0x2e0>)
 800a132:	4013      	ands	r3, r2
 800a134:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	015a      	lsls	r2, r3, #5
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	4413      	add	r3, r2
 800a13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a142:	691a      	ldr	r2, [r3, #16]
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	0159      	lsls	r1, r3, #5
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	440b      	add	r3, r1
 800a14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a150:	4619      	mov	r1, r3
 800a152:	4b83      	ldr	r3, [pc, #524]	; (800a360 <USB_EPStartXfer+0x2dc>)
 800a154:	4013      	ands	r3, r2
 800a156:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a164:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	6999      	ldr	r1, [r3, #24]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	440b      	add	r3, r1
 800a170:	1e59      	subs	r1, r3, #1
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	fbb1 f3f3 	udiv	r3, r1, r3
 800a17a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a17c:	4b7a      	ldr	r3, [pc, #488]	; (800a368 <USB_EPStartXfer+0x2e4>)
 800a17e:	400b      	ands	r3, r1
 800a180:	69b9      	ldr	r1, [r7, #24]
 800a182:	0148      	lsls	r0, r1, #5
 800a184:	69f9      	ldr	r1, [r7, #28]
 800a186:	4401      	add	r1, r0
 800a188:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a18c:	4313      	orrs	r3, r2
 800a18e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19c:	691a      	ldr	r2, [r3, #16]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1a6:	69b9      	ldr	r1, [r7, #24]
 800a1a8:	0148      	lsls	r0, r1, #5
 800a1aa:	69f9      	ldr	r1, [r7, #28]
 800a1ac:	4401      	add	r1, r0
 800a1ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	791b      	ldrb	r3, [r3, #4]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d11f      	bne.n	800a1fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	0151      	lsls	r1, r2, #5
 800a1d0:	69fa      	ldr	r2, [r7, #28]
 800a1d2:	440a      	add	r2, r1
 800a1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a1dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	0151      	lsls	r1, r2, #5
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	440a      	add	r2, r1
 800a1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a1fe:	79fb      	ldrb	r3, [r7, #7]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d14b      	bne.n	800a29c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d009      	beq.n	800a220 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a218:	461a      	mov	r2, r3
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	791b      	ldrb	r3, [r3, #4]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d128      	bne.n	800a27a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a234:	2b00      	cmp	r3, #0
 800a236:	d110      	bne.n	800a25a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	69ba      	ldr	r2, [r7, #24]
 800a248:	0151      	lsls	r1, r2, #5
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	440a      	add	r2, r1
 800a24e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	e00f      	b.n	800a27a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	0151      	lsls	r1, r2, #5
 800a26c:	69fa      	ldr	r2, [r7, #28]
 800a26e:	440a      	add	r2, r1
 800a270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a278:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	015a      	lsls	r2, r3, #5
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	4413      	add	r3, r2
 800a282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	0151      	lsls	r1, r2, #5
 800a28c:	69fa      	ldr	r2, [r7, #28]
 800a28e:	440a      	add	r2, r1
 800a290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a294:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	e137      	b.n	800a50c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	0151      	lsls	r1, r2, #5
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	440a      	add	r2, r1
 800a2b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	791b      	ldrb	r3, [r3, #4]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d015      	beq.n	800a2f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 811f 	beq.w	800a50c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	f003 030f 	and.w	r3, r3, #15
 800a2de:	2101      	movs	r1, #1
 800a2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e4:	69f9      	ldr	r1, [r7, #28]
 800a2e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	634b      	str	r3, [r1, #52]	; 0x34
 800a2ee:	e10d      	b.n	800a50c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d110      	bne.n	800a322 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	015a      	lsls	r2, r3, #5
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	4413      	add	r3, r2
 800a308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	69ba      	ldr	r2, [r7, #24]
 800a310:	0151      	lsls	r1, r2, #5
 800a312:	69fa      	ldr	r2, [r7, #28]
 800a314:	440a      	add	r2, r1
 800a316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a31a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	e00f      	b.n	800a342 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	69ba      	ldr	r2, [r7, #24]
 800a332:	0151      	lsls	r1, r2, #5
 800a334:	69fa      	ldr	r2, [r7, #28]
 800a336:	440a      	add	r2, r1
 800a338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a33c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a340:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	6919      	ldr	r1, [r3, #16]
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	781a      	ldrb	r2, [r3, #0]
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	b298      	uxth	r0, r3
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	4603      	mov	r3, r0
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 faea 	bl	800a930 <USB_WritePacket>
 800a35c:	e0d6      	b.n	800a50c <USB_EPStartXfer+0x488>
 800a35e:	bf00      	nop
 800a360:	e007ffff 	.word	0xe007ffff
 800a364:	fff80000 	.word	0xfff80000
 800a368:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	4413      	add	r3, r2
 800a374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a378:	691a      	ldr	r2, [r3, #16]
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	0159      	lsls	r1, r3, #5
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	440b      	add	r3, r1
 800a382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a386:	4619      	mov	r1, r3
 800a388:	4b63      	ldr	r3, [pc, #396]	; (800a518 <USB_EPStartXfer+0x494>)
 800a38a:	4013      	ands	r3, r2
 800a38c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39a:	691a      	ldr	r2, [r3, #16]
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	0159      	lsls	r1, r3, #5
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	440b      	add	r3, r1
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4b5c      	ldr	r3, [pc, #368]	; (800a51c <USB_EPStartXfer+0x498>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d123      	bne.n	800a400 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	015a      	lsls	r2, r3, #5
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	4413      	add	r3, r2
 800a3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c4:	691a      	ldr	r2, [r3, #16]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3ce:	69b9      	ldr	r1, [r7, #24]
 800a3d0:	0148      	lsls	r0, r1, #5
 800a3d2:	69f9      	ldr	r1, [r7, #28]
 800a3d4:	4401      	add	r1, r0
 800a3d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	69ba      	ldr	r2, [r7, #24]
 800a3ee:	0151      	lsls	r1, r2, #5
 800a3f0:	69fa      	ldr	r2, [r7, #28]
 800a3f2:	440a      	add	r2, r1
 800a3f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3fc:	6113      	str	r3, [r2, #16]
 800a3fe:	e037      	b.n	800a470 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	699a      	ldr	r2, [r3, #24]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	4413      	add	r3, r2
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	fbb2 f3f3 	udiv	r3, r2, r3
 800a414:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	8afa      	ldrh	r2, [r7, #22]
 800a41c:	fb03 f202 	mul.w	r2, r3, r2
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a430:	691a      	ldr	r2, [r3, #16]
 800a432:	8afb      	ldrh	r3, [r7, #22]
 800a434:	04d9      	lsls	r1, r3, #19
 800a436:	4b3a      	ldr	r3, [pc, #232]	; (800a520 <USB_EPStartXfer+0x49c>)
 800a438:	400b      	ands	r3, r1
 800a43a:	69b9      	ldr	r1, [r7, #24]
 800a43c:	0148      	lsls	r0, r1, #5
 800a43e:	69f9      	ldr	r1, [r7, #28]
 800a440:	4401      	add	r1, r0
 800a442:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a446:	4313      	orrs	r3, r2
 800a448:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a460:	69b9      	ldr	r1, [r7, #24]
 800a462:	0148      	lsls	r0, r1, #5
 800a464:	69f9      	ldr	r1, [r7, #28]
 800a466:	4401      	add	r1, r0
 800a468:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a46c:	4313      	orrs	r3, r2
 800a46e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a470:	79fb      	ldrb	r3, [r7, #7]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d10d      	bne.n	800a492 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d009      	beq.n	800a492 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	6919      	ldr	r1, [r3, #16]
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	015a      	lsls	r2, r3, #5
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	4413      	add	r3, r2
 800a48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a48e:	460a      	mov	r2, r1
 800a490:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	791b      	ldrb	r3, [r3, #4]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d128      	bne.n	800a4ec <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d110      	bne.n	800a4cc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	69ba      	ldr	r2, [r7, #24]
 800a4ba:	0151      	lsls	r1, r2, #5
 800a4bc:	69fa      	ldr	r2, [r7, #28]
 800a4be:	440a      	add	r2, r1
 800a4c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	e00f      	b.n	800a4ec <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	0151      	lsls	r1, r2, #5
 800a4de:	69fa      	ldr	r2, [r7, #28]
 800a4e0:	440a      	add	r2, r1
 800a4e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	0151      	lsls	r1, r2, #5
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	440a      	add	r2, r1
 800a502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a506:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a50a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3720      	adds	r7, #32
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	fff80000 	.word	0xfff80000
 800a51c:	e007ffff 	.word	0xe007ffff
 800a520:	1ff80000 	.word	0x1ff80000

0800a524 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	4613      	mov	r3, r2
 800a530:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	785b      	ldrb	r3, [r3, #1]
 800a540:	2b01      	cmp	r3, #1
 800a542:	f040 80ce 	bne.w	800a6e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d132      	bne.n	800a5b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	4413      	add	r3, r2
 800a556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a55a:	691a      	ldr	r2, [r3, #16]
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	0159      	lsls	r1, r3, #5
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	440b      	add	r3, r1
 800a564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a568:	4619      	mov	r1, r3
 800a56a:	4b9a      	ldr	r3, [pc, #616]	; (800a7d4 <USB_EP0StartXfer+0x2b0>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	0151      	lsls	r1, r2, #5
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	440a      	add	r2, r1
 800a586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a58a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a58e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	0159      	lsls	r1, r3, #5
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	440b      	add	r3, r1
 800a5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4b8a      	ldr	r3, [pc, #552]	; (800a7d8 <USB_EP0StartXfer+0x2b4>)
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	610b      	str	r3, [r1, #16]
 800a5b2:	e04e      	b.n	800a652 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c0:	691a      	ldr	r2, [r3, #16]
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	0159      	lsls	r1, r3, #5
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	440b      	add	r3, r1
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4b81      	ldr	r3, [pc, #516]	; (800a7d8 <USB_EP0StartXfer+0x2b4>)
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e2:	691a      	ldr	r2, [r3, #16]
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	0159      	lsls	r1, r3, #5
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	440b      	add	r3, r1
 800a5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4b78      	ldr	r3, [pc, #480]	; (800a7d4 <USB_EP0StartXfer+0x2b0>)
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	699a      	ldr	r2, [r3, #24]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	429a      	cmp	r2, r3
 800a602:	d903      	bls.n	800a60c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	68da      	ldr	r2, [r3, #12]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	0151      	lsls	r1, r2, #5
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	440a      	add	r2, r1
 800a622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a62a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a638:	691a      	ldr	r2, [r3, #16]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a642:	6939      	ldr	r1, [r7, #16]
 800a644:	0148      	lsls	r0, r1, #5
 800a646:	6979      	ldr	r1, [r7, #20]
 800a648:	4401      	add	r1, r0
 800a64a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a64e:	4313      	orrs	r3, r2
 800a650:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a652:	79fb      	ldrb	r3, [r7, #7]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d11e      	bne.n	800a696 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d009      	beq.n	800a674 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a66c:	461a      	mov	r2, r3
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	0151      	lsls	r1, r2, #5
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	440a      	add	r2, r1
 800a68a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a68e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a692:	6013      	str	r3, [r2, #0]
 800a694:	e097      	b.n	800a7c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	0151      	lsls	r1, r2, #5
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	440a      	add	r2, r1
 800a6ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 8083 	beq.w	800a7c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d6:	6979      	ldr	r1, [r7, #20]
 800a6d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	634b      	str	r3, [r1, #52]	; 0x34
 800a6e0:	e071      	b.n	800a7c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	015a      	lsls	r2, r3, #5
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ee:	691a      	ldr	r2, [r3, #16]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	0159      	lsls	r1, r3, #5
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	440b      	add	r3, r1
 800a6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4b36      	ldr	r3, [pc, #216]	; (800a7d8 <USB_EP0StartXfer+0x2b4>)
 800a700:	4013      	ands	r3, r2
 800a702:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	015a      	lsls	r2, r3, #5
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	4413      	add	r3, r2
 800a70c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a710:	691a      	ldr	r2, [r3, #16]
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	0159      	lsls	r1, r3, #5
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	440b      	add	r3, r1
 800a71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a71e:	4619      	mov	r1, r3
 800a720:	4b2c      	ldr	r3, [pc, #176]	; (800a7d4 <USB_EP0StartXfer+0x2b0>)
 800a722:	4013      	ands	r3, r2
 800a724:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	68da      	ldr	r2, [r3, #12]
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	68da      	ldr	r2, [r3, #12]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	0151      	lsls	r1, r2, #5
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	440a      	add	r2, r1
 800a754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a75c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76a:	691a      	ldr	r2, [r3, #16]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a774:	6939      	ldr	r1, [r7, #16]
 800a776:	0148      	lsls	r0, r1, #5
 800a778:	6979      	ldr	r1, [r7, #20]
 800a77a:	4401      	add	r1, r0
 800a77c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a780:	4313      	orrs	r3, r2
 800a782:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d10d      	bne.n	800a7a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d009      	beq.n	800a7a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	6919      	ldr	r1, [r3, #16]
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a2:	460a      	mov	r2, r1
 800a7a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	0151      	lsls	r1, r2, #5
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	440a      	add	r2, r1
 800a7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	371c      	adds	r7, #28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	e007ffff 	.word	0xe007ffff
 800a7d8:	fff80000 	.word	0xfff80000

0800a7dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d14a      	bne.n	800a890 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a80e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a812:	f040 8086 	bne.w	800a922 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	7812      	ldrb	r2, [r2, #0]
 800a82a:	0151      	lsls	r1, r2, #5
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	440a      	add	r2, r1
 800a830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a838:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	7812      	ldrb	r2, [r2, #0]
 800a84e:	0151      	lsls	r1, r2, #5
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	440a      	add	r2, r1
 800a854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a85c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3301      	adds	r3, #1
 800a862:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f242 7210 	movw	r2, #10000	; 0x2710
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d902      	bls.n	800a874 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	75fb      	strb	r3, [r7, #23]
          break;
 800a872:	e056      	b.n	800a922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	015a      	lsls	r2, r3, #5
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	4413      	add	r3, r2
 800a87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a88c:	d0e7      	beq.n	800a85e <USB_EPStopXfer+0x82>
 800a88e:	e048      	b.n	800a922 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8a8:	d13b      	bne.n	800a922 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	7812      	ldrb	r2, [r2, #0]
 800a8be:	0151      	lsls	r1, r2, #5
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	440a      	add	r2, r1
 800a8c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a8cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	7812      	ldrb	r2, [r2, #0]
 800a8e2:	0151      	lsls	r1, r2, #5
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	440a      	add	r2, r1
 800a8e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f242 7210 	movw	r2, #10000	; 0x2710
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d902      	bls.n	800a908 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	75fb      	strb	r3, [r7, #23]
          break;
 800a906:	e00c      	b.n	800a922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	4413      	add	r3, r2
 800a912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a91c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a920:	d0e7      	beq.n	800a8f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a922:	7dfb      	ldrb	r3, [r7, #23]
}
 800a924:	4618      	mov	r0, r3
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a930:	b480      	push	{r7}
 800a932:	b089      	sub	sp, #36	; 0x24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	4611      	mov	r1, r2
 800a93c:	461a      	mov	r2, r3
 800a93e:	460b      	mov	r3, r1
 800a940:	71fb      	strb	r3, [r7, #7]
 800a942:	4613      	mov	r3, r2
 800a944:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a94e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a952:	2b00      	cmp	r3, #0
 800a954:	d123      	bne.n	800a99e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a956:	88bb      	ldrh	r3, [r7, #4]
 800a958:	3303      	adds	r3, #3
 800a95a:	089b      	lsrs	r3, r3, #2
 800a95c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a95e:	2300      	movs	r3, #0
 800a960:	61bb      	str	r3, [r7, #24]
 800a962:	e018      	b.n	800a996 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	031a      	lsls	r2, r3, #12
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a970:	461a      	mov	r2, r3
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	3301      	adds	r3, #1
 800a97c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	3301      	adds	r3, #1
 800a982:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	3301      	adds	r3, #1
 800a988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	3301      	adds	r3, #1
 800a98e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	3301      	adds	r3, #1
 800a994:	61bb      	str	r3, [r7, #24]
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d3e2      	bcc.n	800a964 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3724      	adds	r7, #36	; 0x24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b08b      	sub	sp, #44	; 0x2c
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9c2:	88fb      	ldrh	r3, [r7, #6]
 800a9c4:	089b      	lsrs	r3, r3, #2
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9ca:	88fb      	ldrh	r3, [r7, #6]
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	623b      	str	r3, [r7, #32]
 800a9d6:	e014      	b.n	800aa02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	623b      	str	r3, [r7, #32]
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d3e6      	bcc.n	800a9d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa0a:	8bfb      	ldrh	r3, [r7, #30]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d01e      	beq.n	800aa4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f107 0310 	add.w	r3, r7, #16
 800aa20:	6812      	ldr	r2, [r2, #0]
 800aa22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	701a      	strb	r2, [r3, #0]
      i++;
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	3301      	adds	r3, #1
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aa42:	8bfb      	ldrh	r3, [r7, #30]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa48:	8bfb      	ldrh	r3, [r7, #30]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1ea      	bne.n	800aa24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	372c      	adds	r7, #44	; 0x2c
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	785b      	ldrb	r3, [r3, #1]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d12c      	bne.n	800aad2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	db12      	blt.n	800aab0 <USB_EPSetStall+0x54>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00f      	beq.n	800aab0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	0151      	lsls	r1, r2, #5
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	440a      	add	r2, r1
 800aaa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aaae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	0151      	lsls	r1, r2, #5
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	440a      	add	r2, r1
 800aac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aace:	6013      	str	r3, [r2, #0]
 800aad0:	e02b      	b.n	800ab2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	db12      	blt.n	800ab0a <USB_EPSetStall+0xae>
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00f      	beq.n	800ab0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	0151      	lsls	r1, r2, #5
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	440a      	add	r2, r1
 800ab00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	0151      	lsls	r1, r2, #5
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	440a      	add	r2, r1
 800ab20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	785b      	ldrb	r3, [r3, #1]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d128      	bne.n	800aba6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	0151      	lsls	r1, r2, #5
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	440a      	add	r2, r1
 800ab6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	791b      	ldrb	r3, [r3, #4]
 800ab78:	2b03      	cmp	r3, #3
 800ab7a:	d003      	beq.n	800ab84 <USB_EPClearStall+0x4c>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	791b      	ldrb	r3, [r3, #4]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d138      	bne.n	800abf6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	0151      	lsls	r1, r2, #5
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	440a      	add	r2, r1
 800ab9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	e027      	b.n	800abf6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	0151      	lsls	r1, r2, #5
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	440a      	add	r2, r1
 800abbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	791b      	ldrb	r3, [r3, #4]
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d003      	beq.n	800abd6 <USB_EPClearStall+0x9e>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	791b      	ldrb	r3, [r3, #4]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d10f      	bne.n	800abf6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	015a      	lsls	r2, r3, #5
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	4413      	add	r3, r2
 800abde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	0151      	lsls	r1, r2, #5
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	440a      	add	r2, r1
 800abec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abf4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ac26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ac38:	68f9      	ldr	r1, [r7, #12]
 800ac3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac7e:	f023 0302 	bic.w	r3, r3, #2
 800ac82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800acac:	f023 0303 	bic.w	r3, r3, #3
 800acb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acc0:	f043 0302 	orr.w	r3, r3, #2
 800acc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	4013      	ands	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800acec:	68fb      	ldr	r3, [r7, #12]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acfa:	b480      	push	{r7}
 800acfc:	b085      	sub	sp, #20
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	0c1b      	lsrs	r3, r3, #16
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b085      	sub	sp, #20
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad4a:	69db      	ldr	r3, [r3, #28]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	4013      	ands	r3, r2
 800ad50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	b29b      	uxth	r3, r3
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b085      	sub	sp, #20
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad90:	68bb      	ldr	r3, [r7, #8]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b087      	sub	sp, #28
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	460b      	mov	r3, r1
 800ada8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	f003 030f 	and.w	r3, r3, #15
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	fa22 f303 	lsr.w	r3, r2, r3
 800adce:	01db      	lsls	r3, r3, #7
 800add0:	b2db      	uxtb	r3, r3
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	4313      	orrs	r3, r2
 800add6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	4013      	ands	r3, r2
 800adea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adec:	68bb      	ldr	r3, [r7, #8]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	371c      	adds	r7, #28
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	f003 0301 	and.w	r3, r3, #1
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
	...

0800ae18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae32:	4619      	mov	r1, r3
 800ae34:	4b09      	ldr	r3, [pc, #36]	; (800ae5c <USB_ActivateSetup+0x44>)
 800ae36:	4013      	ands	r3, r2
 800ae38:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	fffff800 	.word	0xfffff800

0800ae60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	333c      	adds	r3, #60	; 0x3c
 800ae76:	3304      	adds	r3, #4
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	4a26      	ldr	r2, [pc, #152]	; (800af18 <USB_EP0_OutStart+0xb8>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d90a      	bls.n	800ae9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae94:	d101      	bne.n	800ae9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e037      	b.n	800af0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea0:	461a      	mov	r2, r3
 800aea2:	2300      	movs	r3, #0
 800aea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aeb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aec8:	f043 0318 	orr.w	r3, r3, #24
 800aecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aedc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aee0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aee2:	7afb      	ldrb	r3, [r7, #11]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d10f      	bne.n	800af08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeee:	461a      	mov	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800af06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	371c      	adds	r7, #28
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	4f54300a 	.word	0x4f54300a

0800af1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3301      	adds	r3, #1
 800af2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	4a13      	ldr	r2, [pc, #76]	; (800af80 <USB_CoreReset+0x64>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d901      	bls.n	800af3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af36:	2303      	movs	r3, #3
 800af38:	e01b      	b.n	800af72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	daf2      	bge.n	800af28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	f043 0201 	orr.w	r2, r3, #1
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3301      	adds	r3, #1
 800af56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4a09      	ldr	r2, [pc, #36]	; (800af80 <USB_CoreReset+0x64>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d901      	bls.n	800af64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e006      	b.n	800af72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d0f0      	beq.n	800af52 <USB_CoreReset+0x36>

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	00030d40 	.word	0x00030d40

0800af84 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800af90:	f643 4050 	movw	r0, #15440	; 0x3c50
 800af94:	f002 fb02 	bl	800d59c <USBD_static_malloc>
 800af98:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d109      	bne.n	800afb4 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	32b0      	adds	r2, #176	; 0xb0
 800afaa:	2100      	movs	r1, #0
 800afac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800afb0:	2302      	movs	r3, #2
 800afb2:	e07e      	b.n	800b0b2 <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	32b0      	adds	r2, #176	; 0xb0
 800afbe:	68f9      	ldr	r1, [r7, #12]
 800afc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	32b0      	adds	r2, #176	; 0xb0
 800afce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	7c1b      	ldrb	r3, [r3, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10e      	bne.n	800affe <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800afe0:	4b36      	ldr	r3, [pc, #216]	; (800b0bc <USBD_AUDIO_Init+0x138>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	f003 020f 	and.w	r2, r3, #15
 800afe8:	6879      	ldr	r1, [r7, #4]
 800afea:	4613      	mov	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	440b      	add	r3, r1
 800aff4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800aff8:	2201      	movs	r2, #1
 800affa:	801a      	strh	r2, [r3, #0]
 800affc:	e00d      	b.n	800b01a <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800affe:	4b2f      	ldr	r3, [pc, #188]	; (800b0bc <USBD_AUDIO_Init+0x138>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	f003 020f 	and.w	r2, r3, #15
 800b006:	6879      	ldr	r1, [r7, #4]
 800b008:	4613      	mov	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	440b      	add	r3, r1
 800b012:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b016:	2201      	movs	r2, #1
 800b018:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800b01a:	4b28      	ldr	r3, [pc, #160]	; (800b0bc <USBD_AUDIO_Init+0x138>)
 800b01c:	7819      	ldrb	r1, [r3, #0]
 800b01e:	23c0      	movs	r3, #192	; 0xc0
 800b020:	2201      	movs	r2, #1
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f002 f997 	bl	800d356 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 800b028:	4b24      	ldr	r3, [pc, #144]	; (800b0bc <USBD_AUDIO_Init+0x138>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	f003 020f 	and.w	r2, r3, #15
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	440b      	add	r3, r1
 800b03c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b040:	2201      	movs	r2, #1
 800b042:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b050:	2203      	movs	r2, #3
 800b052:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b05c:	2200      	movs	r2, #0
 800b05e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b068:	2200      	movs	r2, #0
 800b06a:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b074:	2200      	movs	r2, #0
 800b076:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	33b0      	adds	r3, #176	; 0xb0
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2200      	movs	r2, #0
 800b08e:	2146      	movs	r1, #70	; 0x46
 800b090:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800b094:	4798      	blx	r3
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e008      	b.n	800b0b2 <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 800b0a0:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <USBD_AUDIO_Init+0x138>)
 800b0a2:	7819      	ldrb	r1, [r3, #0]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	1d1a      	adds	r2, r3, #4
 800b0a8:	23c0      	movs	r3, #192	; 0xc0
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f002 fa42 	bl	800d534 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	240000c2 	.word	0x240000c2

0800b0c0 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 800b0cc:	4b28      	ldr	r3, [pc, #160]	; (800b170 <USBD_AUDIO_DeInit+0xb0>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f002 f965 	bl	800d3a2 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 800b0d8:	4b25      	ldr	r3, [pc, #148]	; (800b170 <USBD_AUDIO_DeInit+0xb0>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	f003 020f 	and.w	r2, r3, #15
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	440b      	add	r3, r1
 800b0ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 800b0f4:	4b1e      	ldr	r3, [pc, #120]	; (800b170 <USBD_AUDIO_DeInit+0xb0>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	f003 020f 	and.w	r2, r3, #15
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	4613      	mov	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	440b      	add	r3, r1
 800b108:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b10c:	2200      	movs	r2, #0
 800b10e:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	32b0      	adds	r2, #176	; 0xb0
 800b11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d020      	beq.n	800b164 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	33b0      	adds	r3, #176	; 0xb0
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4413      	add	r3, r2
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	2000      	movs	r0, #0
 800b136:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	32b0      	adds	r2, #176	; 0xb0
 800b142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b146:	4618      	mov	r0, r3
 800b148:	f002 fa36 	bl	800d5b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	32b0      	adds	r2, #176	; 0xb0
 800b156:	2100      	movs	r1, #0
 800b158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	240000c2 	.word	0x240000c2

0800b174 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	32b0      	adds	r2, #176	; 0xb0
 800b190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b194:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e0c1      	b.n	800b324 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01a      	beq.n	800b1e2 <USBD_AUDIO_Setup+0x6e>
 800b1ac:	2b20      	cmp	r3, #32
 800b1ae:	f040 80b1 	bne.w	800b314 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	785b      	ldrb	r3, [r3, #1]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d006      	beq.n	800b1c8 <USBD_AUDIO_Setup+0x54>
 800b1ba:	2b81      	cmp	r3, #129	; 0x81
 800b1bc:	d109      	bne.n	800b1d2 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f9d7 	bl	800b574 <AUDIO_REQ_GetCurrent>
          break;
 800b1c6:	e00b      	b.n	800b1e0 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f9fe 	bl	800b5cc <AUDIO_REQ_SetCurrent>
          break;
 800b1d0:	e006      	b.n	800b1e0 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 fc62 	bl	800ca9e <USBD_CtlError>
          ret = USBD_FAIL;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b1de:	bf00      	nop
      }
      break;
 800b1e0:	e09f      	b.n	800b322 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	2b0b      	cmp	r3, #11
 800b1e8:	f200 8089 	bhi.w	800b2fe <USBD_AUDIO_Setup+0x18a>
 800b1ec:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <USBD_AUDIO_Setup+0x80>)
 800b1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f2:	bf00      	nop
 800b1f4:	0800b225 	.word	0x0800b225
 800b1f8:	0800b30d 	.word	0x0800b30d
 800b1fc:	0800b2ff 	.word	0x0800b2ff
 800b200:	0800b2ff 	.word	0x0800b2ff
 800b204:	0800b2ff 	.word	0x0800b2ff
 800b208:	0800b2ff 	.word	0x0800b2ff
 800b20c:	0800b24f 	.word	0x0800b24f
 800b210:	0800b2ff 	.word	0x0800b2ff
 800b214:	0800b2ff 	.word	0x0800b2ff
 800b218:	0800b2ff 	.word	0x0800b2ff
 800b21c:	0800b297 	.word	0x0800b297
 800b220:	0800b2bf 	.word	0x0800b2bf
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b03      	cmp	r3, #3
 800b22e:	d107      	bne.n	800b240 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	2202      	movs	r2, #2
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f001 fca1 	bl	800cb80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b23e:	e068      	b.n	800b312 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f001 fc2b 	bl	800ca9e <USBD_CtlError>
            ret = USBD_FAIL;
 800b248:	2303      	movs	r3, #3
 800b24a:	75fb      	strb	r3, [r7, #23]
          break;
 800b24c:	e061      	b.n	800b312 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	885b      	ldrh	r3, [r3, #2]
 800b252:	0a1b      	lsrs	r3, r3, #8
 800b254:	b29b      	uxth	r3, r3
 800b256:	2b21      	cmp	r3, #33	; 0x21
 800b258:	d15a      	bne.n	800b310 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800b260:	4618      	mov	r0, r3
 800b262:	f000 fa21 	bl	800b6a8 <USBD_AUDIO_GetAudioHeaderDesc>
 800b266:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00c      	beq.n	800b288 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	88db      	ldrh	r3, [r3, #6]
 800b272:	2b09      	cmp	r3, #9
 800b274:	bf28      	it	cs
 800b276:	2309      	movcs	r3, #9
 800b278:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800b27a:	897b      	ldrh	r3, [r7, #10]
 800b27c:	461a      	mov	r2, r3
 800b27e:	68f9      	ldr	r1, [r7, #12]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 fc7d 	bl	800cb80 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800b286:	e043      	b.n	800b310 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f001 fc07 	bl	800ca9e <USBD_CtlError>
              ret = USBD_FAIL;
 800b290:	2303      	movs	r3, #3
 800b292:	75fb      	strb	r3, [r7, #23]
          break;
 800b294:	e03c      	b.n	800b310 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d106      	bne.n	800b2b0 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 fc69 	bl	800cb80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2ae:	e030      	b.n	800b312 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f001 fbf3 	bl	800ca9e <USBD_CtlError>
            ret = USBD_FAIL;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	75fb      	strb	r3, [r7, #23]
          break;
 800b2bc:	e029      	b.n	800b312 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d112      	bne.n	800b2f0 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	885b      	ldrh	r3, [r3, #2]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d806      	bhi.n	800b2e2 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	885b      	ldrh	r3, [r3, #2]
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	461a      	mov	r2, r3
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2e0:	e017      	b.n	800b312 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f001 fbda 	bl	800ca9e <USBD_CtlError>
              ret = USBD_FAIL;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	75fb      	strb	r3, [r7, #23]
          break;
 800b2ee:	e010      	b.n	800b312 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f001 fbd3 	bl	800ca9e <USBD_CtlError>
            ret = USBD_FAIL;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	75fb      	strb	r3, [r7, #23]
          break;
 800b2fc:	e009      	b.n	800b312 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 fbcc 	bl	800ca9e <USBD_CtlError>
          ret = USBD_FAIL;
 800b306:	2303      	movs	r3, #3
 800b308:	75fb      	strb	r3, [r7, #23]
          break;
 800b30a:	e002      	b.n	800b312 <USBD_AUDIO_Setup+0x19e>
          break;
 800b30c:	bf00      	nop
 800b30e:	e008      	b.n	800b322 <USBD_AUDIO_Setup+0x1ae>
          break;
 800b310:	bf00      	nop
      }
      break;
 800b312:	e006      	b.n	800b322 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f001 fbc1 	bl	800ca9e <USBD_CtlError>
      ret = USBD_FAIL;
 800b31c:	2303      	movs	r3, #3
 800b31e:	75fb      	strb	r3, [r7, #23]
      break;
 800b320:	bf00      	nop
  }

  return (uint8_t)ret;
 800b322:	7dfb      	ldrb	r3, [r7, #23]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	226d      	movs	r2, #109	; 0x6d
 800b338:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800b33a:	4b03      	ldr	r3, [pc, #12]	; (800b348 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	24000048 	.word	0x24000048

0800b34c <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	460b      	mov	r3, r1
 800b356:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	32b0      	adds	r2, #176	; 0xb0
 800b378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b37c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b384:	2303      	movs	r3, #3
 800b386:	e02a      	b.n	800b3de <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b38e:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 800b392:	2b01      	cmp	r3, #1
 800b394:	d122      	bne.n	800b3dc <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b39c:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d11b      	bne.n	800b3dc <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	33b0      	adds	r3, #176	; 0xb0
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800b3bc:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b083      	sub	sp, #12
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	460b      	mov	r3, r1
 800b41c:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
	...

0800b448 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	460b      	mov	r3, r1
 800b452:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	32b0      	adds	r2, #176	; 0xb0
 800b45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b462:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d101      	bne.n	800b46e <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b46a:	2303      	movs	r3, #3
 800b46c:	e07c      	b.n	800b568 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 800b46e:	4b40      	ldr	r3, [pc, #256]	; (800b570 <USBD_AUDIO_DataOut+0x128>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	78fa      	ldrb	r2, [r7, #3]
 800b474:	429a      	cmp	r2, r3
 800b476:	d176      	bne.n	800b566 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800b478:	78fb      	ldrb	r3, [r7, #3]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f002 f87a 	bl	800d576 <USBD_LL_GetRxDataSize>
 800b482:	4603      	mov	r3, r0
 800b484:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	33b0      	adds	r3, #176	; 0xb0
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800b49e:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	440a      	add	r2, r1
 800b4a8:	1d10      	adds	r0, r2, #4
 800b4aa:	8979      	ldrh	r1, [r7, #10]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b4b6:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 800b4ba:	897b      	ldrh	r3, [r7, #10]
 800b4bc:	4413      	add	r3, r2
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b4c6:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b4d0:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800b4d4:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800b4d8:	d121      	bne.n	800b51e <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b4ec:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d114      	bne.n	800b51e <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	33b0      	adds	r3, #176	; 0xb0
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	1d10      	adds	r0, r2, #4
 800b50a:	2201      	movs	r2, #1
 800b50c:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800b510:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b524:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10d      	bne.n	800b548 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b532:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800b536:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800b53a:	d105      	bne.n	800b548 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b542:	2201      	movs	r2, #1
 800b544:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800b548:	4b09      	ldr	r3, [pc, #36]	; (800b570 <USBD_AUDIO_DataOut+0x128>)
 800b54a:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b552:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800b556:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4413      	add	r3, r2
 800b55c:	1d1a      	adds	r2, r3, #4
 800b55e:	23c0      	movs	r3, #192	; 0xc0
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f001 ffe7 	bl	800d534 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	240000c2 	.word	0x240000c2

0800b574 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	32b0      	adds	r2, #176	; 0xb0
 800b588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d017      	beq.n	800b5c4 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800b59a:	4413      	add	r3, r2
 800b59c:	2240      	movs	r2, #64	; 0x40
 800b59e:	2100      	movs	r1, #0
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f002 f863 	bl	800d66c <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800b5ac:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	88d2      	ldrh	r2, [r2, #6]
 800b5b2:	2a40      	cmp	r2, #64	; 0x40
 800b5b4:	bf28      	it	cs
 800b5b6:	2240      	movcs	r2, #64	; 0x40
 800b5b8:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f001 fadf 	bl	800cb80 <USBD_CtlSendData>
 800b5c2:	e000      	b.n	800b5c6 <AUDIO_REQ_GetCurrent+0x52>
    return;
 800b5c4:	bf00      	nop
}
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	32b0      	adds	r2, #176	; 0xb0
 800b5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d02f      	beq.n	800b64c <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	88db      	ldrh	r3, [r3, #6]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d02c      	beq.n	800b64e <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	88db      	ldrh	r3, [r3, #6]
 800b604:	2b3f      	cmp	r3, #63	; 0x3f
 800b606:	d803      	bhi.n	800b610 <AUDIO_REQ_SetCurrent+0x44>
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	88db      	ldrh	r3, [r3, #6]
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	e000      	b.n	800b612 <AUDIO_REQ_SetCurrent+0x46>
 800b610:	2240      	movs	r2, #64	; 0x40
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b618:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	889b      	ldrh	r3, [r3, #4]
 800b620:	0a1b      	lsrs	r3, r3, #8
 800b622:	b29b      	uxth	r3, r3
 800b624:	b2da      	uxtb	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b62c:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800b636:	4413      	add	r3, r2
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800b63e:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f001 fac7 	bl	800cbd8 <USBD_CtlPrepareRx>
 800b64a:	e000      	b.n	800b64e <AUDIO_REQ_SetCurrent+0x82>
    return;
 800b64c:	bf00      	nop
  }
}
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	220a      	movs	r2, #10
 800b660:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800b662:	4b03      	ldr	r3, [pc, #12]	; (800b670 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	240000b8 	.word	0x240000b8

0800b674 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b684:	2303      	movs	r3, #3
 800b686:	e009      	b.n	800b69c <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	33b0      	adds	r3, #176	; 0xb0
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4413      	add	r3, r2
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	885b      	ldrh	r3, [r3, #2]
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d91c      	bls.n	800b706 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b6d4:	e011      	b.n	800b6fa <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b6d6:	f107 030a 	add.w	r3, r7, #10
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6978      	ldr	r0, [r7, #20]
 800b6de:	f000 fbe0 	bl	800bea2 <USBD_GetNextDesc>
 800b6e2:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	785b      	ldrb	r3, [r3, #1]
 800b6e8:	2b24      	cmp	r3, #36	; 0x24
 800b6ea:	d106      	bne.n	800b6fa <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d102      	bne.n	800b6fa <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	613b      	str	r3, [r7, #16]
        break;
 800b6f8:	e005      	b.n	800b706 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	885b      	ldrh	r3, [r3, #2]
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	897b      	ldrh	r3, [r7, #10]
 800b702:	429a      	cmp	r2, r3
 800b704:	d8e7      	bhi.n	800b6d6 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 800b706:	693b      	ldr	r3, [r7, #16]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3718      	adds	r7, #24
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	4613      	mov	r3, r2
 800b71c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b724:	2303      	movs	r3, #3
 800b726:	e01f      	b.n	800b768 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2201      	movs	r2, #1
 800b752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	79fa      	ldrb	r2, [r7, #7]
 800b75a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f001 fd8f 	bl	800d280 <USBD_LL_Init>
 800b762:	4603      	mov	r3, r0
 800b764:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3718      	adds	r7, #24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b77a:	2300      	movs	r3, #0
 800b77c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b784:	2303      	movs	r3, #3
 800b786:	e025      	b.n	800b7d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	32ae      	adds	r2, #174	; 0xae
 800b79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00f      	beq.n	800b7c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	32ae      	adds	r2, #174	; 0xae
 800b7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b4:	f107 020e 	add.w	r2, r7, #14
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	4798      	blx	r3
 800b7bc:	4602      	mov	r2, r0
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 fd9b 	bl	800d320 <USBD_LL_Start>
 800b7ea:	4603      	mov	r3, r0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	460b      	mov	r3, r1
 800b814:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b820:	2b00      	cmp	r3, #0
 800b822:	d009      	beq.n	800b838 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	78fa      	ldrb	r2, [r7, #3]
 800b82e:	4611      	mov	r1, r2
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	4798      	blx	r3
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b838:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	460b      	mov	r3, r1
 800b84c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	78fa      	ldrb	r2, [r7, #3]
 800b85c:	4611      	mov	r1, r2
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	4798      	blx	r3
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d001      	beq.n	800b86c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b868:	2303      	movs	r3, #3
 800b86a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b084      	sub	sp, #16
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	4618      	mov	r0, r3
 800b88a:	f001 f8ce 	bl	800ca2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2201      	movs	r2, #1
 800b892:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b89c:	461a      	mov	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8aa:	f003 031f 	and.w	r3, r3, #31
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d01a      	beq.n	800b8e8 <USBD_LL_SetupStage+0x72>
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d822      	bhi.n	800b8fc <USBD_LL_SetupStage+0x86>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d002      	beq.n	800b8c0 <USBD_LL_SetupStage+0x4a>
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d00a      	beq.n	800b8d4 <USBD_LL_SetupStage+0x5e>
 800b8be:	e01d      	b.n	800b8fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fb25 	bl	800bf18 <USBD_StdDevReq>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8d2:	e020      	b.n	800b916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fb8d 	bl	800bffc <USBD_StdItfReq>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e6:	e016      	b.n	800b916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fbef 	bl	800c0d4 <USBD_StdEPReq>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b8fa:	e00c      	b.n	800b916 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b902:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b906:	b2db      	uxtb	r3, r3
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 fd68 	bl	800d3e0 <USBD_LL_StallEP>
 800b910:	4603      	mov	r3, r0
 800b912:	73fb      	strb	r3, [r7, #15]
      break;
 800b914:	bf00      	nop
  }

  return ret;
 800b916:	7bfb      	ldrb	r3, [r7, #15]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	460b      	mov	r3, r1
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b932:	7afb      	ldrb	r3, [r7, #11]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d16e      	bne.n	800ba16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b93e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b946:	2b03      	cmp	r3, #3
 800b948:	f040 8098 	bne.w	800ba7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	429a      	cmp	r2, r3
 800b956:	d913      	bls.n	800b980 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	1ad2      	subs	r2, r2, r3
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	68da      	ldr	r2, [r3, #12]
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	4293      	cmp	r3, r2
 800b970:	bf28      	it	cs
 800b972:	4613      	movcs	r3, r2
 800b974:	461a      	mov	r2, r3
 800b976:	6879      	ldr	r1, [r7, #4]
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f001 f94a 	bl	800cc12 <USBD_CtlContinueRx>
 800b97e:	e07d      	b.n	800ba7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b986:	f003 031f 	and.w	r3, r3, #31
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d014      	beq.n	800b9b8 <USBD_LL_DataOutStage+0x98>
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d81d      	bhi.n	800b9ce <USBD_LL_DataOutStage+0xae>
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <USBD_LL_DataOutStage+0x7c>
 800b996:	2b01      	cmp	r3, #1
 800b998:	d003      	beq.n	800b9a2 <USBD_LL_DataOutStage+0x82>
 800b99a:	e018      	b.n	800b9ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	75bb      	strb	r3, [r7, #22]
            break;
 800b9a0:	e018      	b.n	800b9d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 fa5e 	bl	800be6e <USBD_CoreFindIF>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	75bb      	strb	r3, [r7, #22]
            break;
 800b9b6:	e00d      	b.n	800b9d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f000 fa60 	bl	800be88 <USBD_CoreFindEP>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	75bb      	strb	r3, [r7, #22]
            break;
 800b9cc:	e002      	b.n	800b9d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b9d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b9d4:	7dbb      	ldrb	r3, [r7, #22]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d119      	bne.n	800ba0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d113      	bne.n	800ba0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b9e6:	7dba      	ldrb	r2, [r7, #22]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	32ae      	adds	r2, #174	; 0xae
 800b9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00b      	beq.n	800ba0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b9f6:	7dba      	ldrb	r2, [r7, #22]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b9fe:	7dba      	ldrb	r2, [r7, #22]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	32ae      	adds	r2, #174	; 0xae
 800ba04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f001 f910 	bl	800cc34 <USBD_CtlSendStatus>
 800ba14:	e032      	b.n	800ba7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ba16:	7afb      	ldrb	r3, [r7, #11]
 800ba18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	4619      	mov	r1, r3
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 fa31 	bl	800be88 <USBD_CoreFindEP>
 800ba26:	4603      	mov	r3, r0
 800ba28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba2a:	7dbb      	ldrb	r3, [r7, #22]
 800ba2c:	2bff      	cmp	r3, #255	; 0xff
 800ba2e:	d025      	beq.n	800ba7c <USBD_LL_DataOutStage+0x15c>
 800ba30:	7dbb      	ldrb	r3, [r7, #22]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d122      	bne.n	800ba7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b03      	cmp	r3, #3
 800ba40:	d117      	bne.n	800ba72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ba42:	7dba      	ldrb	r2, [r7, #22]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	32ae      	adds	r2, #174	; 0xae
 800ba48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00f      	beq.n	800ba72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ba52:	7dba      	ldrb	r2, [r7, #22]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ba5a:	7dba      	ldrb	r2, [r7, #22]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	32ae      	adds	r2, #174	; 0xae
 800ba60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	7afa      	ldrb	r2, [r7, #11]
 800ba68:	4611      	mov	r1, r2
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	4798      	blx	r3
 800ba6e:	4603      	mov	r3, r0
 800ba70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ba78:	7dfb      	ldrb	r3, [r7, #23]
 800ba7a:	e000      	b.n	800ba7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3718      	adds	r7, #24
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b086      	sub	sp, #24
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	60f8      	str	r0, [r7, #12]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	607a      	str	r2, [r7, #4]
 800ba92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ba94:	7afb      	ldrb	r3, [r7, #11]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d16f      	bne.n	800bb7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	3314      	adds	r3, #20
 800ba9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d15a      	bne.n	800bb60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	689a      	ldr	r2, [r3, #8]
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d914      	bls.n	800bae0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	689a      	ldr	r2, [r3, #8]
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	1ad2      	subs	r2, r2, r3
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	461a      	mov	r2, r3
 800baca:	6879      	ldr	r1, [r7, #4]
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f001 f872 	bl	800cbb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bad2:	2300      	movs	r3, #0
 800bad4:	2200      	movs	r2, #0
 800bad6:	2100      	movs	r1, #0
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f001 fd2b 	bl	800d534 <USBD_LL_PrepareReceive>
 800bade:	e03f      	b.n	800bb60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	68da      	ldr	r2, [r3, #12]
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d11c      	bne.n	800bb26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	685a      	ldr	r2, [r3, #4]
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d316      	bcc.n	800bb26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d20f      	bcs.n	800bb26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb06:	2200      	movs	r2, #0
 800bb08:	2100      	movs	r1, #0
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f001 f853 	bl	800cbb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb18:	2300      	movs	r3, #0
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f001 fd08 	bl	800d534 <USBD_LL_PrepareReceive>
 800bb24:	e01c      	b.n	800bb60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d10f      	bne.n	800bb52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d009      	beq.n	800bb52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb52:	2180      	movs	r1, #128	; 0x80
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f001 fc43 	bl	800d3e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f001 f87d 	bl	800cc5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d03a      	beq.n	800bbe0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7ff fe42 	bl	800b7f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bb78:	e032      	b.n	800bbe0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bb7a:	7afb      	ldrb	r3, [r7, #11]
 800bb7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	4619      	mov	r1, r3
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 f97f 	bl	800be88 <USBD_CoreFindEP>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	2bff      	cmp	r3, #255	; 0xff
 800bb92:	d025      	beq.n	800bbe0 <USBD_LL_DataInStage+0x15a>
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d122      	bne.n	800bbe0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d11c      	bne.n	800bbe0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bba6:	7dfa      	ldrb	r2, [r7, #23]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	32ae      	adds	r2, #174	; 0xae
 800bbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d014      	beq.n	800bbe0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bbb6:	7dfa      	ldrb	r2, [r7, #23]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bbbe:	7dfa      	ldrb	r2, [r7, #23]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	32ae      	adds	r2, #174	; 0xae
 800bbc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	7afa      	ldrb	r2, [r7, #11]
 800bbcc:	4611      	mov	r1, r2
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	4798      	blx	r3
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bbd6:	7dbb      	ldrb	r3, [r7, #22]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bbdc:	7dbb      	ldrb	r3, [r7, #22]
 800bbde:	e000      	b.n	800bbe2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d014      	beq.n	800bc50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00e      	beq.n	800bc50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	6852      	ldr	r2, [r2, #4]
 800bc3e:	b2d2      	uxtb	r2, r2
 800bc40:	4611      	mov	r1, r2
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4798      	blx	r3
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc50:	2340      	movs	r3, #64	; 0x40
 800bc52:	2200      	movs	r2, #0
 800bc54:	2100      	movs	r1, #0
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f001 fb7d 	bl	800d356 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2240      	movs	r2, #64	; 0x40
 800bc68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc6c:	2340      	movs	r3, #64	; 0x40
 800bc6e:	2200      	movs	r2, #0
 800bc70:	2180      	movs	r1, #128	; 0x80
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f001 fb6f 	bl	800d356 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2240      	movs	r2, #64	; 0x40
 800bc82:	621a      	str	r2, [r3, #32]

  return ret;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	460b      	mov	r3, r1
 800bc98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	78fa      	ldrb	r2, [r7, #3]
 800bc9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b083      	sub	sp, #12
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2204      	movs	r2, #4
 800bcc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d106      	bne.n	800bcfc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d110      	bne.n	800bd40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd2e:	69db      	ldr	r3, [r3, #28]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d005      	beq.n	800bd40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd3a:	69db      	ldr	r3, [r3, #28]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b082      	sub	sp, #8
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	460b      	mov	r3, r1
 800bd54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	32ae      	adds	r2, #174	; 0xae
 800bd60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	e01c      	b.n	800bda6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b03      	cmp	r3, #3
 800bd76:	d115      	bne.n	800bda4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	32ae      	adds	r2, #174	; 0xae
 800bd82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd86:	6a1b      	ldr	r3, [r3, #32]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00b      	beq.n	800bda4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	32ae      	adds	r2, #174	; 0xae
 800bd96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	78fa      	ldrb	r2, [r7, #3]
 800bd9e:	4611      	mov	r1, r2
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b082      	sub	sp, #8
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	32ae      	adds	r2, #174	; 0xae
 800bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d101      	bne.n	800bdd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e01c      	b.n	800be0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d115      	bne.n	800be08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	32ae      	adds	r2, #174	; 0xae
 800bde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00b      	beq.n	800be08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	32ae      	adds	r2, #174	; 0xae
 800bdfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	78fa      	ldrb	r2, [r7, #3]
 800be02:	4611      	mov	r1, r2
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800be12:	b480      	push	{r7}
 800be14:	b083      	sub	sp, #12
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800be30:	2300      	movs	r3, #0
 800be32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00e      	beq.n	800be64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	6852      	ldr	r2, [r2, #4]
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	4611      	mov	r1, r2
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	4798      	blx	r3
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800be60:	2303      	movs	r3, #3
 800be62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be64:	7bfb      	ldrb	r3, [r7, #15]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be6e:	b480      	push	{r7}
 800be70:	b083      	sub	sp, #12
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	460b      	mov	r3, r1
 800be78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be96:	4618      	mov	r0, r3
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b085      	sub	sp, #20
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	881a      	ldrh	r2, [r3, #0]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	4413      	add	r3, r2
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	461a      	mov	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4413      	add	r3, r2
 800becc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bece:	68fb      	ldr	r3, [r7, #12]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bedc:	b480      	push	{r7}
 800bede:	b087      	sub	sp, #28
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	3301      	adds	r3, #1
 800bef2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800befa:	8a3b      	ldrh	r3, [r7, #16]
 800befc:	021b      	lsls	r3, r3, #8
 800befe:	b21a      	sxth	r2, r3
 800bf00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	b21b      	sxth	r3, r3
 800bf08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf0a:	89fb      	ldrh	r3, [r7, #14]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	371c      	adds	r7, #28
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf22:	2300      	movs	r3, #0
 800bf24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf2e:	2b40      	cmp	r3, #64	; 0x40
 800bf30:	d005      	beq.n	800bf3e <USBD_StdDevReq+0x26>
 800bf32:	2b40      	cmp	r3, #64	; 0x40
 800bf34:	d857      	bhi.n	800bfe6 <USBD_StdDevReq+0xce>
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00f      	beq.n	800bf5a <USBD_StdDevReq+0x42>
 800bf3a:	2b20      	cmp	r3, #32
 800bf3c:	d153      	bne.n	800bfe6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	32ae      	adds	r2, #174	; 0xae
 800bf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	4798      	blx	r3
 800bf54:	4603      	mov	r3, r0
 800bf56:	73fb      	strb	r3, [r7, #15]
      break;
 800bf58:	e04a      	b.n	800bff0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	785b      	ldrb	r3, [r3, #1]
 800bf5e:	2b09      	cmp	r3, #9
 800bf60:	d83b      	bhi.n	800bfda <USBD_StdDevReq+0xc2>
 800bf62:	a201      	add	r2, pc, #4	; (adr r2, 800bf68 <USBD_StdDevReq+0x50>)
 800bf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf68:	0800bfbd 	.word	0x0800bfbd
 800bf6c:	0800bfd1 	.word	0x0800bfd1
 800bf70:	0800bfdb 	.word	0x0800bfdb
 800bf74:	0800bfc7 	.word	0x0800bfc7
 800bf78:	0800bfdb 	.word	0x0800bfdb
 800bf7c:	0800bf9b 	.word	0x0800bf9b
 800bf80:	0800bf91 	.word	0x0800bf91
 800bf84:	0800bfdb 	.word	0x0800bfdb
 800bf88:	0800bfb3 	.word	0x0800bfb3
 800bf8c:	0800bfa5 	.word	0x0800bfa5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fa3c 	bl	800c410 <USBD_GetDescriptor>
          break;
 800bf98:	e024      	b.n	800bfe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fba1 	bl	800c6e4 <USBD_SetAddress>
          break;
 800bfa2:	e01f      	b.n	800bfe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fbe0 	bl	800c76c <USBD_SetConfig>
 800bfac:	4603      	mov	r3, r0
 800bfae:	73fb      	strb	r3, [r7, #15]
          break;
 800bfb0:	e018      	b.n	800bfe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fc83 	bl	800c8c0 <USBD_GetConfig>
          break;
 800bfba:	e013      	b.n	800bfe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fcb4 	bl	800c92c <USBD_GetStatus>
          break;
 800bfc4:	e00e      	b.n	800bfe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fce3 	bl	800c994 <USBD_SetFeature>
          break;
 800bfce:	e009      	b.n	800bfe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fd07 	bl	800c9e6 <USBD_ClrFeature>
          break;
 800bfd8:	e004      	b.n	800bfe4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fd5e 	bl	800ca9e <USBD_CtlError>
          break;
 800bfe2:	bf00      	nop
      }
      break;
 800bfe4:	e004      	b.n	800bff0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fd58 	bl	800ca9e <USBD_CtlError>
      break;
 800bfee:	bf00      	nop
  }

  return ret;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop

0800bffc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c006:	2300      	movs	r3, #0
 800c008:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c012:	2b40      	cmp	r3, #64	; 0x40
 800c014:	d005      	beq.n	800c022 <USBD_StdItfReq+0x26>
 800c016:	2b40      	cmp	r3, #64	; 0x40
 800c018:	d852      	bhi.n	800c0c0 <USBD_StdItfReq+0xc4>
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d001      	beq.n	800c022 <USBD_StdItfReq+0x26>
 800c01e:	2b20      	cmp	r3, #32
 800c020:	d14e      	bne.n	800c0c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	3b01      	subs	r3, #1
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d840      	bhi.n	800c0b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	889b      	ldrh	r3, [r3, #4]
 800c034:	b2db      	uxtb	r3, r3
 800c036:	2b02      	cmp	r3, #2
 800c038:	d836      	bhi.n	800c0a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	889b      	ldrh	r3, [r3, #4]
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7ff ff13 	bl	800be6e <USBD_CoreFindIF>
 800c048:	4603      	mov	r3, r0
 800c04a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	2bff      	cmp	r3, #255	; 0xff
 800c050:	d01d      	beq.n	800c08e <USBD_StdItfReq+0x92>
 800c052:	7bbb      	ldrb	r3, [r7, #14]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d11a      	bne.n	800c08e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c058:	7bba      	ldrb	r2, [r7, #14]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	32ae      	adds	r2, #174	; 0xae
 800c05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00f      	beq.n	800c088 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c068:	7bba      	ldrb	r2, [r7, #14]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c070:	7bba      	ldrb	r2, [r7, #14]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	32ae      	adds	r2, #174	; 0xae
 800c076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	4798      	blx	r3
 800c082:	4603      	mov	r3, r0
 800c084:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c086:	e004      	b.n	800c092 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c088:	2303      	movs	r3, #3
 800c08a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c08c:	e001      	b.n	800c092 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c08e:	2303      	movs	r3, #3
 800c090:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	88db      	ldrh	r3, [r3, #6]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d110      	bne.n	800c0bc <USBD_StdItfReq+0xc0>
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10d      	bne.n	800c0bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fdc7 	bl	800cc34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c0a6:	e009      	b.n	800c0bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fcf7 	bl	800ca9e <USBD_CtlError>
          break;
 800c0b0:	e004      	b.n	800c0bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fcf2 	bl	800ca9e <USBD_CtlError>
          break;
 800c0ba:	e000      	b.n	800c0be <USBD_StdItfReq+0xc2>
          break;
 800c0bc:	bf00      	nop
      }
      break;
 800c0be:	e004      	b.n	800c0ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c0c0:	6839      	ldr	r1, [r7, #0]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 fceb 	bl	800ca9e <USBD_CtlError>
      break;
 800c0c8:	bf00      	nop
  }

  return ret;
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	889b      	ldrh	r3, [r3, #4]
 800c0e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0f0:	2b40      	cmp	r3, #64	; 0x40
 800c0f2:	d007      	beq.n	800c104 <USBD_StdEPReq+0x30>
 800c0f4:	2b40      	cmp	r3, #64	; 0x40
 800c0f6:	f200 817f 	bhi.w	800c3f8 <USBD_StdEPReq+0x324>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d02a      	beq.n	800c154 <USBD_StdEPReq+0x80>
 800c0fe:	2b20      	cmp	r3, #32
 800c100:	f040 817a 	bne.w	800c3f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c104:	7bbb      	ldrb	r3, [r7, #14]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff febd 	bl	800be88 <USBD_CoreFindEP>
 800c10e:	4603      	mov	r3, r0
 800c110:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c112:	7b7b      	ldrb	r3, [r7, #13]
 800c114:	2bff      	cmp	r3, #255	; 0xff
 800c116:	f000 8174 	beq.w	800c402 <USBD_StdEPReq+0x32e>
 800c11a:	7b7b      	ldrb	r3, [r7, #13]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f040 8170 	bne.w	800c402 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c122:	7b7a      	ldrb	r2, [r7, #13]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c12a:	7b7a      	ldrb	r2, [r7, #13]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	32ae      	adds	r2, #174	; 0xae
 800c130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	f000 8163 	beq.w	800c402 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c13c:	7b7a      	ldrb	r2, [r7, #13]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	32ae      	adds	r2, #174	; 0xae
 800c142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	4798      	blx	r3
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c152:	e156      	b.n	800c402 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	785b      	ldrb	r3, [r3, #1]
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d008      	beq.n	800c16e <USBD_StdEPReq+0x9a>
 800c15c:	2b03      	cmp	r3, #3
 800c15e:	f300 8145 	bgt.w	800c3ec <USBD_StdEPReq+0x318>
 800c162:	2b00      	cmp	r3, #0
 800c164:	f000 809b 	beq.w	800c29e <USBD_StdEPReq+0x1ca>
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d03c      	beq.n	800c1e6 <USBD_StdEPReq+0x112>
 800c16c:	e13e      	b.n	800c3ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b02      	cmp	r3, #2
 800c178:	d002      	beq.n	800c180 <USBD_StdEPReq+0xac>
 800c17a:	2b03      	cmp	r3, #3
 800c17c:	d016      	beq.n	800c1ac <USBD_StdEPReq+0xd8>
 800c17e:	e02c      	b.n	800c1da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00d      	beq.n	800c1a2 <USBD_StdEPReq+0xce>
 800c186:	7bbb      	ldrb	r3, [r7, #14]
 800c188:	2b80      	cmp	r3, #128	; 0x80
 800c18a:	d00a      	beq.n	800c1a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f001 f925 	bl	800d3e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c196:	2180      	movs	r1, #128	; 0x80
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f001 f921 	bl	800d3e0 <USBD_LL_StallEP>
 800c19e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1a0:	e020      	b.n	800c1e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fc7a 	bl	800ca9e <USBD_CtlError>
              break;
 800c1aa:	e01b      	b.n	800c1e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	885b      	ldrh	r3, [r3, #2]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10e      	bne.n	800c1d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00b      	beq.n	800c1d2 <USBD_StdEPReq+0xfe>
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	2b80      	cmp	r3, #128	; 0x80
 800c1be:	d008      	beq.n	800c1d2 <USBD_StdEPReq+0xfe>
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	88db      	ldrh	r3, [r3, #6]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d104      	bne.n	800c1d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f001 f907 	bl	800d3e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fd2e 	bl	800cc34 <USBD_CtlSendStatus>

              break;
 800c1d8:	e004      	b.n	800c1e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fc5e 	bl	800ca9e <USBD_CtlError>
              break;
 800c1e2:	bf00      	nop
          }
          break;
 800c1e4:	e107      	b.n	800c3f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d002      	beq.n	800c1f8 <USBD_StdEPReq+0x124>
 800c1f2:	2b03      	cmp	r3, #3
 800c1f4:	d016      	beq.n	800c224 <USBD_StdEPReq+0x150>
 800c1f6:	e04b      	b.n	800c290 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00d      	beq.n	800c21a <USBD_StdEPReq+0x146>
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
 800c200:	2b80      	cmp	r3, #128	; 0x80
 800c202:	d00a      	beq.n	800c21a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c204:	7bbb      	ldrb	r3, [r7, #14]
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f001 f8e9 	bl	800d3e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c20e:	2180      	movs	r1, #128	; 0x80
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f001 f8e5 	bl	800d3e0 <USBD_LL_StallEP>
 800c216:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c218:	e040      	b.n	800c29c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fc3e 	bl	800ca9e <USBD_CtlError>
              break;
 800c222:	e03b      	b.n	800c29c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	885b      	ldrh	r3, [r3, #2]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d136      	bne.n	800c29a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c22c:	7bbb      	ldrb	r3, [r7, #14]
 800c22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c232:	2b00      	cmp	r3, #0
 800c234:	d004      	beq.n	800c240 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 f8ef 	bl	800d41e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fcf7 	bl	800cc34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c246:	7bbb      	ldrb	r3, [r7, #14]
 800c248:	4619      	mov	r1, r3
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff fe1c 	bl	800be88 <USBD_CoreFindEP>
 800c250:	4603      	mov	r3, r0
 800c252:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c254:	7b7b      	ldrb	r3, [r7, #13]
 800c256:	2bff      	cmp	r3, #255	; 0xff
 800c258:	d01f      	beq.n	800c29a <USBD_StdEPReq+0x1c6>
 800c25a:	7b7b      	ldrb	r3, [r7, #13]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d11c      	bne.n	800c29a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c260:	7b7a      	ldrb	r2, [r7, #13]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c268:	7b7a      	ldrb	r2, [r7, #13]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	32ae      	adds	r2, #174	; 0xae
 800c26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d010      	beq.n	800c29a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c278:	7b7a      	ldrb	r2, [r7, #13]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	32ae      	adds	r2, #174	; 0xae
 800c27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	4798      	blx	r3
 800c28a:	4603      	mov	r3, r0
 800c28c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c28e:	e004      	b.n	800c29a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c290:	6839      	ldr	r1, [r7, #0]
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fc03 	bl	800ca9e <USBD_CtlError>
              break;
 800c298:	e000      	b.n	800c29c <USBD_StdEPReq+0x1c8>
              break;
 800c29a:	bf00      	nop
          }
          break;
 800c29c:	e0ab      	b.n	800c3f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d002      	beq.n	800c2b0 <USBD_StdEPReq+0x1dc>
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d032      	beq.n	800c314 <USBD_StdEPReq+0x240>
 800c2ae:	e097      	b.n	800c3e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d007      	beq.n	800c2c6 <USBD_StdEPReq+0x1f2>
 800c2b6:	7bbb      	ldrb	r3, [r7, #14]
 800c2b8:	2b80      	cmp	r3, #128	; 0x80
 800c2ba:	d004      	beq.n	800c2c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fbed 	bl	800ca9e <USBD_CtlError>
                break;
 800c2c4:	e091      	b.n	800c3ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	da0b      	bge.n	800c2e6 <USBD_StdEPReq+0x212>
 800c2ce:	7bbb      	ldrb	r3, [r7, #14]
 800c2d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	3310      	adds	r3, #16
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	e00b      	b.n	800c2fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2e6:	7bbb      	ldrb	r3, [r7, #14]
 800c2e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	3304      	adds	r3, #4
 800c2fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	2202      	movs	r2, #2
 800c30a:	4619      	mov	r1, r3
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fc37 	bl	800cb80 <USBD_CtlSendData>
              break;
 800c312:	e06a      	b.n	800c3ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	da11      	bge.n	800c340 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c31c:	7bbb      	ldrb	r3, [r7, #14]
 800c31e:	f003 020f 	and.w	r2, r3, #15
 800c322:	6879      	ldr	r1, [r7, #4]
 800c324:	4613      	mov	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	440b      	add	r3, r1
 800c32e:	3324      	adds	r3, #36	; 0x24
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d117      	bne.n	800c366 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fbb0 	bl	800ca9e <USBD_CtlError>
                  break;
 800c33e:	e054      	b.n	800c3ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c340:	7bbb      	ldrb	r3, [r7, #14]
 800c342:	f003 020f 	and.w	r2, r3, #15
 800c346:	6879      	ldr	r1, [r7, #4]
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	440b      	add	r3, r1
 800c352:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c356:	881b      	ldrh	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d104      	bne.n	800c366 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fb9d 	bl	800ca9e <USBD_CtlError>
                  break;
 800c364:	e041      	b.n	800c3ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	da0b      	bge.n	800c386 <USBD_StdEPReq+0x2b2>
 800c36e:	7bbb      	ldrb	r3, [r7, #14]
 800c370:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c374:	4613      	mov	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	3310      	adds	r3, #16
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	4413      	add	r3, r2
 800c382:	3304      	adds	r3, #4
 800c384:	e00b      	b.n	800c39e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c38c:	4613      	mov	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	4413      	add	r3, r2
 800c39c:	3304      	adds	r3, #4
 800c39e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c3a0:	7bbb      	ldrb	r3, [r7, #14]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d002      	beq.n	800c3ac <USBD_StdEPReq+0x2d8>
 800c3a6:	7bbb      	ldrb	r3, [r7, #14]
 800c3a8:	2b80      	cmp	r3, #128	; 0x80
 800c3aa:	d103      	bne.n	800c3b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	601a      	str	r2, [r3, #0]
 800c3b2:	e00e      	b.n	800c3d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f001 f84f 	bl	800d45c <USBD_LL_IsStallEP>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d003      	beq.n	800c3cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]
 800c3ca:	e002      	b.n	800c3d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	2202      	movs	r2, #2
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fbd1 	bl	800cb80 <USBD_CtlSendData>
              break;
 800c3de:	e004      	b.n	800c3ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fb5b 	bl	800ca9e <USBD_CtlError>
              break;
 800c3e8:	bf00      	nop
          }
          break;
 800c3ea:	e004      	b.n	800c3f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 fb55 	bl	800ca9e <USBD_CtlError>
          break;
 800c3f4:	bf00      	nop
      }
      break;
 800c3f6:	e005      	b.n	800c404 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c3f8:	6839      	ldr	r1, [r7, #0]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fb4f 	bl	800ca9e <USBD_CtlError>
      break;
 800c400:	e000      	b.n	800c404 <USBD_StdEPReq+0x330>
      break;
 800c402:	bf00      	nop
  }

  return ret;
 800c404:	7bfb      	ldrb	r3, [r7, #15]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c41a:	2300      	movs	r3, #0
 800c41c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c41e:	2300      	movs	r3, #0
 800c420:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c422:	2300      	movs	r3, #0
 800c424:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	885b      	ldrh	r3, [r3, #2]
 800c42a:	0a1b      	lsrs	r3, r3, #8
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	3b01      	subs	r3, #1
 800c430:	2b06      	cmp	r3, #6
 800c432:	f200 8128 	bhi.w	800c686 <USBD_GetDescriptor+0x276>
 800c436:	a201      	add	r2, pc, #4	; (adr r2, 800c43c <USBD_GetDescriptor+0x2c>)
 800c438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43c:	0800c459 	.word	0x0800c459
 800c440:	0800c471 	.word	0x0800c471
 800c444:	0800c4b1 	.word	0x0800c4b1
 800c448:	0800c687 	.word	0x0800c687
 800c44c:	0800c687 	.word	0x0800c687
 800c450:	0800c627 	.word	0x0800c627
 800c454:	0800c653 	.word	0x0800c653
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	7c12      	ldrb	r2, [r2, #16]
 800c464:	f107 0108 	add.w	r1, r7, #8
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
 800c46c:	60f8      	str	r0, [r7, #12]
      break;
 800c46e:	e112      	b.n	800c696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	7c1b      	ldrb	r3, [r3, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10d      	bne.n	800c494 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c480:	f107 0208 	add.w	r2, r7, #8
 800c484:	4610      	mov	r0, r2
 800c486:	4798      	blx	r3
 800c488:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	3301      	adds	r3, #1
 800c48e:	2202      	movs	r2, #2
 800c490:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c492:	e100      	b.n	800c696 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	f107 0208 	add.w	r2, r7, #8
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	4798      	blx	r3
 800c4a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	701a      	strb	r2, [r3, #0]
      break;
 800c4ae:	e0f2      	b.n	800c696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	885b      	ldrh	r3, [r3, #2]
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	2b05      	cmp	r3, #5
 800c4b8:	f200 80ac 	bhi.w	800c614 <USBD_GetDescriptor+0x204>
 800c4bc:	a201      	add	r2, pc, #4	; (adr r2, 800c4c4 <USBD_GetDescriptor+0xb4>)
 800c4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c2:	bf00      	nop
 800c4c4:	0800c4dd 	.word	0x0800c4dd
 800c4c8:	0800c511 	.word	0x0800c511
 800c4cc:	0800c545 	.word	0x0800c545
 800c4d0:	0800c579 	.word	0x0800c579
 800c4d4:	0800c5ad 	.word	0x0800c5ad
 800c4d8:	0800c5e1 	.word	0x0800c5e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00b      	beq.n	800c500 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	7c12      	ldrb	r2, [r2, #16]
 800c4f4:	f107 0108 	add.w	r1, r7, #8
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4fe:	e091      	b.n	800c624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 facb 	bl	800ca9e <USBD_CtlError>
            err++;
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	3301      	adds	r3, #1
 800c50c:	72fb      	strb	r3, [r7, #11]
          break;
 800c50e:	e089      	b.n	800c624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	7c12      	ldrb	r2, [r2, #16]
 800c528:	f107 0108 	add.w	r1, r7, #8
 800c52c:	4610      	mov	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c532:	e077      	b.n	800c624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fab1 	bl	800ca9e <USBD_CtlError>
            err++;
 800c53c:	7afb      	ldrb	r3, [r7, #11]
 800c53e:	3301      	adds	r3, #1
 800c540:	72fb      	strb	r3, [r7, #11]
          break;
 800c542:	e06f      	b.n	800c624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00b      	beq.n	800c568 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	7c12      	ldrb	r2, [r2, #16]
 800c55c:	f107 0108 	add.w	r1, r7, #8
 800c560:	4610      	mov	r0, r2
 800c562:	4798      	blx	r3
 800c564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c566:	e05d      	b.n	800c624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fa97 	bl	800ca9e <USBD_CtlError>
            err++;
 800c570:	7afb      	ldrb	r3, [r7, #11]
 800c572:	3301      	adds	r3, #1
 800c574:	72fb      	strb	r3, [r7, #11]
          break;
 800c576:	e055      	b.n	800c624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00b      	beq.n	800c59c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	7c12      	ldrb	r2, [r2, #16]
 800c590:	f107 0108 	add.w	r1, r7, #8
 800c594:	4610      	mov	r0, r2
 800c596:	4798      	blx	r3
 800c598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c59a:	e043      	b.n	800c624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fa7d 	bl	800ca9e <USBD_CtlError>
            err++;
 800c5a4:	7afb      	ldrb	r3, [r7, #11]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5aa:	e03b      	b.n	800c624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5b2:	695b      	ldr	r3, [r3, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00b      	beq.n	800c5d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	7c12      	ldrb	r2, [r2, #16]
 800c5c4:	f107 0108 	add.w	r1, r7, #8
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	4798      	blx	r3
 800c5cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ce:	e029      	b.n	800c624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 fa63 	bl	800ca9e <USBD_CtlError>
            err++;
 800c5d8:	7afb      	ldrb	r3, [r7, #11]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c5de:	e021      	b.n	800c624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00b      	beq.n	800c604 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5f2:	699b      	ldr	r3, [r3, #24]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	7c12      	ldrb	r2, [r2, #16]
 800c5f8:	f107 0108 	add.w	r1, r7, #8
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	4798      	blx	r3
 800c600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c602:	e00f      	b.n	800c624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fa49 	bl	800ca9e <USBD_CtlError>
            err++;
 800c60c:	7afb      	ldrb	r3, [r7, #11]
 800c60e:	3301      	adds	r3, #1
 800c610:	72fb      	strb	r3, [r7, #11]
          break;
 800c612:	e007      	b.n	800c624 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa41 	bl	800ca9e <USBD_CtlError>
          err++;
 800c61c:	7afb      	ldrb	r3, [r7, #11]
 800c61e:	3301      	adds	r3, #1
 800c620:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c622:	bf00      	nop
      }
      break;
 800c624:	e037      	b.n	800c696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	7c1b      	ldrb	r3, [r3, #16]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d109      	bne.n	800c642 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c636:	f107 0208 	add.w	r2, r7, #8
 800c63a:	4610      	mov	r0, r2
 800c63c:	4798      	blx	r3
 800c63e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c640:	e029      	b.n	800c696 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fa2a 	bl	800ca9e <USBD_CtlError>
        err++;
 800c64a:	7afb      	ldrb	r3, [r7, #11]
 800c64c:	3301      	adds	r3, #1
 800c64e:	72fb      	strb	r3, [r7, #11]
      break;
 800c650:	e021      	b.n	800c696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	7c1b      	ldrb	r3, [r3, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10d      	bne.n	800c676 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c662:	f107 0208 	add.w	r2, r7, #8
 800c666:	4610      	mov	r0, r2
 800c668:	4798      	blx	r3
 800c66a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	3301      	adds	r3, #1
 800c670:	2207      	movs	r2, #7
 800c672:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c674:	e00f      	b.n	800c696 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c676:	6839      	ldr	r1, [r7, #0]
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 fa10 	bl	800ca9e <USBD_CtlError>
        err++;
 800c67e:	7afb      	ldrb	r3, [r7, #11]
 800c680:	3301      	adds	r3, #1
 800c682:	72fb      	strb	r3, [r7, #11]
      break;
 800c684:	e007      	b.n	800c696 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c686:	6839      	ldr	r1, [r7, #0]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fa08 	bl	800ca9e <USBD_CtlError>
      err++;
 800c68e:	7afb      	ldrb	r3, [r7, #11]
 800c690:	3301      	adds	r3, #1
 800c692:	72fb      	strb	r3, [r7, #11]
      break;
 800c694:	bf00      	nop
  }

  if (err != 0U)
 800c696:	7afb      	ldrb	r3, [r7, #11]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d11e      	bne.n	800c6da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	88db      	ldrh	r3, [r3, #6]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d016      	beq.n	800c6d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c6a4:	893b      	ldrh	r3, [r7, #8]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00e      	beq.n	800c6c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	88da      	ldrh	r2, [r3, #6]
 800c6ae:	893b      	ldrh	r3, [r7, #8]
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	bf28      	it	cs
 800c6b4:	4613      	movcs	r3, r2
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c6ba:	893b      	ldrh	r3, [r7, #8]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	68f9      	ldr	r1, [r7, #12]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 fa5d 	bl	800cb80 <USBD_CtlSendData>
 800c6c6:	e009      	b.n	800c6dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f9e7 	bl	800ca9e <USBD_CtlError>
 800c6d0:	e004      	b.n	800c6dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 faae 	bl	800cc34 <USBD_CtlSendStatus>
 800c6d8:	e000      	b.n	800c6dc <USBD_GetDescriptor+0x2cc>
    return;
 800c6da:	bf00      	nop
  }
}
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop

0800c6e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	889b      	ldrh	r3, [r3, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d131      	bne.n	800c75a <USBD_SetAddress+0x76>
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	88db      	ldrh	r3, [r3, #6]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d12d      	bne.n	800c75a <USBD_SetAddress+0x76>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	885b      	ldrh	r3, [r3, #2]
 800c702:	2b7f      	cmp	r3, #127	; 0x7f
 800c704:	d829      	bhi.n	800c75a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	885b      	ldrh	r3, [r3, #2]
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c710:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	d104      	bne.n	800c728 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 f9bc 	bl	800ca9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c726:	e01d      	b.n	800c764 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	7bfa      	ldrb	r2, [r7, #15]
 800c72c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	4619      	mov	r1, r3
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 febd 	bl	800d4b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fa7a 	bl	800cc34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d004      	beq.n	800c750 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2202      	movs	r2, #2
 800c74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c74e:	e009      	b.n	800c764 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c758:	e004      	b.n	800c764 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 f99e 	bl	800ca9e <USBD_CtlError>
  }
}
 800c762:	bf00      	nop
 800c764:	bf00      	nop
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c776:	2300      	movs	r3, #0
 800c778:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	885b      	ldrh	r3, [r3, #2]
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	4b4e      	ldr	r3, [pc, #312]	; (800c8bc <USBD_SetConfig+0x150>)
 800c782:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c784:	4b4d      	ldr	r3, [pc, #308]	; (800c8bc <USBD_SetConfig+0x150>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d905      	bls.n	800c798 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f985 	bl	800ca9e <USBD_CtlError>
    return USBD_FAIL;
 800c794:	2303      	movs	r3, #3
 800c796:	e08c      	b.n	800c8b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d002      	beq.n	800c7aa <USBD_SetConfig+0x3e>
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d029      	beq.n	800c7fc <USBD_SetConfig+0x90>
 800c7a8:	e075      	b.n	800c896 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c7aa:	4b44      	ldr	r3, [pc, #272]	; (800c8bc <USBD_SetConfig+0x150>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d020      	beq.n	800c7f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c7b2:	4b42      	ldr	r3, [pc, #264]	; (800c8bc <USBD_SetConfig+0x150>)
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7bc:	4b3f      	ldr	r3, [pc, #252]	; (800c8bc <USBD_SetConfig+0x150>)
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7ff f821 	bl	800b80a <USBD_SetClassConfig>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d008      	beq.n	800c7e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f962 	bl	800ca9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2202      	movs	r2, #2
 800c7de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c7e2:	e065      	b.n	800c8b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fa25 	bl	800cc34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2203      	movs	r2, #3
 800c7ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c7f2:	e05d      	b.n	800c8b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fa1d 	bl	800cc34 <USBD_CtlSendStatus>
      break;
 800c7fa:	e059      	b.n	800c8b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c7fc:	4b2f      	ldr	r3, [pc, #188]	; (800c8bc <USBD_SetConfig+0x150>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d112      	bne.n	800c82a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2202      	movs	r2, #2
 800c808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c80c:	4b2b      	ldr	r3, [pc, #172]	; (800c8bc <USBD_SetConfig+0x150>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	461a      	mov	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c816:	4b29      	ldr	r3, [pc, #164]	; (800c8bc <USBD_SetConfig+0x150>)
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7ff f810 	bl	800b842 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fa06 	bl	800cc34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c828:	e042      	b.n	800c8b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c82a:	4b24      	ldr	r3, [pc, #144]	; (800c8bc <USBD_SetConfig+0x150>)
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	429a      	cmp	r2, r3
 800c836:	d02a      	beq.n	800c88e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	4619      	mov	r1, r3
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7fe fffe 	bl	800b842 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c846:	4b1d      	ldr	r3, [pc, #116]	; (800c8bc <USBD_SetConfig+0x150>)
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c850:	4b1a      	ldr	r3, [pc, #104]	; (800c8bc <USBD_SetConfig+0x150>)
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	4619      	mov	r1, r3
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7fe ffd7 	bl	800b80a <USBD_SetClassConfig>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00f      	beq.n	800c886 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c866:	6839      	ldr	r1, [r7, #0]
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 f918 	bl	800ca9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	b2db      	uxtb	r3, r3
 800c874:	4619      	mov	r1, r3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7fe ffe3 	bl	800b842 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2202      	movs	r2, #2
 800c880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c884:	e014      	b.n	800c8b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f9d4 	bl	800cc34 <USBD_CtlSendStatus>
      break;
 800c88c:	e010      	b.n	800c8b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f9d0 	bl	800cc34 <USBD_CtlSendStatus>
      break;
 800c894:	e00c      	b.n	800c8b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f900 	bl	800ca9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c89e:	4b07      	ldr	r3, [pc, #28]	; (800c8bc <USBD_SetConfig+0x150>)
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7fe ffcc 	bl	800b842 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c8ae:	bf00      	nop
  }

  return ret;
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	240002b0 	.word	0x240002b0

0800c8c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	88db      	ldrh	r3, [r3, #6]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d004      	beq.n	800c8dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c8d2:	6839      	ldr	r1, [r7, #0]
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 f8e2 	bl	800ca9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c8da:	e023      	b.n	800c924 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	dc02      	bgt.n	800c8ee <USBD_GetConfig+0x2e>
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	dc03      	bgt.n	800c8f4 <USBD_GetConfig+0x34>
 800c8ec:	e015      	b.n	800c91a <USBD_GetConfig+0x5a>
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d00b      	beq.n	800c90a <USBD_GetConfig+0x4a>
 800c8f2:	e012      	b.n	800c91a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	3308      	adds	r3, #8
 800c8fe:	2201      	movs	r2, #1
 800c900:	4619      	mov	r1, r3
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f93c 	bl	800cb80 <USBD_CtlSendData>
        break;
 800c908:	e00c      	b.n	800c924 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3304      	adds	r3, #4
 800c90e:	2201      	movs	r2, #1
 800c910:	4619      	mov	r1, r3
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f934 	bl	800cb80 <USBD_CtlSendData>
        break;
 800c918:	e004      	b.n	800c924 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 f8be 	bl	800ca9e <USBD_CtlError>
        break;
 800c922:	bf00      	nop
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	3b01      	subs	r3, #1
 800c940:	2b02      	cmp	r3, #2
 800c942:	d81e      	bhi.n	800c982 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	88db      	ldrh	r3, [r3, #6]
 800c948:	2b02      	cmp	r3, #2
 800c94a:	d004      	beq.n	800c956 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f8a5 	bl	800ca9e <USBD_CtlError>
        break;
 800c954:	e01a      	b.n	800c98c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c962:	2b00      	cmp	r3, #0
 800c964:	d005      	beq.n	800c972 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	f043 0202 	orr.w	r2, r3, #2
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	330c      	adds	r3, #12
 800c976:	2202      	movs	r2, #2
 800c978:	4619      	mov	r1, r3
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f900 	bl	800cb80 <USBD_CtlSendData>
      break;
 800c980:	e004      	b.n	800c98c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 f88a 	bl	800ca9e <USBD_CtlError>
      break;
 800c98a:	bf00      	nop
  }
}
 800c98c:	bf00      	nop
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	885b      	ldrh	r3, [r3, #2]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d107      	bne.n	800c9b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f940 	bl	800cc34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c9b4:	e013      	b.n	800c9de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	885b      	ldrh	r3, [r3, #2]
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d10b      	bne.n	800c9d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	889b      	ldrh	r3, [r3, #4]
 800c9c2:	0a1b      	lsrs	r3, r3, #8
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f930 	bl	800cc34 <USBD_CtlSendStatus>
}
 800c9d4:	e003      	b.n	800c9de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f860 	bl	800ca9e <USBD_CtlError>
}
 800c9de:	bf00      	nop
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d80b      	bhi.n	800ca16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	885b      	ldrh	r3, [r3, #2]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d10c      	bne.n	800ca20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f910 	bl	800cc34 <USBD_CtlSendStatus>
      }
      break;
 800ca14:	e004      	b.n	800ca20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 f840 	bl	800ca9e <USBD_CtlError>
      break;
 800ca1e:	e000      	b.n	800ca22 <USBD_ClrFeature+0x3c>
      break;
 800ca20:	bf00      	nop
  }
}
 800ca22:	bf00      	nop
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b084      	sub	sp, #16
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
 800ca32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	781a      	ldrb	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3301      	adds	r3, #1
 800ca44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	781a      	ldrb	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f7ff fa41 	bl	800bedc <SWAPBYTE>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3301      	adds	r3, #1
 800ca66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7ff fa34 	bl	800bedc <SWAPBYTE>
 800ca74:	4603      	mov	r3, r0
 800ca76:	461a      	mov	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3301      	adds	r3, #1
 800ca86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f7ff fa27 	bl	800bedc <SWAPBYTE>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	80da      	strh	r2, [r3, #6]
}
 800ca96:	bf00      	nop
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b082      	sub	sp, #8
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800caa8:	2180      	movs	r1, #128	; 0x80
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fc98 	bl	800d3e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cab0:	2100      	movs	r1, #0
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fc94 	bl	800d3e0 <USBD_LL_StallEP>
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b086      	sub	sp, #24
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cacc:	2300      	movs	r3, #0
 800cace:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d036      	beq.n	800cb44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cada:	6938      	ldr	r0, [r7, #16]
 800cadc:	f000 f836 	bl	800cb4c <USBD_GetLen>
 800cae0:	4603      	mov	r3, r0
 800cae2:	3301      	adds	r3, #1
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	b29a      	uxth	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	4413      	add	r3, r2
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	7812      	ldrb	r2, [r2, #0]
 800caf8:	701a      	strb	r2, [r3, #0]
  idx++;
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
 800cafc:	3301      	adds	r3, #1
 800cafe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	4413      	add	r3, r2
 800cb06:	2203      	movs	r2, #3
 800cb08:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb0a:	7dfb      	ldrb	r3, [r7, #23]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb10:	e013      	b.n	800cb3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cb12:	7dfb      	ldrb	r3, [r7, #23]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	4413      	add	r3, r2
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	7812      	ldrb	r2, [r2, #0]
 800cb1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	3301      	adds	r3, #1
 800cb22:	613b      	str	r3, [r7, #16]
    idx++;
 800cb24:	7dfb      	ldrb	r3, [r7, #23]
 800cb26:	3301      	adds	r3, #1
 800cb28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb2a:	7dfb      	ldrb	r3, [r7, #23]
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	4413      	add	r3, r2
 800cb30:	2200      	movs	r2, #0
 800cb32:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
 800cb36:	3301      	adds	r3, #1
 800cb38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1e7      	bne.n	800cb12 <USBD_GetString+0x52>
 800cb42:	e000      	b.n	800cb46 <USBD_GetString+0x86>
    return;
 800cb44:	bf00      	nop
  }
}
 800cb46:	3718      	adds	r7, #24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb5c:	e005      	b.n	800cb6a <USBD_GetLen+0x1e>
  {
    len++;
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	3301      	adds	r3, #1
 800cb62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	3301      	adds	r3, #1
 800cb68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1f5      	bne.n	800cb5e <USBD_GetLen+0x12>
  }

  return len;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2202      	movs	r2, #2
 800cb90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	2100      	movs	r1, #0
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f000 fca3 	bl	800d4f2 <USBD_LL_Transmit>

  return USBD_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	60f8      	str	r0, [r7, #12]
 800cbbe:	60b9      	str	r1, [r7, #8]
 800cbc0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f000 fc92 	bl	800d4f2 <USBD_LL_Transmit>

  return USBD_OK;
 800cbce:	2300      	movs	r3, #0
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2203      	movs	r2, #3
 800cbe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	2100      	movs	r1, #0
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f000 fc96 	bl	800d534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b084      	sub	sp, #16
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	60f8      	str	r0, [r7, #12]
 800cc1a:	60b9      	str	r1, [r7, #8]
 800cc1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	2100      	movs	r1, #0
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f000 fc85 	bl	800d534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2204      	movs	r2, #4
 800cc40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc44:	2300      	movs	r3, #0
 800cc46:	2200      	movs	r2, #0
 800cc48:	2100      	movs	r1, #0
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fc51 	bl	800d4f2 <USBD_LL_Transmit>

  return USBD_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2205      	movs	r2, #5
 800cc66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	2100      	movs	r1, #0
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 fc5f 	bl	800d534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc84:	2200      	movs	r2, #0
 800cc86:	4913      	ldr	r1, [pc, #76]	; (800ccd4 <MX_USB_DEVICE_Init+0x54>)
 800cc88:	4813      	ldr	r0, [pc, #76]	; (800ccd8 <MX_USB_DEVICE_Init+0x58>)
 800cc8a:	f7fe fd41 	bl	800b710 <USBD_Init>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc94:	f7f3 fcfc 	bl	8000690 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800cc98:	4910      	ldr	r1, [pc, #64]	; (800ccdc <MX_USB_DEVICE_Init+0x5c>)
 800cc9a:	480f      	ldr	r0, [pc, #60]	; (800ccd8 <MX_USB_DEVICE_Init+0x58>)
 800cc9c:	f7fe fd68 	bl	800b770 <USBD_RegisterClass>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cca6:	f7f3 fcf3 	bl	8000690 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800ccaa:	490d      	ldr	r1, [pc, #52]	; (800cce0 <MX_USB_DEVICE_Init+0x60>)
 800ccac:	480a      	ldr	r0, [pc, #40]	; (800ccd8 <MX_USB_DEVICE_Init+0x58>)
 800ccae:	f7fe fce1 	bl	800b674 <USBD_AUDIO_RegisterInterface>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d001      	beq.n	800ccbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ccb8:	f7f3 fcea 	bl	8000690 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ccbc:	4806      	ldr	r0, [pc, #24]	; (800ccd8 <MX_USB_DEVICE_Init+0x58>)
 800ccbe:	f7fe fd8d 	bl	800b7dc <USBD_Start>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d001      	beq.n	800cccc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ccc8:	f7f3 fce2 	bl	8000690 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cccc:	f7f8 fd1e 	bl	800570c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ccd0:	bf00      	nop
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	240000e0 	.word	0x240000e0
 800ccd8:	240002b4 	.word	0x240002b4
 800ccdc:	24000010 	.word	0x24000010
 800cce0:	240000c4 	.word	0x240000c4

0800cce4 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800ccf0:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b083      	sub	sp, #12
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800cd06:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800cd22:	79fb      	ldrb	r3, [r7, #7]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d001      	beq.n	800cd2c <AUDIO_AudioCmd_FS+0x18>
 800cd28:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800cd2a:	e000      	b.n	800cd2e <AUDIO_AudioCmd_FS+0x1a>
    break;
 800cd2c:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800cd2e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800cd46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800cd5e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	4613      	mov	r3, r2
 800cd78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800cd7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3714      	adds	r7, #20
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800cd8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	6039      	str	r1, [r7, #0]
 800cda2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2212      	movs	r2, #18
 800cda8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cdaa:	4b03      	ldr	r3, [pc, #12]	; (800cdb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	240000fc 	.word	0x240000fc

0800cdbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	6039      	str	r1, [r7, #0]
 800cdc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	2204      	movs	r2, #4
 800cdcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdce:	4b03      	ldr	r3, [pc, #12]	; (800cddc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	24000110 	.word	0x24000110

0800cde0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	4603      	mov	r3, r0
 800cde8:	6039      	str	r1, [r7, #0]
 800cdea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdec:	79fb      	ldrb	r3, [r7, #7]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d105      	bne.n	800cdfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdf2:	683a      	ldr	r2, [r7, #0]
 800cdf4:	4907      	ldr	r1, [pc, #28]	; (800ce14 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdf6:	4808      	ldr	r0, [pc, #32]	; (800ce18 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdf8:	f7ff fe62 	bl	800cac0 <USBD_GetString>
 800cdfc:	e004      	b.n	800ce08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdfe:	683a      	ldr	r2, [r7, #0]
 800ce00:	4904      	ldr	r1, [pc, #16]	; (800ce14 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce02:	4805      	ldr	r0, [pc, #20]	; (800ce18 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce04:	f7ff fe5c 	bl	800cac0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce08:	4b02      	ldr	r3, [pc, #8]	; (800ce14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	24000590 	.word	0x24000590
 800ce18:	0800d694 	.word	0x0800d694

0800ce1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	6039      	str	r1, [r7, #0]
 800ce26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	4904      	ldr	r1, [pc, #16]	; (800ce3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce2c:	4804      	ldr	r0, [pc, #16]	; (800ce40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce2e:	f7ff fe47 	bl	800cac0 <USBD_GetString>
  return USBD_StrDesc;
 800ce32:	4b02      	ldr	r3, [pc, #8]	; (800ce3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	24000590 	.word	0x24000590
 800ce40:	0800d6a8 	.word	0x0800d6a8

0800ce44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6039      	str	r1, [r7, #0]
 800ce4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	221a      	movs	r2, #26
 800ce54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce56:	f000 f843 	bl	800cee0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce5a:	4b02      	ldr	r3, [pc, #8]	; (800ce64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	24000114 	.word	0x24000114

0800ce68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	6039      	str	r1, [r7, #0]
 800ce72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d105      	bne.n	800ce86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	4907      	ldr	r1, [pc, #28]	; (800ce9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce7e:	4808      	ldr	r0, [pc, #32]	; (800cea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce80:	f7ff fe1e 	bl	800cac0 <USBD_GetString>
 800ce84:	e004      	b.n	800ce90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	4904      	ldr	r1, [pc, #16]	; (800ce9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce8a:	4805      	ldr	r0, [pc, #20]	; (800cea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce8c:	f7ff fe18 	bl	800cac0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce90:	4b02      	ldr	r3, [pc, #8]	; (800ce9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	24000590 	.word	0x24000590
 800cea0:	0800d6bc 	.word	0x0800d6bc

0800cea4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d105      	bne.n	800cec2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	4907      	ldr	r1, [pc, #28]	; (800ced8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceba:	4808      	ldr	r0, [pc, #32]	; (800cedc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cebc:	f7ff fe00 	bl	800cac0 <USBD_GetString>
 800cec0:	e004      	b.n	800cecc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cec2:	683a      	ldr	r2, [r7, #0]
 800cec4:	4904      	ldr	r1, [pc, #16]	; (800ced8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cec6:	4805      	ldr	r0, [pc, #20]	; (800cedc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cec8:	f7ff fdfa 	bl	800cac0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cecc:	4b02      	ldr	r3, [pc, #8]	; (800ced8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	24000590 	.word	0x24000590
 800cedc:	0800d6cc 	.word	0x0800d6cc

0800cee0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <Get_SerialNum+0x44>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ceec:	4b0e      	ldr	r3, [pc, #56]	; (800cf28 <Get_SerialNum+0x48>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cef2:	4b0e      	ldr	r3, [pc, #56]	; (800cf2c <Get_SerialNum+0x4c>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d009      	beq.n	800cf1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf06:	2208      	movs	r2, #8
 800cf08:	4909      	ldr	r1, [pc, #36]	; (800cf30 <Get_SerialNum+0x50>)
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f000 f814 	bl	800cf38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf10:	2204      	movs	r2, #4
 800cf12:	4908      	ldr	r1, [pc, #32]	; (800cf34 <Get_SerialNum+0x54>)
 800cf14:	68b8      	ldr	r0, [r7, #8]
 800cf16:	f000 f80f 	bl	800cf38 <IntToUnicode>
  }
}
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	1ff1e800 	.word	0x1ff1e800
 800cf28:	1ff1e804 	.word	0x1ff1e804
 800cf2c:	1ff1e808 	.word	0x1ff1e808
 800cf30:	24000116 	.word	0x24000116
 800cf34:	24000126 	.word	0x24000126

0800cf38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b087      	sub	sp, #28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	4613      	mov	r3, r2
 800cf44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	75fb      	strb	r3, [r7, #23]
 800cf4e:	e027      	b.n	800cfa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	0f1b      	lsrs	r3, r3, #28
 800cf54:	2b09      	cmp	r3, #9
 800cf56:	d80b      	bhi.n	800cf70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	0f1b      	lsrs	r3, r3, #28
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	7dfb      	ldrb	r3, [r7, #23]
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	4619      	mov	r1, r3
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	440b      	add	r3, r1
 800cf68:	3230      	adds	r2, #48	; 0x30
 800cf6a:	b2d2      	uxtb	r2, r2
 800cf6c:	701a      	strb	r2, [r3, #0]
 800cf6e:	e00a      	b.n	800cf86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	0f1b      	lsrs	r3, r3, #28
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
 800cf78:	005b      	lsls	r3, r3, #1
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	440b      	add	r3, r1
 800cf80:	3237      	adds	r2, #55	; 0x37
 800cf82:	b2d2      	uxtb	r2, r2
 800cf84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	011b      	lsls	r3, r3, #4
 800cf8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf8c:	7dfb      	ldrb	r3, [r7, #23]
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	3301      	adds	r3, #1
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	4413      	add	r3, r2
 800cf96:	2200      	movs	r2, #0
 800cf98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf9a:	7dfb      	ldrb	r3, [r7, #23]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	75fb      	strb	r3, [r7, #23]
 800cfa0:	7dfa      	ldrb	r2, [r7, #23]
 800cfa2:	79fb      	ldrb	r3, [r7, #7]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d3d3      	bcc.n	800cf50 <IntToUnicode+0x18>
  }
}
 800cfa8:	bf00      	nop
 800cfaa:	bf00      	nop
 800cfac:	371c      	adds	r7, #28
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b0b8      	sub	sp, #224	; 0xe0
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	605a      	str	r2, [r3, #4]
 800cfca:	609a      	str	r2, [r3, #8]
 800cfcc:	60da      	str	r2, [r3, #12]
 800cfce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cfd0:	f107 0310 	add.w	r3, r7, #16
 800cfd4:	22bc      	movs	r2, #188	; 0xbc
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 fb47 	bl	800d66c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a2b      	ldr	r2, [pc, #172]	; (800d090 <HAL_PCD_MspInit+0xd8>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d14e      	bne.n	800d086 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cfe8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cfec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cfee:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800cff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cff6:	f107 0310 	add.w	r3, r7, #16
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7f9 fb24 	bl	8006648 <HAL_RCCEx_PeriphCLKConfig>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800d006:	f7f3 fb43 	bl	8000690 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d00a:	f7f8 fb7f 	bl	800570c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d00e:	4b21      	ldr	r3, [pc, #132]	; (800d094 <HAL_PCD_MspInit+0xdc>)
 800d010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d014:	4a1f      	ldr	r2, [pc, #124]	; (800d094 <HAL_PCD_MspInit+0xdc>)
 800d016:	f043 0301 	orr.w	r3, r3, #1
 800d01a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d01e:	4b1d      	ldr	r3, [pc, #116]	; (800d094 <HAL_PCD_MspInit+0xdc>)
 800d020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	60fb      	str	r3, [r7, #12]
 800d02a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d02c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d034:	2302      	movs	r3, #2
 800d036:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d03a:	2300      	movs	r3, #0
 800d03c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d040:	2300      	movs	r3, #0
 800d042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d046:	230a      	movs	r3, #10
 800d048:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d04c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d050:	4619      	mov	r1, r3
 800d052:	4811      	ldr	r0, [pc, #68]	; (800d098 <HAL_PCD_MspInit+0xe0>)
 800d054:	f7f6 fd5a 	bl	8003b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d058:	4b0e      	ldr	r3, [pc, #56]	; (800d094 <HAL_PCD_MspInit+0xdc>)
 800d05a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d05e:	4a0d      	ldr	r2, [pc, #52]	; (800d094 <HAL_PCD_MspInit+0xdc>)
 800d060:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d064:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d068:	4b0a      	ldr	r3, [pc, #40]	; (800d094 <HAL_PCD_MspInit+0xdc>)
 800d06a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d06e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d072:	60bb      	str	r3, [r7, #8]
 800d074:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d076:	2200      	movs	r2, #0
 800d078:	2100      	movs	r1, #0
 800d07a:	2065      	movs	r0, #101	; 0x65
 800d07c:	f7f3 fec9 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d080:	2065      	movs	r0, #101	; 0x65
 800d082:	f7f3 fee0 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d086:	bf00      	nop
 800d088:	37e0      	adds	r7, #224	; 0xe0
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	40080000 	.word	0x40080000
 800d094:	58024400 	.word	0x58024400
 800d098:	58020000 	.word	0x58020000

0800d09c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	f7fe fbdf 	bl	800b876 <USBD_LL_SetupStage>
}
 800d0b8:	bf00      	nop
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d0d2:	78fa      	ldrb	r2, [r7, #3]
 800d0d4:	6879      	ldr	r1, [r7, #4]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	4413      	add	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	440b      	add	r3, r1
 800d0e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	78fb      	ldrb	r3, [r7, #3]
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	f7fe fc19 	bl	800b920 <USBD_LL_DataOutStage>
}
 800d0ee:	bf00      	nop
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	460b      	mov	r3, r1
 800d100:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d108:	78fa      	ldrb	r2, [r7, #3]
 800d10a:	6879      	ldr	r1, [r7, #4]
 800d10c:	4613      	mov	r3, r2
 800d10e:	00db      	lsls	r3, r3, #3
 800d110:	4413      	add	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	440b      	add	r3, r1
 800d116:	334c      	adds	r3, #76	; 0x4c
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	78fb      	ldrb	r3, [r7, #3]
 800d11c:	4619      	mov	r1, r3
 800d11e:	f7fe fcb2 	bl	800ba86 <USBD_LL_DataInStage>
}
 800d122:	bf00      	nop
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b082      	sub	sp, #8
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe fde6 	bl	800bd0a <USBD_LL_SOF>
}
 800d13e:	bf00      	nop
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d14e:	2301      	movs	r3, #1
 800d150:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d102      	bne.n	800d160 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d15a:	2300      	movs	r3, #0
 800d15c:	73fb      	strb	r3, [r7, #15]
 800d15e:	e008      	b.n	800d172 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	2b02      	cmp	r3, #2
 800d166:	d102      	bne.n	800d16e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d168:	2301      	movs	r3, #1
 800d16a:	73fb      	strb	r3, [r7, #15]
 800d16c:	e001      	b.n	800d172 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d16e:	f7f3 fa8f 	bl	8000690 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d178:	7bfa      	ldrb	r2, [r7, #15]
 800d17a:	4611      	mov	r1, r2
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fe fd86 	bl	800bc8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fe fd2e 	bl	800bbea <USBD_LL_Reset>
}
 800d18e:	bf00      	nop
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
	...

0800d198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe fd81 	bl	800bcae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	6812      	ldr	r2, [r2, #0]
 800d1ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d1be:	f043 0301 	orr.w	r3, r3, #1
 800d1c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6a1b      	ldr	r3, [r3, #32]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d005      	beq.n	800d1d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1cc:	4b04      	ldr	r3, [pc, #16]	; (800d1e0 <HAL_PCD_SuspendCallback+0x48>)
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	4a03      	ldr	r2, [pc, #12]	; (800d1e0 <HAL_PCD_SuspendCallback+0x48>)
 800d1d2:	f043 0306 	orr.w	r3, r3, #6
 800d1d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	e000ed00 	.word	0xe000ed00

0800d1e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fe fd71 	bl	800bcda <USBD_LL_Resume>
}
 800d1f8:	bf00      	nop
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	4611      	mov	r1, r2
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fdc9 	bl	800bdae <USBD_LL_IsoOUTIncomplete>
}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	460b      	mov	r3, r1
 800d22e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d236:	78fa      	ldrb	r2, [r7, #3]
 800d238:	4611      	mov	r1, r2
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fe fd85 	bl	800bd4a <USBD_LL_IsoINIncomplete>
}
 800d240:	bf00      	nop
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fddb 	bl	800be12 <USBD_LL_DevConnected>
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d272:	4618      	mov	r0, r3
 800d274:	f7fe fdd8 	bl	800be28 <USBD_LL_DevDisconnected>
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d13e      	bne.n	800d30e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d290:	4a21      	ldr	r2, [pc, #132]	; (800d318 <USBD_LL_Init+0x98>)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a1f      	ldr	r2, [pc, #124]	; (800d318 <USBD_LL_Init+0x98>)
 800d29c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2a0:	4b1d      	ldr	r3, [pc, #116]	; (800d318 <USBD_LL_Init+0x98>)
 800d2a2:	4a1e      	ldr	r2, [pc, #120]	; (800d31c <USBD_LL_Init+0x9c>)
 800d2a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d2a6:	4b1c      	ldr	r3, [pc, #112]	; (800d318 <USBD_LL_Init+0x98>)
 800d2a8:	2209      	movs	r2, #9
 800d2aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2ac:	4b1a      	ldr	r3, [pc, #104]	; (800d318 <USBD_LL_Init+0x98>)
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2b2:	4b19      	ldr	r3, [pc, #100]	; (800d318 <USBD_LL_Init+0x98>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2b8:	4b17      	ldr	r3, [pc, #92]	; (800d318 <USBD_LL_Init+0x98>)
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d2be:	4b16      	ldr	r3, [pc, #88]	; (800d318 <USBD_LL_Init+0x98>)
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2c4:	4b14      	ldr	r3, [pc, #80]	; (800d318 <USBD_LL_Init+0x98>)
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2ca:	4b13      	ldr	r3, [pc, #76]	; (800d318 <USBD_LL_Init+0x98>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d2d0:	4b11      	ldr	r3, [pc, #68]	; (800d318 <USBD_LL_Init+0x98>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d2d6:	4b10      	ldr	r3, [pc, #64]	; (800d318 <USBD_LL_Init+0x98>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d2dc:	4b0e      	ldr	r3, [pc, #56]	; (800d318 <USBD_LL_Init+0x98>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2e2:	480d      	ldr	r0, [pc, #52]	; (800d318 <USBD_LL_Init+0x98>)
 800d2e4:	f7f6 ff03 	bl	80040ee <HAL_PCD_Init>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d2ee:	f7f3 f9cf 	bl	8000690 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d2f2:	2180      	movs	r1, #128	; 0x80
 800d2f4:	4808      	ldr	r0, [pc, #32]	; (800d318 <USBD_LL_Init+0x98>)
 800d2f6:	f7f8 f98e 	bl	8005616 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d2fa:	2240      	movs	r2, #64	; 0x40
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	4806      	ldr	r0, [pc, #24]	; (800d318 <USBD_LL_Init+0x98>)
 800d300:	f7f8 f942 	bl	8005588 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d304:	2280      	movs	r2, #128	; 0x80
 800d306:	2101      	movs	r1, #1
 800d308:	4803      	ldr	r0, [pc, #12]	; (800d318 <USBD_LL_Init+0x98>)
 800d30a:	f7f8 f93d 	bl	8005588 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	24000990 	.word	0x24000990
 800d31c:	40080000 	.word	0x40080000

0800d320 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d32c:	2300      	movs	r3, #0
 800d32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d336:	4618      	mov	r0, r3
 800d338:	f7f6 fffd 	bl	8004336 <HAL_PCD_Start>
 800d33c:	4603      	mov	r3, r0
 800d33e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d340:	7bfb      	ldrb	r3, [r7, #15]
 800d342:	4618      	mov	r0, r3
 800d344:	f000 f942 	bl	800d5cc <USBD_Get_USB_Status>
 800d348:	4603      	mov	r3, r0
 800d34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	4608      	mov	r0, r1
 800d360:	4611      	mov	r1, r2
 800d362:	461a      	mov	r2, r3
 800d364:	4603      	mov	r3, r0
 800d366:	70fb      	strb	r3, [r7, #3]
 800d368:	460b      	mov	r3, r1
 800d36a:	70bb      	strb	r3, [r7, #2]
 800d36c:	4613      	mov	r3, r2
 800d36e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d374:	2300      	movs	r3, #0
 800d376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d37e:	78bb      	ldrb	r3, [r7, #2]
 800d380:	883a      	ldrh	r2, [r7, #0]
 800d382:	78f9      	ldrb	r1, [r7, #3]
 800d384:	f7f7 fcfb 	bl	8004d7e <HAL_PCD_EP_Open>
 800d388:	4603      	mov	r3, r0
 800d38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 f91c 	bl	800d5cc <USBD_Get_USB_Status>
 800d394:	4603      	mov	r3, r0
 800d396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d398:	7bbb      	ldrb	r3, [r7, #14]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b084      	sub	sp, #16
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3bc:	78fa      	ldrb	r2, [r7, #3]
 800d3be:	4611      	mov	r1, r2
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7f7 fd44 	bl	8004e4e <HAL_PCD_EP_Close>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 f8fd 	bl	800d5cc <USBD_Get_USB_Status>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3fa:	78fa      	ldrb	r2, [r7, #3]
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7f7 fe1c 	bl	800503c <HAL_PCD_EP_SetStall>
 800d404:	4603      	mov	r3, r0
 800d406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d408:	7bfb      	ldrb	r3, [r7, #15]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 f8de 	bl	800d5cc <USBD_Get_USB_Status>
 800d410:	4603      	mov	r3, r0
 800d412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d414:	7bbb      	ldrb	r3, [r7, #14]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b084      	sub	sp, #16
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	460b      	mov	r3, r1
 800d428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d42a:	2300      	movs	r3, #0
 800d42c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d42e:	2300      	movs	r3, #0
 800d430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d438:	78fa      	ldrb	r2, [r7, #3]
 800d43a:	4611      	mov	r1, r2
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7f7 fe61 	bl	8005104 <HAL_PCD_EP_ClrStall>
 800d442:	4603      	mov	r3, r0
 800d444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	4618      	mov	r0, r3
 800d44a:	f000 f8bf 	bl	800d5cc <USBD_Get_USB_Status>
 800d44e:	4603      	mov	r3, r0
 800d450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d452:	7bbb      	ldrb	r3, [r7, #14]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d46e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d474:	2b00      	cmp	r3, #0
 800d476:	da0b      	bge.n	800d490 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d478:	78fb      	ldrb	r3, [r7, #3]
 800d47a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d47e:	68f9      	ldr	r1, [r7, #12]
 800d480:	4613      	mov	r3, r2
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	440b      	add	r3, r1
 800d48a:	333e      	adds	r3, #62	; 0x3e
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	e00b      	b.n	800d4a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d490:	78fb      	ldrb	r3, [r7, #3]
 800d492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d496:	68f9      	ldr	r1, [r7, #12]
 800d498:	4613      	mov	r3, r2
 800d49a:	00db      	lsls	r3, r3, #3
 800d49c:	4413      	add	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	440b      	add	r3, r1
 800d4a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d4a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4ce:	78fa      	ldrb	r2, [r7, #3]
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7f7 fc2e 	bl	8004d34 <HAL_PCD_SetAddress>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4dc:	7bfb      	ldrb	r3, [r7, #15]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f000 f874 	bl	800d5cc <USBD_Get_USB_Status>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b086      	sub	sp, #24
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	60f8      	str	r0, [r7, #12]
 800d4fa:	607a      	str	r2, [r7, #4]
 800d4fc:	603b      	str	r3, [r7, #0]
 800d4fe:	460b      	mov	r3, r1
 800d500:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d506:	2300      	movs	r3, #0
 800d508:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d510:	7af9      	ldrb	r1, [r7, #11]
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	f7f7 fd47 	bl	8004fa8 <HAL_PCD_EP_Transmit>
 800d51a:	4603      	mov	r3, r0
 800d51c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d51e:	7dfb      	ldrb	r3, [r7, #23]
 800d520:	4618      	mov	r0, r3
 800d522:	f000 f853 	bl	800d5cc <USBD_Get_USB_Status>
 800d526:	4603      	mov	r3, r0
 800d528:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d52a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b086      	sub	sp, #24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	607a      	str	r2, [r7, #4]
 800d53e:	603b      	str	r3, [r7, #0]
 800d540:	460b      	mov	r3, r1
 800d542:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d544:	2300      	movs	r3, #0
 800d546:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d552:	7af9      	ldrb	r1, [r7, #11]
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	f7f7 fcc3 	bl	8004ee2 <HAL_PCD_EP_Receive>
 800d55c:	4603      	mov	r3, r0
 800d55e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d560:	7dfb      	ldrb	r3, [r7, #23]
 800d562:	4618      	mov	r0, r3
 800d564:	f000 f832 	bl	800d5cc <USBD_Get_USB_Status>
 800d568:	4603      	mov	r3, r0
 800d56a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d56c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3718      	adds	r7, #24
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b082      	sub	sp, #8
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
 800d57e:	460b      	mov	r3, r1
 800d580:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d588:	78fa      	ldrb	r2, [r7, #3]
 800d58a:	4611      	mov	r1, r2
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7f7 fcf3 	bl	8004f78 <HAL_PCD_EP_GetRxCount>
 800d592:	4603      	mov	r3, r0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d5a4:	4b03      	ldr	r3, [pc, #12]	; (800d5b4 <USBD_static_malloc+0x18>)
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	24000e9c 	.word	0x24000e9c

0800d5b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]

}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5da:	79fb      	ldrb	r3, [r7, #7]
 800d5dc:	2b03      	cmp	r3, #3
 800d5de:	d817      	bhi.n	800d610 <USBD_Get_USB_Status+0x44>
 800d5e0:	a201      	add	r2, pc, #4	; (adr r2, 800d5e8 <USBD_Get_USB_Status+0x1c>)
 800d5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e6:	bf00      	nop
 800d5e8:	0800d5f9 	.word	0x0800d5f9
 800d5ec:	0800d5ff 	.word	0x0800d5ff
 800d5f0:	0800d605 	.word	0x0800d605
 800d5f4:	0800d60b 	.word	0x0800d60b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d5fc:	e00b      	b.n	800d616 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5fe:	2303      	movs	r3, #3
 800d600:	73fb      	strb	r3, [r7, #15]
    break;
 800d602:	e008      	b.n	800d616 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d604:	2301      	movs	r3, #1
 800d606:	73fb      	strb	r3, [r7, #15]
    break;
 800d608:	e005      	b.n	800d616 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d60a:	2303      	movs	r3, #3
 800d60c:	73fb      	strb	r3, [r7, #15]
    break;
 800d60e:	e002      	b.n	800d616 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d610:	2303      	movs	r3, #3
 800d612:	73fb      	strb	r3, [r7, #15]
    break;
 800d614:	bf00      	nop
  }
  return usb_status;
 800d616:	7bfb      	ldrb	r3, [r7, #15]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3714      	adds	r7, #20
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <__libc_init_array>:
 800d624:	b570      	push	{r4, r5, r6, lr}
 800d626:	4d0d      	ldr	r5, [pc, #52]	; (800d65c <__libc_init_array+0x38>)
 800d628:	4c0d      	ldr	r4, [pc, #52]	; (800d660 <__libc_init_array+0x3c>)
 800d62a:	1b64      	subs	r4, r4, r5
 800d62c:	10a4      	asrs	r4, r4, #2
 800d62e:	2600      	movs	r6, #0
 800d630:	42a6      	cmp	r6, r4
 800d632:	d109      	bne.n	800d648 <__libc_init_array+0x24>
 800d634:	4d0b      	ldr	r5, [pc, #44]	; (800d664 <__libc_init_array+0x40>)
 800d636:	4c0c      	ldr	r4, [pc, #48]	; (800d668 <__libc_init_array+0x44>)
 800d638:	f000 f820 	bl	800d67c <_init>
 800d63c:	1b64      	subs	r4, r4, r5
 800d63e:	10a4      	asrs	r4, r4, #2
 800d640:	2600      	movs	r6, #0
 800d642:	42a6      	cmp	r6, r4
 800d644:	d105      	bne.n	800d652 <__libc_init_array+0x2e>
 800d646:	bd70      	pop	{r4, r5, r6, pc}
 800d648:	f855 3b04 	ldr.w	r3, [r5], #4
 800d64c:	4798      	blx	r3
 800d64e:	3601      	adds	r6, #1
 800d650:	e7ee      	b.n	800d630 <__libc_init_array+0xc>
 800d652:	f855 3b04 	ldr.w	r3, [r5], #4
 800d656:	4798      	blx	r3
 800d658:	3601      	adds	r6, #1
 800d65a:	e7f2      	b.n	800d642 <__libc_init_array+0x1e>
 800d65c:	0800d6f4 	.word	0x0800d6f4
 800d660:	0800d6f4 	.word	0x0800d6f4
 800d664:	0800d6f4 	.word	0x0800d6f4
 800d668:	0800d6f8 	.word	0x0800d6f8

0800d66c <memset>:
 800d66c:	4402      	add	r2, r0
 800d66e:	4603      	mov	r3, r0
 800d670:	4293      	cmp	r3, r2
 800d672:	d100      	bne.n	800d676 <memset+0xa>
 800d674:	4770      	bx	lr
 800d676:	f803 1b01 	strb.w	r1, [r3], #1
 800d67a:	e7f9      	b.n	800d670 <memset+0x4>

0800d67c <_init>:
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	bf00      	nop
 800d680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d682:	bc08      	pop	{r3}
 800d684:	469e      	mov	lr, r3
 800d686:	4770      	bx	lr

0800d688 <_fini>:
 800d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68a:	bf00      	nop
 800d68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68e:	bc08      	pop	{r3}
 800d690:	469e      	mov	lr, r3
 800d692:	4770      	bx	lr
