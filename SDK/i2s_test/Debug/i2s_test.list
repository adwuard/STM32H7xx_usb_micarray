
i2s_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800e968  0800e968  0001e968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ea7c  0800ea7c  0001ea7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ea80  0800ea80  0001ea80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000194  24000000  0800ea84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004dd4  24000194  0800ec18  00020194  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004f68  0800ec18  00024f68  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001bf8f  00000000  00000000  000201c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003d17  00000000  00000000  0003c151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001488  00000000  00000000  0003fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000012e8  00000000  00000000  000412f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a646  00000000  00000000  000425d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001cc41  00000000  00000000  0007cc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015b3a8  00000000  00000000  0009985f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f4c07  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005c9c  00000000  00000000  001f4c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000194 	.word	0x24000194
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e950 	.word	0x0800e950

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000198 	.word	0x24000198
 80002dc:	0800e950 	.word	0x0800e950

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <loop>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void loop(void){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

	if(HAL_OK != HAL_SAI_Receive_DMA (&hsai_BlockA1, (uint8_t *) &PlayBuff[0], 128))
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	4906      	ldr	r1, [pc, #24]	; (80003a0 <loop+0x20>)
 8000388:	4806      	ldr	r0, [pc, #24]	; (80003a4 <loop+0x24>)
 800038a:	f008 ff4f 	bl	800922c <HAL_SAI_Receive_DMA>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d003      	beq.n	800039c <loop+0x1c>
	{
		printf("Hello\n");
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <loop+0x28>)
 8000396:	f00d fb5d 	bl	800da54 <puts>
//	    Error_Handler();
	}
	return;
 800039a:	bf00      	nop
 800039c:	bf00      	nop
}
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2400030c 	.word	0x2400030c
 80003a4:	240001fc 	.word	0x240001fc
 80003a8:	0800e968 	.word	0x0800e968

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b0:	f000 fc9a 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b4:	f000 f80e 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b8:	f000 f94c 	bl	8000654 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003bc:	f000 f888 	bl	80004d0 <MX_I2C1_Init>
  MX_DMA_Init();
 80003c0:	f000 f928 	bl	8000614 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80003c4:	f00c fdbc 	bl	800cf40 <MX_USB_DEVICE_Init>
  MX_SAI1_Init();
 80003c8:	f000 f8c2 	bl	8000550 <MX_SAI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

      while (1)
      {
    	  loop();
 80003cc:	f7ff ffd8 	bl	8000380 <loop>
 80003d0:	e7fc      	b.n	80003cc <main+0x20>
	...

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b09c      	sub	sp, #112	; 0x70
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003de:	224c      	movs	r2, #76	; 0x4c
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f00d faa8 	bl	800d938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2220      	movs	r2, #32
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f00d faa2 	bl	800d938 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003f4:	2002      	movs	r0, #2
 80003f6:	f005 fa85 	bl	8005904 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003fa:	2300      	movs	r3, #0
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	4b32      	ldr	r3, [pc, #200]	; (80004c8 <SystemClock_Config+0xf4>)
 8000400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000402:	4a31      	ldr	r2, [pc, #196]	; (80004c8 <SystemClock_Config+0xf4>)
 8000404:	f023 0301 	bic.w	r3, r3, #1
 8000408:	62d3      	str	r3, [r2, #44]	; 0x2c
 800040a:	4b2f      	ldr	r3, [pc, #188]	; (80004c8 <SystemClock_Config+0xf4>)
 800040c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	4b2d      	ldr	r3, [pc, #180]	; (80004cc <SystemClock_Config+0xf8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800041c:	4a2b      	ldr	r2, [pc, #172]	; (80004cc <SystemClock_Config+0xf8>)
 800041e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b29      	ldr	r3, [pc, #164]	; (80004cc <SystemClock_Config+0xf8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000430:	bf00      	nop
 8000432:	4b26      	ldr	r3, [pc, #152]	; (80004cc <SystemClock_Config+0xf8>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800043a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800043e:	d1f8      	bne.n	8000432 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000440:	2322      	movs	r3, #34	; 0x22
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000444:	2301      	movs	r3, #1
 8000446:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000448:	2340      	movs	r3, #64	; 0x40
 800044a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	2302      	movs	r3, #2
 8000452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000454:	2300      	movs	r3, #0
 8000456:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000458:	2305      	movs	r3, #5
 800045a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800045c:	2318      	movs	r3, #24
 800045e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000460:	2302      	movs	r3, #2
 8000462:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 25;
 8000464:	2319      	movs	r3, #25
 8000466:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000468:	2302      	movs	r3, #2
 800046a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800046c:	230c      	movs	r3, #12
 800046e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000470:	2300      	movs	r3, #0
 8000472:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800047c:	4618      	mov	r0, r3
 800047e:	f005 fa8b 	bl	8005998 <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000488:	f000 f964 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	233f      	movs	r3, #63	; 0x3f
 800048e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000490:	2300      	movs	r3, #0
 8000492:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004a0:	2340      	movs	r3, #64	; 0x40
 80004a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2101      	movs	r1, #1
 80004b0:	4618      	mov	r0, r3
 80004b2:	f005 fe9f 	bl	80061f4 <HAL_RCC_ClockConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80004bc:	f000 f94a 	bl	8000754 <Error_Handler>
  }
}
 80004c0:	bf00      	nop
 80004c2:	3770      	adds	r7, #112	; 0x70
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	58000400 	.word	0x58000400
 80004cc:	58024800 	.word	0x58024800

080004d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_I2C1_Init+0x74>)
 80004d6:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <MX_I2C1_Init+0x78>)
 80004d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80004da:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <MX_I2C1_Init+0x74>)
 80004dc:	4a1b      	ldr	r2, [pc, #108]	; (800054c <MX_I2C1_Init+0x7c>)
 80004de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_I2C1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <MX_I2C1_Init+0x74>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_I2C1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_I2C1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800050a:	480e      	ldr	r0, [pc, #56]	; (8000544 <MX_I2C1_Init+0x74>)
 800050c:	f003 fdd0 	bl	80040b0 <HAL_I2C_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000516:	f000 f91d 	bl	8000754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800051a:	2100      	movs	r1, #0
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <MX_I2C1_Init+0x74>)
 800051e:	f003 fe57 	bl	80041d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000528:	f000 f914 	bl	8000754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800052c:	2100      	movs	r1, #0
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_I2C1_Init+0x74>)
 8000530:	f003 fe99 	bl	8004266 <HAL_I2CEx_ConfigDigitalFilter>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800053a:	f000 f90b 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	240001b0 	.word	0x240001b0
 8000548:	40005400 	.word	0x40005400
 800054c:	00707cbb 	.word	0x00707cbb

08000550 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000554:	4b2d      	ldr	r3, [pc, #180]	; (800060c <MX_SAI1_Init+0xbc>)
 8000556:	4a2e      	ldr	r2, [pc, #184]	; (8000610 <MX_SAI1_Init+0xc0>)
 8000558:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800055a:	4b2c      	ldr	r3, [pc, #176]	; (800060c <MX_SAI1_Init+0xbc>)
 800055c:	2200      	movs	r2, #0
 800055e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <MX_SAI1_Init+0xbc>)
 8000562:	2201      	movs	r2, #1
 8000564:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <MX_SAI1_Init+0xbc>)
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <MX_SAI1_Init+0xbc>)
 800056e:	2200      	movs	r2, #0
 8000570:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <MX_SAI1_Init+0xbc>)
 8000574:	2200      	movs	r2, #0
 8000576:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <MX_SAI1_Init+0xbc>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800057e:	4b23      	ldr	r3, [pc, #140]	; (800060c <MX_SAI1_Init+0xbc>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000584:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_SAI1_Init+0xbc>)
 8000586:	2200      	movs	r2, #0
 8000588:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <MX_SAI1_Init+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <MX_SAI1_Init+0xbc>)
 8000592:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000596:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_SAI1_Init+0xbc>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_SAI1_Init+0xbc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_SAI1_Init+0xbc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_SAI1_Init+0xbc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 80005b2:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_SAI1_Init+0xbc>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_SAI1_Init+0xbc>)
 80005ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005be:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 128;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_SAI1_Init+0xbc>)
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_SAI1_Init+0xbc>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_SAI1_Init+0xbc>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_SAI1_Init+0xbc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_SAI1_Init+0xbc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_SAI1_Init+0xbc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_SAI1_Init+0xbc>)
 80005e6:	2240      	movs	r2, #64	; 0x40
 80005e8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 8;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_SAI1_Init+0xbc>)
 80005ec:	2208      	movs	r2, #8
 80005ee:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_SAI1_Init+0xbc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_SAI1_Init+0xbc>)
 80005f8:	f008 fae8 	bl	8008bcc <HAL_SAI_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_SAI1_Init+0xb6>
  {
    Error_Handler();
 8000602:	f000 f8a7 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	240001fc 	.word	0x240001fc
 8000610:	40015804 	.word	0x40015804

08000614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DMA_Init+0x3c>)
 800061c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <MX_DMA_Init+0x3c>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_DMA_Init+0x3c>)
 800062c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	200b      	movs	r0, #11
 800063e:	f000 fcf0 	bl	8001022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000642:	200b      	movs	r0, #11
 8000644:	f000 fd07 	bl	8001056 <HAL_NVIC_EnableIRQ>

}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	58024400 	.word	0x58024400

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066a:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MX_GPIO_Init+0xf4>)
 800066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000670:	4a35      	ldr	r2, [pc, #212]	; (8000748 <MX_GPIO_Init+0xf4>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <MX_GPIO_Init+0xf4>)
 800067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000688:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <MX_GPIO_Init+0xf4>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068e:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <MX_GPIO_Init+0xf4>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_GPIO_Init+0xf4>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_GPIO_Init+0xf4>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ac:	4a26      	ldr	r2, [pc, #152]	; (8000748 <MX_GPIO_Init+0xf4>)
 80006ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <MX_GPIO_Init+0xf4>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_GPIO_Init+0xf4>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ca:	4a1f      	ldr	r2, [pc, #124]	; (8000748 <MX_GPIO_Init+0xf4>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_GPIO_Init+0xf4>)
 80006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_GPIO_Init+0xf4>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e8:	4a17      	ldr	r2, [pc, #92]	; (8000748 <MX_GPIO_Init+0xf4>)
 80006ea:	f043 0302 	orr.w	r3, r3, #2
 80006ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_GPIO_Init+0xf4>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2108      	movs	r1, #8
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_GPIO_Init+0xf8>)
 8000706:	f003 fcb9 	bl	800407c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800070a:	2308      	movs	r3, #8
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000712:	2302      	movs	r3, #2
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000716:	2301      	movs	r3, #1
 8000718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	480a      	ldr	r0, [pc, #40]	; (800074c <MX_GPIO_Init+0xf8>)
 8000722:	f003 fafb 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : K1_Pin */
  GPIO_InitStruct.Pin = K1_Pin;
 8000726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(K1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_GPIO_Init+0xfc>)
 800073c:	f003 faee 	bl	8003d1c <HAL_GPIO_Init>

}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400
 800074c:	58021000 	.word	0x58021000
 8000750:	58020800 	.word	0x58020800

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_MspInit+0x30>)
 8000768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_MspInit+0x30>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_MspInit+0x30>)
 8000778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800077c:	f003 0302 	and.w	r3, r3, #2
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	58024400 	.word	0x58024400

08000794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0b8      	sub	sp, #224	; 0xe0
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	22bc      	movs	r2, #188	; 0xbc
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f00d f8bf 	bl	800d938 <memset>
  if(hi2c->Instance==I2C1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a24      	ldr	r2, [pc, #144]	; (8000850 <HAL_I2C_MspInit+0xbc>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d141      	bne.n	8000848 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007c4:	2308      	movs	r3, #8
 80007c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 f86e 	bl	80068b4 <HAL_RCCEx_PeriphCLKConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007de:	f7ff ffb9 	bl	8000754 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <HAL_I2C_MspInit+0xc0>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <HAL_I2C_MspInit+0xc0>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_I2C_MspInit+0xc0>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000800:	23c0      	movs	r3, #192	; 0xc0
 8000802:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000806:	2312      	movs	r3, #18
 8000808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000818:	2304      	movs	r3, #4
 800081a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <HAL_I2C_MspInit+0xc4>)
 8000826:	f003 fa79 	bl	8003d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_I2C_MspInit+0xc0>)
 800082c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000830:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_I2C_MspInit+0xc0>)
 8000832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000836:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_I2C_MspInit+0xc0>)
 800083c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000848:	bf00      	nop
 800084a:	37e0      	adds	r7, #224	; 0xe0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005400 	.word	0x40005400
 8000854:	58024400 	.word	0x58024400
 8000858:	58020400 	.word	0x58020400

0800085c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0b8      	sub	sp, #224	; 0xe0
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	22bc      	movs	r2, #188	; 0xbc
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f00d f863 	bl	800d938 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a47      	ldr	r2, [pc, #284]	; (8000994 <HAL_SAI_MspInit+0x138>)
 8000878:	4293      	cmp	r3, r2
 800087a:	f040 8086 	bne.w	800098a <HAL_SAI_MspInit+0x12e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800087e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000882:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8000884:	2300      	movs	r3, #0
 8000886:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4618      	mov	r0, r3
 800088e:	f006 f811 	bl	80068b4 <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8000898:	f7ff ff5c 	bl	8000754 <Error_Handler>
    }

    if (SAI1_client == 0)
 800089c:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <HAL_SAI_MspInit+0x13c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d116      	bne.n	80008d2 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80008a4:	4b3d      	ldr	r3, [pc, #244]	; (800099c <HAL_SAI_MspInit+0x140>)
 80008a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008aa:	4a3c      	ldr	r2, [pc, #240]	; (800099c <HAL_SAI_MspInit+0x140>)
 80008ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008b4:	4b39      	ldr	r3, [pc, #228]	; (800099c <HAL_SAI_MspInit+0x140>)
 80008b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2057      	movs	r0, #87	; 0x57
 80008c8:	f000 fbab 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80008cc:	2057      	movs	r0, #87	; 0x57
 80008ce:	f000 fbc2 	bl	8001056 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <HAL_SAI_MspInit+0x13c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <HAL_SAI_MspInit+0x13c>)
 80008da:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80008dc:	2370      	movs	r3, #112	; 0x70
 80008de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80008f4:	2306      	movs	r3, #6
 80008f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008fe:	4619      	mov	r1, r3
 8000900:	4827      	ldr	r0, [pc, #156]	; (80009a0 <HAL_SAI_MspInit+0x144>)
 8000902:	f003 fa0b 	bl	8003d1c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000908:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <HAL_SAI_MspInit+0x14c>)
 800090a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800090c:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 800090e:	2257      	movs	r2, #87	; 0x57
 8000910:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000918:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000924:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800092c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000934:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800093c:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000940:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000944:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000948:	2204      	movs	r2, #4
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 800094e:	2203      	movs	r2, #3
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000954:	2200      	movs	r2, #0
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 800095a:	2200      	movs	r2, #0
 800095c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000960:	f000 fb94 	bl	800108c <HAL_DMA_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_SAI_MspInit+0x112>
    {
      Error_Handler();
 800096a:	f7ff fef3 	bl	8000754 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_SAI_MspInit+0x148>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800098a:	bf00      	nop
 800098c:	37e0      	adds	r7, #224	; 0xe0
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40015804 	.word	0x40015804
 8000998:	2400070c 	.word	0x2400070c
 800099c:	58024400 	.word	0x58024400
 80009a0:	58021000 	.word	0x58021000
 80009a4:	24000294 	.word	0x24000294
 80009a8:	40020010 	.word	0x40020010

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f9e8 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <DMA1_Stream0_IRQHandler+0x10>)
 8000a06:	f001 fe6b 	bl	80026e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	24000294 	.word	0x24000294

08000a14 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <SAI1_IRQHandler+0x10>)
 8000a1a:	f008 fc9b 	bl	8009354 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	240001fc 	.word	0x240001fc

08000a28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <OTG_FS_IRQHandler+0x10>)
 8000a2e:	f003 fdbd 	bl	80045ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	24000df8 	.word	0x24000df8

08000a3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
	}

return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e009      	b.n	8000a9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf1      	blt.n	8000a88 <_write+0x12>
	}
	return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_close>:

int _close(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_isatty>:

int _isatty(int file)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	return 1;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	return 0;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f00c fecc 	bl	800d8e4 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	24080000 	.word	0x24080000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	24000710 	.word	0x24000710
 8000b80:	24004f68 	.word	0x24004f68

08000b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b88:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <SystemInit+0xe4>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a36      	ldr	r2, [pc, #216]	; (8000c68 <SystemInit+0xe4>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b98:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <SystemInit+0xe8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	2b06      	cmp	r3, #6
 8000ba2:	d807      	bhi.n	8000bb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ba4:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <SystemInit+0xe8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f023 030f 	bic.w	r3, r3, #15
 8000bac:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <SystemInit+0xe8>)
 8000bae:	f043 0307 	orr.w	r3, r3, #7
 8000bb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <SystemInit+0xec>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a2d      	ldr	r2, [pc, #180]	; (8000c70 <SystemInit+0xec>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <SystemInit+0xec>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <SystemInit+0xec>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	4929      	ldr	r1, [pc, #164]	; (8000c70 <SystemInit+0xec>)
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <SystemInit+0xf0>)
 8000bce:	4013      	ands	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <SystemInit+0xe8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d007      	beq.n	8000bee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <SystemInit+0xe8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f023 030f 	bic.w	r3, r3, #15
 8000be6:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <SystemInit+0xe8>)
 8000be8:	f043 0307 	orr.w	r3, r3, #7
 8000bec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <SystemInit+0xec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <SystemInit+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <SystemInit+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <SystemInit+0xec>)
 8000c02:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <SystemInit+0xf4>)
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <SystemInit+0xec>)
 8000c08:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <SystemInit+0xf8>)
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <SystemInit+0xec>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <SystemInit+0xfc>)
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <SystemInit+0xec>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <SystemInit+0xec>)
 8000c1a:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <SystemInit+0xfc>)
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <SystemInit+0xec>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <SystemInit+0xec>)
 8000c26:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <SystemInit+0xfc>)
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <SystemInit+0xec>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <SystemInit+0xec>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <SystemInit+0xec>)
 8000c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <SystemInit+0xec>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <SystemInit+0x100>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <SystemInit+0x104>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c4e:	d202      	bcs.n	8000c56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <SystemInit+0x108>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <SystemInit+0x10c>)
 8000c58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	52002000 	.word	0x52002000
 8000c70:	58024400 	.word	0x58024400
 8000c74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c78:	02020200 	.word	0x02020200
 8000c7c:	01ff0000 	.word	0x01ff0000
 8000c80:	01010280 	.word	0x01010280
 8000c84:	5c001000 	.word	0x5c001000
 8000c88:	ffff0000 	.word	0xffff0000
 8000c8c:	51008108 	.word	0x51008108
 8000c90:	52004000 	.word	0x52004000

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c98:	f7ff ff74 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	; (8000ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f00c fe15 	bl	800d8f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fb71 	bl	80003ac <main>
  bx  lr
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ccc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cd4:	24000194 	.word	0x24000194
  ldr r2, =_sidata
 8000cd8:	0800ea84 	.word	0x0800ea84
  ldr r2, =_sbss
 8000cdc:	24000194 	.word	0x24000194
  ldr r4, =_ebss
 8000ce0:	24004f68 	.word	0x24004f68

08000ce4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC3_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f000 f98c 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cf4:	f005 fc34 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_Init+0x68>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	0a1b      	lsrs	r3, r3, #8
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	4913      	ldr	r1, [pc, #76]	; (8000d54 <HAL_Init+0x6c>)
 8000d06:	5ccb      	ldrb	r3, [r1, r3]
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_Init+0x68>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_Init+0x6c>)
 8000d1c:	5cd3      	ldrb	r3, [r2, r3]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_Init+0x70>)
 8000d2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_Init+0x74>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f814 	bl	8000d60 <HAL_InitTick>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e002      	b.n	8000d48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d42:	f7ff fd0d 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	58024400 	.word	0x58024400
 8000d54:	0800e9cc 	.word	0x0800e9cc
 8000d58:	24000004 	.word	0x24000004
 8000d5c:	24000000 	.word	0x24000000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_InitTick+0x60>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e021      	b.n	8000db8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_InitTick+0x64>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_InitTick+0x60>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f971 	bl	8001072 <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 f93b 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_InitTick+0x68>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2400000c 	.word	0x2400000c
 8000dc4:	24000000 	.word	0x24000000
 8000dc8:	24000008 	.word	0x24000008

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2400000c 	.word	0x2400000c
 8000df0:	24000714 	.word	0x24000714

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	24000714 	.word	0x24000714

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2400000c 	.word	0x2400000c

08000e54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetREVID+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	0c1b      	lsrs	r3, r3, #16
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	5c001000 	.word	0x5c001000

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <__NVIC_SetPriorityGrouping+0x40>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x40>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00
 8000eb0:	05fa0000 	.word	0x05fa0000

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff29 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff40 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff90 	bl	8000f60 <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5f 	bl	8000f0c <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff33 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa4 	bl	8000fc8 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff feae 	bl	8000df4 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e316      	b.n	80016d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a66      	ldr	r2, [pc, #408]	; (8001244 <HAL_DMA_Init+0x1b8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d04a      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a65      	ldr	r2, [pc, #404]	; (8001248 <HAL_DMA_Init+0x1bc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d045      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a63      	ldr	r2, [pc, #396]	; (800124c <HAL_DMA_Init+0x1c0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d040      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a62      	ldr	r2, [pc, #392]	; (8001250 <HAL_DMA_Init+0x1c4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d03b      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a60      	ldr	r2, [pc, #384]	; (8001254 <HAL_DMA_Init+0x1c8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d036      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a5f      	ldr	r2, [pc, #380]	; (8001258 <HAL_DMA_Init+0x1cc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d031      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a5d      	ldr	r2, [pc, #372]	; (800125c <HAL_DMA_Init+0x1d0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02c      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a5c      	ldr	r2, [pc, #368]	; (8001260 <HAL_DMA_Init+0x1d4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d027      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a5a      	ldr	r2, [pc, #360]	; (8001264 <HAL_DMA_Init+0x1d8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d022      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a59      	ldr	r2, [pc, #356]	; (8001268 <HAL_DMA_Init+0x1dc>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d01d      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a57      	ldr	r2, [pc, #348]	; (800126c <HAL_DMA_Init+0x1e0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d018      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a56      	ldr	r2, [pc, #344]	; (8001270 <HAL_DMA_Init+0x1e4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d013      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a54      	ldr	r2, [pc, #336]	; (8001274 <HAL_DMA_Init+0x1e8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00e      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a53      	ldr	r2, [pc, #332]	; (8001278 <HAL_DMA_Init+0x1ec>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d009      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a51      	ldr	r2, [pc, #324]	; (800127c <HAL_DMA_Init+0x1f0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d004      	beq.n	8001144 <HAL_DMA_Init+0xb8>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a50      	ldr	r2, [pc, #320]	; (8001280 <HAL_DMA_Init+0x1f4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_DMA_Init+0xbc>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <HAL_DMA_Init+0xbe>
 8001148:	2300      	movs	r3, #0
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 813b 	beq.w	80013c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a37      	ldr	r2, [pc, #220]	; (8001244 <HAL_DMA_Init+0x1b8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d04a      	beq.n	8001200 <HAL_DMA_Init+0x174>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a36      	ldr	r2, [pc, #216]	; (8001248 <HAL_DMA_Init+0x1bc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d045      	beq.n	8001200 <HAL_DMA_Init+0x174>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a34      	ldr	r2, [pc, #208]	; (800124c <HAL_DMA_Init+0x1c0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d040      	beq.n	8001200 <HAL_DMA_Init+0x174>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a33      	ldr	r2, [pc, #204]	; (8001250 <HAL_DMA_Init+0x1c4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d03b      	beq.n	8001200 <HAL_DMA_Init+0x174>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a31      	ldr	r2, [pc, #196]	; (8001254 <HAL_DMA_Init+0x1c8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d036      	beq.n	8001200 <HAL_DMA_Init+0x174>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a30      	ldr	r2, [pc, #192]	; (8001258 <HAL_DMA_Init+0x1cc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d031      	beq.n	8001200 <HAL_DMA_Init+0x174>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a2e      	ldr	r2, [pc, #184]	; (800125c <HAL_DMA_Init+0x1d0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d02c      	beq.n	8001200 <HAL_DMA_Init+0x174>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <HAL_DMA_Init+0x1d4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d027      	beq.n	8001200 <HAL_DMA_Init+0x174>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <HAL_DMA_Init+0x1d8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d022      	beq.n	8001200 <HAL_DMA_Init+0x174>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a2a      	ldr	r2, [pc, #168]	; (8001268 <HAL_DMA_Init+0x1dc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d01d      	beq.n	8001200 <HAL_DMA_Init+0x174>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a28      	ldr	r2, [pc, #160]	; (800126c <HAL_DMA_Init+0x1e0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d018      	beq.n	8001200 <HAL_DMA_Init+0x174>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_DMA_Init+0x1e4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d013      	beq.n	8001200 <HAL_DMA_Init+0x174>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a25      	ldr	r2, [pc, #148]	; (8001274 <HAL_DMA_Init+0x1e8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00e      	beq.n	8001200 <HAL_DMA_Init+0x174>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a24      	ldr	r2, [pc, #144]	; (8001278 <HAL_DMA_Init+0x1ec>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d009      	beq.n	8001200 <HAL_DMA_Init+0x174>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a22      	ldr	r2, [pc, #136]	; (800127c <HAL_DMA_Init+0x1f0>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d004      	beq.n	8001200 <HAL_DMA_Init+0x174>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <HAL_DMA_Init+0x1f4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d108      	bne.n	8001212 <HAL_DMA_Init+0x186>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e007      	b.n	8001222 <HAL_DMA_Init+0x196>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0201 	bic.w	r2, r2, #1
 8001220:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001222:	e02f      	b.n	8001284 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001224:	f7ff fde6 	bl	8000df4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b05      	cmp	r3, #5
 8001230:	d928      	bls.n	8001284 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2220      	movs	r2, #32
 8001236:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2203      	movs	r2, #3
 800123c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e246      	b.n	80016d2 <HAL_DMA_Init+0x646>
 8001244:	40020010 	.word	0x40020010
 8001248:	40020028 	.word	0x40020028
 800124c:	40020040 	.word	0x40020040
 8001250:	40020058 	.word	0x40020058
 8001254:	40020070 	.word	0x40020070
 8001258:	40020088 	.word	0x40020088
 800125c:	400200a0 	.word	0x400200a0
 8001260:	400200b8 	.word	0x400200b8
 8001264:	40020410 	.word	0x40020410
 8001268:	40020428 	.word	0x40020428
 800126c:	40020440 	.word	0x40020440
 8001270:	40020458 	.word	0x40020458
 8001274:	40020470 	.word	0x40020470
 8001278:	40020488 	.word	0x40020488
 800127c:	400204a0 	.word	0x400204a0
 8001280:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1c8      	bne.n	8001224 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4b83      	ldr	r3, [pc, #524]	; (80014ac <HAL_DMA_Init+0x420>)
 800129e:	4013      	ands	r3, r2
 80012a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80012aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d107      	bne.n	80012e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4313      	orrs	r3, r2
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80012e8:	4b71      	ldr	r3, [pc, #452]	; (80014b0 <HAL_DMA_Init+0x424>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <HAL_DMA_Init+0x428>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012f4:	d328      	bcc.n	8001348 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b28      	cmp	r3, #40	; 0x28
 80012fc:	d903      	bls.n	8001306 <HAL_DMA_Init+0x27a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b2e      	cmp	r3, #46	; 0x2e
 8001304:	d917      	bls.n	8001336 <HAL_DMA_Init+0x2aa>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b3e      	cmp	r3, #62	; 0x3e
 800130c:	d903      	bls.n	8001316 <HAL_DMA_Init+0x28a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b42      	cmp	r3, #66	; 0x42
 8001314:	d90f      	bls.n	8001336 <HAL_DMA_Init+0x2aa>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b46      	cmp	r3, #70	; 0x46
 800131c:	d903      	bls.n	8001326 <HAL_DMA_Init+0x29a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b48      	cmp	r3, #72	; 0x48
 8001324:	d907      	bls.n	8001336 <HAL_DMA_Init+0x2aa>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b4e      	cmp	r3, #78	; 0x4e
 800132c:	d905      	bls.n	800133a <HAL_DMA_Init+0x2ae>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b52      	cmp	r3, #82	; 0x52
 8001334:	d801      	bhi.n	800133a <HAL_DMA_Init+0x2ae>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_DMA_Init+0x2b0>
 800133a:	2300      	movs	r3, #0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001346:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f023 0307 	bic.w	r3, r3, #7
 800135e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	4313      	orrs	r3, r2
 8001368:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	2b04      	cmp	r3, #4
 8001370:	d117      	bne.n	80013a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4313      	orrs	r3, r2
 800137a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00e      	beq.n	80013a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f002 fb3f 	bl	8003a08 <DMA_CheckFifoParam>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2240      	movs	r2, #64	; 0x40
 8001394:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e197      	b.n	80016d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f002 fa7a 	bl	80038a4 <DMA_CalcBaseAndBitshift>
 80013b0:	4603      	mov	r3, r0
 80013b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	223f      	movs	r2, #63	; 0x3f
 80013be:	409a      	lsls	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e0cd      	b.n	8001562 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a3b      	ldr	r2, [pc, #236]	; (80014b8 <HAL_DMA_Init+0x42c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d022      	beq.n	8001416 <HAL_DMA_Init+0x38a>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a39      	ldr	r2, [pc, #228]	; (80014bc <HAL_DMA_Init+0x430>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01d      	beq.n	8001416 <HAL_DMA_Init+0x38a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a38      	ldr	r2, [pc, #224]	; (80014c0 <HAL_DMA_Init+0x434>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d018      	beq.n	8001416 <HAL_DMA_Init+0x38a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a36      	ldr	r2, [pc, #216]	; (80014c4 <HAL_DMA_Init+0x438>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_DMA_Init+0x38a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a35      	ldr	r2, [pc, #212]	; (80014c8 <HAL_DMA_Init+0x43c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00e      	beq.n	8001416 <HAL_DMA_Init+0x38a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a33      	ldr	r2, [pc, #204]	; (80014cc <HAL_DMA_Init+0x440>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d009      	beq.n	8001416 <HAL_DMA_Init+0x38a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <HAL_DMA_Init+0x444>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d004      	beq.n	8001416 <HAL_DMA_Init+0x38a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <HAL_DMA_Init+0x448>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_DMA_Init+0x38e>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_DMA_Init+0x390>
 800141a:	2300      	movs	r3, #0
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8097 	beq.w	8001550 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <HAL_DMA_Init+0x42c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d021      	beq.n	8001470 <HAL_DMA_Init+0x3e4>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <HAL_DMA_Init+0x430>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01c      	beq.n	8001470 <HAL_DMA_Init+0x3e4>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <HAL_DMA_Init+0x434>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d017      	beq.n	8001470 <HAL_DMA_Init+0x3e4>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <HAL_DMA_Init+0x438>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d012      	beq.n	8001470 <HAL_DMA_Init+0x3e4>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_DMA_Init+0x43c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <HAL_DMA_Init+0x3e4>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <HAL_DMA_Init+0x440>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d008      	beq.n	8001470 <HAL_DMA_Init+0x3e4>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_DMA_Init+0x444>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d003      	beq.n	8001470 <HAL_DMA_Init+0x3e4>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_DMA_Init+0x448>)
 800146e:	4293      	cmp	r3, r2
 8001470:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2202      	movs	r2, #2
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_DMA_Init+0x44c>)
 800148e:	4013      	ands	r3, r2
 8001490:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b40      	cmp	r3, #64	; 0x40
 8001498:	d020      	beq.n	80014dc <HAL_DMA_Init+0x450>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b80      	cmp	r3, #128	; 0x80
 80014a0:	d102      	bne.n	80014a8 <HAL_DMA_Init+0x41c>
 80014a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014a6:	e01a      	b.n	80014de <HAL_DMA_Init+0x452>
 80014a8:	2300      	movs	r3, #0
 80014aa:	e018      	b.n	80014de <HAL_DMA_Init+0x452>
 80014ac:	fe10803f 	.word	0xfe10803f
 80014b0:	5c001000 	.word	0x5c001000
 80014b4:	ffff0000 	.word	0xffff0000
 80014b8:	58025408 	.word	0x58025408
 80014bc:	5802541c 	.word	0x5802541c
 80014c0:	58025430 	.word	0x58025430
 80014c4:	58025444 	.word	0x58025444
 80014c8:	58025458 	.word	0x58025458
 80014cc:	5802546c 	.word	0x5802546c
 80014d0:	58025480 	.word	0x58025480
 80014d4:	58025494 	.word	0x58025494
 80014d8:	fffe000f 	.word	0xfffe000f
 80014dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68d2      	ldr	r2, [r2, #12]
 80014e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80014e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80014ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80014f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80014fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800150c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	4313      	orrs	r3, r2
 8001512:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <HAL_DMA_Init+0x650>)
 8001524:	4413      	add	r3, r2
 8001526:	4a6e      	ldr	r2, [pc, #440]	; (80016e0 <HAL_DMA_Init+0x654>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	009a      	lsls	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f002 f9b5 	bl	80038a4 <DMA_CalcBaseAndBitshift>
 800153a:	4603      	mov	r3, r0
 800153c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	2201      	movs	r2, #1
 8001548:	409a      	lsls	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e008      	b.n	8001562 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2203      	movs	r2, #3
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0b7      	b.n	80016d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5f      	ldr	r2, [pc, #380]	; (80016e4 <HAL_DMA_Init+0x658>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d072      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a5d      	ldr	r2, [pc, #372]	; (80016e8 <HAL_DMA_Init+0x65c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d06d      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a5c      	ldr	r2, [pc, #368]	; (80016ec <HAL_DMA_Init+0x660>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d068      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a5a      	ldr	r2, [pc, #360]	; (80016f0 <HAL_DMA_Init+0x664>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d063      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a59      	ldr	r2, [pc, #356]	; (80016f4 <HAL_DMA_Init+0x668>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d05e      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_DMA_Init+0x66c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d059      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a56      	ldr	r2, [pc, #344]	; (80016fc <HAL_DMA_Init+0x670>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d054      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a54      	ldr	r2, [pc, #336]	; (8001700 <HAL_DMA_Init+0x674>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d04f      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a53      	ldr	r2, [pc, #332]	; (8001704 <HAL_DMA_Init+0x678>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04a      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_DMA_Init+0x67c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d045      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_DMA_Init+0x680>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d040      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <HAL_DMA_Init+0x684>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d03b      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <HAL_DMA_Init+0x688>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d036      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a4b      	ldr	r2, [pc, #300]	; (8001718 <HAL_DMA_Init+0x68c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d031      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a4a      	ldr	r2, [pc, #296]	; (800171c <HAL_DMA_Init+0x690>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d02c      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a48      	ldr	r2, [pc, #288]	; (8001720 <HAL_DMA_Init+0x694>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d027      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a47      	ldr	r2, [pc, #284]	; (8001724 <HAL_DMA_Init+0x698>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d022      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a45      	ldr	r2, [pc, #276]	; (8001728 <HAL_DMA_Init+0x69c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01d      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a44      	ldr	r2, [pc, #272]	; (800172c <HAL_DMA_Init+0x6a0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d018      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a42      	ldr	r2, [pc, #264]	; (8001730 <HAL_DMA_Init+0x6a4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a41      	ldr	r2, [pc, #260]	; (8001734 <HAL_DMA_Init+0x6a8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d00e      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a3f      	ldr	r2, [pc, #252]	; (8001738 <HAL_DMA_Init+0x6ac>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d009      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a3e      	ldr	r2, [pc, #248]	; (800173c <HAL_DMA_Init+0x6b0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d004      	beq.n	8001652 <HAL_DMA_Init+0x5c6>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a3c      	ldr	r2, [pc, #240]	; (8001740 <HAL_DMA_Init+0x6b4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_DMA_Init+0x5ca>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_DMA_Init+0x5cc>
 8001656:	2300      	movs	r3, #0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d032      	beq.n	80016c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f002 fa4f 	bl	8003b00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b80      	cmp	r3, #128	; 0x80
 8001668:	d102      	bne.n	8001670 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001684:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d010      	beq.n	80016b0 <HAL_DMA_Init+0x624>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d80c      	bhi.n	80016b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f002 facc 	bl	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	e008      	b.n	80016c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	a7fdabf8 	.word	0xa7fdabf8
 80016e0:	cccccccd 	.word	0xcccccccd
 80016e4:	40020010 	.word	0x40020010
 80016e8:	40020028 	.word	0x40020028
 80016ec:	40020040 	.word	0x40020040
 80016f0:	40020058 	.word	0x40020058
 80016f4:	40020070 	.word	0x40020070
 80016f8:	40020088 	.word	0x40020088
 80016fc:	400200a0 	.word	0x400200a0
 8001700:	400200b8 	.word	0x400200b8
 8001704:	40020410 	.word	0x40020410
 8001708:	40020428 	.word	0x40020428
 800170c:	40020440 	.word	0x40020440
 8001710:	40020458 	.word	0x40020458
 8001714:	40020470 	.word	0x40020470
 8001718:	40020488 	.word	0x40020488
 800171c:	400204a0 	.word	0x400204a0
 8001720:	400204b8 	.word	0x400204b8
 8001724:	58025408 	.word	0x58025408
 8001728:	5802541c 	.word	0x5802541c
 800172c:	58025430 	.word	0x58025430
 8001730:	58025444 	.word	0x58025444
 8001734:	58025458 	.word	0x58025458
 8001738:	5802546c 	.word	0x5802546c
 800173c:	58025480 	.word	0x58025480
 8001740:	58025494 	.word	0x58025494

08001744 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e226      	b.n	8001bae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_DMA_Start_IT+0x2a>
 800176a:	2302      	movs	r3, #2
 800176c:	e21f      	b.n	8001bae <HAL_DMA_Start_IT+0x46a>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b01      	cmp	r3, #1
 8001780:	f040 820a 	bne.w	8001b98 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a68      	ldr	r2, [pc, #416]	; (8001938 <HAL_DMA_Start_IT+0x1f4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d04a      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a66      	ldr	r2, [pc, #408]	; (800193c <HAL_DMA_Start_IT+0x1f8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d045      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a65      	ldr	r2, [pc, #404]	; (8001940 <HAL_DMA_Start_IT+0x1fc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d040      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a63      	ldr	r2, [pc, #396]	; (8001944 <HAL_DMA_Start_IT+0x200>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d03b      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a62      	ldr	r2, [pc, #392]	; (8001948 <HAL_DMA_Start_IT+0x204>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d036      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a60      	ldr	r2, [pc, #384]	; (800194c <HAL_DMA_Start_IT+0x208>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d031      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a5f      	ldr	r2, [pc, #380]	; (8001950 <HAL_DMA_Start_IT+0x20c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d02c      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a5d      	ldr	r2, [pc, #372]	; (8001954 <HAL_DMA_Start_IT+0x210>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d027      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a5c      	ldr	r2, [pc, #368]	; (8001958 <HAL_DMA_Start_IT+0x214>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d022      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a5a      	ldr	r2, [pc, #360]	; (800195c <HAL_DMA_Start_IT+0x218>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01d      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a59      	ldr	r2, [pc, #356]	; (8001960 <HAL_DMA_Start_IT+0x21c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d018      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a57      	ldr	r2, [pc, #348]	; (8001964 <HAL_DMA_Start_IT+0x220>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a56      	ldr	r2, [pc, #344]	; (8001968 <HAL_DMA_Start_IT+0x224>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00e      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a54      	ldr	r2, [pc, #336]	; (800196c <HAL_DMA_Start_IT+0x228>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d009      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a53      	ldr	r2, [pc, #332]	; (8001970 <HAL_DMA_Start_IT+0x22c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d004      	beq.n	8001832 <HAL_DMA_Start_IT+0xee>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a51      	ldr	r2, [pc, #324]	; (8001974 <HAL_DMA_Start_IT+0x230>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d108      	bne.n	8001844 <HAL_DMA_Start_IT+0x100>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e007      	b.n	8001854 <HAL_DMA_Start_IT+0x110>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0201 	bic.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f001 fe76 	bl	800354c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a34      	ldr	r2, [pc, #208]	; (8001938 <HAL_DMA_Start_IT+0x1f4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d04a      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a33      	ldr	r2, [pc, #204]	; (800193c <HAL_DMA_Start_IT+0x1f8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d045      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a31      	ldr	r2, [pc, #196]	; (8001940 <HAL_DMA_Start_IT+0x1fc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d040      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a30      	ldr	r2, [pc, #192]	; (8001944 <HAL_DMA_Start_IT+0x200>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d03b      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2e      	ldr	r2, [pc, #184]	; (8001948 <HAL_DMA_Start_IT+0x204>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d036      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2d      	ldr	r2, [pc, #180]	; (800194c <HAL_DMA_Start_IT+0x208>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d031      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2b      	ldr	r2, [pc, #172]	; (8001950 <HAL_DMA_Start_IT+0x20c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02c      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2a      	ldr	r2, [pc, #168]	; (8001954 <HAL_DMA_Start_IT+0x210>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d027      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a28      	ldr	r2, [pc, #160]	; (8001958 <HAL_DMA_Start_IT+0x214>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d022      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_DMA_Start_IT+0x218>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d01d      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a25      	ldr	r2, [pc, #148]	; (8001960 <HAL_DMA_Start_IT+0x21c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d018      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a24      	ldr	r2, [pc, #144]	; (8001964 <HAL_DMA_Start_IT+0x220>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a22      	ldr	r2, [pc, #136]	; (8001968 <HAL_DMA_Start_IT+0x224>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00e      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a21      	ldr	r2, [pc, #132]	; (800196c <HAL_DMA_Start_IT+0x228>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d009      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_DMA_Start_IT+0x22c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_DMA_Start_IT+0x1bc>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <HAL_DMA_Start_IT+0x230>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d101      	bne.n	8001904 <HAL_DMA_Start_IT+0x1c0>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_DMA_Start_IT+0x1c2>
 8001904:	2300      	movs	r3, #0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d036      	beq.n	8001978 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 021e 	bic.w	r2, r3, #30
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0216 	orr.w	r2, r2, #22
 800191c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2b00      	cmp	r3, #0
 8001924:	d03e      	beq.n	80019a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0208 	orr.w	r2, r2, #8
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e035      	b.n	80019a4 <HAL_DMA_Start_IT+0x260>
 8001938:	40020010 	.word	0x40020010
 800193c:	40020028 	.word	0x40020028
 8001940:	40020040 	.word	0x40020040
 8001944:	40020058 	.word	0x40020058
 8001948:	40020070 	.word	0x40020070
 800194c:	40020088 	.word	0x40020088
 8001950:	400200a0 	.word	0x400200a0
 8001954:	400200b8 	.word	0x400200b8
 8001958:	40020410 	.word	0x40020410
 800195c:	40020428 	.word	0x40020428
 8001960:	40020440 	.word	0x40020440
 8001964:	40020458 	.word	0x40020458
 8001968:	40020470 	.word	0x40020470
 800196c:	40020488 	.word	0x40020488
 8001970:	400204a0 	.word	0x400204a0
 8001974:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 020e 	bic.w	r2, r3, #14
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 020a 	orr.w	r2, r2, #10
 800198a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0204 	orr.w	r2, r2, #4
 80019a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a83      	ldr	r2, [pc, #524]	; (8001bb8 <HAL_DMA_Start_IT+0x474>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d072      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a82      	ldr	r2, [pc, #520]	; (8001bbc <HAL_DMA_Start_IT+0x478>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d06d      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a80      	ldr	r2, [pc, #512]	; (8001bc0 <HAL_DMA_Start_IT+0x47c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d068      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7f      	ldr	r2, [pc, #508]	; (8001bc4 <HAL_DMA_Start_IT+0x480>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d063      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a7d      	ldr	r2, [pc, #500]	; (8001bc8 <HAL_DMA_Start_IT+0x484>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d05e      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7c      	ldr	r2, [pc, #496]	; (8001bcc <HAL_DMA_Start_IT+0x488>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d059      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a7a      	ldr	r2, [pc, #488]	; (8001bd0 <HAL_DMA_Start_IT+0x48c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d054      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a79      	ldr	r2, [pc, #484]	; (8001bd4 <HAL_DMA_Start_IT+0x490>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04f      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a77      	ldr	r2, [pc, #476]	; (8001bd8 <HAL_DMA_Start_IT+0x494>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d04a      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a76      	ldr	r2, [pc, #472]	; (8001bdc <HAL_DMA_Start_IT+0x498>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d045      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <HAL_DMA_Start_IT+0x49c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d040      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a73      	ldr	r2, [pc, #460]	; (8001be4 <HAL_DMA_Start_IT+0x4a0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d03b      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a71      	ldr	r2, [pc, #452]	; (8001be8 <HAL_DMA_Start_IT+0x4a4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d036      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a70      	ldr	r2, [pc, #448]	; (8001bec <HAL_DMA_Start_IT+0x4a8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d031      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_DMA_Start_IT+0x4ac>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d02c      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6d      	ldr	r2, [pc, #436]	; (8001bf4 <HAL_DMA_Start_IT+0x4b0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d027      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6b      	ldr	r2, [pc, #428]	; (8001bf8 <HAL_DMA_Start_IT+0x4b4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d022      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6a      	ldr	r2, [pc, #424]	; (8001bfc <HAL_DMA_Start_IT+0x4b8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d01d      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a68      	ldr	r2, [pc, #416]	; (8001c00 <HAL_DMA_Start_IT+0x4bc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d018      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a67      	ldr	r2, [pc, #412]	; (8001c04 <HAL_DMA_Start_IT+0x4c0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d013      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a65      	ldr	r2, [pc, #404]	; (8001c08 <HAL_DMA_Start_IT+0x4c4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00e      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a64      	ldr	r2, [pc, #400]	; (8001c0c <HAL_DMA_Start_IT+0x4c8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d009      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a62      	ldr	r2, [pc, #392]	; (8001c10 <HAL_DMA_Start_IT+0x4cc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_DMA_Start_IT+0x350>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a61      	ldr	r2, [pc, #388]	; (8001c14 <HAL_DMA_Start_IT+0x4d0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Start_IT+0x354>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_DMA_Start_IT+0x356>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01a      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a37      	ldr	r2, [pc, #220]	; (8001bb8 <HAL_DMA_Start_IT+0x474>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d04a      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a36      	ldr	r2, [pc, #216]	; (8001bbc <HAL_DMA_Start_IT+0x478>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d045      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <HAL_DMA_Start_IT+0x47c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d040      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a33      	ldr	r2, [pc, #204]	; (8001bc4 <HAL_DMA_Start_IT+0x480>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d03b      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <HAL_DMA_Start_IT+0x484>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d036      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a30      	ldr	r2, [pc, #192]	; (8001bcc <HAL_DMA_Start_IT+0x488>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d031      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a2e      	ldr	r2, [pc, #184]	; (8001bd0 <HAL_DMA_Start_IT+0x48c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d02c      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <HAL_DMA_Start_IT+0x490>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d027      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2b      	ldr	r2, [pc, #172]	; (8001bd8 <HAL_DMA_Start_IT+0x494>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d022      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2a      	ldr	r2, [pc, #168]	; (8001bdc <HAL_DMA_Start_IT+0x498>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d01d      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <HAL_DMA_Start_IT+0x49c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d018      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_DMA_Start_IT+0x4a0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d013      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <HAL_DMA_Start_IT+0x4a4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00e      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a24      	ldr	r2, [pc, #144]	; (8001bec <HAL_DMA_Start_IT+0x4a8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d009      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <HAL_DMA_Start_IT+0x4ac>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d004      	beq.n	8001b74 <HAL_DMA_Start_IT+0x430>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <HAL_DMA_Start_IT+0x4b0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d108      	bne.n	8001b86 <HAL_DMA_Start_IT+0x442>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e012      	b.n	8001bac <HAL_DMA_Start_IT+0x468>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e009      	b.n	8001bac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40020010 	.word	0x40020010
 8001bbc:	40020028 	.word	0x40020028
 8001bc0:	40020040 	.word	0x40020040
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	40020070 	.word	0x40020070
 8001bcc:	40020088 	.word	0x40020088
 8001bd0:	400200a0 	.word	0x400200a0
 8001bd4:	400200b8 	.word	0x400200b8
 8001bd8:	40020410 	.word	0x40020410
 8001bdc:	40020428 	.word	0x40020428
 8001be0:	40020440 	.word	0x40020440
 8001be4:	40020458 	.word	0x40020458
 8001be8:	40020470 	.word	0x40020470
 8001bec:	40020488 	.word	0x40020488
 8001bf0:	400204a0 	.word	0x400204a0
 8001bf4:	400204b8 	.word	0x400204b8
 8001bf8:	58025408 	.word	0x58025408
 8001bfc:	5802541c 	.word	0x5802541c
 8001c00:	58025430 	.word	0x58025430
 8001c04:	58025444 	.word	0x58025444
 8001c08:	58025458 	.word	0x58025458
 8001c0c:	5802546c 	.word	0x5802546c
 8001c10:	58025480 	.word	0x58025480
 8001c14:	58025494 	.word	0x58025494

08001c18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff f8e8 	bl	8000df4 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e2dc      	b.n	80021ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d008      	beq.n	8001c4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e2cd      	b.n	80021ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a76      	ldr	r2, [pc, #472]	; (8001e2c <HAL_DMA_Abort+0x214>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04a      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a74      	ldr	r2, [pc, #464]	; (8001e30 <HAL_DMA_Abort+0x218>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d045      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a73      	ldr	r2, [pc, #460]	; (8001e34 <HAL_DMA_Abort+0x21c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d040      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_DMA_Abort+0x220>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d03b      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a70      	ldr	r2, [pc, #448]	; (8001e3c <HAL_DMA_Abort+0x224>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d036      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6e      	ldr	r2, [pc, #440]	; (8001e40 <HAL_DMA_Abort+0x228>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d031      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6d      	ldr	r2, [pc, #436]	; (8001e44 <HAL_DMA_Abort+0x22c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d02c      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a6b      	ldr	r2, [pc, #428]	; (8001e48 <HAL_DMA_Abort+0x230>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d027      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_DMA_Abort+0x234>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d022      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a68      	ldr	r2, [pc, #416]	; (8001e50 <HAL_DMA_Abort+0x238>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01d      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <HAL_DMA_Abort+0x23c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d018      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a65      	ldr	r2, [pc, #404]	; (8001e58 <HAL_DMA_Abort+0x240>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a64      	ldr	r2, [pc, #400]	; (8001e5c <HAL_DMA_Abort+0x244>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00e      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a62      	ldr	r2, [pc, #392]	; (8001e60 <HAL_DMA_Abort+0x248>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d009      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a61      	ldr	r2, [pc, #388]	; (8001e64 <HAL_DMA_Abort+0x24c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d004      	beq.n	8001cee <HAL_DMA_Abort+0xd6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <HAL_DMA_Abort+0x250>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_DMA_Abort+0xda>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_DMA_Abort+0xdc>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 021e 	bic.w	r2, r2, #30
 8001d06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e00a      	b.n	8001d36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 020e 	bic.w	r2, r2, #14
 8001d2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a3c      	ldr	r2, [pc, #240]	; (8001e2c <HAL_DMA_Abort+0x214>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d072      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <HAL_DMA_Abort+0x218>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d06d      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <HAL_DMA_Abort+0x21c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d068      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_DMA_Abort+0x220>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d063      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <HAL_DMA_Abort+0x224>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d05e      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a34      	ldr	r2, [pc, #208]	; (8001e40 <HAL_DMA_Abort+0x228>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d059      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <HAL_DMA_Abort+0x22c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d054      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a31      	ldr	r2, [pc, #196]	; (8001e48 <HAL_DMA_Abort+0x230>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d04f      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <HAL_DMA_Abort+0x234>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d04a      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <HAL_DMA_Abort+0x238>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d045      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <HAL_DMA_Abort+0x23c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d040      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_DMA_Abort+0x240>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d03b      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <HAL_DMA_Abort+0x244>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d036      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_DMA_Abort+0x248>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d031      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_DMA_Abort+0x24c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d02c      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <HAL_DMA_Abort+0x250>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d027      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_DMA_Abort+0x254>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d022      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_DMA_Abort+0x258>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01d      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_DMA_Abort+0x25c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d018      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_DMA_Abort+0x260>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_DMA_Abort+0x264>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00e      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_DMA_Abort+0x268>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <HAL_DMA_Abort+0x26c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d004      	beq.n	8001e26 <HAL_DMA_Abort+0x20e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <HAL_DMA_Abort+0x270>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d132      	bne.n	8001e8c <HAL_DMA_Abort+0x274>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e031      	b.n	8001e8e <HAL_DMA_Abort+0x276>
 8001e2a:	bf00      	nop
 8001e2c:	40020010 	.word	0x40020010
 8001e30:	40020028 	.word	0x40020028
 8001e34:	40020040 	.word	0x40020040
 8001e38:	40020058 	.word	0x40020058
 8001e3c:	40020070 	.word	0x40020070
 8001e40:	40020088 	.word	0x40020088
 8001e44:	400200a0 	.word	0x400200a0
 8001e48:	400200b8 	.word	0x400200b8
 8001e4c:	40020410 	.word	0x40020410
 8001e50:	40020428 	.word	0x40020428
 8001e54:	40020440 	.word	0x40020440
 8001e58:	40020458 	.word	0x40020458
 8001e5c:	40020470 	.word	0x40020470
 8001e60:	40020488 	.word	0x40020488
 8001e64:	400204a0 	.word	0x400204a0
 8001e68:	400204b8 	.word	0x400204b8
 8001e6c:	58025408 	.word	0x58025408
 8001e70:	5802541c 	.word	0x5802541c
 8001e74:	58025430 	.word	0x58025430
 8001e78:	58025444 	.word	0x58025444
 8001e7c:	58025458 	.word	0x58025458
 8001e80:	5802546c 	.word	0x5802546c
 8001e84:	58025480 	.word	0x58025480
 8001e88:	58025494 	.word	0x58025494
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6d      	ldr	r2, [pc, #436]	; (800205c <HAL_DMA_Abort+0x444>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d04a      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <HAL_DMA_Abort+0x448>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d045      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_DMA_Abort+0x44c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d040      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a68      	ldr	r2, [pc, #416]	; (8002068 <HAL_DMA_Abort+0x450>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d03b      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_DMA_Abort+0x454>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d036      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a65      	ldr	r2, [pc, #404]	; (8002070 <HAL_DMA_Abort+0x458>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d031      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a64      	ldr	r2, [pc, #400]	; (8002074 <HAL_DMA_Abort+0x45c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d02c      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a62      	ldr	r2, [pc, #392]	; (8002078 <HAL_DMA_Abort+0x460>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d027      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a61      	ldr	r2, [pc, #388]	; (800207c <HAL_DMA_Abort+0x464>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d022      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5f      	ldr	r2, [pc, #380]	; (8002080 <HAL_DMA_Abort+0x468>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01d      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5e      	ldr	r2, [pc, #376]	; (8002084 <HAL_DMA_Abort+0x46c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d018      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5c      	ldr	r2, [pc, #368]	; (8002088 <HAL_DMA_Abort+0x470>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_DMA_Abort+0x474>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00e      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a59      	ldr	r2, [pc, #356]	; (8002090 <HAL_DMA_Abort+0x478>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_DMA_Abort+0x47c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d004      	beq.n	8001f42 <HAL_DMA_Abort+0x32a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a56      	ldr	r2, [pc, #344]	; (8002098 <HAL_DMA_Abort+0x480>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d108      	bne.n	8001f54 <HAL_DMA_Abort+0x33c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e007      	b.n	8001f64 <HAL_DMA_Abort+0x34c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f64:	e013      	b.n	8001f8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f66:	f7fe ff45 	bl	8000df4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d90c      	bls.n	8001f8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e12d      	b.n	80021ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1e5      	bne.n	8001f66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2f      	ldr	r2, [pc, #188]	; (800205c <HAL_DMA_Abort+0x444>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d04a      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <HAL_DMA_Abort+0x448>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d045      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <HAL_DMA_Abort+0x44c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d040      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <HAL_DMA_Abort+0x450>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d03b      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_DMA_Abort+0x454>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d036      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_DMA_Abort+0x458>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d031      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_DMA_Abort+0x45c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d02c      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_DMA_Abort+0x460>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d027      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_DMA_Abort+0x464>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d022      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a21      	ldr	r2, [pc, #132]	; (8002080 <HAL_DMA_Abort+0x468>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01d      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a20      	ldr	r2, [pc, #128]	; (8002084 <HAL_DMA_Abort+0x46c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d018      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_DMA_Abort+0x470>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_DMA_Abort+0x474>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00e      	beq.n	800203a <HAL_DMA_Abort+0x422>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_DMA_Abort+0x478>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d009      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <HAL_DMA_Abort+0x47c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d004      	beq.n	800203a <HAL_DMA_Abort+0x422>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_DMA_Abort+0x480>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_DMA_Abort+0x426>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_DMA_Abort+0x428>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02b      	beq.n	800209c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	223f      	movs	r2, #63	; 0x3f
 8002054:	409a      	lsls	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	e02a      	b.n	80020b2 <HAL_DMA_Abort+0x49a>
 800205c:	40020010 	.word	0x40020010
 8002060:	40020028 	.word	0x40020028
 8002064:	40020040 	.word	0x40020040
 8002068:	40020058 	.word	0x40020058
 800206c:	40020070 	.word	0x40020070
 8002070:	40020088 	.word	0x40020088
 8002074:	400200a0 	.word	0x400200a0
 8002078:	400200b8 	.word	0x400200b8
 800207c:	40020410 	.word	0x40020410
 8002080:	40020428 	.word	0x40020428
 8002084:	40020440 	.word	0x40020440
 8002088:	40020458 	.word	0x40020458
 800208c:	40020470 	.word	0x40020470
 8002090:	40020488 	.word	0x40020488
 8002094:	400204a0 	.word	0x400204a0
 8002098:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2201      	movs	r2, #1
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_DMA_Abort+0x5dc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d072      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_DMA_Abort+0x5e0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d06d      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_DMA_Abort+0x5e4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d068      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_DMA_Abort+0x5e8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d063      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a49      	ldr	r2, [pc, #292]	; (8002204 <HAL_DMA_Abort+0x5ec>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05e      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a47      	ldr	r2, [pc, #284]	; (8002208 <HAL_DMA_Abort+0x5f0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d059      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a46      	ldr	r2, [pc, #280]	; (800220c <HAL_DMA_Abort+0x5f4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d054      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a44      	ldr	r2, [pc, #272]	; (8002210 <HAL_DMA_Abort+0x5f8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04f      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a43      	ldr	r2, [pc, #268]	; (8002214 <HAL_DMA_Abort+0x5fc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d04a      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a41      	ldr	r2, [pc, #260]	; (8002218 <HAL_DMA_Abort+0x600>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d045      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a40      	ldr	r2, [pc, #256]	; (800221c <HAL_DMA_Abort+0x604>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d040      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3e      	ldr	r2, [pc, #248]	; (8002220 <HAL_DMA_Abort+0x608>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d03b      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <HAL_DMA_Abort+0x60c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d036      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_DMA_Abort+0x610>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a3a      	ldr	r2, [pc, #232]	; (800222c <HAL_DMA_Abort+0x614>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d02c      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_DMA_Abort+0x618>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d027      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a37      	ldr	r2, [pc, #220]	; (8002234 <HAL_DMA_Abort+0x61c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d022      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a35      	ldr	r2, [pc, #212]	; (8002238 <HAL_DMA_Abort+0x620>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01d      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_DMA_Abort+0x624>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d018      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a32      	ldr	r2, [pc, #200]	; (8002240 <HAL_DMA_Abort+0x628>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_DMA_Abort+0x62c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00e      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <HAL_DMA_Abort+0x630>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2e      	ldr	r2, [pc, #184]	; (800224c <HAL_DMA_Abort+0x634>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_DMA_Abort+0x58a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <HAL_DMA_Abort+0x638>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_DMA_Abort+0x58e>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_DMA_Abort+0x590>
 80021a6:	2300      	movs	r3, #0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40020010 	.word	0x40020010
 80021f8:	40020028 	.word	0x40020028
 80021fc:	40020040 	.word	0x40020040
 8002200:	40020058 	.word	0x40020058
 8002204:	40020070 	.word	0x40020070
 8002208:	40020088 	.word	0x40020088
 800220c:	400200a0 	.word	0x400200a0
 8002210:	400200b8 	.word	0x400200b8
 8002214:	40020410 	.word	0x40020410
 8002218:	40020428 	.word	0x40020428
 800221c:	40020440 	.word	0x40020440
 8002220:	40020458 	.word	0x40020458
 8002224:	40020470 	.word	0x40020470
 8002228:	40020488 	.word	0x40020488
 800222c:	400204a0 	.word	0x400204a0
 8002230:	400204b8 	.word	0x400204b8
 8002234:	58025408 	.word	0x58025408
 8002238:	5802541c 	.word	0x5802541c
 800223c:	58025430 	.word	0x58025430
 8002240:	58025444 	.word	0x58025444
 8002244:	58025458 	.word	0x58025458
 8002248:	5802546c 	.word	0x5802546c
 800224c:	58025480 	.word	0x58025480
 8002250:	58025494 	.word	0x58025494

08002254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e237      	b.n	80026d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d004      	beq.n	800227c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e22c      	b.n	80026d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d04a      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a5b      	ldr	r2, [pc, #364]	; (80023f8 <HAL_DMA_Abort_IT+0x1a4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d045      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a59      	ldr	r2, [pc, #356]	; (80023fc <HAL_DMA_Abort_IT+0x1a8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d040      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_DMA_Abort_IT+0x1ac>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d03b      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a56      	ldr	r2, [pc, #344]	; (8002404 <HAL_DMA_Abort_IT+0x1b0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d036      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a55      	ldr	r2, [pc, #340]	; (8002408 <HAL_DMA_Abort_IT+0x1b4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d031      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a53      	ldr	r2, [pc, #332]	; (800240c <HAL_DMA_Abort_IT+0x1b8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02c      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_DMA_Abort_IT+0x1bc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d027      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a50      	ldr	r2, [pc, #320]	; (8002414 <HAL_DMA_Abort_IT+0x1c0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d022      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a4f      	ldr	r2, [pc, #316]	; (8002418 <HAL_DMA_Abort_IT+0x1c4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d01d      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a4d      	ldr	r2, [pc, #308]	; (800241c <HAL_DMA_Abort_IT+0x1c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d018      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a4c      	ldr	r2, [pc, #304]	; (8002420 <HAL_DMA_Abort_IT+0x1cc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a4a      	ldr	r2, [pc, #296]	; (8002424 <HAL_DMA_Abort_IT+0x1d0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00e      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a49      	ldr	r2, [pc, #292]	; (8002428 <HAL_DMA_Abort_IT+0x1d4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a47      	ldr	r2, [pc, #284]	; (800242c <HAL_DMA_Abort_IT+0x1d8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_DMA_Abort_IT+0xc8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a46      	ldr	r2, [pc, #280]	; (8002430 <HAL_DMA_Abort_IT+0x1dc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d101      	bne.n	8002320 <HAL_DMA_Abort_IT+0xcc>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_DMA_Abort_IT+0xce>
 8002320:	2300      	movs	r3, #0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8086 	beq.w	8002434 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2204      	movs	r2, #4
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d04a      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_DMA_Abort_IT+0x1a4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d045      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2c      	ldr	r2, [pc, #176]	; (80023fc <HAL_DMA_Abort_IT+0x1a8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d040      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_DMA_Abort_IT+0x1ac>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d03b      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a29      	ldr	r2, [pc, #164]	; (8002404 <HAL_DMA_Abort_IT+0x1b0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d036      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a28      	ldr	r2, [pc, #160]	; (8002408 <HAL_DMA_Abort_IT+0x1b4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d031      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <HAL_DMA_Abort_IT+0x1b8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02c      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_DMA_Abort_IT+0x1bc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d027      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a23      	ldr	r2, [pc, #140]	; (8002414 <HAL_DMA_Abort_IT+0x1c0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d022      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_DMA_Abort_IT+0x1c4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d01d      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a20      	ldr	r2, [pc, #128]	; (800241c <HAL_DMA_Abort_IT+0x1c8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d018      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_DMA_Abort_IT+0x1cc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <HAL_DMA_Abort_IT+0x1d0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_DMA_Abort_IT+0x1d4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1a      	ldr	r2, [pc, #104]	; (800242c <HAL_DMA_Abort_IT+0x1d8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x17c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_DMA_Abort_IT+0x1dc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d108      	bne.n	80023e2 <HAL_DMA_Abort_IT+0x18e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e178      	b.n	80026d4 <HAL_DMA_Abort_IT+0x480>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e16f      	b.n	80026d4 <HAL_DMA_Abort_IT+0x480>
 80023f4:	40020010 	.word	0x40020010
 80023f8:	40020028 	.word	0x40020028
 80023fc:	40020040 	.word	0x40020040
 8002400:	40020058 	.word	0x40020058
 8002404:	40020070 	.word	0x40020070
 8002408:	40020088 	.word	0x40020088
 800240c:	400200a0 	.word	0x400200a0
 8002410:	400200b8 	.word	0x400200b8
 8002414:	40020410 	.word	0x40020410
 8002418:	40020428 	.word	0x40020428
 800241c:	40020440 	.word	0x40020440
 8002420:	40020458 	.word	0x40020458
 8002424:	40020470 	.word	0x40020470
 8002428:	40020488 	.word	0x40020488
 800242c:	400204a0 	.word	0x400204a0
 8002430:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 020e 	bic.w	r2, r2, #14
 8002442:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6c      	ldr	r2, [pc, #432]	; (80025fc <HAL_DMA_Abort_IT+0x3a8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d04a      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6b      	ldr	r2, [pc, #428]	; (8002600 <HAL_DMA_Abort_IT+0x3ac>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d045      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a69      	ldr	r2, [pc, #420]	; (8002604 <HAL_DMA_Abort_IT+0x3b0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d040      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a68      	ldr	r2, [pc, #416]	; (8002608 <HAL_DMA_Abort_IT+0x3b4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d03b      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a66      	ldr	r2, [pc, #408]	; (800260c <HAL_DMA_Abort_IT+0x3b8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d036      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_DMA_Abort_IT+0x3bc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d031      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a63      	ldr	r2, [pc, #396]	; (8002614 <HAL_DMA_Abort_IT+0x3c0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02c      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a62      	ldr	r2, [pc, #392]	; (8002618 <HAL_DMA_Abort_IT+0x3c4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d027      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a60      	ldr	r2, [pc, #384]	; (800261c <HAL_DMA_Abort_IT+0x3c8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d022      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a5f      	ldr	r2, [pc, #380]	; (8002620 <HAL_DMA_Abort_IT+0x3cc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d01d      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a5d      	ldr	r2, [pc, #372]	; (8002624 <HAL_DMA_Abort_IT+0x3d0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d018      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5c      	ldr	r2, [pc, #368]	; (8002628 <HAL_DMA_Abort_IT+0x3d4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a5a      	ldr	r2, [pc, #360]	; (800262c <HAL_DMA_Abort_IT+0x3d8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00e      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a59      	ldr	r2, [pc, #356]	; (8002630 <HAL_DMA_Abort_IT+0x3dc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d009      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a57      	ldr	r2, [pc, #348]	; (8002634 <HAL_DMA_Abort_IT+0x3e0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x290>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a56      	ldr	r2, [pc, #344]	; (8002638 <HAL_DMA_Abort_IT+0x3e4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d108      	bne.n	80024f6 <HAL_DMA_Abort_IT+0x2a2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e007      	b.n	8002506 <HAL_DMA_Abort_IT+0x2b2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a3c      	ldr	r2, [pc, #240]	; (80025fc <HAL_DMA_Abort_IT+0x3a8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d072      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a3a      	ldr	r2, [pc, #232]	; (8002600 <HAL_DMA_Abort_IT+0x3ac>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d06d      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a39      	ldr	r2, [pc, #228]	; (8002604 <HAL_DMA_Abort_IT+0x3b0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d068      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a37      	ldr	r2, [pc, #220]	; (8002608 <HAL_DMA_Abort_IT+0x3b4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d063      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a36      	ldr	r2, [pc, #216]	; (800260c <HAL_DMA_Abort_IT+0x3b8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d05e      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a34      	ldr	r2, [pc, #208]	; (8002610 <HAL_DMA_Abort_IT+0x3bc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d059      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a33      	ldr	r2, [pc, #204]	; (8002614 <HAL_DMA_Abort_IT+0x3c0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d054      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a31      	ldr	r2, [pc, #196]	; (8002618 <HAL_DMA_Abort_IT+0x3c4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d04f      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a30      	ldr	r2, [pc, #192]	; (800261c <HAL_DMA_Abort_IT+0x3c8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d04a      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2e      	ldr	r2, [pc, #184]	; (8002620 <HAL_DMA_Abort_IT+0x3cc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d045      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2d      	ldr	r2, [pc, #180]	; (8002624 <HAL_DMA_Abort_IT+0x3d0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d040      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2b      	ldr	r2, [pc, #172]	; (8002628 <HAL_DMA_Abort_IT+0x3d4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d03b      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2a      	ldr	r2, [pc, #168]	; (800262c <HAL_DMA_Abort_IT+0x3d8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d036      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a28      	ldr	r2, [pc, #160]	; (8002630 <HAL_DMA_Abort_IT+0x3dc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a27      	ldr	r2, [pc, #156]	; (8002634 <HAL_DMA_Abort_IT+0x3e0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d02c      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a25      	ldr	r2, [pc, #148]	; (8002638 <HAL_DMA_Abort_IT+0x3e4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d027      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a24      	ldr	r2, [pc, #144]	; (800263c <HAL_DMA_Abort_IT+0x3e8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d022      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a22      	ldr	r2, [pc, #136]	; (8002640 <HAL_DMA_Abort_IT+0x3ec>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01d      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_DMA_Abort_IT+0x3f0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d018      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_DMA_Abort_IT+0x3f4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1e      	ldr	r2, [pc, #120]	; (800264c <HAL_DMA_Abort_IT+0x3f8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00e      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_DMA_Abort_IT+0x3fc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_DMA_Abort_IT+0x400>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x3a2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_DMA_Abort_IT+0x404>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d132      	bne.n	800265c <HAL_DMA_Abort_IT+0x408>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e031      	b.n	800265e <HAL_DMA_Abort_IT+0x40a>
 80025fa:	bf00      	nop
 80025fc:	40020010 	.word	0x40020010
 8002600:	40020028 	.word	0x40020028
 8002604:	40020040 	.word	0x40020040
 8002608:	40020058 	.word	0x40020058
 800260c:	40020070 	.word	0x40020070
 8002610:	40020088 	.word	0x40020088
 8002614:	400200a0 	.word	0x400200a0
 8002618:	400200b8 	.word	0x400200b8
 800261c:	40020410 	.word	0x40020410
 8002620:	40020428 	.word	0x40020428
 8002624:	40020440 	.word	0x40020440
 8002628:	40020458 	.word	0x40020458
 800262c:	40020470 	.word	0x40020470
 8002630:	40020488 	.word	0x40020488
 8002634:	400204a0 	.word	0x400204a0
 8002638:	400204b8 	.word	0x400204b8
 800263c:	58025408 	.word	0x58025408
 8002640:	5802541c 	.word	0x5802541c
 8002644:	58025430 	.word	0x58025430
 8002648:	58025444 	.word	0x58025444
 800264c:	58025458 	.word	0x58025458
 8002650:	5802546c 	.word	0x5802546c
 8002654:	58025480 	.word	0x58025480
 8002658:	58025494 	.word	0x58025494
 800265c:	2300      	movs	r3, #0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d028      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002670:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2201      	movs	r2, #1
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002690:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop

080026e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026ec:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_DMA_IRQHandler+0x1ac>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a67      	ldr	r2, [pc, #412]	; (8002890 <HAL_DMA_IRQHandler+0x1b0>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a9b      	lsrs	r3, r3, #10
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a5f      	ldr	r2, [pc, #380]	; (8002894 <HAL_DMA_IRQHandler+0x1b4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d04a      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5d      	ldr	r2, [pc, #372]	; (8002898 <HAL_DMA_IRQHandler+0x1b8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d045      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a5c      	ldr	r2, [pc, #368]	; (800289c <HAL_DMA_IRQHandler+0x1bc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d040      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a5a      	ldr	r2, [pc, #360]	; (80028a0 <HAL_DMA_IRQHandler+0x1c0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d03b      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a59      	ldr	r2, [pc, #356]	; (80028a4 <HAL_DMA_IRQHandler+0x1c4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d036      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a57      	ldr	r2, [pc, #348]	; (80028a8 <HAL_DMA_IRQHandler+0x1c8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d031      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_DMA_IRQHandler+0x1cc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d02c      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <HAL_DMA_IRQHandler+0x1d0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d027      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a53      	ldr	r2, [pc, #332]	; (80028b4 <HAL_DMA_IRQHandler+0x1d4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d022      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a51      	ldr	r2, [pc, #324]	; (80028b8 <HAL_DMA_IRQHandler+0x1d8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01d      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a50      	ldr	r2, [pc, #320]	; (80028bc <HAL_DMA_IRQHandler+0x1dc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d018      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a4e      	ldr	r2, [pc, #312]	; (80028c0 <HAL_DMA_IRQHandler+0x1e0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a4d      	ldr	r2, [pc, #308]	; (80028c4 <HAL_DMA_IRQHandler+0x1e4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00e      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4b      	ldr	r2, [pc, #300]	; (80028c8 <HAL_DMA_IRQHandler+0x1e8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_DMA_IRQHandler+0x1ec>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xd2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <HAL_DMA_IRQHandler+0x1f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_DMA_IRQHandler+0xd6>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_DMA_IRQHandler+0xd8>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 842b 	beq.w	8003014 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2208      	movs	r2, #8
 80027c8:	409a      	lsls	r2, r3
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80a2 	beq.w	8002918 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <HAL_DMA_IRQHandler+0x1b4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d04a      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <HAL_DMA_IRQHandler+0x1b8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d045      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a2b      	ldr	r2, [pc, #172]	; (800289c <HAL_DMA_IRQHandler+0x1bc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d040      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_DMA_IRQHandler+0x1c0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d03b      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <HAL_DMA_IRQHandler+0x1c4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d036      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_DMA_IRQHandler+0x1c8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d031      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <HAL_DMA_IRQHandler+0x1cc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d02c      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <HAL_DMA_IRQHandler+0x1d0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d027      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <HAL_DMA_IRQHandler+0x1d4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d022      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_DMA_IRQHandler+0x1d8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d01d      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_DMA_IRQHandler+0x1dc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d018      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_DMA_IRQHandler+0x1e0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_DMA_IRQHandler+0x1e4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_DMA_IRQHandler+0x1e8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_DMA_IRQHandler+0x1ec>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_DMA_IRQHandler+0x194>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d12f      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x1f4>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf14      	ite	ne
 8002882:	2301      	movne	r3, #1
 8002884:	2300      	moveq	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	e02e      	b.n	80028e8 <HAL_DMA_IRQHandler+0x208>
 800288a:	bf00      	nop
 800288c:	24000000 	.word	0x24000000
 8002890:	1b4e81b5 	.word	0x1b4e81b5
 8002894:	40020010 	.word	0x40020010
 8002898:	40020028 	.word	0x40020028
 800289c:	40020040 	.word	0x40020040
 80028a0:	40020058 	.word	0x40020058
 80028a4:	40020070 	.word	0x40020070
 80028a8:	40020088 	.word	0x40020088
 80028ac:	400200a0 	.word	0x400200a0
 80028b0:	400200b8 	.word	0x400200b8
 80028b4:	40020410 	.word	0x40020410
 80028b8:	40020428 	.word	0x40020428
 80028bc:	40020440 	.word	0x40020440
 80028c0:	40020458 	.word	0x40020458
 80028c4:	40020470 	.word	0x40020470
 80028c8:	40020488 	.word	0x40020488
 80028cc:	400204a0 	.word	0x400204a0
 80028d0:	400204b8 	.word	0x400204b8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf14      	ite	ne
 80028e2:	2301      	movne	r3, #1
 80028e4:	2300      	moveq	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d015      	beq.n	8002918 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	2208      	movs	r2, #8
 8002906:	409a      	lsls	r2, r3
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d06e      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a69      	ldr	r2, [pc, #420]	; (8002ad8 <HAL_DMA_IRQHandler+0x3f8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d04a      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a67      	ldr	r2, [pc, #412]	; (8002adc <HAL_DMA_IRQHandler+0x3fc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d045      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a66      	ldr	r2, [pc, #408]	; (8002ae0 <HAL_DMA_IRQHandler+0x400>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d040      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a64      	ldr	r2, [pc, #400]	; (8002ae4 <HAL_DMA_IRQHandler+0x404>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d03b      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a63      	ldr	r2, [pc, #396]	; (8002ae8 <HAL_DMA_IRQHandler+0x408>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d036      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a61      	ldr	r2, [pc, #388]	; (8002aec <HAL_DMA_IRQHandler+0x40c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d031      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a60      	ldr	r2, [pc, #384]	; (8002af0 <HAL_DMA_IRQHandler+0x410>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d02c      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5e      	ldr	r2, [pc, #376]	; (8002af4 <HAL_DMA_IRQHandler+0x414>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d027      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5d      	ldr	r2, [pc, #372]	; (8002af8 <HAL_DMA_IRQHandler+0x418>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5b      	ldr	r2, [pc, #364]	; (8002afc <HAL_DMA_IRQHandler+0x41c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01d      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5a      	ldr	r2, [pc, #360]	; (8002b00 <HAL_DMA_IRQHandler+0x420>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a58      	ldr	r2, [pc, #352]	; (8002b04 <HAL_DMA_IRQHandler+0x424>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a57      	ldr	r2, [pc, #348]	; (8002b08 <HAL_DMA_IRQHandler+0x428>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a55      	ldr	r2, [pc, #340]	; (8002b0c <HAL_DMA_IRQHandler+0x42c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a54      	ldr	r2, [pc, #336]	; (8002b10 <HAL_DMA_IRQHandler+0x430>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2ee>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_DMA_IRQHandler+0x434>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10a      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x304>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e003      	b.n	80029ec <HAL_DMA_IRQHandler+0x30c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2201      	movs	r2, #1
 80029fa:	409a      	lsls	r2, r3
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0202 	orr.w	r2, r3, #2
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2204      	movs	r2, #4
 8002a16:	409a      	lsls	r2, r3
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 808f 	beq.w	8002b40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <HAL_DMA_IRQHandler+0x3f8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04a      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a2a      	ldr	r2, [pc, #168]	; (8002adc <HAL_DMA_IRQHandler+0x3fc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d045      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a29      	ldr	r2, [pc, #164]	; (8002ae0 <HAL_DMA_IRQHandler+0x400>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d040      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <HAL_DMA_IRQHandler+0x404>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d03b      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a26      	ldr	r2, [pc, #152]	; (8002ae8 <HAL_DMA_IRQHandler+0x408>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d036      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a24      	ldr	r2, [pc, #144]	; (8002aec <HAL_DMA_IRQHandler+0x40c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d031      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <HAL_DMA_IRQHandler+0x410>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02c      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_DMA_IRQHandler+0x414>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <HAL_DMA_IRQHandler+0x418>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <HAL_DMA_IRQHandler+0x41c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <HAL_DMA_IRQHandler+0x420>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <HAL_DMA_IRQHandler+0x424>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_DMA_IRQHandler+0x428>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <HAL_DMA_IRQHandler+0x42c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <HAL_DMA_IRQHandler+0x430>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x3e2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a15      	ldr	r2, [pc, #84]	; (8002b14 <HAL_DMA_IRQHandler+0x434>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d12a      	bne.n	8002b18 <HAL_DMA_IRQHandler+0x438>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e023      	b.n	8002b20 <HAL_DMA_IRQHandler+0x440>
 8002ad8:	40020010 	.word	0x40020010
 8002adc:	40020028 	.word	0x40020028
 8002ae0:	40020040 	.word	0x40020040
 8002ae4:	40020058 	.word	0x40020058
 8002ae8:	40020070 	.word	0x40020070
 8002aec:	40020088 	.word	0x40020088
 8002af0:	400200a0 	.word	0x400200a0
 8002af4:	400200b8 	.word	0x400200b8
 8002af8:	40020410 	.word	0x40020410
 8002afc:	40020428 	.word	0x40020428
 8002b00:	40020440 	.word	0x40020440
 8002b04:	40020458 	.word	0x40020458
 8002b08:	40020470 	.word	0x40020470
 8002b0c:	40020488 	.word	0x40020488
 8002b10:	400204a0 	.word	0x400204a0
 8002b14:	400204b8 	.word	0x400204b8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	2210      	movs	r2, #16
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a6 	beq.w	8002ca2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a85      	ldr	r2, [pc, #532]	; (8002d70 <HAL_DMA_IRQHandler+0x690>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d04a      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a83      	ldr	r2, [pc, #524]	; (8002d74 <HAL_DMA_IRQHandler+0x694>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d045      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a82      	ldr	r2, [pc, #520]	; (8002d78 <HAL_DMA_IRQHandler+0x698>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d040      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a80      	ldr	r2, [pc, #512]	; (8002d7c <HAL_DMA_IRQHandler+0x69c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d03b      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7f      	ldr	r2, [pc, #508]	; (8002d80 <HAL_DMA_IRQHandler+0x6a0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d036      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7d      	ldr	r2, [pc, #500]	; (8002d84 <HAL_DMA_IRQHandler+0x6a4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d031      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7c      	ldr	r2, [pc, #496]	; (8002d88 <HAL_DMA_IRQHandler+0x6a8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_DMA_IRQHandler+0x6ac>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d027      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a79      	ldr	r2, [pc, #484]	; (8002d90 <HAL_DMA_IRQHandler+0x6b0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a77      	ldr	r2, [pc, #476]	; (8002d94 <HAL_DMA_IRQHandler+0x6b4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a76      	ldr	r2, [pc, #472]	; (8002d98 <HAL_DMA_IRQHandler+0x6b8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a74      	ldr	r2, [pc, #464]	; (8002d9c <HAL_DMA_IRQHandler+0x6bc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a73      	ldr	r2, [pc, #460]	; (8002da0 <HAL_DMA_IRQHandler+0x6c0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_DMA_IRQHandler+0x6c4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a70      	ldr	r2, [pc, #448]	; (8002da8 <HAL_DMA_IRQHandler+0x6c8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x516>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6e      	ldr	r2, [pc, #440]	; (8002dac <HAL_DMA_IRQHandler+0x6cc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10a      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x52c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e009      	b.n	8002c20 <HAL_DMA_IRQHandler+0x540>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf14      	ite	ne
 8002c1a:	2301      	movne	r3, #1
 8002c1c:	2300      	moveq	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d03e      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d018      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d108      	bne.n	8002c62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d024      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e01f      	b.n	8002ca2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01b      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
 8002c72:	e016      	b.n	8002ca2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d107      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2220      	movs	r2, #32
 8002cac:	409a      	lsls	r2, r3
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8110 	beq.w	8002ed8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <HAL_DMA_IRQHandler+0x690>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d04a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2b      	ldr	r2, [pc, #172]	; (8002d74 <HAL_DMA_IRQHandler+0x694>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d045      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <HAL_DMA_IRQHandler+0x698>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d040      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_DMA_IRQHandler+0x69c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d03b      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <HAL_DMA_IRQHandler+0x6a0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d036      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <HAL_DMA_IRQHandler+0x6a4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d031      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a23      	ldr	r2, [pc, #140]	; (8002d88 <HAL_DMA_IRQHandler+0x6a8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02c      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <HAL_DMA_IRQHandler+0x6ac>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d027      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a20      	ldr	r2, [pc, #128]	; (8002d90 <HAL_DMA_IRQHandler+0x6b0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_DMA_IRQHandler+0x6b4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01d      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <HAL_DMA_IRQHandler+0x6b8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_DMA_IRQHandler+0x6bc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <HAL_DMA_IRQHandler+0x6c0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <HAL_DMA_IRQHandler+0x6c4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a17      	ldr	r2, [pc, #92]	; (8002da8 <HAL_DMA_IRQHandler+0x6c8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x678>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a16      	ldr	r2, [pc, #88]	; (8002dac <HAL_DMA_IRQHandler+0x6cc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d12b      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x6d0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf14      	ite	ne
 8002d66:	2301      	movne	r3, #1
 8002d68:	2300      	moveq	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	e02a      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x6e4>
 8002d6e:	bf00      	nop
 8002d70:	40020010 	.word	0x40020010
 8002d74:	40020028 	.word	0x40020028
 8002d78:	40020040 	.word	0x40020040
 8002d7c:	40020058 	.word	0x40020058
 8002d80:	40020070 	.word	0x40020070
 8002d84:	40020088 	.word	0x40020088
 8002d88:	400200a0 	.word	0x400200a0
 8002d8c:	400200b8 	.word	0x400200b8
 8002d90:	40020410 	.word	0x40020410
 8002d94:	40020428 	.word	0x40020428
 8002d98:	40020440 	.word	0x40020440
 8002d9c:	40020458 	.word	0x40020458
 8002da0:	40020470 	.word	0x40020470
 8002da4:	40020488 	.word	0x40020488
 8002da8:	400204a0 	.word	0x400204a0
 8002dac:	400204b8 	.word	0x400204b8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8087 	beq.w	8002ed8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d139      	bne.n	8002e5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0216 	bic.w	r2, r2, #22
 8002df4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x736>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0208 	bic.w	r2, r2, #8
 8002e24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	223f      	movs	r2, #63	; 0x3f
 8002e30:	409a      	lsls	r2, r3
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 834a 	beq.w	80034e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
          }
          return;
 8002e58:	e344      	b.n	80034e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d018      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d108      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d02c      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
 8002e86:	e027      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d023      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
 8002e98:	e01e      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0210 	bic.w	r2, r2, #16
 8002eb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8306 	beq.w	80034ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8088 	beq.w	8003000 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a7a      	ldr	r2, [pc, #488]	; (80030e8 <HAL_DMA_IRQHandler+0xa08>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d04a      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a79      	ldr	r2, [pc, #484]	; (80030ec <HAL_DMA_IRQHandler+0xa0c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d045      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <HAL_DMA_IRQHandler+0xa10>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d040      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a76      	ldr	r2, [pc, #472]	; (80030f4 <HAL_DMA_IRQHandler+0xa14>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d03b      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a74      	ldr	r2, [pc, #464]	; (80030f8 <HAL_DMA_IRQHandler+0xa18>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d036      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a73      	ldr	r2, [pc, #460]	; (80030fc <HAL_DMA_IRQHandler+0xa1c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d031      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a71      	ldr	r2, [pc, #452]	; (8003100 <HAL_DMA_IRQHandler+0xa20>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d02c      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a70      	ldr	r2, [pc, #448]	; (8003104 <HAL_DMA_IRQHandler+0xa24>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d027      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <HAL_DMA_IRQHandler+0xa28>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d022      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6d      	ldr	r2, [pc, #436]	; (800310c <HAL_DMA_IRQHandler+0xa2c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d01d      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6b      	ldr	r2, [pc, #428]	; (8003110 <HAL_DMA_IRQHandler+0xa30>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d018      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_DMA_IRQHandler+0xa34>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a68      	ldr	r2, [pc, #416]	; (8003118 <HAL_DMA_IRQHandler+0xa38>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00e      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a67      	ldr	r2, [pc, #412]	; (800311c <HAL_DMA_IRQHandler+0xa3c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a65      	ldr	r2, [pc, #404]	; (8003120 <HAL_DMA_IRQHandler+0xa40>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x8b8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a64      	ldr	r2, [pc, #400]	; (8003124 <HAL_DMA_IRQHandler+0xa44>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <HAL_DMA_IRQHandler+0x8ca>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e007      	b.n	8002fba <HAL_DMA_IRQHandler+0x8da>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d307      	bcc.n	8002fd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f2      	bne.n	8002fba <HAL_DMA_IRQHandler+0x8da>
 8002fd4:	e000      	b.n	8002fd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002fd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002fee:	e003      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8272 	beq.w	80034ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e26c      	b.n	80034ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a43      	ldr	r2, [pc, #268]	; (8003128 <HAL_DMA_IRQHandler+0xa48>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d022      	beq.n	8003064 <HAL_DMA_IRQHandler+0x984>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a42      	ldr	r2, [pc, #264]	; (800312c <HAL_DMA_IRQHandler+0xa4c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d01d      	beq.n	8003064 <HAL_DMA_IRQHandler+0x984>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a40      	ldr	r2, [pc, #256]	; (8003130 <HAL_DMA_IRQHandler+0xa50>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d018      	beq.n	8003064 <HAL_DMA_IRQHandler+0x984>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3f      	ldr	r2, [pc, #252]	; (8003134 <HAL_DMA_IRQHandler+0xa54>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_DMA_IRQHandler+0x984>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3d      	ldr	r2, [pc, #244]	; (8003138 <HAL_DMA_IRQHandler+0xa58>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00e      	beq.n	8003064 <HAL_DMA_IRQHandler+0x984>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a3c      	ldr	r2, [pc, #240]	; (800313c <HAL_DMA_IRQHandler+0xa5c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_DMA_IRQHandler+0x984>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a3a      	ldr	r2, [pc, #232]	; (8003140 <HAL_DMA_IRQHandler+0xa60>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_DMA_IRQHandler+0x984>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a39      	ldr	r2, [pc, #228]	; (8003144 <HAL_DMA_IRQHandler+0xa64>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_DMA_IRQHandler+0x988>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_DMA_IRQHandler+0x98a>
 8003068:	2300      	movs	r3, #0
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 823f 	beq.w	80034ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2204      	movs	r2, #4
 8003082:	409a      	lsls	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80cd 	beq.w	8003228 <HAL_DMA_IRQHandler+0xb48>
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80c7 	beq.w	8003228 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2204      	movs	r2, #4
 80030a4:	409a      	lsls	r2, r3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d049      	beq.n	8003148 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8210 	beq.w	80034e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030d0:	e20a      	b.n	80034e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8206 	beq.w	80034e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030e4:	e200      	b.n	80034e8 <HAL_DMA_IRQHandler+0xe08>
 80030e6:	bf00      	nop
 80030e8:	40020010 	.word	0x40020010
 80030ec:	40020028 	.word	0x40020028
 80030f0:	40020040 	.word	0x40020040
 80030f4:	40020058 	.word	0x40020058
 80030f8:	40020070 	.word	0x40020070
 80030fc:	40020088 	.word	0x40020088
 8003100:	400200a0 	.word	0x400200a0
 8003104:	400200b8 	.word	0x400200b8
 8003108:	40020410 	.word	0x40020410
 800310c:	40020428 	.word	0x40020428
 8003110:	40020440 	.word	0x40020440
 8003114:	40020458 	.word	0x40020458
 8003118:	40020470 	.word	0x40020470
 800311c:	40020488 	.word	0x40020488
 8003120:	400204a0 	.word	0x400204a0
 8003124:	400204b8 	.word	0x400204b8
 8003128:	58025408 	.word	0x58025408
 800312c:	5802541c 	.word	0x5802541c
 8003130:	58025430 	.word	0x58025430
 8003134:	58025444 	.word	0x58025444
 8003138:	58025458 	.word	0x58025458
 800313c:	5802546c 	.word	0x5802546c
 8003140:	58025480 	.word	0x58025480
 8003144:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d160      	bne.n	8003214 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a7f      	ldr	r2, [pc, #508]	; (8003354 <HAL_DMA_IRQHandler+0xc74>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d04a      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a7d      	ldr	r2, [pc, #500]	; (8003358 <HAL_DMA_IRQHandler+0xc78>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d045      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7c      	ldr	r2, [pc, #496]	; (800335c <HAL_DMA_IRQHandler+0xc7c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d040      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a7a      	ldr	r2, [pc, #488]	; (8003360 <HAL_DMA_IRQHandler+0xc80>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d03b      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a79      	ldr	r2, [pc, #484]	; (8003364 <HAL_DMA_IRQHandler+0xc84>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d036      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a77      	ldr	r2, [pc, #476]	; (8003368 <HAL_DMA_IRQHandler+0xc88>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d031      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a76      	ldr	r2, [pc, #472]	; (800336c <HAL_DMA_IRQHandler+0xc8c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d02c      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a74      	ldr	r2, [pc, #464]	; (8003370 <HAL_DMA_IRQHandler+0xc90>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d027      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a73      	ldr	r2, [pc, #460]	; (8003374 <HAL_DMA_IRQHandler+0xc94>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d022      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a71      	ldr	r2, [pc, #452]	; (8003378 <HAL_DMA_IRQHandler+0xc98>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01d      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a70      	ldr	r2, [pc, #448]	; (800337c <HAL_DMA_IRQHandler+0xc9c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d018      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6e      	ldr	r2, [pc, #440]	; (8003380 <HAL_DMA_IRQHandler+0xca0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6d      	ldr	r2, [pc, #436]	; (8003384 <HAL_DMA_IRQHandler+0xca4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6b      	ldr	r2, [pc, #428]	; (8003388 <HAL_DMA_IRQHandler+0xca8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6a      	ldr	r2, [pc, #424]	; (800338c <HAL_DMA_IRQHandler+0xcac>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xb12>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a68      	ldr	r2, [pc, #416]	; (8003390 <HAL_DMA_IRQHandler+0xcb0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d108      	bne.n	8003204 <HAL_DMA_IRQHandler+0xb24>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0208 	bic.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e007      	b.n	8003214 <HAL_DMA_IRQHandler+0xb34>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0204 	bic.w	r2, r2, #4
 8003212:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8165 	beq.w	80034e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003226:	e15f      	b.n	80034e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2202      	movs	r2, #2
 8003232:	409a      	lsls	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80c5 	beq.w	80033c8 <HAL_DMA_IRQHandler+0xce8>
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80bf 	beq.w	80033c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2202      	movs	r2, #2
 8003254:	409a      	lsls	r2, r3
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 813a 	beq.w	80034ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003280:	e134      	b.n	80034ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8130 	beq.w	80034ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003294:	e12a      	b.n	80034ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 8089 	bne.w	80033b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <HAL_DMA_IRQHandler+0xc74>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d04a      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_DMA_IRQHandler+0xc78>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d045      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_DMA_IRQHandler+0xc7c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d040      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_DMA_IRQHandler+0xc80>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d03b      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a25      	ldr	r2, [pc, #148]	; (8003364 <HAL_DMA_IRQHandler+0xc84>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d036      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a23      	ldr	r2, [pc, #140]	; (8003368 <HAL_DMA_IRQHandler+0xc88>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d031      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a22      	ldr	r2, [pc, #136]	; (800336c <HAL_DMA_IRQHandler+0xc8c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d02c      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a20      	ldr	r2, [pc, #128]	; (8003370 <HAL_DMA_IRQHandler+0xc90>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d027      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <HAL_DMA_IRQHandler+0xc94>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d022      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <HAL_DMA_IRQHandler+0xc98>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01d      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1c      	ldr	r2, [pc, #112]	; (800337c <HAL_DMA_IRQHandler+0xc9c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d018      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_DMA_IRQHandler+0xca0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_DMA_IRQHandler+0xca4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00e      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <HAL_DMA_IRQHandler+0xca8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_DMA_IRQHandler+0xcac>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_DMA_IRQHandler+0xc62>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a14      	ldr	r2, [pc, #80]	; (8003390 <HAL_DMA_IRQHandler+0xcb0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d128      	bne.n	8003394 <HAL_DMA_IRQHandler+0xcb4>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0214 	bic.w	r2, r2, #20
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e027      	b.n	80033a4 <HAL_DMA_IRQHandler+0xcc4>
 8003354:	40020010 	.word	0x40020010
 8003358:	40020028 	.word	0x40020028
 800335c:	40020040 	.word	0x40020040
 8003360:	40020058 	.word	0x40020058
 8003364:	40020070 	.word	0x40020070
 8003368:	40020088 	.word	0x40020088
 800336c:	400200a0 	.word	0x400200a0
 8003370:	400200b8 	.word	0x400200b8
 8003374:	40020410 	.word	0x40020410
 8003378:	40020428 	.word	0x40020428
 800337c:	40020440 	.word	0x40020440
 8003380:	40020458 	.word	0x40020458
 8003384:	40020470 	.word	0x40020470
 8003388:	40020488 	.word	0x40020488
 800338c:	400204a0 	.word	0x400204a0
 8003390:	400204b8 	.word	0x400204b8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 020a 	bic.w	r2, r2, #10
 80033a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8097 	beq.w	80034ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033c6:	e091      	b.n	80034ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2208      	movs	r2, #8
 80033d2:	409a      	lsls	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8088 	beq.w	80034ee <HAL_DMA_IRQHandler+0xe0e>
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8082 	beq.w	80034ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a41      	ldr	r2, [pc, #260]	; (80034f4 <HAL_DMA_IRQHandler+0xe14>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d04a      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3f      	ldr	r2, [pc, #252]	; (80034f8 <HAL_DMA_IRQHandler+0xe18>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d045      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <HAL_DMA_IRQHandler+0xe1c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d040      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <HAL_DMA_IRQHandler+0xe20>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d03b      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <HAL_DMA_IRQHandler+0xe24>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d036      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a39      	ldr	r2, [pc, #228]	; (8003508 <HAL_DMA_IRQHandler+0xe28>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d031      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a38      	ldr	r2, [pc, #224]	; (800350c <HAL_DMA_IRQHandler+0xe2c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d02c      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a36      	ldr	r2, [pc, #216]	; (8003510 <HAL_DMA_IRQHandler+0xe30>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d027      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a35      	ldr	r2, [pc, #212]	; (8003514 <HAL_DMA_IRQHandler+0xe34>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a33      	ldr	r2, [pc, #204]	; (8003518 <HAL_DMA_IRQHandler+0xe38>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01d      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a32      	ldr	r2, [pc, #200]	; (800351c <HAL_DMA_IRQHandler+0xe3c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <HAL_DMA_IRQHandler+0xe40>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <HAL_DMA_IRQHandler+0xe44>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2d      	ldr	r2, [pc, #180]	; (8003528 <HAL_DMA_IRQHandler+0xe48>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2c      	ldr	r2, [pc, #176]	; (800352c <HAL_DMA_IRQHandler+0xe4c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_DMA_IRQHandler+0xdaa>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <HAL_DMA_IRQHandler+0xe50>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d108      	bne.n	800349c <HAL_DMA_IRQHandler+0xdbc>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 021c 	bic.w	r2, r2, #28
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e007      	b.n	80034ac <HAL_DMA_IRQHandler+0xdcc>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 020e 	bic.w	r2, r2, #14
 80034aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	2201      	movs	r2, #1
 80034b6:	409a      	lsls	r2, r3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
 80034e2:	e004      	b.n	80034ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80034ee:	3728      	adds	r7, #40	; 0x28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40020010 	.word	0x40020010
 80034f8:	40020028 	.word	0x40020028
 80034fc:	40020040 	.word	0x40020040
 8003500:	40020058 	.word	0x40020058
 8003504:	40020070 	.word	0x40020070
 8003508:	40020088 	.word	0x40020088
 800350c:	400200a0 	.word	0x400200a0
 8003510:	400200b8 	.word	0x400200b8
 8003514:	40020410 	.word	0x40020410
 8003518:	40020428 	.word	0x40020428
 800351c:	40020440 	.word	0x40020440
 8003520:	40020458 	.word	0x40020458
 8003524:	40020470 	.word	0x40020470
 8003528:	40020488 	.word	0x40020488
 800352c:	400204a0 	.word	0x400204a0
 8003530:	400204b8 	.word	0x400204b8

08003534 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7f      	ldr	r2, [pc, #508]	; (8003768 <DMA_SetConfig+0x21c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d072      	beq.n	8003656 <DMA_SetConfig+0x10a>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a7d      	ldr	r2, [pc, #500]	; (800376c <DMA_SetConfig+0x220>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d06d      	beq.n	8003656 <DMA_SetConfig+0x10a>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7c      	ldr	r2, [pc, #496]	; (8003770 <DMA_SetConfig+0x224>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d068      	beq.n	8003656 <DMA_SetConfig+0x10a>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a7a      	ldr	r2, [pc, #488]	; (8003774 <DMA_SetConfig+0x228>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d063      	beq.n	8003656 <DMA_SetConfig+0x10a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a79      	ldr	r2, [pc, #484]	; (8003778 <DMA_SetConfig+0x22c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d05e      	beq.n	8003656 <DMA_SetConfig+0x10a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a77      	ldr	r2, [pc, #476]	; (800377c <DMA_SetConfig+0x230>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d059      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a76      	ldr	r2, [pc, #472]	; (8003780 <DMA_SetConfig+0x234>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d054      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a74      	ldr	r2, [pc, #464]	; (8003784 <DMA_SetConfig+0x238>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d04f      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a73      	ldr	r2, [pc, #460]	; (8003788 <DMA_SetConfig+0x23c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d04a      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a71      	ldr	r2, [pc, #452]	; (800378c <DMA_SetConfig+0x240>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d045      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a70      	ldr	r2, [pc, #448]	; (8003790 <DMA_SetConfig+0x244>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d040      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <DMA_SetConfig+0x248>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d03b      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6d      	ldr	r2, [pc, #436]	; (8003798 <DMA_SetConfig+0x24c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d036      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6b      	ldr	r2, [pc, #428]	; (800379c <DMA_SetConfig+0x250>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d031      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6a      	ldr	r2, [pc, #424]	; (80037a0 <DMA_SetConfig+0x254>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d02c      	beq.n	8003656 <DMA_SetConfig+0x10a>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a68      	ldr	r2, [pc, #416]	; (80037a4 <DMA_SetConfig+0x258>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d027      	beq.n	8003656 <DMA_SetConfig+0x10a>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a67      	ldr	r2, [pc, #412]	; (80037a8 <DMA_SetConfig+0x25c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <DMA_SetConfig+0x10a>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a65      	ldr	r2, [pc, #404]	; (80037ac <DMA_SetConfig+0x260>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01d      	beq.n	8003656 <DMA_SetConfig+0x10a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a64      	ldr	r2, [pc, #400]	; (80037b0 <DMA_SetConfig+0x264>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <DMA_SetConfig+0x10a>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a62      	ldr	r2, [pc, #392]	; (80037b4 <DMA_SetConfig+0x268>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <DMA_SetConfig+0x10a>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a61      	ldr	r2, [pc, #388]	; (80037b8 <DMA_SetConfig+0x26c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <DMA_SetConfig+0x10a>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a5f      	ldr	r2, [pc, #380]	; (80037bc <DMA_SetConfig+0x270>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <DMA_SetConfig+0x10a>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a5e      	ldr	r2, [pc, #376]	; (80037c0 <DMA_SetConfig+0x274>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <DMA_SetConfig+0x10a>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a5c      	ldr	r2, [pc, #368]	; (80037c4 <DMA_SetConfig+0x278>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <DMA_SetConfig+0x10e>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <DMA_SetConfig+0x110>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003668:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800367a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a39      	ldr	r2, [pc, #228]	; (8003768 <DMA_SetConfig+0x21c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d04a      	beq.n	800371c <DMA_SetConfig+0x1d0>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a38      	ldr	r2, [pc, #224]	; (800376c <DMA_SetConfig+0x220>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d045      	beq.n	800371c <DMA_SetConfig+0x1d0>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a36      	ldr	r2, [pc, #216]	; (8003770 <DMA_SetConfig+0x224>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d040      	beq.n	800371c <DMA_SetConfig+0x1d0>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a35      	ldr	r2, [pc, #212]	; (8003774 <DMA_SetConfig+0x228>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d03b      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a33      	ldr	r2, [pc, #204]	; (8003778 <DMA_SetConfig+0x22c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d036      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a32      	ldr	r2, [pc, #200]	; (800377c <DMA_SetConfig+0x230>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d031      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a30      	ldr	r2, [pc, #192]	; (8003780 <DMA_SetConfig+0x234>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02c      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <DMA_SetConfig+0x238>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d027      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2d      	ldr	r2, [pc, #180]	; (8003788 <DMA_SetConfig+0x23c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d022      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2c      	ldr	r2, [pc, #176]	; (800378c <DMA_SetConfig+0x240>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d01d      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <DMA_SetConfig+0x244>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d018      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <DMA_SetConfig+0x248>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d013      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <DMA_SetConfig+0x24c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <DMA_SetConfig+0x1d0>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a26      	ldr	r2, [pc, #152]	; (800379c <DMA_SetConfig+0x250>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <DMA_SetConfig+0x1d0>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <DMA_SetConfig+0x254>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <DMA_SetConfig+0x1d0>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <DMA_SetConfig+0x258>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d101      	bne.n	8003720 <DMA_SetConfig+0x1d4>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <DMA_SetConfig+0x1d6>
 8003720:	2300      	movs	r3, #0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d059      	beq.n	80037da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	223f      	movs	r2, #63	; 0x3f
 8003730:	409a      	lsls	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003744:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d138      	bne.n	80037c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003766:	e086      	b.n	8003876 <DMA_SetConfig+0x32a>
 8003768:	40020010 	.word	0x40020010
 800376c:	40020028 	.word	0x40020028
 8003770:	40020040 	.word	0x40020040
 8003774:	40020058 	.word	0x40020058
 8003778:	40020070 	.word	0x40020070
 800377c:	40020088 	.word	0x40020088
 8003780:	400200a0 	.word	0x400200a0
 8003784:	400200b8 	.word	0x400200b8
 8003788:	40020410 	.word	0x40020410
 800378c:	40020428 	.word	0x40020428
 8003790:	40020440 	.word	0x40020440
 8003794:	40020458 	.word	0x40020458
 8003798:	40020470 	.word	0x40020470
 800379c:	40020488 	.word	0x40020488
 80037a0:	400204a0 	.word	0x400204a0
 80037a4:	400204b8 	.word	0x400204b8
 80037a8:	58025408 	.word	0x58025408
 80037ac:	5802541c 	.word	0x5802541c
 80037b0:	58025430 	.word	0x58025430
 80037b4:	58025444 	.word	0x58025444
 80037b8:	58025458 	.word	0x58025458
 80037bc:	5802546c 	.word	0x5802546c
 80037c0:	58025480 	.word	0x58025480
 80037c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	60da      	str	r2, [r3, #12]
}
 80037d8:	e04d      	b.n	8003876 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a29      	ldr	r2, [pc, #164]	; (8003884 <DMA_SetConfig+0x338>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d022      	beq.n	800382a <DMA_SetConfig+0x2de>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a27      	ldr	r2, [pc, #156]	; (8003888 <DMA_SetConfig+0x33c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01d      	beq.n	800382a <DMA_SetConfig+0x2de>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a26      	ldr	r2, [pc, #152]	; (800388c <DMA_SetConfig+0x340>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d018      	beq.n	800382a <DMA_SetConfig+0x2de>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a24      	ldr	r2, [pc, #144]	; (8003890 <DMA_SetConfig+0x344>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d013      	beq.n	800382a <DMA_SetConfig+0x2de>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a23      	ldr	r2, [pc, #140]	; (8003894 <DMA_SetConfig+0x348>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00e      	beq.n	800382a <DMA_SetConfig+0x2de>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a21      	ldr	r2, [pc, #132]	; (8003898 <DMA_SetConfig+0x34c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d009      	beq.n	800382a <DMA_SetConfig+0x2de>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a20      	ldr	r2, [pc, #128]	; (800389c <DMA_SetConfig+0x350>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d004      	beq.n	800382a <DMA_SetConfig+0x2de>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <DMA_SetConfig+0x354>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d101      	bne.n	800382e <DMA_SetConfig+0x2e2>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <DMA_SetConfig+0x2e4>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2201      	movs	r2, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d108      	bne.n	8003866 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	60da      	str	r2, [r3, #12]
}
 8003864:	e007      	b.n	8003876 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	60da      	str	r2, [r3, #12]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	58025408 	.word	0x58025408
 8003888:	5802541c 	.word	0x5802541c
 800388c:	58025430 	.word	0x58025430
 8003890:	58025444 	.word	0x58025444
 8003894:	58025458 	.word	0x58025458
 8003898:	5802546c 	.word	0x5802546c
 800389c:	58025480 	.word	0x58025480
 80038a0:	58025494 	.word	0x58025494

080038a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a42      	ldr	r2, [pc, #264]	; (80039bc <DMA_CalcBaseAndBitshift+0x118>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d04a      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <DMA_CalcBaseAndBitshift+0x11c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d045      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <DMA_CalcBaseAndBitshift+0x120>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d040      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a3e      	ldr	r2, [pc, #248]	; (80039c8 <DMA_CalcBaseAndBitshift+0x124>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d03b      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <DMA_CalcBaseAndBitshift+0x128>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d036      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a3b      	ldr	r2, [pc, #236]	; (80039d0 <DMA_CalcBaseAndBitshift+0x12c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d031      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a39      	ldr	r2, [pc, #228]	; (80039d4 <DMA_CalcBaseAndBitshift+0x130>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d02c      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a38      	ldr	r2, [pc, #224]	; (80039d8 <DMA_CalcBaseAndBitshift+0x134>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d027      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a36      	ldr	r2, [pc, #216]	; (80039dc <DMA_CalcBaseAndBitshift+0x138>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d022      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d01d      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a33      	ldr	r2, [pc, #204]	; (80039e4 <DMA_CalcBaseAndBitshift+0x140>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d018      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <DMA_CalcBaseAndBitshift+0x144>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a30      	ldr	r2, [pc, #192]	; (80039ec <DMA_CalcBaseAndBitshift+0x148>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00e      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2f      	ldr	r2, [pc, #188]	; (80039f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d009      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <DMA_CalcBaseAndBitshift+0x150>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <DMA_CalcBaseAndBitshift+0xa8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <DMA_CalcBaseAndBitshift+0x154>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <DMA_CalcBaseAndBitshift+0xac>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <DMA_CalcBaseAndBitshift+0xae>
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d024      	beq.n	80039a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	3b10      	subs	r3, #16
 800395e:	4a27      	ldr	r2, [pc, #156]	; (80039fc <DMA_CalcBaseAndBitshift+0x158>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	4a24      	ldr	r2, [pc, #144]	; (8003a00 <DMA_CalcBaseAndBitshift+0x15c>)
 8003970:	5cd3      	ldrb	r3, [r2, r3]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d908      	bls.n	8003990 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <DMA_CalcBaseAndBitshift+0x160>)
 8003986:	4013      	ands	r3, r2
 8003988:	1d1a      	adds	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	659a      	str	r2, [r3, #88]	; 0x58
 800398e:	e00d      	b.n	80039ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <DMA_CalcBaseAndBitshift+0x160>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6593      	str	r3, [r2, #88]	; 0x58
 800399e:	e005      	b.n	80039ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40020010 	.word	0x40020010
 80039c0:	40020028 	.word	0x40020028
 80039c4:	40020040 	.word	0x40020040
 80039c8:	40020058 	.word	0x40020058
 80039cc:	40020070 	.word	0x40020070
 80039d0:	40020088 	.word	0x40020088
 80039d4:	400200a0 	.word	0x400200a0
 80039d8:	400200b8 	.word	0x400200b8
 80039dc:	40020410 	.word	0x40020410
 80039e0:	40020428 	.word	0x40020428
 80039e4:	40020440 	.word	0x40020440
 80039e8:	40020458 	.word	0x40020458
 80039ec:	40020470 	.word	0x40020470
 80039f0:	40020488 	.word	0x40020488
 80039f4:	400204a0 	.word	0x400204a0
 80039f8:	400204b8 	.word	0x400204b8
 80039fc:	aaaaaaab 	.word	0xaaaaaaab
 8003a00:	0800e9dc 	.word	0x0800e9dc
 8003a04:	fffffc00 	.word	0xfffffc00

08003a08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d120      	bne.n	8003a5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d858      	bhi.n	8003ad6 <DMA_CheckFifoParam+0xce>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <DMA_CheckFifoParam+0x24>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a4f 	.word	0x08003a4f
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003ad7 	.word	0x08003ad7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d048      	beq.n	8003ada <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a4c:	e045      	b.n	8003ada <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a56:	d142      	bne.n	8003ade <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a5c:	e03f      	b.n	8003ade <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a66:	d123      	bne.n	8003ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d838      	bhi.n	8003ae2 <DMA_CheckFifoParam+0xda>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <DMA_CheckFifoParam+0x70>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a8f 	.word	0x08003a8f
 8003a80:	08003a89 	.word	0x08003a89
 8003a84:	08003aa1 	.word	0x08003aa1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a8c:	e030      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d025      	beq.n	8003ae6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a9e:	e022      	b.n	8003ae6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa8:	d11f      	bne.n	8003aea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003aae:	e01c      	b.n	8003aea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d902      	bls.n	8003abe <DMA_CheckFifoParam+0xb6>
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d003      	beq.n	8003ac4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003abc:	e018      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ac2:	e015      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00e      	beq.n	8003aee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ad4:	e00b      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
        break;
 8003ad6:	bf00      	nop
 8003ad8:	e00a      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ada:	bf00      	nop
 8003adc:	e008      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ade:	bf00      	nop
 8003ae0:	e006      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
        break;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
    break;
 8003aee:	bf00      	nop
    }
  }

  return status;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a38      	ldr	r2, [pc, #224]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a36      	ldr	r2, [pc, #216]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a35      	ldr	r2, [pc, #212]	; (8003bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a33      	ldr	r2, [pc, #204]	; (8003c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a32      	ldr	r2, [pc, #200]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a30      	ldr	r2, [pc, #192]	; (8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2f      	ldr	r2, [pc, #188]	; (8003c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2d      	ldr	r2, [pc, #180]	; (8003c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b62:	2300      	movs	r3, #0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01a      	beq.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	3b08      	subs	r3, #8
 8003b70:	4a28      	ldr	r2, [pc, #160]	; (8003c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2201      	movs	r2, #1
 8003b96:	409a      	lsls	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b9c:	e024      	b.n	8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3b10      	subs	r3, #16
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d806      	bhi.n	8003bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d902      	bls.n	8003bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	461a      	mov	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003bd8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	58025408 	.word	0x58025408
 8003bf8:	5802541c 	.word	0x5802541c
 8003bfc:	58025430 	.word	0x58025430
 8003c00:	58025444 	.word	0x58025444
 8003c04:	58025458 	.word	0x58025458
 8003c08:	5802546c 	.word	0x5802546c
 8003c0c:	58025480 	.word	0x58025480
 8003c10:	58025494 	.word	0x58025494
 8003c14:	cccccccd 	.word	0xcccccccd
 8003c18:	16009600 	.word	0x16009600
 8003c1c:	58025880 	.word	0x58025880
 8003c20:	aaaaaaab 	.word	0xaaaaaaab
 8003c24:	400204b8 	.word	0x400204b8
 8003c28:	4002040f 	.word	0x4002040f
 8003c2c:	10008200 	.word	0x10008200
 8003c30:	40020880 	.word	0x40020880

08003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d04a      	beq.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d847      	bhi.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a25      	ldr	r2, [pc, #148]	; (8003cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d022      	beq.n	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d01d      	beq.n	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d018      	beq.n	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d013      	beq.n	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00e      	beq.n	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d009      	beq.n	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d101      	bne.n	8003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003cbc:	671a      	str	r2, [r3, #112]	; 0x70
 8003cbe:	e009      	b.n	8003cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003cd2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	58025408 	.word	0x58025408
 8003cf0:	5802541c 	.word	0x5802541c
 8003cf4:	58025430 	.word	0x58025430
 8003cf8:	58025444 	.word	0x58025444
 8003cfc:	58025458 	.word	0x58025458
 8003d00:	5802546c 	.word	0x5802546c
 8003d04:	58025480 	.word	0x58025480
 8003d08:	58025494 	.word	0x58025494
 8003d0c:	1600963f 	.word	0x1600963f
 8003d10:	58025940 	.word	0x58025940
 8003d14:	1000823f 	.word	0x1000823f
 8003d18:	40020940 	.word	0x40020940

08003d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d2a:	4b89      	ldr	r3, [pc, #548]	; (8003f50 <HAL_GPIO_Init+0x234>)
 8003d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d2e:	e194      	b.n	800405a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	2101      	movs	r1, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8186 	beq.w	8004054 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d005      	beq.n	8003d60 <HAL_GPIO_Init+0x44>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d130      	bne.n	8003dc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d96:	2201      	movs	r2, #1
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	f003 0201 	and.w	r2, r3, #1
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d017      	beq.n	8003dfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	2203      	movs	r2, #3
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d123      	bne.n	8003e52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	08da      	lsrs	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3208      	adds	r2, #8
 8003e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	220f      	movs	r2, #15
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43db      	mvns	r3, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	08da      	lsrs	r2, r3, #3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3208      	adds	r2, #8
 8003e4c:	69b9      	ldr	r1, [r7, #24]
 8003e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0203 	and.w	r2, r3, #3
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80e0 	beq.w	8004054 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e94:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <HAL_GPIO_Init+0x238>)
 8003e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e9a:	4a2e      	ldr	r2, [pc, #184]	; (8003f54 <HAL_GPIO_Init+0x238>)
 8003e9c:	f043 0302 	orr.w	r3, r3, #2
 8003ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <HAL_GPIO_Init+0x238>)
 8003ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eb2:	4a29      	ldr	r2, [pc, #164]	; (8003f58 <HAL_GPIO_Init+0x23c>)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	3302      	adds	r3, #2
 8003eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	220f      	movs	r2, #15
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a20      	ldr	r2, [pc, #128]	; (8003f5c <HAL_GPIO_Init+0x240>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d052      	beq.n	8003f84 <HAL_GPIO_Init+0x268>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <HAL_GPIO_Init+0x244>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d031      	beq.n	8003f4a <HAL_GPIO_Init+0x22e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_GPIO_Init+0x248>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02b      	beq.n	8003f46 <HAL_GPIO_Init+0x22a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_GPIO_Init+0x24c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d025      	beq.n	8003f42 <HAL_GPIO_Init+0x226>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_GPIO_Init+0x250>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01f      	beq.n	8003f3e <HAL_GPIO_Init+0x222>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_GPIO_Init+0x254>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d019      	beq.n	8003f3a <HAL_GPIO_Init+0x21e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <HAL_GPIO_Init+0x258>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_GPIO_Init+0x21a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <HAL_GPIO_Init+0x25c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00d      	beq.n	8003f32 <HAL_GPIO_Init+0x216>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_GPIO_Init+0x260>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <HAL_GPIO_Init+0x264>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <HAL_GPIO_Init+0x20e>
 8003f26:	2309      	movs	r3, #9
 8003f28:	e02d      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f2a:	230a      	movs	r3, #10
 8003f2c:	e02b      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f2e:	2308      	movs	r3, #8
 8003f30:	e029      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f32:	2307      	movs	r3, #7
 8003f34:	e027      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f36:	2306      	movs	r3, #6
 8003f38:	e025      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f3a:	2305      	movs	r3, #5
 8003f3c:	e023      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	e021      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f42:	2303      	movs	r3, #3
 8003f44:	e01f      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e01d      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e01b      	b.n	8003f86 <HAL_GPIO_Init+0x26a>
 8003f4e:	bf00      	nop
 8003f50:	58000080 	.word	0x58000080
 8003f54:	58024400 	.word	0x58024400
 8003f58:	58000400 	.word	0x58000400
 8003f5c:	58020000 	.word	0x58020000
 8003f60:	58020400 	.word	0x58020400
 8003f64:	58020800 	.word	0x58020800
 8003f68:	58020c00 	.word	0x58020c00
 8003f6c:	58021000 	.word	0x58021000
 8003f70:	58021400 	.word	0x58021400
 8003f74:	58021800 	.word	0x58021800
 8003f78:	58021c00 	.word	0x58021c00
 8003f7c:	58022000 	.word	0x58022000
 8003f80:	58022400 	.word	0x58022400
 8003f84:	2300      	movs	r3, #0
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	f002 0203 	and.w	r2, r2, #3
 8003f8c:	0092      	lsls	r2, r2, #2
 8003f8e:	4093      	lsls	r3, r2
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f96:	4938      	ldr	r1, [pc, #224]	; (8004078 <HAL_GPIO_Init+0x35c>)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	3301      	adds	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	f47f ae63 	bne.w	8003d30 <HAL_GPIO_Init+0x14>
  }
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	3724      	adds	r7, #36	; 0x24
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	58000400 	.word	0x58000400

0800407c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
 8004088:	4613      	mov	r3, r2
 800408a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800408c:	787b      	ldrb	r3, [r7, #1]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004098:	e003      	b.n	80040a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800409a:	887b      	ldrh	r3, [r7, #2]
 800409c:	041a      	lsls	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	619a      	str	r2, [r3, #24]
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07f      	b.n	80041c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fb5c 	bl	8000794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	; 0x24
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d107      	bne.n	800412a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	e006      	b.n	8004138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d104      	bne.n	800414a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004148:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_I2C_Init+0x11c>)
 8004156:	430b      	orrs	r3, r1
 8004158:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004168:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69d9      	ldr	r1, [r3, #28]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1a      	ldr	r2, [r3, #32]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	02008000 	.word	0x02008000

080041d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d138      	bne.n	8004258 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e032      	b.n	800425a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004222:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6819      	ldr	r1, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b20      	cmp	r3, #32
 800427a:	d139      	bne.n	80042f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004286:	2302      	movs	r3, #2
 8004288:	e033      	b.n	80042f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2224      	movs	r2, #36	; 0x24
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004300:	b08f      	sub	sp, #60	; 0x3c
 8004302:	af0a      	add	r7, sp, #40	; 0x28
 8004304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e116      	b.n	800453e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f008 ffa4 	bl	800d278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2203      	movs	r2, #3
 8004334:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f005 fc0d 	bl	8009b6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	687e      	ldr	r6, [r7, #4]
 800435c:	466d      	mov	r5, sp
 800435e:	f106 0410 	add.w	r4, r6, #16
 8004362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800436a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800436e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004372:	1d33      	adds	r3, r6, #4
 8004374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004376:	6838      	ldr	r0, [r7, #0]
 8004378:	f005 fad8 	bl	800992c <USB_CoreInit>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0d7      	b.n	800453e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f005 fbfb 	bl	8009b90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e04a      	b.n	8004436 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	333d      	adds	r3, #61	; 0x3d
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043b4:	7bfa      	ldrb	r2, [r7, #15]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	333c      	adds	r3, #60	; 0x3c
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	b298      	uxth	r0, r3
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	3344      	adds	r3, #68	; 0x44
 80043dc:	4602      	mov	r2, r0
 80043de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	3340      	adds	r3, #64	; 0x40
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043f4:	7bfa      	ldrb	r2, [r7, #15]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	3348      	adds	r3, #72	; 0x48
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	334c      	adds	r3, #76	; 0x4c
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	3354      	adds	r3, #84	; 0x54
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	3301      	adds	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	7bfa      	ldrb	r2, [r7, #15]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d3af      	bcc.n	80043a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004440:	2300      	movs	r3, #0
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e044      	b.n	80044d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004446:	7bfa      	ldrb	r2, [r7, #15]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800446e:	7bfa      	ldrb	r2, [r7, #15]
 8004470:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004472:	7bfa      	ldrb	r2, [r7, #15]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800449e:	7bfa      	ldrb	r2, [r7, #15]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	3301      	adds	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d3b5      	bcc.n	8004446 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	687e      	ldr	r6, [r7, #4]
 80044e2:	466d      	mov	r5, sp
 80044e4:	f106 0410 	add.w	r4, r6, #16
 80044e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80044f8:	1d33      	adds	r3, r6, #4
 80044fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044fc:	6838      	ldr	r0, [r7, #0]
 80044fe:	f005 fb93 	bl	8009c28 <USB_DevInit>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e014      	b.n	800453e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	2b01      	cmp	r3, #1
 800452a:	d102      	bne.n	8004532 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f001 f9b9 	bl	80058a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f006 fce1 	bl	800aefe <USB_DevDisconnect>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004546 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_PCD_Start+0x1c>
 800455e:	2302      	movs	r3, #2
 8004560:	e020      	b.n	80045a4 <HAL_PCD_Start+0x5e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	2b01      	cmp	r3, #1
 8004570:	d109      	bne.n	8004586 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004576:	2b01      	cmp	r3, #1
 8004578:	d005      	beq.n	8004586 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f005 fade 	bl	8009b4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f006 fc91 	bl	800aebc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b08d      	sub	sp, #52	; 0x34
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f006 fd4f 	bl	800b066 <USB_GetMode>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 84b7 	bne.w	8004f3e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f006 fcb3 	bl	800af40 <USB_ReadInterrupts>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 84ad 	beq.w	8004f3c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f006 fca0 	bl	800af40 <USB_ReadInterrupts>
 8004600:	4603      	mov	r3, r0
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d107      	bne.n	800461a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f002 0202 	and.w	r2, r2, #2
 8004618:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f006 fc8e 	bl	800af40 <USB_ReadInterrupts>
 8004624:	4603      	mov	r3, r0
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	2b10      	cmp	r3, #16
 800462c:	d161      	bne.n	80046f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0210 	bic.w	r2, r2, #16
 800463c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f003 020f 	and.w	r2, r3, #15
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	3304      	adds	r3, #4
 800465c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	0c5b      	lsrs	r3, r3, #17
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	2b02      	cmp	r3, #2
 8004668:	d124      	bne.n	80046b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d035      	beq.n	80046e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004684:	b29b      	uxth	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	6a38      	ldr	r0, [r7, #32]
 800468a:	f006 fac5 	bl	800ac18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800469a:	441a      	add	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6a1a      	ldr	r2, [r3, #32]
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ac:	441a      	add	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	621a      	str	r2, [r3, #32]
 80046b2:	e016      	b.n	80046e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	0c5b      	lsrs	r3, r3, #17
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	2b06      	cmp	r3, #6
 80046be:	d110      	bne.n	80046e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046c6:	2208      	movs	r2, #8
 80046c8:	4619      	mov	r1, r3
 80046ca:	6a38      	ldr	r0, [r7, #32]
 80046cc:	f006 faa4 	bl	800ac18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046dc:	441a      	add	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0210 	orr.w	r2, r2, #16
 80046f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f006 fc22 	bl	800af40 <USB_ReadInterrupts>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004702:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004706:	f040 80a7 	bne.w	8004858 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f006 fc27 	bl	800af66 <USB_ReadDevAllOutEpInterrupt>
 8004718:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800471a:	e099      	b.n	8004850 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 808e 	beq.w	8004844 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f006 fc4b 	bl	800afce <USB_ReadDevOutEPInterrupt>
 8004738:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00c      	beq.n	800475e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004750:	461a      	mov	r2, r3
 8004752:	2301      	movs	r3, #1
 8004754:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 ff1d 	bl	8005598 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00c      	beq.n	8004782 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	461a      	mov	r2, r3
 8004776:	2308      	movs	r3, #8
 8004778:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800477a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fff3 	bl	8005768 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004798:	461a      	mov	r2, r3
 800479a:	2310      	movs	r3, #16
 800479c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d030      	beq.n	800480a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b0:	2b80      	cmp	r3, #128	; 0x80
 80047b2:	d109      	bne.n	80047c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80047c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4413      	add	r3, r2
 80047da:	3304      	adds	r3, #4
 80047dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	78db      	ldrb	r3, [r3, #3]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d108      	bne.n	80047f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f008 fe64 	bl	800d4c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	461a      	mov	r2, r3
 8004806:	2302      	movs	r3, #2
 8004808:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	461a      	mov	r2, r3
 8004822:	2320      	movs	r3, #32
 8004824:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	461a      	mov	r2, r3
 800483e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004842:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	3301      	adds	r3, #1
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	2b00      	cmp	r3, #0
 8004854:	f47f af62 	bne.w	800471c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f006 fb6f 	bl	800af40 <USB_ReadInterrupts>
 8004862:	4603      	mov	r3, r0
 8004864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800486c:	f040 80db 	bne.w	8004a26 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f006 fb90 	bl	800af9a <USB_ReadDevAllInEpInterrupt>
 800487a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004880:	e0cd      	b.n	8004a1e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80c2 	beq.w	8004a12 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f006 fbb6 	bl	800b00a <USB_ReadDevInEPInterrupt>
 800489e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d057      	beq.n	800495a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	2201      	movs	r2, #1
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69f9      	ldr	r1, [r7, #28]
 80048c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ca:	4013      	ands	r3, r2
 80048cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048da:	461a      	mov	r2, r3
 80048dc:	2301      	movs	r3, #1
 80048de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d132      	bne.n	800494e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	334c      	adds	r3, #76	; 0x4c
 80048f8:	6819      	ldr	r1, [r3, #0]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4403      	add	r3, r0
 8004908:	3348      	adds	r3, #72	; 0x48
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4419      	add	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4403      	add	r3, r0
 800491c:	334c      	adds	r3, #76	; 0x4c
 800491e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	2b00      	cmp	r3, #0
 8004924:	d113      	bne.n	800494e <HAL_PCD_IRQHandler+0x3a2>
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3354      	adds	r3, #84	; 0x54
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d108      	bne.n	800494e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004946:	461a      	mov	r2, r3
 8004948:	2101      	movs	r1, #1
 800494a:	f006 fbbf 	bl	800b0cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f008 fd2e 	bl	800d3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	461a      	mov	r2, r3
 8004972:	2308      	movs	r3, #8
 8004974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	461a      	mov	r2, r3
 800498e:	2310      	movs	r3, #16
 8004990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	461a      	mov	r2, r3
 80049aa:	2340      	movs	r3, #64	; 0x40
 80049ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d023      	beq.n	8004a00 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80049b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ba:	6a38      	ldr	r0, [r7, #32]
 80049bc:	f005 fa92 	bl	8009ee4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	3338      	adds	r3, #56	; 0x38
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	78db      	ldrb	r3, [r3, #3]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d108      	bne.n	80049ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2200      	movs	r2, #0
 80049e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f008 fd7b 	bl	800d4e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	461a      	mov	r2, r3
 80049fc:	2302      	movs	r3, #2
 80049fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fd35 	bl	800547c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	3301      	adds	r3, #1
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f47f af2e 	bne.w	8004882 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f006 fa88 	bl	800af40 <USB_ReadInterrupts>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3a:	d122      	bne.n	8004a82 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d108      	bne.n	8004a6c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a62:	2100      	movs	r1, #0
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 ff41 	bl	80058ec <HAL_PCDEx_LPM_Callback>
 8004a6a:	e002      	b.n	8004a72 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f008 fd19 	bl	800d4a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695a      	ldr	r2, [r3, #20]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f006 fa5a 	bl	800af40 <USB_ReadInterrupts>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a96:	d112      	bne.n	8004abe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d102      	bne.n	8004aae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f008 fcd5 	bl	800d458 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695a      	ldr	r2, [r3, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f006 fa3c 	bl	800af40 <USB_ReadInterrupts>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad2:	d121      	bne.n	8004b18 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004ae2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d111      	bne.n	8004b12 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	f003 020f 	and.w	r2, r3, #15
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004b08:	2101      	movs	r1, #1
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 feee 	bl	80058ec <HAL_PCDEx_LPM_Callback>
 8004b10:	e002      	b.n	8004b18 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f008 fca0 	bl	800d458 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f006 fa0f 	bl	800af40 <USB_ReadInterrupts>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2c:	f040 80b7 	bne.w	8004c9e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2110      	movs	r1, #16
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f005 f9ca 	bl	8009ee4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b50:	2300      	movs	r3, #0
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b54:	e046      	b.n	8004be4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b62:	461a      	mov	r2, r3
 8004b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	461a      	mov	r2, r3
 8004b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b9c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bce:	0151      	lsls	r1, r2, #5
 8004bd0:	69fa      	ldr	r2, [r7, #28]
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bdc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	3301      	adds	r3, #1
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d3b3      	bcc.n	8004b56 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004c00:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c1a:	f043 030b 	orr.w	r3, r3, #11
 8004c1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c30:	f043 030b 	orr.w	r3, r3, #11
 8004c34:	6453      	str	r3, [r2, #68]	; 0x44
 8004c36:	e015      	b.n	8004c64 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	4619      	mov	r1, r3
 8004c48:	f242 032b 	movw	r3, #8235	; 0x202b
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c5e:	f043 030b 	orr.w	r3, r3, #11
 8004c62:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c76:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f006 fa1f 	bl	800b0cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f006 f94c 	bl	800af40 <USB_ReadInterrupts>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb2:	d124      	bne.n	8004cfe <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f006 f9e3 	bl	800b084 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f005 f98b 	bl	8009fde <USB_GetDevSpeed>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	461a      	mov	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681c      	ldr	r4, [r3, #0]
 8004cd4:	f001 fdbe 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 8004cd8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f004 fe90 	bl	8009a08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f008 fb8c 	bl	800d406 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f006 f91c 	bl	800af40 <USB_ReadInterrupts>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d10a      	bne.n	8004d28 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f008 fb69 	bl	800d3ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f002 0208 	and.w	r2, r2, #8
 8004d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f006 f907 	bl	800af40 <USB_ReadInterrupts>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d122      	bne.n	8004d82 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d48:	2301      	movs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4c:	e014      	b.n	8004d78 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d105      	bne.n	8004d72 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fb27 	bl	80053c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	3301      	adds	r3, #1
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3e5      	bcc.n	8004d4e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f006 f8da 	bl	800af40 <USB_ReadInterrupts>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d13b      	bne.n	8004e10 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d98:	2301      	movs	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9c:	e02b      	b.n	8004df6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	3340      	adds	r3, #64	; 0x40
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d115      	bne.n	8004df0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004dc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da12      	bge.n	8004df0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	333f      	adds	r3, #63	; 0x3f
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fae8 	bl	80053c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	3301      	adds	r3, #1
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d3ce      	bcc.n	8004d9e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f006 f893 	bl	800af40 <USB_ReadInterrupts>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e24:	d155      	bne.n	8004ed2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e26:	2301      	movs	r3, #1
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2a:	e045      	b.n	8004eb8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d12e      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da2b      	bge.n	8004eb2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004e66:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d121      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eae:	6053      	str	r3, [r2, #4]
            break;
 8004eb0:	e007      	b.n	8004ec2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d3b4      	bcc.n	8004e2c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f006 f832 	bl	800af40 <USB_ReadInterrupts>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d10a      	bne.n	8004efe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f008 fb0d 	bl	800d508 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f006 f81c 	bl	800af40 <USB_ReadInterrupts>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d115      	bne.n	8004f3e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f008 fafd 	bl	800d524 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6859      	ldr	r1, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	e000      	b.n	8004f3e <HAL_PCD_IRQHandler+0x992>
      return;
 8004f3c:	bf00      	nop
    }
  }
}
 8004f3e:	3734      	adds	r7, #52	; 0x34
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd90      	pop	{r4, r7, pc}

08004f44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_PCD_SetAddress+0x1a>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e013      	b.n	8004f86 <HAL_PCD_SetAddress+0x42>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f005 ff7a 	bl	800ae70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	4608      	mov	r0, r1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	70fb      	strb	r3, [r7, #3]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	803b      	strh	r3, [r7, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	da0f      	bge.n	8004fd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	f003 020f 	and.w	r2, r3, #15
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	3338      	adds	r3, #56	; 0x38
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3304      	adds	r3, #4
 8004fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	705a      	strb	r2, [r3, #1]
 8004fd2:	e00f      	b.n	8004ff4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	4613      	mov	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	3304      	adds	r3, #4
 8004fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005000:	883a      	ldrh	r2, [r7, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	78ba      	ldrb	r2, [r7, #2]
 800500a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800501e:	78bb      	ldrb	r3, [r7, #2]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d102      	bne.n	800502a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_PCD_EP_Open+0xaa>
 8005034:	2302      	movs	r3, #2
 8005036:	e00e      	b.n	8005056 <HAL_PCD_EP_Open+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68f9      	ldr	r1, [r7, #12]
 8005046:	4618      	mov	r0, r3
 8005048:	f004 ffee 	bl	800a028 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005054:	7afb      	ldrb	r3, [r7, #11]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800506a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800506e:	2b00      	cmp	r3, #0
 8005070:	da0f      	bge.n	8005092 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	f003 020f 	and.w	r2, r3, #15
 8005078:	4613      	mov	r3, r2
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	3338      	adds	r3, #56	; 0x38
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	3304      	adds	r3, #4
 8005088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	705a      	strb	r2, [r3, #1]
 8005090:	e00f      	b.n	80050b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	f003 020f 	and.w	r2, r3, #15
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	3304      	adds	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_PCD_EP_Close+0x6e>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e00e      	b.n	80050ea <HAL_PCD_EP_Close+0x8c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68f9      	ldr	r1, [r7, #12]
 80050da:	4618      	mov	r0, r3
 80050dc:	f005 f82c 	bl	800a138 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	460b      	mov	r3, r1
 8005100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005102:	7afb      	ldrb	r3, [r7, #11]
 8005104:	f003 020f 	and.w	r2, r3, #15
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	3304      	adds	r3, #4
 800511a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005134:	7afb      	ldrb	r3, [r7, #11]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	b2da      	uxtb	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d102      	bne.n	800514e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800514e:	7afb      	ldrb	r3, [r7, #11]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	6979      	ldr	r1, [r7, #20]
 8005166:	f005 fb13 	bl	800a790 <USB_EP0StartXfer>
 800516a:	e008      	b.n	800517e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	f005 f8b9 	bl	800a2f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	460b      	mov	r3, r1
 80051c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051c8:	7afb      	ldrb	r3, [r7, #11]
 80051ca:	f003 020f 	and.w	r2, r3, #15
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	3338      	adds	r3, #56	; 0x38
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	3304      	adds	r3, #4
 80051de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2200      	movs	r2, #0
 80051f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2201      	movs	r2, #1
 80051f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051f8:	7afb      	ldrb	r3, [r7, #11]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d102      	bne.n	8005212 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005212:	7afb      	ldrb	r3, [r7, #11]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	f005 fab1 	bl	800a790 <USB_EP0StartXfer>
 800522e:	e008      	b.n	8005242 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6979      	ldr	r1, [r7, #20]
 800523e:	f005 f857 	bl	800a2f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	f003 020f 	and.w	r2, r3, #15
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d901      	bls.n	800526a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e050      	b.n	800530c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800526a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800526e:	2b00      	cmp	r3, #0
 8005270:	da0f      	bge.n	8005292 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	3338      	adds	r3, #56	; 0x38
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	3304      	adds	r3, #4
 8005288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	705a      	strb	r2, [r3, #1]
 8005290:	e00d      	b.n	80052ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005292:	78fa      	ldrb	r2, [r7, #3]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	3304      	adds	r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_PCD_EP_SetStall+0x82>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e01e      	b.n	800530c <HAL_PCD_EP_SetStall+0xc0>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	4618      	mov	r0, r3
 80052de:	f005 fcf3 	bl	800acc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	b2d9      	uxtb	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052fc:	461a      	mov	r2, r3
 80052fe:	f005 fee5 	bl	800b0cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	f003 020f 	and.w	r2, r3, #15
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d901      	bls.n	8005332 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e042      	b.n	80053b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005336:	2b00      	cmp	r3, #0
 8005338:	da0f      	bge.n	800535a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	f003 020f 	and.w	r2, r3, #15
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	3338      	adds	r3, #56	; 0x38
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	3304      	adds	r3, #4
 8005350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	705a      	strb	r2, [r3, #1]
 8005358:	e00f      	b.n	800537a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	3304      	adds	r3, #4
 8005372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	b2da      	uxtb	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_PCD_EP_ClrStall+0x86>
 8005396:	2302      	movs	r3, #2
 8005398:	e00e      	b.n	80053b8 <HAL_PCD_EP_ClrStall+0xa4>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f005 fcfb 	bl	800ada4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80053cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	da0c      	bge.n	80053ee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	f003 020f 	and.w	r2, r3, #15
 80053da:	4613      	mov	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	3338      	adds	r3, #56	; 0x38
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e00c      	b.n	8005408 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	3304      	adds	r3, #4
 8005406:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	4618      	mov	r0, r3
 8005410:	f005 fb1a 	bl	800aa48 <USB_EPStopXfer>
 8005414:	4603      	mov	r3, r0
 8005416:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005418:	7afb      	ldrb	r3, [r7, #11]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	460b      	mov	r3, r1
 800542c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_PCD_EP_Flush+0x1a>
 8005438:	2302      	movs	r3, #2
 800543a:	e01b      	b.n	8005474 <HAL_PCD_EP_Flush+0x52>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8005444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005448:	2b00      	cmp	r3, #0
 800544a:	da09      	bge.n	8005460 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f004 fd43 	bl	8009ee4 <USB_FlushTxFifo>
 800545e:	e004      	b.n	800546a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f004 fd71 	bl	8009f4c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	; 0x28
 8005480:	af02      	add	r7, sp, #8
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	3338      	adds	r3, #56	; 0x38
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	3304      	adds	r3, #4
 80054a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d901      	bls.n	80054b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e06c      	b.n	800558e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d902      	bls.n	80054d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	3303      	adds	r3, #3
 80054d4:	089b      	lsrs	r3, r3, #2
 80054d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054d8:	e02b      	b.n	8005532 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d902      	bls.n	80054f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3303      	adds	r3, #3
 80054fa:	089b      	lsrs	r3, r3, #2
 80054fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6919      	ldr	r1, [r3, #16]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	b2da      	uxtb	r2, r3
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800550e:	b2db      	uxtb	r3, r3
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	4603      	mov	r3, r0
 8005514:	6978      	ldr	r0, [r7, #20]
 8005516:	f005 fb41 	bl	800ab9c <USB_WritePacket>

    ep->xfer_buff  += len;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	441a      	add	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	b29b      	uxth	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	429a      	cmp	r2, r3
 8005546:	d809      	bhi.n	800555c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1a      	ldr	r2, [r3, #32]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005550:	429a      	cmp	r2, r3
 8005552:	d203      	bcs.n	800555c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1be      	bne.n	80054da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	429a      	cmp	r2, r3
 8005566:	d811      	bhi.n	800558c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	2201      	movs	r2, #1
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	43db      	mvns	r3, r3
 8005582:	6939      	ldr	r1, [r7, #16]
 8005584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005588:	4013      	ands	r3, r2
 800558a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	333c      	adds	r3, #60	; 0x3c
 80055b0:	3304      	adds	r3, #4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d17b      	bne.n	80056c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d015      	beq.n	8005604 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4a61      	ldr	r2, [pc, #388]	; (8005760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	f240 80b9 	bls.w	8005754 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80b3 	beq.w	8005754 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	461a      	mov	r2, r3
 80055fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005600:	6093      	str	r3, [r2, #8]
 8005602:	e0a7      	b.n	8005754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	461a      	mov	r2, r3
 800561c:	2320      	movs	r3, #32
 800561e:	6093      	str	r3, [r2, #8]
 8005620:	e098      	b.n	8005754 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	f040 8093 	bne.w	8005754 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4a4b      	ldr	r2, [pc, #300]	; (8005760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d90f      	bls.n	8005656 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564c:	461a      	mov	r2, r3
 800564e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005652:	6093      	str	r3, [r2, #8]
 8005654:	e07e      	b.n	8005754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4413      	add	r3, r2
 8005668:	3304      	adds	r3, #4
 800566a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	0159      	lsls	r1, r3, #5
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	440b      	add	r3, r1
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005682:	1ad2      	subs	r2, r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d114      	bne.n	80056b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056a0:	461a      	mov	r2, r3
 80056a2:	2101      	movs	r1, #1
 80056a4:	f005 fd12 	bl	800b0cc <USB_EP0_OutStart>
 80056a8:	e006      	b.n	80056b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	441a      	add	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f007 fe5e 	bl	800d380 <HAL_PCD_DataOutStageCallback>
 80056c4:	e046      	b.n	8005754 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	4a26      	ldr	r2, [pc, #152]	; (8005764 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d124      	bne.n	8005718 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	461a      	mov	r2, r3
 80056e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ea:	6093      	str	r3, [r2, #8]
 80056ec:	e032      	b.n	8005754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	461a      	mov	r2, r3
 8005706:	2320      	movs	r3, #32
 8005708:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f007 fe35 	bl	800d380 <HAL_PCD_DataOutStageCallback>
 8005716:	e01d      	b.n	8005754 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d114      	bne.n	8005748 <PCD_EP_OutXfrComplete_int+0x1b0>
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d108      	bne.n	8005748 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005740:	461a      	mov	r2, r3
 8005742:	2100      	movs	r1, #0
 8005744:	f005 fcc2 	bl	800b0cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f007 fe16 	bl	800d380 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	4f54300a 	.word	0x4f54300a
 8005764:	4f54310a 	.word	0x4f54310a

08005768 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	333c      	adds	r3, #60	; 0x3c
 8005780:	3304      	adds	r3, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a15      	ldr	r2, [pc, #84]	; (80057f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d90e      	bls.n	80057bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f007 fdcd 	bl	800d35c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d90c      	bls.n	80057e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d108      	bne.n	80057e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057dc:	461a      	mov	r2, r3
 80057de:	2101      	movs	r1, #1
 80057e0:	f005 fc74 	bl	800b0cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	4f54300a 	.word	0x4f54300a

080057f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
 8005800:	4613      	mov	r3, r2
 8005802:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d107      	bne.n	8005822 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005812:	883b      	ldrh	r3, [r7, #0]
 8005814:	0419      	lsls	r1, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	430a      	orrs	r2, r1
 800581e:	629a      	str	r2, [r3, #40]	; 0x28
 8005820:	e028      	b.n	8005874 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	4413      	add	r3, r2
 800582e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e00d      	b.n	8005852 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	3340      	adds	r3, #64	; 0x40
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4413      	add	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	3301      	adds	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	3b01      	subs	r3, #1
 8005858:	429a      	cmp	r2, r3
 800585a:	d3ec      	bcc.n	8005836 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800585c:	883b      	ldrh	r3, [r7, #0]
 800585e:	0418      	lsls	r0, r3, #16
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	3b01      	subs	r3, #1
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	4302      	orrs	r2, r0
 800586c:	3340      	adds	r3, #64	; 0x40
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	887a      	ldrh	r2, [r7, #2]
 8005894:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	10000003 	.word	0x10000003

080058ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <HAL_PWREx_ConfigSupply+0x70>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d00a      	beq.n	800592e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <HAL_PWREx_ConfigSupply+0x70>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	d001      	beq.n	800592a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e01f      	b.n	800596a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	e01d      	b.n	800596a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800592e:	4b11      	ldr	r3, [pc, #68]	; (8005974 <HAL_PWREx_ConfigSupply+0x70>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f023 0207 	bic.w	r2, r3, #7
 8005936:	490f      	ldr	r1, [pc, #60]	; (8005974 <HAL_PWREx_ConfigSupply+0x70>)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4313      	orrs	r3, r2
 800593c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800593e:	f7fb fa59 	bl	8000df4 <HAL_GetTick>
 8005942:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005944:	e009      	b.n	800595a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005946:	f7fb fa55 	bl	8000df4 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005954:	d901      	bls.n	800595a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e007      	b.n	800596a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <HAL_PWREx_ConfigSupply+0x70>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005966:	d1ee      	bne.n	8005946 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	58024800 	.word	0x58024800

08005978 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a04      	ldr	r2, [pc, #16]	; (8005994 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005986:	60d3      	str	r3, [r2, #12]
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	58024800 	.word	0x58024800

08005998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08c      	sub	sp, #48	; 0x30
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f000 bc1d 	b.w	80061e6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8087 	beq.w	8005ac8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ba:	4b99      	ldr	r3, [pc, #612]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059c4:	4b96      	ldr	r3, [pc, #600]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d007      	beq.n	80059e0 <HAL_RCC_OscConfig+0x48>
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	2b18      	cmp	r3, #24
 80059d4:	d110      	bne.n	80059f8 <HAL_RCC_OscConfig+0x60>
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d10b      	bne.n	80059f8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e0:	4b8f      	ldr	r3, [pc, #572]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d06c      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x12e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d168      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e3f6      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d106      	bne.n	8005a10 <HAL_RCC_OscConfig+0x78>
 8005a02:	4b87      	ldr	r3, [pc, #540]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a86      	ldr	r2, [pc, #536]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e02e      	b.n	8005a6e <HAL_RCC_OscConfig+0xd6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10c      	bne.n	8005a32 <HAL_RCC_OscConfig+0x9a>
 8005a18:	4b81      	ldr	r3, [pc, #516]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a80      	ldr	r2, [pc, #512]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	4b7e      	ldr	r3, [pc, #504]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a7d      	ldr	r2, [pc, #500]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	e01d      	b.n	8005a6e <HAL_RCC_OscConfig+0xd6>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a3a:	d10c      	bne.n	8005a56 <HAL_RCC_OscConfig+0xbe>
 8005a3c:	4b78      	ldr	r3, [pc, #480]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a77      	ldr	r2, [pc, #476]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	4b75      	ldr	r3, [pc, #468]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a74      	ldr	r2, [pc, #464]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	e00b      	b.n	8005a6e <HAL_RCC_OscConfig+0xd6>
 8005a56:	4b72      	ldr	r3, [pc, #456]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a71      	ldr	r2, [pc, #452]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b6f      	ldr	r3, [pc, #444]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a6e      	ldr	r2, [pc, #440]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d013      	beq.n	8005a9e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7fb f9bd 	bl	8000df4 <HAL_GetTick>
 8005a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a7e:	f7fb f9b9 	bl	8000df4 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b64      	cmp	r3, #100	; 0x64
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e3aa      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a90:	4b63      	ldr	r3, [pc, #396]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCC_OscConfig+0xe6>
 8005a9c:	e014      	b.n	8005ac8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9e:	f7fb f9a9 	bl	8000df4 <HAL_GetTick>
 8005aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa6:	f7fb f9a5 	bl	8000df4 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b64      	cmp	r3, #100	; 0x64
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e396      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ab8:	4b59      	ldr	r3, [pc, #356]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f0      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x10e>
 8005ac4:	e000      	b.n	8005ac8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80cb 	beq.w	8005c6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad6:	4b52      	ldr	r3, [pc, #328]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ade:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ae0:	4b4f      	ldr	r3, [pc, #316]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <HAL_RCC_OscConfig+0x164>
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	2b18      	cmp	r3, #24
 8005af0:	d156      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x208>
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d151      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005afc:	4b48      	ldr	r3, [pc, #288]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_OscConfig+0x17c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e368      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b14:	4b42      	ldr	r3, [pc, #264]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f023 0219 	bic.w	r2, r3, #25
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	493f      	ldr	r1, [pc, #252]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b26:	f7fb f965 	bl	8000df4 <HAL_GetTick>
 8005b2a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b2e:	f7fb f961 	bl	8000df4 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e352      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b40:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4c:	f7fb f982 	bl	8000e54 <HAL_GetREVID>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d817      	bhi.n	8005b8a <HAL_RCC_OscConfig+0x1f2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b40      	cmp	r3, #64	; 0x40
 8005b60:	d108      	bne.n	8005b74 <HAL_RCC_OscConfig+0x1dc>
 8005b62:	4b2f      	ldr	r3, [pc, #188]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b6a:	4a2d      	ldr	r2, [pc, #180]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b72:	e07b      	b.n	8005c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b74:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	4927      	ldr	r1, [pc, #156]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b88:	e070      	b.n	8005c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8a:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	061b      	lsls	r3, r3, #24
 8005b98:	4921      	ldr	r1, [pc, #132]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b9e:	e065      	b.n	8005c6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d048      	beq.n	8005c3a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f023 0219 	bic.w	r2, r3, #25
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	491a      	ldr	r1, [pc, #104]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bba:	f7fb f91b 	bl	8000df4 <HAL_GetTick>
 8005bbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc2:	f7fb f917 	bl	8000df4 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e308      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bd4:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0f0      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be0:	f7fb f938 	bl	8000e54 <HAL_GetREVID>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d81a      	bhi.n	8005c24 <HAL_RCC_OscConfig+0x28c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d108      	bne.n	8005c08 <HAL_RCC_OscConfig+0x270>
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005bfe:	4a08      	ldr	r2, [pc, #32]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c04:	6053      	str	r3, [r2, #4]
 8005c06:	e031      	b.n	8005c6c <HAL_RCC_OscConfig+0x2d4>
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	031b      	lsls	r3, r3, #12
 8005c16:	4902      	ldr	r1, [pc, #8]	; (8005c20 <HAL_RCC_OscConfig+0x288>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	604b      	str	r3, [r1, #4]
 8005c1c:	e026      	b.n	8005c6c <HAL_RCC_OscConfig+0x2d4>
 8005c1e:	bf00      	nop
 8005c20:	58024400 	.word	0x58024400
 8005c24:	4b9a      	ldr	r3, [pc, #616]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	4997      	ldr	r1, [pc, #604]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	604b      	str	r3, [r1, #4]
 8005c38:	e018      	b.n	8005c6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c3a:	4b95      	ldr	r3, [pc, #596]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a94      	ldr	r2, [pc, #592]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c46:	f7fb f8d5 	bl	8000df4 <HAL_GetTick>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c4e:	f7fb f8d1 	bl	8000df4 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e2c2      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c60:	4b8b      	ldr	r3, [pc, #556]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f0      	bne.n	8005c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80a9 	beq.w	8005dcc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c7a:	4b85      	ldr	r3, [pc, #532]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c84:	4b82      	ldr	r3, [pc, #520]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d007      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x308>
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b18      	cmp	r3, #24
 8005c94:	d13a      	bne.n	8005d0c <HAL_RCC_OscConfig+0x374>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d135      	bne.n	8005d0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ca0:	4b7b      	ldr	r3, [pc, #492]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x320>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d001      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e296      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cb8:	f7fb f8cc 	bl	8000e54 <HAL_GetREVID>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d817      	bhi.n	8005cf6 <HAL_RCC_OscConfig+0x35e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d108      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x348>
 8005cce:	4b70      	ldr	r3, [pc, #448]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005cd6:	4a6e      	ldr	r2, [pc, #440]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cdc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cde:	e075      	b.n	8005dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ce0:	4b6b      	ldr	r3, [pc, #428]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	069b      	lsls	r3, r3, #26
 8005cee:	4968      	ldr	r1, [pc, #416]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cf4:	e06a      	b.n	8005dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cf6:	4b66      	ldr	r3, [pc, #408]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	061b      	lsls	r3, r3, #24
 8005d04:	4962      	ldr	r1, [pc, #392]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d0a:	e05f      	b.n	8005dcc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d042      	beq.n	8005d9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d14:	4b5e      	ldr	r3, [pc, #376]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a5d      	ldr	r2, [pc, #372]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d20:	f7fb f868 	bl	8000df4 <HAL_GetTick>
 8005d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d28:	f7fb f864 	bl	8000df4 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e255      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d3a:	4b55      	ldr	r3, [pc, #340]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d46:	f7fb f885 	bl	8000e54 <HAL_GetREVID>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d817      	bhi.n	8005d84 <HAL_RCC_OscConfig+0x3ec>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d108      	bne.n	8005d6e <HAL_RCC_OscConfig+0x3d6>
 8005d5c:	4b4c      	ldr	r3, [pc, #304]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d64:	4a4a      	ldr	r2, [pc, #296]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d6a:	6053      	str	r3, [r2, #4]
 8005d6c:	e02e      	b.n	8005dcc <HAL_RCC_OscConfig+0x434>
 8005d6e:	4b48      	ldr	r3, [pc, #288]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	069b      	lsls	r3, r3, #26
 8005d7c:	4944      	ldr	r1, [pc, #272]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	604b      	str	r3, [r1, #4]
 8005d82:	e023      	b.n	8005dcc <HAL_RCC_OscConfig+0x434>
 8005d84:	4b42      	ldr	r3, [pc, #264]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	061b      	lsls	r3, r3, #24
 8005d92:	493f      	ldr	r1, [pc, #252]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60cb      	str	r3, [r1, #12]
 8005d98:	e018      	b.n	8005dcc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d9a:	4b3d      	ldr	r3, [pc, #244]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a3c      	ldr	r2, [pc, #240]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da6:	f7fb f825 	bl	8000df4 <HAL_GetTick>
 8005daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005dae:	f7fb f821 	bl	8000df4 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e212      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dc0:	4b33      	ldr	r3, [pc, #204]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1f0      	bne.n	8005dae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d036      	beq.n	8005e46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d019      	beq.n	8005e14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005de0:	4b2b      	ldr	r3, [pc, #172]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de4:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dec:	f7fb f802 	bl	8000df4 <HAL_GetTick>
 8005df0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005df4:	f7fa fffe 	bl	8000df4 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e1ef      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e06:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0f0      	beq.n	8005df4 <HAL_RCC_OscConfig+0x45c>
 8005e12:	e018      	b.n	8005e46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e14:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e18:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e20:	f7fa ffe8 	bl	8000df4 <HAL_GetTick>
 8005e24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e28:	f7fa ffe4 	bl	8000df4 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e1d5      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e3a:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d039      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01c      	beq.n	8005e94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a0c      	ldr	r2, [pc, #48]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e66:	f7fa ffc5 	bl	8000df4 <HAL_GetTick>
 8005e6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e6e:	f7fa ffc1 	bl	8000df4 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e1b2      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e80:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <HAL_RCC_OscConfig+0x4f8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x4d6>
 8005e8c:	e01b      	b.n	8005ec6 <HAL_RCC_OscConfig+0x52e>
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e94:	4b9b      	ldr	r3, [pc, #620]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a9a      	ldr	r2, [pc, #616]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ea0:	f7fa ffa8 	bl	8000df4 <HAL_GetTick>
 8005ea4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ea8:	f7fa ffa4 	bl	8000df4 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e195      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005eba:	4b92      	ldr	r3, [pc, #584]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f0      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8081 	beq.w	8005fd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ed4:	4b8c      	ldr	r3, [pc, #560]	; (8006108 <HAL_RCC_OscConfig+0x770>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a8b      	ldr	r2, [pc, #556]	; (8006108 <HAL_RCC_OscConfig+0x770>)
 8005eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ee0:	f7fa ff88 	bl	8000df4 <HAL_GetTick>
 8005ee4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ee8:	f7fa ff84 	bl	8000df4 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	; 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e175      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005efa:	4b83      	ldr	r3, [pc, #524]	; (8006108 <HAL_RCC_OscConfig+0x770>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d106      	bne.n	8005f1c <HAL_RCC_OscConfig+0x584>
 8005f0e:	4b7d      	ldr	r3, [pc, #500]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	4a7c      	ldr	r2, [pc, #496]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1a:	e02d      	b.n	8005f78 <HAL_RCC_OscConfig+0x5e0>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10c      	bne.n	8005f3e <HAL_RCC_OscConfig+0x5a6>
 8005f24:	4b77      	ldr	r3, [pc, #476]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	4a76      	ldr	r2, [pc, #472]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f2a:	f023 0301 	bic.w	r3, r3, #1
 8005f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f30:	4b74      	ldr	r3, [pc, #464]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	4a73      	ldr	r2, [pc, #460]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f36:	f023 0304 	bic.w	r3, r3, #4
 8005f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3c:	e01c      	b.n	8005f78 <HAL_RCC_OscConfig+0x5e0>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5c8>
 8005f46:	4b6f      	ldr	r3, [pc, #444]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	4a6e      	ldr	r2, [pc, #440]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f4c:	f043 0304 	orr.w	r3, r3, #4
 8005f50:	6713      	str	r3, [r2, #112]	; 0x70
 8005f52:	4b6c      	ldr	r3, [pc, #432]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	4a6b      	ldr	r2, [pc, #428]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f5e:	e00b      	b.n	8005f78 <HAL_RCC_OscConfig+0x5e0>
 8005f60:	4b68      	ldr	r3, [pc, #416]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f64:	4a67      	ldr	r2, [pc, #412]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6c:	4b65      	ldr	r3, [pc, #404]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a64      	ldr	r2, [pc, #400]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005f72:	f023 0304 	bic.w	r3, r3, #4
 8005f76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d015      	beq.n	8005fac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f80:	f7fa ff38 	bl	8000df4 <HAL_GetTick>
 8005f84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f86:	e00a      	b.n	8005f9e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f88:	f7fa ff34 	bl	8000df4 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e123      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f9e:	4b59      	ldr	r3, [pc, #356]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0ee      	beq.n	8005f88 <HAL_RCC_OscConfig+0x5f0>
 8005faa:	e014      	b.n	8005fd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fac:	f7fa ff22 	bl	8000df4 <HAL_GetTick>
 8005fb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fb2:	e00a      	b.n	8005fca <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fb4:	f7fa ff1e 	bl	8000df4 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e10d      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fca:	4b4e      	ldr	r3, [pc, #312]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1ee      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8102 	beq.w	80061e4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fe0:	4b48      	ldr	r3, [pc, #288]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe8:	2b18      	cmp	r3, #24
 8005fea:	f000 80bd 	beq.w	8006168 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	f040 809e 	bne.w	8006134 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff8:	4b42      	ldr	r3, [pc, #264]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a41      	ldr	r2, [pc, #260]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8005ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fa fef6 	bl	8000df4 <HAL_GetTick>
 8006008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800600c:	f7fa fef2 	bl	8000df4 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e0e3      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800601e:	4b39      	ldr	r3, [pc, #228]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800602a:	4b36      	ldr	r3, [pc, #216]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 800602c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800602e:	4b37      	ldr	r3, [pc, #220]	; (800610c <HAL_RCC_OscConfig+0x774>)
 8006030:	4013      	ands	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800603a:	0112      	lsls	r2, r2, #4
 800603c:	430a      	orrs	r2, r1
 800603e:	4931      	ldr	r1, [pc, #196]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8006040:	4313      	orrs	r3, r2
 8006042:	628b      	str	r3, [r1, #40]	; 0x28
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	3b01      	subs	r3, #1
 800604a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	3b01      	subs	r3, #1
 8006054:	025b      	lsls	r3, r3, #9
 8006056:	b29b      	uxth	r3, r3
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	3b01      	subs	r3, #1
 8006060:	041b      	lsls	r3, r3, #16
 8006062:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606c:	3b01      	subs	r3, #1
 800606e:	061b      	lsls	r3, r3, #24
 8006070:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006074:	4923      	ldr	r1, [pc, #140]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8006076:	4313      	orrs	r3, r2
 8006078:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800607a:	4b22      	ldr	r3, [pc, #136]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	4a21      	ldr	r2, [pc, #132]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006086:	4b1f      	ldr	r3, [pc, #124]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8006088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608a:	4b21      	ldr	r3, [pc, #132]	; (8006110 <HAL_RCC_OscConfig+0x778>)
 800608c:	4013      	ands	r3, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006092:	00d2      	lsls	r2, r2, #3
 8006094:	491b      	ldr	r1, [pc, #108]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 8006096:	4313      	orrs	r3, r2
 8006098:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800609a:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	f023 020c 	bic.w	r2, r3, #12
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	4917      	ldr	r1, [pc, #92]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80060ac:	4b15      	ldr	r3, [pc, #84]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	f023 0202 	bic.w	r2, r3, #2
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b8:	4912      	ldr	r1, [pc, #72]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060be:	4b11      	ldr	r3, [pc, #68]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	4a10      	ldr	r2, [pc, #64]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ca:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	4a0d      	ldr	r2, [pc, #52]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	4a07      	ldr	r2, [pc, #28]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a04      	ldr	r2, [pc, #16]	; (8006104 <HAL_RCC_OscConfig+0x76c>)
 80060f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fa:	f7fa fe7b 	bl	8000df4 <HAL_GetTick>
 80060fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006100:	e011      	b.n	8006126 <HAL_RCC_OscConfig+0x78e>
 8006102:	bf00      	nop
 8006104:	58024400 	.word	0x58024400
 8006108:	58024800 	.word	0x58024800
 800610c:	fffffc0c 	.word	0xfffffc0c
 8006110:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006114:	f7fa fe6e 	bl	8000df4 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e05f      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006126:	4b32      	ldr	r3, [pc, #200]	; (80061f0 <HAL_RCC_OscConfig+0x858>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0f0      	beq.n	8006114 <HAL_RCC_OscConfig+0x77c>
 8006132:	e057      	b.n	80061e4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006134:	4b2e      	ldr	r3, [pc, #184]	; (80061f0 <HAL_RCC_OscConfig+0x858>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2d      	ldr	r2, [pc, #180]	; (80061f0 <HAL_RCC_OscConfig+0x858>)
 800613a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800613e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fa fe58 	bl	8000df4 <HAL_GetTick>
 8006144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006148:	f7fa fe54 	bl	8000df4 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e045      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800615a:	4b25      	ldr	r3, [pc, #148]	; (80061f0 <HAL_RCC_OscConfig+0x858>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x7b0>
 8006166:	e03d      	b.n	80061e4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006168:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <HAL_RCC_OscConfig+0x858>)
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800616e:	4b20      	ldr	r3, [pc, #128]	; (80061f0 <HAL_RCC_OscConfig+0x858>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b01      	cmp	r3, #1
 800617a:	d031      	beq.n	80061e0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f003 0203 	and.w	r2, r3, #3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006186:	429a      	cmp	r2, r3
 8006188:	d12a      	bne.n	80061e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006196:	429a      	cmp	r2, r3
 8006198:	d122      	bne.n	80061e0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d11a      	bne.n	80061e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	0a5b      	lsrs	r3, r3, #9
 80061ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d111      	bne.n	80061e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	0c1b      	lsrs	r3, r3, #16
 80061c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d108      	bne.n	80061e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	0e1b      	lsrs	r3, r3, #24
 80061d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061da:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061dc:	429a      	cmp	r2, r3
 80061de:	d001      	beq.n	80061e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3730      	adds	r7, #48	; 0x30
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	58024400 	.word	0x58024400

080061f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e19c      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006208:	4b8a      	ldr	r3, [pc, #552]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d910      	bls.n	8006238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006216:	4b87      	ldr	r3, [pc, #540]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 020f 	bic.w	r2, r3, #15
 800621e:	4985      	ldr	r1, [pc, #532]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	4313      	orrs	r3, r2
 8006224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006226:	4b83      	ldr	r3, [pc, #524]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d001      	beq.n	8006238 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e184      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	4b7b      	ldr	r3, [pc, #492]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006250:	429a      	cmp	r2, r3
 8006252:	d908      	bls.n	8006266 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006254:	4b78      	ldr	r3, [pc, #480]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	4975      	ldr	r1, [pc, #468]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006262:	4313      	orrs	r3, r2
 8006264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d010      	beq.n	8006294 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695a      	ldr	r2, [r3, #20]
 8006276:	4b70      	ldr	r3, [pc, #448]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800627e:	429a      	cmp	r2, r3
 8006280:	d908      	bls.n	8006294 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006282:	4b6d      	ldr	r3, [pc, #436]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	496a      	ldr	r1, [pc, #424]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006290:	4313      	orrs	r3, r2
 8006292:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	d010      	beq.n	80062c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	4b64      	ldr	r3, [pc, #400]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d908      	bls.n	80062c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062b0:	4b61      	ldr	r3, [pc, #388]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	495e      	ldr	r1, [pc, #376]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d010      	beq.n	80062f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	4b59      	ldr	r3, [pc, #356]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062da:	429a      	cmp	r2, r3
 80062dc:	d908      	bls.n	80062f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062de:	4b56      	ldr	r3, [pc, #344]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4953      	ldr	r1, [pc, #332]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d010      	beq.n	800631e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	4b4d      	ldr	r3, [pc, #308]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	429a      	cmp	r2, r3
 800630a:	d908      	bls.n	800631e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800630c:	4b4a      	ldr	r3, [pc, #296]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f023 020f 	bic.w	r2, r3, #15
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4947      	ldr	r1, [pc, #284]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800631a:	4313      	orrs	r3, r2
 800631c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d055      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800632a:	4b43      	ldr	r3, [pc, #268]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	4940      	ldr	r1, [pc, #256]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006338:	4313      	orrs	r3, r2
 800633a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d107      	bne.n	8006354 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006344:	4b3c      	ldr	r3, [pc, #240]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d121      	bne.n	8006394 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0f6      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b03      	cmp	r3, #3
 800635a:	d107      	bne.n	800636c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800635c:	4b36      	ldr	r3, [pc, #216]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d115      	bne.n	8006394 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e0ea      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006374:	4b30      	ldr	r3, [pc, #192]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d109      	bne.n	8006394 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0de      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006384:	4b2c      	ldr	r3, [pc, #176]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0d6      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006394:	4b28      	ldr	r3, [pc, #160]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f023 0207 	bic.w	r2, r3, #7
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4925      	ldr	r1, [pc, #148]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a6:	f7fa fd25 	bl	8000df4 <HAL_GetTick>
 80063aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ac:	e00a      	b.n	80063c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ae:	f7fa fd21 	bl	8000df4 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063bc:	4293      	cmp	r3, r2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e0be      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c4:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d1eb      	bne.n	80063ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d010      	beq.n	8006404 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d208      	bcs.n	8006404 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f2:	4b11      	ldr	r3, [pc, #68]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f023 020f 	bic.w	r2, r3, #15
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	490e      	ldr	r1, [pc, #56]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006400:	4313      	orrs	r3, r2
 8006402:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 030f 	and.w	r3, r3, #15
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d214      	bcs.n	800643c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b08      	ldr	r3, [pc, #32]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f023 020f 	bic.w	r2, r3, #15
 800641a:	4906      	ldr	r1, [pc, #24]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	4313      	orrs	r3, r2
 8006420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006422:	4b04      	ldr	r3, [pc, #16]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d005      	beq.n	800643c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e086      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
 8006434:	52002000 	.word	0x52002000
 8006438:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d010      	beq.n	800646a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	4b3f      	ldr	r3, [pc, #252]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006454:	429a      	cmp	r2, r3
 8006456:	d208      	bcs.n	800646a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006458:	4b3c      	ldr	r3, [pc, #240]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	4939      	ldr	r1, [pc, #228]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 8006466:	4313      	orrs	r3, r2
 8006468:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d010      	beq.n	8006498 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	4b34      	ldr	r3, [pc, #208]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006482:	429a      	cmp	r2, r3
 8006484:	d208      	bcs.n	8006498 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006486:	4b31      	ldr	r3, [pc, #196]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	492e      	ldr	r1, [pc, #184]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 8006494:	4313      	orrs	r3, r2
 8006496:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d010      	beq.n	80064c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	4b28      	ldr	r3, [pc, #160]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d208      	bcs.n	80064c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064b4:	4b25      	ldr	r3, [pc, #148]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	4922      	ldr	r1, [pc, #136]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d010      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	4b1d      	ldr	r3, [pc, #116]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064de:	429a      	cmp	r2, r3
 80064e0:	d208      	bcs.n	80064f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80064e2:	4b1a      	ldr	r3, [pc, #104]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	4917      	ldr	r1, [pc, #92]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064f4:	f000 f834 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 80064f8:	4602      	mov	r2, r0
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	4912      	ldr	r1, [pc, #72]	; (8006550 <HAL_RCC_ClockConfig+0x35c>)
 8006506:	5ccb      	ldrb	r3, [r1, r3]
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	fa22 f303 	lsr.w	r3, r2, r3
 8006510:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006512:	4b0e      	ldr	r3, [pc, #56]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	4a0d      	ldr	r2, [pc, #52]	; (8006550 <HAL_RCC_ClockConfig+0x35c>)
 800651c:	5cd3      	ldrb	r3, [r2, r3]
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	fa22 f303 	lsr.w	r3, r2, r3
 8006528:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <HAL_RCC_ClockConfig+0x360>)
 800652a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800652c:	4a0a      	ldr	r2, [pc, #40]	; (8006558 <HAL_RCC_ClockConfig+0x364>)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <HAL_RCC_ClockConfig+0x368>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7fa fc12 	bl	8000d60 <HAL_InitTick>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	58024400 	.word	0x58024400
 8006550:	0800e9cc 	.word	0x0800e9cc
 8006554:	24000004 	.word	0x24000004
 8006558:	24000000 	.word	0x24000000
 800655c:	24000008 	.word	0x24000008

08006560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	b089      	sub	sp, #36	; 0x24
 8006564:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006566:	4bb3      	ldr	r3, [pc, #716]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800656e:	2b18      	cmp	r3, #24
 8006570:	f200 8155 	bhi.w	800681e <HAL_RCC_GetSysClockFreq+0x2be>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065e1 	.word	0x080065e1
 8006580:	0800681f 	.word	0x0800681f
 8006584:	0800681f 	.word	0x0800681f
 8006588:	0800681f 	.word	0x0800681f
 800658c:	0800681f 	.word	0x0800681f
 8006590:	0800681f 	.word	0x0800681f
 8006594:	0800681f 	.word	0x0800681f
 8006598:	0800681f 	.word	0x0800681f
 800659c:	08006607 	.word	0x08006607
 80065a0:	0800681f 	.word	0x0800681f
 80065a4:	0800681f 	.word	0x0800681f
 80065a8:	0800681f 	.word	0x0800681f
 80065ac:	0800681f 	.word	0x0800681f
 80065b0:	0800681f 	.word	0x0800681f
 80065b4:	0800681f 	.word	0x0800681f
 80065b8:	0800681f 	.word	0x0800681f
 80065bc:	0800660d 	.word	0x0800660d
 80065c0:	0800681f 	.word	0x0800681f
 80065c4:	0800681f 	.word	0x0800681f
 80065c8:	0800681f 	.word	0x0800681f
 80065cc:	0800681f 	.word	0x0800681f
 80065d0:	0800681f 	.word	0x0800681f
 80065d4:	0800681f 	.word	0x0800681f
 80065d8:	0800681f 	.word	0x0800681f
 80065dc:	08006613 	.word	0x08006613
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e0:	4b94      	ldr	r3, [pc, #592]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065ec:	4b91      	ldr	r3, [pc, #580]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	08db      	lsrs	r3, r3, #3
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	4a90      	ldr	r2, [pc, #576]	; (8006838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80065fe:	e111      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006600:	4b8d      	ldr	r3, [pc, #564]	; (8006838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006602:	61bb      	str	r3, [r7, #24]
    break;
 8006604:	e10e      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006606:	4b8d      	ldr	r3, [pc, #564]	; (800683c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006608:	61bb      	str	r3, [r7, #24]
    break;
 800660a:	e10b      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800660c:	4b8c      	ldr	r3, [pc, #560]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800660e:	61bb      	str	r3, [r7, #24]
    break;
 8006610:	e108      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006612:	4b88      	ldr	r3, [pc, #544]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800661c:	4b85      	ldr	r3, [pc, #532]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	091b      	lsrs	r3, r3, #4
 8006622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006626:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006628:	4b82      	ldr	r3, [pc, #520]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006632:	4b80      	ldr	r3, [pc, #512]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006636:	08db      	lsrs	r3, r3, #3
 8006638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80e1 	beq.w	8006818 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b02      	cmp	r3, #2
 800665a:	f000 8083 	beq.w	8006764 <HAL_RCC_GetSysClockFreq+0x204>
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b02      	cmp	r3, #2
 8006662:	f200 80a1 	bhi.w	80067a8 <HAL_RCC_GetSysClockFreq+0x248>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_RCC_GetSysClockFreq+0x114>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d056      	beq.n	8006720 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006672:	e099      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006674:	4b6f      	ldr	r3, [pc, #444]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d02d      	beq.n	80066dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006680:	4b6c      	ldr	r3, [pc, #432]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	08db      	lsrs	r3, r3, #3
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	4a6b      	ldr	r2, [pc, #428]	; (8006838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
 8006690:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066aa:	4b62      	ldr	r3, [pc, #392]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80066be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80066da:	e087      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006848 <HAL_RCC_GetSysClockFreq+0x2e8>
 80066ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ee:	4b51      	ldr	r3, [pc, #324]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006702:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800671e:	e065      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800684c <HAL_RCC_GetSysClockFreq+0x2ec>
 800672e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006732:	4b40      	ldr	r3, [pc, #256]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	ed97 6a02 	vldr	s12, [r7, #8]
 8006746:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006762:	e043      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006776:	4b2f      	ldr	r3, [pc, #188]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006786:	ed97 6a02 	vldr	s12, [r7, #8]
 800678a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 800678e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800679a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067a6:	e021      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800684c <HAL_RCC_GetSysClockFreq+0x2ec>
 80067b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ba:	4b1e      	ldr	r3, [pc, #120]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80067ec:	4b11      	ldr	r3, [pc, #68]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	0a5b      	lsrs	r3, r3, #9
 80067f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f6:	3301      	adds	r3, #1
 80067f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	ee07 3a90 	vmov	s15, r3
 8006800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006804:	edd7 6a07 	vldr	s13, [r7, #28]
 8006808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800680c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006810:	ee17 3a90 	vmov	r3, s15
 8006814:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006816:	e005      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
    break;
 800681c:	e002      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800681e:	4b07      	ldr	r3, [pc, #28]	; (800683c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006820:	61bb      	str	r3, [r7, #24]
    break;
 8006822:	bf00      	nop
  }

  return sysclockfreq;
 8006824:	69bb      	ldr	r3, [r7, #24]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3724      	adds	r7, #36	; 0x24
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
 8006838:	03d09000 	.word	0x03d09000
 800683c:	003d0900 	.word	0x003d0900
 8006840:	017d7840 	.word	0x017d7840
 8006844:	46000000 	.word	0x46000000
 8006848:	4c742400 	.word	0x4c742400
 800684c:	4a742400 	.word	0x4a742400
 8006850:	4bbebc20 	.word	0x4bbebc20

08006854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800685a:	f7ff fe81 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 800685e:	4602      	mov	r2, r0
 8006860:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	0a1b      	lsrs	r3, r3, #8
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	490f      	ldr	r1, [pc, #60]	; (80068a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800686c:	5ccb      	ldrb	r3, [r1, r3]
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006882:	5cd3      	ldrb	r3, [r2, r3]
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	4a07      	ldr	r2, [pc, #28]	; (80068ac <HAL_RCC_GetHCLKFreq+0x58>)
 8006890:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006892:	4a07      	ldr	r2, [pc, #28]	; (80068b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <HAL_RCC_GetHCLKFreq+0x58>)
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	58024400 	.word	0x58024400
 80068a8:	0800e9cc 	.word	0x0800e9cc
 80068ac:	24000004 	.word	0x24000004
 80068b0:	24000000 	.word	0x24000000

080068b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068bc:	2300      	movs	r3, #0
 80068be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068c0:	2300      	movs	r3, #0
 80068c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03f      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068d8:	d02a      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80068da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068de:	d824      	bhi.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068e4:	d018      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068ea:	d81e      	bhi.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80068f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f4:	d007      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80068f6:	e018      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f8:	4ba3      	ldr	r3, [pc, #652]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	4aa2      	ldr	r2, [pc, #648]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006904:	e015      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3304      	adds	r3, #4
 800690a:	2102      	movs	r1, #2
 800690c:	4618      	mov	r0, r3
 800690e:	f001 fff9 	bl	8008904 <RCCEx_PLL2_Config>
 8006912:	4603      	mov	r3, r0
 8006914:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006916:	e00c      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3324      	adds	r3, #36	; 0x24
 800691c:	2102      	movs	r1, #2
 800691e:	4618      	mov	r0, r3
 8006920:	f002 f8a2 	bl	8008a68 <RCCEx_PLL3_Config>
 8006924:	4603      	mov	r3, r0
 8006926:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006928:	e003      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
      break;
 800692e:	e000      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006938:	4b93      	ldr	r3, [pc, #588]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006944:	4990      	ldr	r1, [pc, #576]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006946:	4313      	orrs	r3, r2
 8006948:	650b      	str	r3, [r1, #80]	; 0x50
 800694a:	e001      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006958:	2b00      	cmp	r3, #0
 800695a:	d03d      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	2b04      	cmp	r3, #4
 8006962:	d826      	bhi.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006981 	.word	0x08006981
 8006970:	0800698f 	.word	0x0800698f
 8006974:	080069a1 	.word	0x080069a1
 8006978:	080069b9 	.word	0x080069b9
 800697c:	080069b9 	.word	0x080069b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006980:	4b81      	ldr	r3, [pc, #516]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	4a80      	ldr	r2, [pc, #512]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800698a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800698c:	e015      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3304      	adds	r3, #4
 8006992:	2100      	movs	r1, #0
 8006994:	4618      	mov	r0, r3
 8006996:	f001 ffb5 	bl	8008904 <RCCEx_PLL2_Config>
 800699a:	4603      	mov	r3, r0
 800699c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800699e:	e00c      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3324      	adds	r3, #36	; 0x24
 80069a4:	2100      	movs	r1, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f002 f85e 	bl	8008a68 <RCCEx_PLL3_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069b0:	e003      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
      break;
 80069b6:	e000      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80069b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069c0:	4b71      	ldr	r3, [pc, #452]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c4:	f023 0207 	bic.w	r2, r3, #7
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	496e      	ldr	r1, [pc, #440]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	650b      	str	r3, [r1, #80]	; 0x50
 80069d2:	e001      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d042      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ec:	d02b      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80069ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f2:	d825      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80069f4:	2bc0      	cmp	r3, #192	; 0xc0
 80069f6:	d028      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80069f8:	2bc0      	cmp	r3, #192	; 0xc0
 80069fa:	d821      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80069fc:	2b80      	cmp	r3, #128	; 0x80
 80069fe:	d016      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d81d      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d007      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006a0c:	e018      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a0e:	4b5e      	ldr	r3, [pc, #376]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	4a5d      	ldr	r2, [pc, #372]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a1a:	e017      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 ff6e 	bl	8008904 <RCCEx_PLL2_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a2c:	e00e      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3324      	adds	r3, #36	; 0x24
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f002 f817 	bl	8008a68 <RCCEx_PLL3_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a3e:	e005      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	75fb      	strb	r3, [r7, #23]
      break;
 8006a44:	e002      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006a46:	bf00      	nop
 8006a48:	e000      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a52:	4b4d      	ldr	r3, [pc, #308]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a56:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5e:	494a      	ldr	r1, [pc, #296]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	650b      	str	r3, [r1, #80]	; 0x50
 8006a64:	e001      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
 8006a68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d049      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a80:	d030      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006a82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a86:	d82a      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a8c:	d02c      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006a8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a92:	d824      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a98:	d018      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9e:	d81e      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa8:	d007      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006aaa:	e018      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aac:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	4a35      	ldr	r2, [pc, #212]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ab8:	e017      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3304      	adds	r3, #4
 8006abe:	2100      	movs	r1, #0
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f001 ff1f 	bl	8008904 <RCCEx_PLL2_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006aca:	e00e      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3324      	adds	r3, #36	; 0x24
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f001 ffc8 	bl	8008a68 <RCCEx_PLL3_Config>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006adc:	e005      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae2:	e002      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006ae4:	bf00      	nop
 8006ae6:	e000      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006af0:	4b25      	ldr	r3, [pc, #148]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006afe:	4922      	ldr	r1, [pc, #136]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	658b      	str	r3, [r1, #88]	; 0x58
 8006b04:	e001      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d04b      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b20:	d030      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b26:	d82a      	bhi.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006b28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b2c:	d02e      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b32:	d824      	bhi.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b38:	d018      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b3e:	d81e      	bhi.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b48:	d007      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006b4a:	e018      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4c:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	4a0d      	ldr	r2, [pc, #52]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b58:	e019      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 fecf 	bl	8008904 <RCCEx_PLL2_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b6a:	e010      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3324      	adds	r3, #36	; 0x24
 8006b70:	2100      	movs	r1, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 ff78 	bl	8008a68 <RCCEx_PLL3_Config>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b7c:	e007      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	75fb      	strb	r3, [r7, #23]
      break;
 8006b82:	e004      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b88:	58024400 	.word	0x58024400
      break;
 8006b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b94:	4b99      	ldr	r3, [pc, #612]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ba2:	4996      	ldr	r1, [pc, #600]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	658b      	str	r3, [r1, #88]	; 0x58
 8006ba8:	e001      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d032      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbe:	2b30      	cmp	r3, #48	; 0x30
 8006bc0:	d01c      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006bc2:	2b30      	cmp	r3, #48	; 0x30
 8006bc4:	d817      	bhi.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d00c      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d813      	bhi.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006bd2:	2b10      	cmp	r3, #16
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd6:	4b89      	ldr	r3, [pc, #548]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	4a88      	ldr	r2, [pc, #544]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006be2:	e00e      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	2102      	movs	r1, #2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 fe8a 	bl	8008904 <RCCEx_PLL2_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006bf4:	e005      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfa:	e002      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006bfc:	bf00      	nop
 8006bfe:	e000      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d109      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c08:	4b7c      	ldr	r3, [pc, #496]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c14:	4979      	ldr	r1, [pc, #484]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c1a:	e001      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d047      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c34:	d030      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c3a:	d82a      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006c3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c40:	d02c      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006c42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c46:	d824      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4c:	d018      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c52:	d81e      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5c:	d007      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006c5e:	e018      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c60:	4b66      	ldr	r3, [pc, #408]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	4a65      	ldr	r2, [pc, #404]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c6c:	e017      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3304      	adds	r3, #4
 8006c72:	2100      	movs	r1, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 fe45 	bl	8008904 <RCCEx_PLL2_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c7e:	e00e      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3324      	adds	r3, #36	; 0x24
 8006c84:	2100      	movs	r1, #0
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 feee 	bl	8008a68 <RCCEx_PLL3_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c90:	e005      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	75fb      	strb	r3, [r7, #23]
      break;
 8006c96:	e002      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006c98:	bf00      	nop
 8006c9a:	e000      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ca4:	4b55      	ldr	r3, [pc, #340]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb0:	4952      	ldr	r1, [pc, #328]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8006cb6:	e001      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d049      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cd0:	d02e      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006cd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cd6:	d828      	bhi.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006cd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cdc:	d02a      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006cde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ce2:	d822      	bhi.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006ce4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ce8:	d026      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006cea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cee:	d81c      	bhi.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cf4:	d010      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006cf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cfa:	d816      	bhi.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01d      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d04:	d111      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 fdf9 	bl	8008904 <RCCEx_PLL2_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d16:	e012      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3324      	adds	r3, #36	; 0x24
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 fea2 	bl	8008a68 <RCCEx_PLL3_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d28:	e009      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d2e:	e006      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006d30:	bf00      	nop
 8006d32:	e004      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d44:	4b2d      	ldr	r3, [pc, #180]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d48:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d50:	492a      	ldr	r1, [pc, #168]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	650b      	str	r3, [r1, #80]	; 0x50
 8006d56:	e001      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d04d      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d72:	d02e      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d78:	d828      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7e:	d02a      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d84:	d822      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d8a:	d026      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006d8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d90:	d81c      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d96:	d010      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d9c:	d816      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01d      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006da6:	d111      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3304      	adds	r3, #4
 8006dac:	2101      	movs	r1, #1
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 fda8 	bl	8008904 <RCCEx_PLL2_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006db8:	e012      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3324      	adds	r3, #36	; 0x24
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 fe51 	bl	8008a68 <RCCEx_PLL3_Config>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006dca:	e009      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd0:	e006      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006dd2:	bf00      	nop
 8006dd4:	e004      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006dd6:	bf00      	nop
 8006dd8:	e002      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e000      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006de6:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006df4:	4901      	ldr	r1, [pc, #4]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	658b      	str	r3, [r1, #88]	; 0x58
 8006dfa:	e003      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006dfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d02f      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e18:	d00e      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e1e:	d814      	bhi.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d015      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e28:	d10f      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e2a:	4baf      	ldr	r3, [pc, #700]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	4aae      	ldr	r2, [pc, #696]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e36:	e00c      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 fd60 	bl	8008904 <RCCEx_PLL2_Config>
 8006e44:	4603      	mov	r3, r0
 8006e46:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e48:	e003      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4e:	e000      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e58:	4ba3      	ldr	r3, [pc, #652]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e64:	49a0      	ldr	r1, [pc, #640]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	650b      	str	r3, [r1, #80]	; 0x50
 8006e6a:	e001      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d032      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d81b      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006e84:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006ec3 	.word	0x08006ec3
 8006e90:	08006e9d 	.word	0x08006e9d
 8006e94:	08006eab 	.word	0x08006eab
 8006e98:	08006ec3 	.word	0x08006ec3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e9c:	4b92      	ldr	r3, [pc, #584]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	4a91      	ldr	r2, [pc, #580]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ea8:	e00c      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3304      	adds	r3, #4
 8006eae:	2102      	movs	r1, #2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 fd27 	bl	8008904 <RCCEx_PLL2_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006eba:	e003      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec0:	e000      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006eca:	4b87      	ldr	r3, [pc, #540]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	f023 0203 	bic.w	r2, r3, #3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed6:	4984      	ldr	r1, [pc, #528]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006edc:	e001      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8086 	beq.w	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ef0:	4b7e      	ldr	r3, [pc, #504]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a7d      	ldr	r2, [pc, #500]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006efc:	f7f9 ff7a 	bl	8000df4 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f02:	e009      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f04:	f7f9 ff76 	bl	8000df4 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b64      	cmp	r3, #100	; 0x64
 8006f10:	d902      	bls.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	75fb      	strb	r3, [r7, #23]
        break;
 8006f16:	e005      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f18:	4b74      	ldr	r3, [pc, #464]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0ef      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d166      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f2a:	4b6f      	ldr	r3, [pc, #444]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f34:	4053      	eors	r3, r2
 8006f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d013      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f3e:	4b6a      	ldr	r3, [pc, #424]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f48:	4b67      	ldr	r3, [pc, #412]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4c:	4a66      	ldr	r2, [pc, #408]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f54:	4b64      	ldr	r3, [pc, #400]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f58:	4a63      	ldr	r2, [pc, #396]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f60:	4a61      	ldr	r2, [pc, #388]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f70:	d115      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f72:	f7f9 ff3f 	bl	8000df4 <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f78:	e00b      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f7a:	f7f9 ff3b 	bl	8000df4 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d902      	bls.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8006f90:	e005      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f92:	4b55      	ldr	r3, [pc, #340]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ed      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d126      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fb2:	d10d      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006fb4:	4b4c      	ldr	r3, [pc, #304]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fc2:	0919      	lsrs	r1, r3, #4
 8006fc4:	4b4a      	ldr	r3, [pc, #296]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006fc6:	400b      	ands	r3, r1
 8006fc8:	4947      	ldr	r1, [pc, #284]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	610b      	str	r3, [r1, #16]
 8006fce:	e005      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006fd0:	4b45      	ldr	r3, [pc, #276]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	4a44      	ldr	r2, [pc, #272]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006fda:	6113      	str	r3, [r2, #16]
 8006fdc:	4b42      	ldr	r3, [pc, #264]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fea:	493f      	ldr	r1, [pc, #252]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	670b      	str	r3, [r1, #112]	; 0x70
 8006ff0:	e004      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	75bb      	strb	r3, [r7, #22]
 8006ff6:	e001      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8085 	beq.w	8007114 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800700e:	2b28      	cmp	r3, #40	; 0x28
 8007010:	d866      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007012:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	080070f5 	.word	0x080070f5
 800701c:	080070e1 	.word	0x080070e1
 8007020:	080070e1 	.word	0x080070e1
 8007024:	080070e1 	.word	0x080070e1
 8007028:	080070e1 	.word	0x080070e1
 800702c:	080070e1 	.word	0x080070e1
 8007030:	080070e1 	.word	0x080070e1
 8007034:	080070e1 	.word	0x080070e1
 8007038:	080070bd 	.word	0x080070bd
 800703c:	080070e1 	.word	0x080070e1
 8007040:	080070e1 	.word	0x080070e1
 8007044:	080070e1 	.word	0x080070e1
 8007048:	080070e1 	.word	0x080070e1
 800704c:	080070e1 	.word	0x080070e1
 8007050:	080070e1 	.word	0x080070e1
 8007054:	080070e1 	.word	0x080070e1
 8007058:	080070cf 	.word	0x080070cf
 800705c:	080070e1 	.word	0x080070e1
 8007060:	080070e1 	.word	0x080070e1
 8007064:	080070e1 	.word	0x080070e1
 8007068:	080070e1 	.word	0x080070e1
 800706c:	080070e1 	.word	0x080070e1
 8007070:	080070e1 	.word	0x080070e1
 8007074:	080070e1 	.word	0x080070e1
 8007078:	080070f5 	.word	0x080070f5
 800707c:	080070e1 	.word	0x080070e1
 8007080:	080070e1 	.word	0x080070e1
 8007084:	080070e1 	.word	0x080070e1
 8007088:	080070e1 	.word	0x080070e1
 800708c:	080070e1 	.word	0x080070e1
 8007090:	080070e1 	.word	0x080070e1
 8007094:	080070e1 	.word	0x080070e1
 8007098:	080070f5 	.word	0x080070f5
 800709c:	080070e1 	.word	0x080070e1
 80070a0:	080070e1 	.word	0x080070e1
 80070a4:	080070e1 	.word	0x080070e1
 80070a8:	080070e1 	.word	0x080070e1
 80070ac:	080070e1 	.word	0x080070e1
 80070b0:	080070e1 	.word	0x080070e1
 80070b4:	080070e1 	.word	0x080070e1
 80070b8:	080070f5 	.word	0x080070f5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3304      	adds	r3, #4
 80070c0:	2101      	movs	r1, #1
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 fc1e 	bl	8008904 <RCCEx_PLL2_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80070cc:	e013      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3324      	adds	r3, #36	; 0x24
 80070d2:	2101      	movs	r1, #1
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 fcc7 	bl	8008a68 <RCCEx_PLL3_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80070de:	e00a      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
      break;
 80070e4:	e007      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80070e6:	bf00      	nop
 80070e8:	58024400 	.word	0x58024400
 80070ec:	58024800 	.word	0x58024800
 80070f0:	00ffffcf 	.word	0x00ffffcf
      break;
 80070f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d109      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80070fc:	4b96      	ldr	r3, [pc, #600]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007100:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007108:	4993      	ldr	r1, [pc, #588]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800710a:	4313      	orrs	r3, r2
 800710c:	654b      	str	r3, [r1, #84]	; 0x54
 800710e:	e001      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d038      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007124:	2b05      	cmp	r3, #5
 8007126:	d821      	bhi.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007128:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007173 	.word	0x08007173
 8007134:	08007149 	.word	0x08007149
 8007138:	0800715b 	.word	0x0800715b
 800713c:	08007173 	.word	0x08007173
 8007140:	08007173 	.word	0x08007173
 8007144:	08007173 	.word	0x08007173
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3304      	adds	r3, #4
 800714c:	2101      	movs	r1, #1
 800714e:	4618      	mov	r0, r3
 8007150:	f001 fbd8 	bl	8008904 <RCCEx_PLL2_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007158:	e00c      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3324      	adds	r3, #36	; 0x24
 800715e:	2101      	movs	r1, #1
 8007160:	4618      	mov	r0, r3
 8007162:	f001 fc81 	bl	8008a68 <RCCEx_PLL3_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800716a:	e003      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]
      break;
 8007170:	e000      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d109      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800717a:	4b77      	ldr	r3, [pc, #476]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	f023 0207 	bic.w	r2, r3, #7
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007186:	4974      	ldr	r1, [pc, #464]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007188:	4313      	orrs	r3, r2
 800718a:	654b      	str	r3, [r1, #84]	; 0x54
 800718c:	e001      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0304 	and.w	r3, r3, #4
 800719a:	2b00      	cmp	r3, #0
 800719c:	d03a      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a4:	2b05      	cmp	r3, #5
 80071a6:	d821      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x938>
 80071a8:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071f3 	.word	0x080071f3
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071db 	.word	0x080071db
 80071bc:	080071f3 	.word	0x080071f3
 80071c0:	080071f3 	.word	0x080071f3
 80071c4:	080071f3 	.word	0x080071f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3304      	adds	r3, #4
 80071cc:	2101      	movs	r1, #1
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 fb98 	bl	8008904 <RCCEx_PLL2_Config>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80071d8:	e00c      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3324      	adds	r3, #36	; 0x24
 80071de:	2101      	movs	r1, #1
 80071e0:	4618      	mov	r0, r3
 80071e2:	f001 fc41 	bl	8008a68 <RCCEx_PLL3_Config>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80071ea:	e003      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
      break;
 80071f0:	e000      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80071f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10a      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071fa:	4b57      	ldr	r3, [pc, #348]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fe:	f023 0207 	bic.w	r2, r3, #7
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007208:	4953      	ldr	r1, [pc, #332]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800720a:	4313      	orrs	r3, r2
 800720c:	658b      	str	r3, [r1, #88]	; 0x58
 800720e:	e001      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d04b      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800722a:	d02e      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800722c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007230:	d828      	bhi.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007236:	d02a      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723c:	d822      	bhi.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800723e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007242:	d026      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007248:	d81c      	bhi.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800724a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724e:	d010      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007254:	d816      	bhi.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d01d      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800725a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800725e:	d111      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3304      	adds	r3, #4
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f001 fb4c 	bl	8008904 <RCCEx_PLL2_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007270:	e012      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3324      	adds	r3, #36	; 0x24
 8007276:	2102      	movs	r1, #2
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fbf5 	bl	8008a68 <RCCEx_PLL3_Config>
 800727e:	4603      	mov	r3, r0
 8007280:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007282:	e009      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
      break;
 8007288:	e006      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800728a:	bf00      	nop
 800728c:	e004      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800728e:	bf00      	nop
 8007290:	e002      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007292:	bf00      	nop
 8007294:	e000      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800729e:	4b2e      	ldr	r3, [pc, #184]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ac:	492a      	ldr	r1, [pc, #168]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	654b      	str	r3, [r1, #84]	; 0x54
 80072b2:	e001      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d04d      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80072ce:	d02e      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80072d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80072d4:	d828      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072da:	d02a      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80072dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e0:	d822      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80072e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072e6:	d026      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80072e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ec:	d81c      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80072ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f2:	d010      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80072f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f8:	d816      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01d      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80072fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007302:	d111      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	2100      	movs	r1, #0
 800730a:	4618      	mov	r0, r3
 800730c:	f001 fafa 	bl	8008904 <RCCEx_PLL2_Config>
 8007310:	4603      	mov	r3, r0
 8007312:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007314:	e012      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3324      	adds	r3, #36	; 0x24
 800731a:	2102      	movs	r1, #2
 800731c:	4618      	mov	r0, r3
 800731e:	f001 fba3 	bl	8008a68 <RCCEx_PLL3_Config>
 8007322:	4603      	mov	r3, r0
 8007324:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007326:	e009      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	75fb      	strb	r3, [r7, #23]
      break;
 800732c:	e006      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800732e:	bf00      	nop
 8007330:	e004      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007332:	bf00      	nop
 8007334:	e002      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800733a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10c      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007346:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007350:	4901      	ldr	r1, [pc, #4]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007352:	4313      	orrs	r3, r2
 8007354:	658b      	str	r3, [r1, #88]	; 0x58
 8007356:	e003      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007368:	2b00      	cmp	r3, #0
 800736a:	d04b      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007372:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007376:	d02e      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007378:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800737c:	d828      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800737e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007382:	d02a      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007388:	d822      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800738a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800738e:	d026      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007390:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007394:	d81c      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800739a:	d010      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800739c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a0:	d816      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01d      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073aa:	d111      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3304      	adds	r3, #4
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 faa6 	bl	8008904 <RCCEx_PLL2_Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80073bc:	e012      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3324      	adds	r3, #36	; 0x24
 80073c2:	2102      	movs	r1, #2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 fb4f 	bl	8008a68 <RCCEx_PLL3_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80073ce:	e009      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	75fb      	strb	r3, [r7, #23]
      break;
 80073d4:	e006      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80073d6:	bf00      	nop
 80073d8:	e004      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80073da:	bf00      	nop
 80073dc:	e002      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80073de:	bf00      	nop
 80073e0:	e000      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80073e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80073ea:	4b9d      	ldr	r3, [pc, #628]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073f8:	4999      	ldr	r1, [pc, #612]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	658b      	str	r3, [r1, #88]	; 0x58
 80073fe:	e001      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0308 	and.w	r3, r3, #8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741a:	d10a      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3324      	adds	r3, #36	; 0x24
 8007420:	2102      	movs	r1, #2
 8007422:	4618      	mov	r0, r3
 8007424:	f001 fb20 	bl	8008a68 <RCCEx_PLL3_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007432:	4b8b      	ldr	r3, [pc, #556]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007440:	4987      	ldr	r1, [pc, #540]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007442:	4313      	orrs	r3, r2
 8007444:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0310 	and.w	r3, r3, #16
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745c:	d10a      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3324      	adds	r3, #36	; 0x24
 8007462:	2102      	movs	r1, #2
 8007464:	4618      	mov	r0, r3
 8007466:	f001 faff 	bl	8008a68 <RCCEx_PLL3_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007474:	4b7a      	ldr	r3, [pc, #488]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007482:	4977      	ldr	r1, [pc, #476]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007484:	4313      	orrs	r3, r2
 8007486:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d034      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800749a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800749e:	d01d      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80074a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074a4:	d817      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80074aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ae:	d009      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80074b0:	e011      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3304      	adds	r3, #4
 80074b6:	2100      	movs	r1, #0
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 fa23 	bl	8008904 <RCCEx_PLL2_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80074c2:	e00c      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3324      	adds	r3, #36	; 0x24
 80074c8:	2102      	movs	r1, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 facc 	bl	8008a68 <RCCEx_PLL3_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80074d4:	e003      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
      break;
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80074dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074e4:	4b5e      	ldr	r3, [pc, #376]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074f2:	495b      	ldr	r1, [pc, #364]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	658b      	str	r3, [r1, #88]	; 0x58
 80074f8:	e001      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d033      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007510:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007514:	d01c      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007516:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800751a:	d816      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800751c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007520:	d003      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007526:	d007      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007528:	e00f      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800752a:	4b4d      	ldr	r3, [pc, #308]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	4a4c      	ldr	r2, [pc, #304]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007534:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007536:	e00c      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3324      	adds	r3, #36	; 0x24
 800753c:	2101      	movs	r1, #1
 800753e:	4618      	mov	r0, r3
 8007540:	f001 fa92 	bl	8008a68 <RCCEx_PLL3_Config>
 8007544:	4603      	mov	r3, r0
 8007546:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007548:	e003      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]
      break;
 800754e:	e000      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007558:	4b41      	ldr	r3, [pc, #260]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007566:	493e      	ldr	r1, [pc, #248]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007568:	4313      	orrs	r3, r2
 800756a:	654b      	str	r3, [r1, #84]	; 0x54
 800756c:	e001      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756e:	7dfb      	ldrb	r3, [r7, #23]
 8007570:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d029      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800758a:	d007      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800758c:	e00f      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800758e:	4b34      	ldr	r3, [pc, #208]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	4a33      	ldr	r2, [pc, #204]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800759a:	e00b      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3304      	adds	r3, #4
 80075a0:	2102      	movs	r1, #2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 f9ae 	bl	8008904 <RCCEx_PLL2_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80075ac:	e002      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]
      break;
 80075b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80075ba:	4b29      	ldr	r3, [pc, #164]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c6:	4926      	ldr	r1, [pc, #152]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075cc:	e001      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3324      	adds	r3, #36	; 0x24
 80075e2:	2102      	movs	r1, #2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 fa3f 	bl	8008a68 <RCCEx_PLL3_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d033      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007608:	d017      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d811      	bhi.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007614:	d013      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d80b      	bhi.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d010      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007624:	d106      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007626:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	4a0d      	ldr	r2, [pc, #52]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800762c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007632:	e007      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	75fb      	strb	r3, [r7, #23]
      break;
 8007638:	e004      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800763a:	bf00      	nop
 800763c:	e002      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800763e:	bf00      	nop
 8007640:	e000      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10c      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800764a:	4b05      	ldr	r3, [pc, #20]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800764c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007656:	4902      	ldr	r1, [pc, #8]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007658:	4313      	orrs	r3, r2
 800765a:	654b      	str	r3, [r1, #84]	; 0x54
 800765c:	e004      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800765e:	bf00      	nop
 8007660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d008      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007674:	4b31      	ldr	r3, [pc, #196]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007680:	492e      	ldr	r1, [pc, #184]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007682:	4313      	orrs	r3, r2
 8007684:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007692:	4b2a      	ldr	r3, [pc, #168]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076a0:	4926      	ldr	r1, [pc, #152]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d008      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076b2:	4b22      	ldr	r3, [pc, #136]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076be:	491f      	ldr	r1, [pc, #124]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00d      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	4a19      	ldr	r2, [pc, #100]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076da:	6113      	str	r3, [r2, #16]
 80076dc:	4b17      	ldr	r3, [pc, #92]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80076e6:	4915      	ldr	r1, [pc, #84]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	da08      	bge.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076f4:	4b11      	ldr	r3, [pc, #68]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	490e      	ldr	r1, [pc, #56]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007702:	4313      	orrs	r3, r2
 8007704:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007712:	4b0a      	ldr	r3, [pc, #40]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007720:	4906      	ldr	r1, [pc, #24]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007722:	4313      	orrs	r3, r2
 8007724:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007726:	7dbb      	ldrb	r3, [r7, #22]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	e000      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	58024400 	.word	0x58024400

08007740 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b090      	sub	sp, #64	; 0x40
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774e:	f040 8095 	bne.w	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007752:	4b97      	ldr	r3, [pc, #604]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	2b04      	cmp	r3, #4
 8007760:	f200 8088 	bhi.w	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007764:	a201      	add	r2, pc, #4	; (adr r2, 800776c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	08007781 	.word	0x08007781
 8007770:	080077a9 	.word	0x080077a9
 8007774:	080077d1 	.word	0x080077d1
 8007778:	0800786d 	.word	0x0800786d
 800777c:	080077f9 	.word	0x080077f9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007780:	4b8b      	ldr	r3, [pc, #556]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800778c:	d108      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800778e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007792:	4618      	mov	r0, r3
 8007794:	f000 ff64 	bl	8008660 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800779c:	f000 bc94 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077a4:	f000 bc90 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077a8:	4b81      	ldr	r3, [pc, #516]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b4:	d108      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b6:	f107 0318 	add.w	r3, r7, #24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fca8 	bl	8008110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077c4:	f000 bc80 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077cc:	f000 bc7c 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077d0:	4b77      	ldr	r3, [pc, #476]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077dc:	d108      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077de:	f107 030c 	add.w	r3, r7, #12
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fde8 	bl	80083b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077ec:	f000 bc6c 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077f4:	f000 bc68 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077f8:	4b6d      	ldr	r3, [pc, #436]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007800:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007802:	4b6b      	ldr	r3, [pc, #428]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b04      	cmp	r3, #4
 800780c:	d10c      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007810:	2b00      	cmp	r3, #0
 8007812:	d109      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007814:	4b66      	ldr	r3, [pc, #408]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	08db      	lsrs	r3, r3, #3
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	4a65      	ldr	r2, [pc, #404]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007820:	fa22 f303 	lsr.w	r3, r2, r3
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007826:	e01f      	b.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007828:	4b61      	ldr	r3, [pc, #388]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007834:	d106      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800783e:	4b5e      	ldr	r3, [pc, #376]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007842:	e011      	b.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007844:	4b5a      	ldr	r3, [pc, #360]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007850:	d106      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007858:	d102      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800785a:	4b58      	ldr	r3, [pc, #352]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800785c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800785e:	e003      	b.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007864:	f000 bc30 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007868:	f000 bc2e 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800786c:	4b54      	ldr	r3, [pc, #336]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007870:	f000 bc2a 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007878:	f000 bc26 	b.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007882:	f040 809f 	bne.w	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007886:	4b4a      	ldr	r3, [pc, #296]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800788e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007896:	d04d      	beq.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789e:	f200 8084 	bhi.w	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	2bc0      	cmp	r3, #192	; 0xc0
 80078a6:	d07d      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	2bc0      	cmp	r3, #192	; 0xc0
 80078ac:	d87d      	bhi.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2b80      	cmp	r3, #128	; 0x80
 80078b2:	d02d      	beq.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	2b80      	cmp	r3, #128	; 0x80
 80078b8:	d877      	bhi.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	2b40      	cmp	r3, #64	; 0x40
 80078c4:	d012      	beq.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80078c6:	e070      	b.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078c8:	4b39      	ldr	r3, [pc, #228]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078d4:	d107      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fec0 	bl	8008660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078e4:	e3f0      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ea:	e3ed      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078ec:	4b30      	ldr	r3, [pc, #192]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078f8:	d107      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078fa:	f107 0318 	add.w	r3, r7, #24
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fc06 	bl	8008110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007908:	e3de      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800790e:	e3db      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007910:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791c:	d107      	bne.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800791e:	f107 030c 	add.w	r3, r7, #12
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fd48 	bl	80083b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800792c:	e3cc      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007932:	e3c9      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007934:	4b1e      	ldr	r3, [pc, #120]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800793c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800793e:	4b1c      	ldr	r3, [pc, #112]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b04      	cmp	r3, #4
 8007948:	d10c      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800794a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794c:	2b00      	cmp	r3, #0
 800794e:	d109      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007950:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	08db      	lsrs	r3, r3, #3
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	4a16      	ldr	r2, [pc, #88]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
 8007960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007962:	e01e      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007964:	4b12      	ldr	r3, [pc, #72]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007970:	d106      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007978:	d102      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800797a:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800797c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800797e:	e010      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800798c:	d106      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007994:	d102      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799a:	e002      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80079a0:	e392      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80079a2:	e391      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80079a4:	4b06      	ldr	r3, [pc, #24]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a8:	e38e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ae:	e38b      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80079b0:	58024400 	.word	0x58024400
 80079b4:	03d09000 	.word	0x03d09000
 80079b8:	003d0900 	.word	0x003d0900
 80079bc:	017d7840 	.word	0x017d7840
 80079c0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ca:	f040 809c 	bne.w	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80079ce:	4b9d      	ldr	r3, [pc, #628]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80079d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079de:	d054      	beq.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079e6:	f200 808b 	bhi.w	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079f0:	f000 8083 	beq.w	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079fa:	f200 8081 	bhi.w	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a04:	d02f      	beq.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a0c:	d878      	bhi.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d004      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a1a:	d012      	beq.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007a1c:	e070      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a1e:	4b89      	ldr	r3, [pc, #548]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a2a:	d107      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fe15 	bl	8008660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a3a:	e345      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a40:	e342      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a42:	4b80      	ldr	r3, [pc, #512]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a4e:	d107      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a50:	f107 0318 	add.w	r3, r7, #24
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 fb5b 	bl	8008110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a5e:	e333      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a64:	e330      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a66:	4b77      	ldr	r3, [pc, #476]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a72:	d107      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a74:	f107 030c 	add.w	r3, r7, #12
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fc9d 	bl	80083b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a82:	e321      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a88:	e31e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a8a:	4b6e      	ldr	r3, [pc, #440]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a94:	4b6b      	ldr	r3, [pc, #428]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d10c      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007aa6:	4b67      	ldr	r3, [pc, #412]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	08db      	lsrs	r3, r3, #3
 8007aac:	f003 0303 	and.w	r3, r3, #3
 8007ab0:	4a65      	ldr	r2, [pc, #404]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab8:	e01e      	b.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007aba:	4b62      	ldr	r3, [pc, #392]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac6:	d106      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ace:	d102      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ad0:	4b5e      	ldr	r3, [pc, #376]	; (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad4:	e010      	b.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ad6:	4b5b      	ldr	r3, [pc, #364]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ae2:	d106      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aea:	d102      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007aec:	4b58      	ldr	r3, [pc, #352]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af0:	e002      	b.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007af6:	e2e7      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007af8:	e2e6      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007afa:	4b56      	ldr	r3, [pc, #344]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007afe:	e2e3      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b04:	e2e0      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b0c:	f040 80a7 	bne.w	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007b10:	4b4c      	ldr	r3, [pc, #304]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b18:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b20:	d055      	beq.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b28:	f200 8096 	bhi.w	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b32:	f000 8084 	beq.w	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b3c:	f200 808c 	bhi.w	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b46:	d030      	beq.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b4e:	f200 8083 	bhi.w	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d004      	beq.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b5e:	d012      	beq.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007b60:	e07a      	b.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b62:	4b38      	ldr	r3, [pc, #224]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b6e:	d107      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 fd73 	bl	8008660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b7e:	e2a3      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b84:	e2a0      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b86:	4b2f      	ldr	r3, [pc, #188]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b92:	d107      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b94:	f107 0318 	add.w	r3, r7, #24
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fab9 	bl	8008110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007ba2:	e291      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ba8:	e28e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007baa:	4b26      	ldr	r3, [pc, #152]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb6:	d107      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb8:	f107 030c 	add.w	r3, r7, #12
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fbfb 	bl	80083b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bc6:	e27f      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bcc:	e27c      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bce:	4b1d      	ldr	r3, [pc, #116]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bd8:	4b1a      	ldr	r3, [pc, #104]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0304 	and.w	r3, r3, #4
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d10c      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d109      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bea:	4b16      	ldr	r3, [pc, #88]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	08db      	lsrs	r3, r3, #3
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bfc:	e01e      	b.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bfe:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c0a:	d106      	bne.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c12:	d102      	bne.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c14:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c18:	e010      	b.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c26:	d106      	bne.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c2e:	d102      	bne.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c34:	e002      	b.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c3a:	e245      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007c3c:	e244      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c3e:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c42:	e241      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007c44:	58024400 	.word	0x58024400
 8007c48:	03d09000 	.word	0x03d09000
 8007c4c:	003d0900 	.word	0x003d0900
 8007c50:	017d7840 	.word	0x017d7840
 8007c54:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c5c:	e234      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c64:	f040 809c 	bne.w	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007c68:	4b9b      	ldr	r3, [pc, #620]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007c70:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c78:	d054      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c80:	f200 808b 	bhi.w	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c8a:	f000 8083 	beq.w	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c94:	f200 8081 	bhi.w	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c9e:	d02f      	beq.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca6:	d878      	bhi.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb4:	d012      	beq.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007cb6:	e070      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cb8:	4b87      	ldr	r3, [pc, #540]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cc4:	d107      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fcc8 	bl	8008660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cd4:	e1f8      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cda:	e1f5      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cdc:	4b7e      	ldr	r3, [pc, #504]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ce8:	d107      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cea:	f107 0318 	add.w	r3, r7, #24
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fa0e 	bl	8008110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cf8:	e1e6      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cfe:	e1e3      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d00:	4b75      	ldr	r3, [pc, #468]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d0c:	d107      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fb50 	bl	80083b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d1c:	e1d4      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d22:	e1d1      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d24:	4b6c      	ldr	r3, [pc, #432]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d2e:	4b6a      	ldr	r3, [pc, #424]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0304 	and.w	r3, r3, #4
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d10c      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d109      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d40:	4b65      	ldr	r3, [pc, #404]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	08db      	lsrs	r3, r3, #3
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	4a64      	ldr	r2, [pc, #400]	; (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d52:	e01e      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d54:	4b60      	ldr	r3, [pc, #384]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d60:	d106      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d68:	d102      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d6a:	4b5d      	ldr	r3, [pc, #372]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6e:	e010      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d70:	4b59      	ldr	r3, [pc, #356]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d7c:	d106      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d84:	d102      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d86:	4b57      	ldr	r3, [pc, #348]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8a:	e002      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d90:	e19a      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007d92:	e199      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d94:	4b54      	ldr	r3, [pc, #336]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d98:	e196      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d9e:	e193      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007da6:	d173      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007da8:	4b4b      	ldr	r3, [pc, #300]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007db0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007db8:	d02f      	beq.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dc0:	d863      	bhi.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dce:	d012      	beq.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007dd0:	e05b      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dd2:	4b41      	ldr	r3, [pc, #260]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dde:	d107      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de0:	f107 0318 	add.w	r3, r7, #24
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 f993 	bl	8008110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007dee:	e16b      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df4:	e168      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007df6:	4b38      	ldr	r3, [pc, #224]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e02:	d107      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e04:	f107 030c 	add.w	r3, r7, #12
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fad5 	bl	80083b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e12:	e159      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e18:	e156      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e1a:	4b2f      	ldr	r3, [pc, #188]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e24:	4b2c      	ldr	r3, [pc, #176]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	d10c      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8007e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e36:	4b28      	ldr	r3, [pc, #160]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	08db      	lsrs	r3, r3, #3
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	4a26      	ldr	r2, [pc, #152]	; (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007e42:	fa22 f303 	lsr.w	r3, r2, r3
 8007e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e48:	e01e      	b.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e4a:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e56:	d106      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8007e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e5e:	d102      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e60:	4b1f      	ldr	r3, [pc, #124]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e64:	e010      	b.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e66:	4b1c      	ldr	r3, [pc, #112]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e72:	d106      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8007e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7a:	d102      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e7c:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e80:	e002      	b.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e86:	e11f      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007e88:	e11e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e8e:	e11b      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e96:	d13e      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007e98:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ea0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d004      	beq.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eae:	d01d      	beq.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007eb0:	e02e      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ebe:	d107      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fbcb 	bl	8008660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ece:	e0fb      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed4:	e0f8      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007ed6:	bf00      	nop
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	03d09000 	.word	0x03d09000
 8007ee0:	003d0900 	.word	0x003d0900
 8007ee4:	017d7840 	.word	0x017d7840
 8007ee8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eec:	4b79      	ldr	r3, [pc, #484]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef8:	d107      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007efa:	f107 0318 	add.w	r3, r7, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f906 	bl	8008110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f08:	e0de      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f0e:	e0db      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f14:	e0d8      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f1c:	f040 8085 	bne.w	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007f20:	4b6c      	ldr	r3, [pc, #432]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f24:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007f28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f30:	d06b      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f38:	d874      	bhi.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f40:	d056      	beq.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f48:	d86c      	bhi.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f50:	d03b      	beq.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f58:	d864      	bhi.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f60:	d021      	beq.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f68:	d85c      	bhi.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f76:	d004      	beq.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007f78:	e054      	b.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007f7a:	f000 f8b3 	bl	80080e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f7e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007f80:	e0a2      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f82:	4b54      	ldr	r3, [pc, #336]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f8e:	d107      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f90:	f107 0318 	add.w	r3, r7, #24
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 f8bb 	bl	8008110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f9e:	e093      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa4:	e090      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fa6:	4b4b      	ldr	r3, [pc, #300]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb2:	d107      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb4:	f107 030c 	add.w	r3, r7, #12
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 f9fd 	bl	80083b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fc2:	e081      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fc8:	e07e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fca:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0304 	and.w	r3, r3, #4
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d109      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fd6:	4b3f      	ldr	r3, [pc, #252]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	08db      	lsrs	r3, r3, #3
 8007fdc:	f003 0303 	and.w	r3, r3, #3
 8007fe0:	4a3d      	ldr	r2, [pc, #244]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fe8:	e06e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fee:	e06b      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007ff0:	4b38      	ldr	r3, [pc, #224]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ffc:	d102      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8007ffe:	4b37      	ldr	r3, [pc, #220]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008002:	e061      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008008:	e05e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800800a:	4b32      	ldr	r3, [pc, #200]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008016:	d102      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8008018:	4b31      	ldr	r3, [pc, #196]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800801c:	e054      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008022:	e051      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008028:	e04e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008030:	d148      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008032:	4b28      	ldr	r3, [pc, #160]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800803a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008042:	d02a      	beq.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800804a:	d838      	bhi.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	2b00      	cmp	r3, #0
 8008050:	d004      	beq.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008058:	d00d      	beq.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800805a:	e030      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800805c:	4b1d      	ldr	r3, [pc, #116]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008068:	d102      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800806a:	4b1d      	ldr	r3, [pc, #116]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800806e:	e02b      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008074:	e028      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008076:	4b17      	ldr	r3, [pc, #92]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800807e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008082:	d107      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fae9 	bl	8008660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008092:	e019      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008098:	e016      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800809a:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080a6:	d107      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080a8:	f107 0318 	add.w	r3, r7, #24
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 f82f 	bl	8008110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080b6:	e007      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080bc:	e004      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c2:	e001      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80080c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3740      	adds	r7, #64	; 0x40
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	58024400 	.word	0x58024400
 80080d8:	03d09000 	.word	0x03d09000
 80080dc:	003d0900 	.word	0x003d0900
 80080e0:	017d7840 	.word	0x017d7840

080080e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080e8:	f7fe fbb4 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 80080ec:	4602      	mov	r2, r0
 80080ee:	4b06      	ldr	r3, [pc, #24]	; (8008108 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	091b      	lsrs	r3, r3, #4
 80080f4:	f003 0307 	and.w	r3, r3, #7
 80080f8:	4904      	ldr	r1, [pc, #16]	; (800810c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80080fa:	5ccb      	ldrb	r3, [r1, r3]
 80080fc:	f003 031f 	and.w	r3, r3, #31
 8008100:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008104:	4618      	mov	r0, r3
 8008106:	bd80      	pop	{r7, pc}
 8008108:	58024400 	.word	0x58024400
 800810c:	0800e9cc 	.word	0x0800e9cc

08008110 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008110:	b480      	push	{r7}
 8008112:	b089      	sub	sp, #36	; 0x24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008118:	4ba1      	ldr	r3, [pc, #644]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008122:	4b9f      	ldr	r3, [pc, #636]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	0b1b      	lsrs	r3, r3, #12
 8008128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800812c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800812e:	4b9c      	ldr	r3, [pc, #624]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	091b      	lsrs	r3, r3, #4
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800813a:	4b99      	ldr	r3, [pc, #612]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813e:	08db      	lsrs	r3, r3, #3
 8008140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	fb02 f303 	mul.w	r3, r2, r3
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008152:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8111 	beq.w	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	2b02      	cmp	r3, #2
 8008162:	f000 8083 	beq.w	800826c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b02      	cmp	r3, #2
 800816a:	f200 80a1 	bhi.w	80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d056      	beq.n	8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800817a:	e099      	b.n	80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800817c:	4b88      	ldr	r3, [pc, #544]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d02d      	beq.n	80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008188:	4b85      	ldr	r3, [pc, #532]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	08db      	lsrs	r3, r3, #3
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	4a84      	ldr	r2, [pc, #528]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b2:	4b7b      	ldr	r3, [pc, #492]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80081e2:	e087      	b.n	80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80081f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f6:	4b6a      	ldr	r3, [pc, #424]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008206:	ed97 6a03 	vldr	s12, [r7, #12]
 800820a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800820e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800821a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008222:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008226:	e065      	b.n	80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008232:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823a:	4b59      	ldr	r3, [pc, #356]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824a:	ed97 6a03 	vldr	s12, [r7, #12]
 800824e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800825e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008266:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800826a:	e043      	b.n	80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008276:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800827a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827e:	4b48      	ldr	r3, [pc, #288]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008292:	eddf 5a45 	vldr	s11, [pc, #276]	; 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800829e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ae:	e021      	b.n	80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c2:	4b37      	ldr	r3, [pc, #220]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80082f4:	4b2a      	ldr	r3, [pc, #168]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	0a5b      	lsrs	r3, r3, #9
 80082fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800830a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800830e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800831a:	ee17 2a90 	vmov	r2, s15
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008322:	4b1f      	ldr	r3, [pc, #124]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832c:	ee07 3a90 	vmov	s15, r3
 8008330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008338:	ee37 7a87 	vadd.f32	s14, s15, s14
 800833c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008348:	ee17 2a90 	vmov	r2, s15
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008350:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	0e1b      	lsrs	r3, r3, #24
 8008356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800836a:	edd7 6a07 	vldr	s13, [r7, #28]
 800836e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008376:	ee17 2a90 	vmov	r2, s15
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800837e:	e008      	b.n	8008392 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	609a      	str	r2, [r3, #8]
}
 8008392:	bf00      	nop
 8008394:	3724      	adds	r7, #36	; 0x24
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	58024400 	.word	0x58024400
 80083a4:	03d09000 	.word	0x03d09000
 80083a8:	46000000 	.word	0x46000000
 80083ac:	4c742400 	.word	0x4c742400
 80083b0:	4a742400 	.word	0x4a742400
 80083b4:	4bbebc20 	.word	0x4bbebc20

080083b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b089      	sub	sp, #36	; 0x24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083c0:	4ba1      	ldr	r3, [pc, #644]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80083ca:	4b9f      	ldr	r3, [pc, #636]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	0d1b      	lsrs	r3, r3, #20
 80083d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083d6:	4b9c      	ldr	r3, [pc, #624]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	0a1b      	lsrs	r3, r3, #8
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80083e2:	4b99      	ldr	r3, [pc, #612]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e6:	08db      	lsrs	r3, r3, #3
 80083e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	fb02 f303 	mul.w	r3, r2, r3
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8111 	beq.w	8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	2b02      	cmp	r3, #2
 800840a:	f000 8083 	beq.w	8008514 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	2b02      	cmp	r3, #2
 8008412:	f200 80a1 	bhi.w	8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d056      	beq.n	80084d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008422:	e099      	b.n	8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008424:	4b88      	ldr	r3, [pc, #544]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b00      	cmp	r3, #0
 800842e:	d02d      	beq.n	800848c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008430:	4b85      	ldr	r3, [pc, #532]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	08db      	lsrs	r3, r3, #3
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	4a84      	ldr	r2, [pc, #528]	; (800864c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800843c:	fa22 f303 	lsr.w	r3, r2, r3
 8008440:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800845a:	4b7b      	ldr	r3, [pc, #492]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846a:	ed97 6a03 	vldr	s12, [r7, #12]
 800846e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800847a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800847e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008486:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800848a:	e087      	b.n	800859c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008496:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800849a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800849e:	4b6a      	ldr	r3, [pc, #424]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80084b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084ce:	e065      	b.n	800859c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e2:	4b59      	ldr	r3, [pc, #356]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008512:	e043      	b.n	800859c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800865c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008526:	4b48      	ldr	r3, [pc, #288]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008536:	ed97 6a03 	vldr	s12, [r7, #12]
 800853a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800853e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800854a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800854e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008556:	e021      	b.n	800859c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008562:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800856a:	4b37      	ldr	r3, [pc, #220]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857a:	ed97 6a03 	vldr	s12, [r7, #12]
 800857e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800858e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008596:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800859a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800859c:	4b2a      	ldr	r3, [pc, #168]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	0a5b      	lsrs	r3, r3, #9
 80085a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085c2:	ee17 2a90 	vmov	r2, s15
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80085ca:	4b1f      	ldr	r3, [pc, #124]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	0c1b      	lsrs	r3, r3, #16
 80085d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d4:	ee07 3a90 	vmov	s15, r3
 80085d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80085e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085f0:	ee17 2a90 	vmov	r2, s15
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80085f8:	4b13      	ldr	r3, [pc, #76]	; (8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	0e1b      	lsrs	r3, r3, #24
 80085fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008602:	ee07 3a90 	vmov	s15, r3
 8008606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800860e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008612:	edd7 6a07 	vldr	s13, [r7, #28]
 8008616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800861a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800861e:	ee17 2a90 	vmov	r2, s15
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008626:	e008      	b.n	800863a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	609a      	str	r2, [r3, #8]
}
 800863a:	bf00      	nop
 800863c:	3724      	adds	r7, #36	; 0x24
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	58024400 	.word	0x58024400
 800864c:	03d09000 	.word	0x03d09000
 8008650:	46000000 	.word	0x46000000
 8008654:	4c742400 	.word	0x4c742400
 8008658:	4a742400 	.word	0x4a742400
 800865c:	4bbebc20 	.word	0x4bbebc20

08008660 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008660:	b480      	push	{r7}
 8008662:	b089      	sub	sp, #36	; 0x24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008668:	4ba0      	ldr	r3, [pc, #640]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800866a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008672:	4b9e      	ldr	r3, [pc, #632]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008676:	091b      	lsrs	r3, r3, #4
 8008678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800867c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800867e:	4b9b      	ldr	r3, [pc, #620]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008688:	4b98      	ldr	r3, [pc, #608]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800868a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868c:	08db      	lsrs	r3, r3, #3
 800868e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	fb02 f303 	mul.w	r3, r2, r3
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 8111 	beq.w	80088ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	f000 8083 	beq.w	80087ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	f200 80a1 	bhi.w	80087fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d056      	beq.n	8008776 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80086c8:	e099      	b.n	80087fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ca:	4b88      	ldr	r3, [pc, #544]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d02d      	beq.n	8008732 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086d6:	4b85      	ldr	r3, [pc, #532]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	08db      	lsrs	r3, r3, #3
 80086dc:	f003 0303 	and.w	r3, r3, #3
 80086e0:	4a83      	ldr	r2, [pc, #524]	; (80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80086e2:	fa22 f303 	lsr.w	r3, r2, r3
 80086e6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008700:	4b7a      	ldr	r3, [pc, #488]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008708:	ee07 3a90 	vmov	s15, r3
 800870c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008710:	ed97 6a03 	vldr	s12, [r7, #12]
 8008714:	eddf 5a77 	vldr	s11, [pc, #476]	; 80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800871c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008730:	e087      	b.n	8008842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80088f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008744:	4b69      	ldr	r3, [pc, #420]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874c:	ee07 3a90 	vmov	s15, r3
 8008750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008754:	ed97 6a03 	vldr	s12, [r7, #12]
 8008758:	eddf 5a66 	vldr	s11, [pc, #408]	; 80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800875c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800876c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008774:	e065      	b.n	8008842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	ee07 3a90 	vmov	s15, r3
 800877c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008780:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80088fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008788:	4b58      	ldr	r3, [pc, #352]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800878a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008798:	ed97 6a03 	vldr	s12, [r7, #12]
 800879c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087b8:	e043      	b.n	8008842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	ee07 3a90 	vmov	s15, r3
 80087c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008900 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80087c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087cc:	4b47      	ldr	r3, [pc, #284]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80087e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087fc:	e021      	b.n	8008842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	ee07 3a90 	vmov	s15, r3
 8008804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008808:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80088f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800880c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008810:	4b36      	ldr	r3, [pc, #216]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008818:	ee07 3a90 	vmov	s15, r3
 800881c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008820:	ed97 6a03 	vldr	s12, [r7, #12]
 8008824:	eddf 5a33 	vldr	s11, [pc, #204]	; 80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008840:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008842:	4b2a      	ldr	r3, [pc, #168]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	0a5b      	lsrs	r3, r3, #9
 8008848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800884c:	ee07 3a90 	vmov	s15, r3
 8008850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008858:	ee37 7a87 	vadd.f32	s14, s15, s14
 800885c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008868:	ee17 2a90 	vmov	r2, s15
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008870:	4b1e      	ldr	r3, [pc, #120]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008874:	0c1b      	lsrs	r3, r3, #16
 8008876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800887a:	ee07 3a90 	vmov	s15, r3
 800887e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800888a:	edd7 6a07 	vldr	s13, [r7, #28]
 800888e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008896:	ee17 2a90 	vmov	r2, s15
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800889e:	4b13      	ldr	r3, [pc, #76]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	0e1b      	lsrs	r3, r3, #24
 80088a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a8:	ee07 3a90 	vmov	s15, r3
 80088ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80088bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c4:	ee17 2a90 	vmov	r2, s15
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80088cc:	e008      	b.n	80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	609a      	str	r2, [r3, #8]
}
 80088e0:	bf00      	nop
 80088e2:	3724      	adds	r7, #36	; 0x24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	58024400 	.word	0x58024400
 80088f0:	03d09000 	.word	0x03d09000
 80088f4:	46000000 	.word	0x46000000
 80088f8:	4c742400 	.word	0x4c742400
 80088fc:	4a742400 	.word	0x4a742400
 8008900:	4bbebc20 	.word	0x4bbebc20

08008904 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008912:	4b53      	ldr	r3, [pc, #332]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	2b03      	cmp	r3, #3
 800891c:	d101      	bne.n	8008922 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e099      	b.n	8008a56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008922:	4b4f      	ldr	r3, [pc, #316]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a4e      	ldr	r2, [pc, #312]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008928:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800892c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800892e:	f7f8 fa61 	bl	8000df4 <HAL_GetTick>
 8008932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008934:	e008      	b.n	8008948 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008936:	f7f8 fa5d 	bl	8000df4 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b02      	cmp	r3, #2
 8008942:	d901      	bls.n	8008948 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e086      	b.n	8008a56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008948:	4b45      	ldr	r3, [pc, #276]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1f0      	bne.n	8008936 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008954:	4b42      	ldr	r3, [pc, #264]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	031b      	lsls	r3, r3, #12
 8008962:	493f      	ldr	r1, [pc, #252]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008964:	4313      	orrs	r3, r2
 8008966:	628b      	str	r3, [r1, #40]	; 0x28
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	3b01      	subs	r3, #1
 800896e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	3b01      	subs	r3, #1
 8008978:	025b      	lsls	r3, r3, #9
 800897a:	b29b      	uxth	r3, r3
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	3b01      	subs	r3, #1
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800898a:	431a      	orrs	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	3b01      	subs	r3, #1
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008998:	4931      	ldr	r1, [pc, #196]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 800899a:	4313      	orrs	r3, r2
 800899c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800899e:	4b30      	ldr	r3, [pc, #192]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	492d      	ldr	r1, [pc, #180]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80089b0:	4b2b      	ldr	r3, [pc, #172]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	f023 0220 	bic.w	r2, r3, #32
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	4928      	ldr	r1, [pc, #160]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80089c2:	4b27      	ldr	r3, [pc, #156]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	4a26      	ldr	r2, [pc, #152]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089c8:	f023 0310 	bic.w	r3, r3, #16
 80089cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089ce:	4b24      	ldr	r3, [pc, #144]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089d2:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <RCCEx_PLL2_Config+0x160>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	69d2      	ldr	r2, [r2, #28]
 80089da:	00d2      	lsls	r2, r2, #3
 80089dc:	4920      	ldr	r1, [pc, #128]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80089e2:	4b1f      	ldr	r3, [pc, #124]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	4a1e      	ldr	r2, [pc, #120]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089e8:	f043 0310 	orr.w	r3, r3, #16
 80089ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d106      	bne.n	8008a02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089f4:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	4a19      	ldr	r2, [pc, #100]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 80089fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a00:	e00f      	b.n	8008a22 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d106      	bne.n	8008a16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a08:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	4a14      	ldr	r2, [pc, #80]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a14:	e005      	b.n	8008a22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a16:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	4a11      	ldr	r2, [pc, #68]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a22:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a0e      	ldr	r2, [pc, #56]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a2e:	f7f8 f9e1 	bl	8000df4 <HAL_GetTick>
 8008a32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a34:	e008      	b.n	8008a48 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a36:	f7f8 f9dd 	bl	8000df4 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d901      	bls.n	8008a48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e006      	b.n	8008a56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a48:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <RCCEx_PLL2_Config+0x15c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d0f0      	beq.n	8008a36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	58024400 	.word	0x58024400
 8008a64:	ffff0007 	.word	0xffff0007

08008a68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a76:	4b53      	ldr	r3, [pc, #332]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d101      	bne.n	8008a86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e099      	b.n	8008bba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a86:	4b4f      	ldr	r3, [pc, #316]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a4e      	ldr	r2, [pc, #312]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a92:	f7f8 f9af 	bl	8000df4 <HAL_GetTick>
 8008a96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a98:	e008      	b.n	8008aac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a9a:	f7f8 f9ab 	bl	8000df4 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e086      	b.n	8008bba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008aac:	4b45      	ldr	r3, [pc, #276]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1f0      	bne.n	8008a9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ab8:	4b42      	ldr	r3, [pc, #264]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	051b      	lsls	r3, r3, #20
 8008ac6:	493f      	ldr	r1, [pc, #252]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	628b      	str	r3, [r1, #40]	; 0x28
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	025b      	lsls	r3, r3, #9
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	041b      	lsls	r3, r3, #16
 8008aea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	061b      	lsls	r3, r3, #24
 8008af8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008afc:	4931      	ldr	r1, [pc, #196]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b02:	4b30      	ldr	r3, [pc, #192]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	492d      	ldr	r1, [pc, #180]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b14:	4b2b      	ldr	r3, [pc, #172]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	4928      	ldr	r1, [pc, #160]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b26:	4b27      	ldr	r3, [pc, #156]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	4a26      	ldr	r2, [pc, #152]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b32:	4b24      	ldr	r3, [pc, #144]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b36:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <RCCEx_PLL3_Config+0x160>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	69d2      	ldr	r2, [r2, #28]
 8008b3e:	00d2      	lsls	r2, r2, #3
 8008b40:	4920      	ldr	r1, [pc, #128]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b46:	4b1f      	ldr	r3, [pc, #124]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	4a1e      	ldr	r2, [pc, #120]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b58:	4b1a      	ldr	r3, [pc, #104]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	4a19      	ldr	r2, [pc, #100]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b64:	e00f      	b.n	8008b86 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d106      	bne.n	8008b7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b6c:	4b15      	ldr	r3, [pc, #84]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	4a14      	ldr	r2, [pc, #80]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b78:	e005      	b.n	8008b86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7e:	4a11      	ldr	r2, [pc, #68]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b86:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a0e      	ldr	r2, [pc, #56]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b92:	f7f8 f92f 	bl	8000df4 <HAL_GetTick>
 8008b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b98:	e008      	b.n	8008bac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b9a:	f7f8 f92b 	bl	8000df4 <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d901      	bls.n	8008bac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e006      	b.n	8008bba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bac:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <RCCEx_PLL3_Config+0x15c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0f0      	beq.n	8008b9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	58024400 	.word	0x58024400
 8008bc8:	ffff0007 	.word	0xffff0007

08008bcc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	; 0x28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e283      	b.n	80090e6 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008bde:	f7f8 f939 	bl	8000e54 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d113      	bne.n	8008c14 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a94      	ldr	r2, [pc, #592]	; (8008e44 <HAL_SAI_Init+0x278>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_SAI_Init+0x34>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a93      	ldr	r2, [pc, #588]	; (8008e48 <HAL_SAI_Init+0x27c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d107      	bne.n	8008c10 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d103      	bne.n	8008c10 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e268      	b.n	80090e6 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a8a      	ldr	r2, [pc, #552]	; (8008e44 <HAL_SAI_Init+0x278>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d004      	beq.n	8008c28 <HAL_SAI_Init+0x5c>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a8a      	ldr	r2, [pc, #552]	; (8008e4c <HAL_SAI_Init+0x280>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d102      	bne.n	8008c2e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8008c28:	4b89      	ldr	r3, [pc, #548]	; (8008e50 <HAL_SAI_Init+0x284>)
 8008c2a:	61bb      	str	r3, [r7, #24]
 8008c2c:	e028      	b.n	8008c80 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a88      	ldr	r2, [pc, #544]	; (8008e54 <HAL_SAI_Init+0x288>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d004      	beq.n	8008c42 <HAL_SAI_Init+0x76>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a86      	ldr	r2, [pc, #536]	; (8008e58 <HAL_SAI_Init+0x28c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d102      	bne.n	8008c48 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8008c42:	4b86      	ldr	r3, [pc, #536]	; (8008e5c <HAL_SAI_Init+0x290>)
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	e01b      	b.n	8008c80 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a84      	ldr	r2, [pc, #528]	; (8008e60 <HAL_SAI_Init+0x294>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <HAL_SAI_Init+0x90>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a83      	ldr	r2, [pc, #524]	; (8008e64 <HAL_SAI_Init+0x298>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d102      	bne.n	8008c62 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8008c5c:	4b82      	ldr	r3, [pc, #520]	; (8008e68 <HAL_SAI_Init+0x29c>)
 8008c5e:	61bb      	str	r3, [r7, #24]
 8008c60:	e00e      	b.n	8008c80 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a78      	ldr	r2, [pc, #480]	; (8008e48 <HAL_SAI_Init+0x27c>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <HAL_SAI_Init+0xaa>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a7e      	ldr	r2, [pc, #504]	; (8008e6c <HAL_SAI_Init+0x2a0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d102      	bne.n	8008c7c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8008c76:	4b7e      	ldr	r3, [pc, #504]	; (8008e70 <HAL_SAI_Init+0x2a4>)
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	e001      	b.n	8008c80 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e232      	b.n	80090e6 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d106      	bne.n	8008c9a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7f7 fde1 	bl	800085c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fd68 	bl	8009770 <SAI_Disable>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e21d      	b.n	80090e6 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2202      	movs	r2, #2
 8008cae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d00c      	beq.n	8008cd4 <HAL_SAI_Init+0x108>
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d80d      	bhi.n	8008cda <HAL_SAI_Init+0x10e>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <HAL_SAI_Init+0xfc>
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d003      	beq.n	8008cce <HAL_SAI_Init+0x102>
 8008cc6:	e008      	b.n	8008cda <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008ccc:	e008      	b.n	8008ce0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008cce:	2310      	movs	r3, #16
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008cd2:	e005      	b.n	8008ce0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008cd8:	e002      	b.n	8008ce0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008cde:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2b05      	cmp	r3, #5
 8008ce6:	d832      	bhi.n	8008d4e <HAL_SAI_Init+0x182>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <HAL_SAI_Init+0x124>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d09 	.word	0x08008d09
 8008cf4:	08008d0f 	.word	0x08008d0f
 8008cf8:	08008d17 	.word	0x08008d17
 8008cfc:	08008d1f 	.word	0x08008d1f
 8008d00:	08008d2f 	.word	0x08008d2f
 8008d04:	08008d3f 	.word	0x08008d3f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	61fb      	str	r3, [r7, #28]
      break;
 8008d0c:	e022      	b.n	8008d54 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d12:	61fb      	str	r3, [r7, #28]
      break;
 8008d14:	e01e      	b.n	8008d54 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d1a:	61fb      	str	r3, [r7, #28]
      break;
 8008d1c:	e01a      	b.n	8008d54 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d22:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	f043 0301 	orr.w	r3, r3, #1
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008d2c:	e012      	b.n	8008d54 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d32:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	f043 0302 	orr.w	r3, r3, #2
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008d3c:	e00a      	b.n	8008d54 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d42:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	f043 0303 	orr.w	r3, r3, #3
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008d4c:	e002      	b.n	8008d54 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	61fb      	str	r3, [r7, #28]
      break;
 8008d52:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d58:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 80ba 	beq.w	8008ed8 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a35      	ldr	r2, [pc, #212]	; (8008e44 <HAL_SAI_Init+0x278>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d004      	beq.n	8008d7c <HAL_SAI_Init+0x1b0>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a35      	ldr	r2, [pc, #212]	; (8008e4c <HAL_SAI_Init+0x280>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d104      	bne.n	8008d86 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008d7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008d80:	f7fe fcde 	bl	8007740 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d84:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a32      	ldr	r2, [pc, #200]	; (8008e54 <HAL_SAI_Init+0x288>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d004      	beq.n	8008d9a <HAL_SAI_Init+0x1ce>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a30      	ldr	r2, [pc, #192]	; (8008e58 <HAL_SAI_Init+0x28c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d104      	bne.n	8008da4 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008d9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008d9e:	f7fe fccf 	bl	8007740 <HAL_RCCEx_GetPeriphCLKFreq>
 8008da2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a2d      	ldr	r2, [pc, #180]	; (8008e60 <HAL_SAI_Init+0x294>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d004      	beq.n	8008db8 <HAL_SAI_Init+0x1ec>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a2c      	ldr	r2, [pc, #176]	; (8008e64 <HAL_SAI_Init+0x298>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d104      	bne.n	8008dc2 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008db8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008dbc:	f7fe fcc0 	bl	8007740 <HAL_RCCEx_GetPeriphCLKFreq>
 8008dc0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a20      	ldr	r2, [pc, #128]	; (8008e48 <HAL_SAI_Init+0x27c>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d104      	bne.n	8008dd6 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008dcc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008dd0:	f7fe fcb6 	bl	8007740 <HAL_RCCEx_GetPeriphCLKFreq>
 8008dd4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a24      	ldr	r2, [pc, #144]	; (8008e6c <HAL_SAI_Init+0x2a0>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d104      	bne.n	8008dea <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008de0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008de4:	f7fe fcac 	bl	8007740 <HAL_RCCEx_GetPeriphCLKFreq>
 8008de8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008df2:	d120      	bne.n	8008e36 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d102      	bne.n	8008e02 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008dfc:	2340      	movs	r3, #64	; 0x40
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	e00a      	b.n	8008e18 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d103      	bne.n	8008e12 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	e002      	b.n	8008e18 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e16:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	4619      	mov	r1, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	fb02 f303 	mul.w	r3, r2, r3
 8008e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	e02f      	b.n	8008e96 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e3e:	d119      	bne.n	8008e74 <HAL_SAI_Init+0x2a8>
 8008e40:	2302      	movs	r3, #2
 8008e42:	e018      	b.n	8008e76 <HAL_SAI_Init+0x2aa>
 8008e44:	40015804 	.word	0x40015804
 8008e48:	58005404 	.word	0x58005404
 8008e4c:	40015824 	.word	0x40015824
 8008e50:	40015800 	.word	0x40015800
 8008e54:	40015c04 	.word	0x40015c04
 8008e58:	40015c24 	.word	0x40015c24
 8008e5c:	40015c00 	.word	0x40015c00
 8008e60:	40016004 	.word	0x40016004
 8008e64:	40016024 	.word	0x40016024
 8008e68:	40016000 	.word	0x40016000
 8008e6c:	58005424 	.word	0x58005424
 8008e70:	58005400 	.word	0x58005400
 8008e74:	2301      	movs	r3, #1
 8008e76:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	4619      	mov	r1, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	fb02 f303 	mul.w	r3, r2, r3
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e94:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	4a95      	ldr	r2, [pc, #596]	; (80090f0 <HAL_SAI_Init+0x524>)
 8008e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9e:	08da      	lsrs	r2, r3, #3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008ea4:	6939      	ldr	r1, [r7, #16]
 8008ea6:	4b92      	ldr	r3, [pc, #584]	; (80090f0 <HAL_SAI_Init+0x524>)
 8008ea8:	fba3 2301 	umull	r2, r3, r3, r1
 8008eac:	08da      	lsrs	r2, r3, #3
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	1aca      	subs	r2, r1, r3
 8008eb8:	2a08      	cmp	r2, #8
 8008eba:	d904      	bls.n	8008ec6 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d104      	bne.n	8008ed8 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	085a      	lsrs	r2, r3, #1
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_SAI_Init+0x31c>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d109      	bne.n	8008efc <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d101      	bne.n	8008ef4 <HAL_SAI_Init+0x328>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e001      	b.n	8008ef8 <HAL_SAI_Init+0x32c>
 8008ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ef8:	623b      	str	r3, [r7, #32]
 8008efa:	e008      	b.n	8008f0e <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d102      	bne.n	8008f0a <HAL_SAI_Init+0x33e>
 8008f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f08:	e000      	b.n	8008f0c <HAL_SAI_Init+0x340>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008f0e:	f7f7 ffa1 	bl	8000e54 <HAL_GetREVID>
 8008f12:	4603      	mov	r3, r0
 8008f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f18:	d331      	bcc.n	8008f7e <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	4b73      	ldr	r3, [pc, #460]	; (80090f4 <HAL_SAI_Init+0x528>)
 8008f26:	400b      	ands	r3, r1
 8008f28:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6819      	ldr	r1, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f38:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f3e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f44:	431a      	orrs	r2, r3
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008f52:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f5e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	051b      	lsls	r3, r3, #20
 8008f66:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f6c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	e02d      	b.n	8008fda <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6819      	ldr	r1, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	4b5b      	ldr	r3, [pc, #364]	; (80090f8 <HAL_SAI_Init+0x52c>)
 8008f8a:	400b      	ands	r3, r1
 8008f8c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6819      	ldr	r1, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008fa2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008fb6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008fc2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	051b      	lsls	r3, r3, #20
 8008fca:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008fd0:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6859      	ldr	r1, [r3, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	4b45      	ldr	r3, [pc, #276]	; (80090fc <HAL_SAI_Init+0x530>)
 8008fe6:	400b      	ands	r3, r1
 8008fe8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6859      	ldr	r1, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6899      	ldr	r1, [r3, #8]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	4b3b      	ldr	r3, [pc, #236]	; (8009100 <HAL_SAI_Init+0x534>)
 8009014:	400b      	ands	r3, r1
 8009016:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6899      	ldr	r1, [r3, #8]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009022:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009028:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800902e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009034:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903a:	3b01      	subs	r3, #1
 800903c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800903e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68d9      	ldr	r1, [r3, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009056:	400b      	ands	r3, r1
 8009058:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68d9      	ldr	r1, [r3, #12]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009068:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800906e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009070:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009076:	3b01      	subs	r3, #1
 8009078:	021b      	lsls	r3, r3, #8
 800907a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a1e      	ldr	r2, [pc, #120]	; (8009104 <HAL_SAI_Init+0x538>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d004      	beq.n	8009098 <HAL_SAI_Init+0x4cc>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a1d      	ldr	r2, [pc, #116]	; (8009108 <HAL_SAI_Init+0x53c>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d119      	bne.n	80090cc <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909c:	f023 0201 	bic.w	r2, r3, #1
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d10e      	bne.n	80090cc <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	3b01      	subs	r3, #1
 80090b8:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80090ba:	431a      	orrs	r2, r3
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c4:	f043 0201 	orr.w	r2, r3, #1
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3728      	adds	r7, #40	; 0x28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	cccccccd 	.word	0xcccccccd
 80090f4:	f005c010 	.word	0xf005c010
 80090f8:	f805c010 	.word	0xf805c010
 80090fc:	ffff1ff0 	.word	0xffff1ff0
 8009100:	fff88000 	.word	0xfff88000
 8009104:	40015804 	.word	0x40015804
 8009108:	58005404 	.word	0x58005404

0800910c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <HAL_SAI_Abort+0x1a>
 8009122:	2302      	movs	r3, #2
 8009124:	e07d      	b.n	8009222 <HAL_SAI_Abort+0x116>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800913c:	d14f      	bne.n	80091de <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800914c:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b12      	cmp	r3, #18
 8009158:	d11d      	bne.n	8009196 <HAL_SAI_Abort+0x8a>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009160:	2b00      	cmp	r3, #0
 8009162:	d018      	beq.n	8009196 <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800916a:	4618      	mov	r0, r3
 800916c:	f7f8 fd54 	bl	8001c18 <HAL_DMA_Abort>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00f      	beq.n	8009196 <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800917c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917e:	2b80      	cmp	r3, #128	; 0x80
 8009180:	d009      	beq.n	8009196 <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800918c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b22      	cmp	r3, #34	; 0x22
 80091a0:	d11d      	bne.n	80091de <HAL_SAI_Abort+0xd2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d018      	beq.n	80091de <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f8 fd30 	bl	8001c18 <HAL_DMA_Abort>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00f      	beq.n	80091de <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c6:	2b80      	cmp	r3, #128	; 0x80
 80091c8:	d009      	beq.n	80091de <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2200      	movs	r2, #0
 80091e4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f04f 32ff 	mov.w	r2, #4294967295
 80091ee:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fabd 	bl	8009770 <SAI_Disable>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0208 	orr.w	r2, r2, #8
 800920e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <HAL_SAI_Receive_DMA+0x1a>
 8009240:	88fb      	ldrh	r3, [r7, #6]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e079      	b.n	800933e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b01      	cmp	r3, #1
 8009254:	d172      	bne.n	800933c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_SAI_Receive_DMA+0x38>
 8009260:	2302      	movs	r3, #2
 8009262:	e06c      	b.n	800933e <HAL_SAI_Receive_DMA+0x112>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	88fa      	ldrh	r2, [r7, #6]
 8009276:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	88fa      	ldrh	r2, [r7, #6]
 800927e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2222      	movs	r2, #34	; 0x22
 800928e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009298:	4a2b      	ldr	r2, [pc, #172]	; (8009348 <HAL_SAI_Receive_DMA+0x11c>)
 800929a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a2:	4a2a      	ldr	r2, [pc, #168]	; (800934c <HAL_SAI_Receive_DMA+0x120>)
 80092a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ac:	4a28      	ldr	r2, [pc, #160]	; (8009350 <HAL_SAI_Receive_DMA+0x124>)
 80092ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092b6:	2200      	movs	r2, #0
 80092b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	331c      	adds	r3, #28
 80092c6:	4619      	mov	r1, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092cc:	461a      	mov	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80092d4:	f7f8 fa36 	bl	8001744 <HAL_DMA_Start_IT>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d005      	beq.n	80092ea <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e029      	b.n	800933e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80092ea:	2100      	movs	r1, #0
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fa07 	bl	8009700 <SAI_InterruptFlag>
 80092f2:	4601      	mov	r1, r0
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009310:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d107      	bne.n	8009330 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800932e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	e000      	b.n	800933e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800933c:	2302      	movs	r3, #2
  }
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	08009845 	.word	0x08009845
 800934c:	080097e5 	.word	0x080097e5
 8009350:	08009861 	.word	0x08009861

08009354 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 81a7 	beq.w	80096b8 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f003 0308 	and.w	r3, r3, #8
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00a      	beq.n	80093a2 <HAL_SAI_IRQHandler+0x4e>
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f003 0308 	and.w	r3, r3, #8
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	4798      	blx	r3
 80093a0:	e18a      	b.n	80096b8 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d01e      	beq.n	80093ea <HAL_SAI_IRQHandler+0x96>
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d019      	beq.n	80093ea <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2201      	movs	r2, #1
 80093bc:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b22      	cmp	r3, #34	; 0x22
 80093c8:	d101      	bne.n	80093ce <HAL_SAI_IRQHandler+0x7a>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <HAL_SAI_IRQHandler+0x7c>
 80093ce:	2302      	movs	r3, #2
 80093d0:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f982 	bl	80096ec <HAL_SAI_ErrorCallback>
 80093e8:	e166      	b.n	80096b8 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d013      	beq.n	800941c <HAL_SAI_IRQHandler+0xc8>
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00e      	beq.n	800941c <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2202      	movs	r2, #2
 8009404:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 8153 	beq.w	80096b8 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009418:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800941a:	e14d      	b.n	80096b8 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b00      	cmp	r3, #0
 8009424:	d05b      	beq.n	80094de <HAL_SAI_IRQHandler+0x18a>
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f003 0320 	and.w	r3, r3, #32
 800942c:	2b00      	cmp	r3, #0
 800942e:	d056      	beq.n	80094de <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2220      	movs	r2, #32
 8009436:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800943e:	f043 0204 	orr.w	r2, r3, #4
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d03e      	beq.n	80094d0 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009458:	2b00      	cmp	r3, #0
 800945a:	d018      	beq.n	800948e <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009462:	4a97      	ldr	r2, [pc, #604]	; (80096c0 <HAL_SAI_IRQHandler+0x36c>)
 8009464:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800946c:	4618      	mov	r0, r3
 800946e:	f7f8 fef1 	bl	8002254 <HAL_DMA_Abort_IT>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00a      	beq.n	800948e <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800947e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f92f 	bl	80096ec <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 810a 	beq.w	80096ae <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a0:	4a87      	ldr	r2, [pc, #540]	; (80096c0 <HAL_SAI_IRQHandler+0x36c>)
 80094a2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7f8 fed2 	bl	8002254 <HAL_DMA_Abort_IT>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 80fb 	beq.w	80096ae <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f90f 	bl	80096ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80094ce:	e0ee      	b.n	80096ae <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7ff fe1b 	bl	800910c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f908 	bl	80096ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80094dc:	e0e7      	b.n	80096ae <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d05b      	beq.n	80095a0 <HAL_SAI_IRQHandler+0x24c>
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d056      	beq.n	80095a0 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2240      	movs	r2, #64	; 0x40
 80094f8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009500:	f043 0208 	orr.w	r2, r3, #8
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d03e      	beq.n	8009592 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800951a:	2b00      	cmp	r3, #0
 800951c:	d018      	beq.n	8009550 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009524:	4a66      	ldr	r2, [pc, #408]	; (80096c0 <HAL_SAI_IRQHandler+0x36c>)
 8009526:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800952e:	4618      	mov	r0, r3
 8009530:	f7f8 fe90 	bl	8002254 <HAL_DMA_Abort_IT>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00a      	beq.n	8009550 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f8ce 	bl	80096ec <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 80ab 	beq.w	80096b2 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009562:	4a57      	ldr	r2, [pc, #348]	; (80096c0 <HAL_SAI_IRQHandler+0x36c>)
 8009564:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800956c:	4618      	mov	r0, r3
 800956e:	f7f8 fe71 	bl	8002254 <HAL_DMA_Abort_IT>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 809c 	beq.w	80096b2 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009580:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f8ae 	bl	80096ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009590:	e08f      	b.n	80096b2 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7ff fdba 	bl	800910c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f8a7 	bl	80096ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800959e:	e088      	b.n	80096b2 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d067      	beq.n	800967a <HAL_SAI_IRQHandler+0x326>
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d062      	beq.n	800967a <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2204      	movs	r2, #4
 80095ba:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095c2:	f043 0220 	orr.w	r2, r3, #32
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d03c      	beq.n	8009650 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d018      	beq.n	8009612 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095e6:	4a36      	ldr	r2, [pc, #216]	; (80096c0 <HAL_SAI_IRQHandler+0x36c>)
 80095e8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7f8 fe2f 	bl	8002254 <HAL_DMA_Abort_IT>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009602:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f86d 	bl	80096ec <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009618:	2b00      	cmp	r3, #0
 800961a:	d04c      	beq.n	80096b6 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009622:	4a27      	ldr	r2, [pc, #156]	; (80096c0 <HAL_SAI_IRQHandler+0x36c>)
 8009624:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800962c:	4618      	mov	r0, r3
 800962e:	f7f8 fe11 	bl	8002254 <HAL_DMA_Abort_IT>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d03e      	beq.n	80096b6 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800963e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f84f 	bl	80096ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800964e:	e032      	b.n	80096b6 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2200      	movs	r2, #0
 8009656:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f04f 32ff 	mov.w	r2, #4294967295
 8009660:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f83a 	bl	80096ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009678:	e01d      	b.n	80096b6 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d019      	beq.n	80096b8 <HAL_SAI_IRQHandler+0x364>
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f003 0310 	and.w	r3, r3, #16
 800968a:	2b00      	cmp	r3, #0
 800968c:	d014      	beq.n	80096b8 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2210      	movs	r2, #16
 8009694:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800969c:	f043 0210 	orr.w	r2, r3, #16
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f820 	bl	80096ec <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80096ac:	e004      	b.n	80096b8 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80096ae:	bf00      	nop
 80096b0:	e002      	b.n	80096b8 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80096b2:	bf00      	nop
 80096b4:	e000      	b.n	80096b8 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80096b6:	bf00      	nop
}
 80096b8:	bf00      	nop
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	080098bf 	.word	0x080098bf

080096c4 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800970c:	2301      	movs	r3, #1
 800970e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d103      	bne.n	800971e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f043 0308 	orr.w	r3, r3, #8
 800971c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009722:	2b08      	cmp	r3, #8
 8009724:	d10b      	bne.n	800973e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800972a:	2b03      	cmp	r3, #3
 800972c:	d003      	beq.n	8009736 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d103      	bne.n	800973e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f043 0310 	orr.w	r3, r3, #16
 800973c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	2b03      	cmp	r3, #3
 8009744:	d003      	beq.n	800974e <SAI_InterruptFlag+0x4e>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	2b02      	cmp	r3, #2
 800974c:	d104      	bne.n	8009758 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	e003      	b.n	8009760 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f043 0304 	orr.w	r3, r3, #4
 800975e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009760:	68fb      	ldr	r3, [r7, #12]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009778:	4b18      	ldr	r3, [pc, #96]	; (80097dc <SAI_Disable+0x6c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a18      	ldr	r2, [pc, #96]	; (80097e0 <SAI_Disable+0x70>)
 800977e:	fba2 2303 	umull	r2, r3, r2, r3
 8009782:	0b1b      	lsrs	r3, r3, #12
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800979a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	72fb      	strb	r3, [r7, #11]
      break;
 80097b6:	e009      	b.n	80097cc <SAI_Disable+0x5c>
    }
    count--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e7      	bne.n	800979c <SAI_Disable+0x2c>

  return status;
 80097cc:	7afb      	ldrb	r3, [r7, #11]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	24000000 	.word	0x24000000
 80097e0:	95cbec1b 	.word	0x95cbec1b

080097e4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097fa:	d01c      	beq.n	8009836 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800980a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009814:	2100      	movs	r1, #0
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7ff ff72 	bl	8009700 <SAI_InterruptFlag>
 800981c:	4603      	mov	r3, r0
 800981e:	43d9      	mvns	r1, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	691a      	ldr	r2, [r3, #16]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	400a      	ands	r2, r1
 800982c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff ff44 	bl	80096c4 <HAL_SAI_RxCpltCallback>
#endif
}
 800983c:	bf00      	nop
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7ff ff40 	bl	80096d8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8009858:	bf00      	nop
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7f9 fe60 	bl	8003534 <HAL_DMA_GetError>
 8009874:	4603      	mov	r3, r0
 8009876:	2b02      	cmp	r3, #2
 8009878:	d01d      	beq.n	80098b6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009880:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009898:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f7ff ff68 	bl	8009770 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff ff1b 	bl	80096ec <HAL_SAI_ErrorCallback>
#endif
  }
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80098da:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2200      	movs	r2, #0
 80098e2:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f04f 32ff 	mov.w	r2, #4294967295
 80098ec:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d00a      	beq.n	800990e <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f7ff ff39 	bl	8009770 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0208 	orr.w	r2, r2, #8
 800990c:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7ff fee4 	bl	80096ec <HAL_SAI_ErrorCallback>
#endif
}
 8009924:	bf00      	nop
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800992c:	b084      	sub	sp, #16
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	f107 001c 	add.w	r0, r7, #28
 800993a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	2b01      	cmp	r3, #1
 8009942:	d120      	bne.n	8009986 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68da      	ldr	r2, [r3, #12]
 8009954:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <USB_CoreInit+0xd4>)
 8009956:	4013      	ands	r3, r2
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800996a:	2b01      	cmp	r3, #1
 800996c:	d105      	bne.n	800997a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f001 fc04 	bl	800b188 <USB_CoreReset>
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]
 8009984:	e01a      	b.n	80099bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fbf8 	bl	800b188 <USB_CoreReset>
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800999c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d106      	bne.n	80099b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38
 80099ae:	e005      	b.n	80099bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d116      	bne.n	80099f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099d0:	4b0c      	ldr	r3, [pc, #48]	; (8009a04 <USB_CoreInit+0xd8>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f043 0206 	orr.w	r2, r3, #6
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f043 0220 	orr.w	r2, r3, #32
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099fc:	b004      	add	sp, #16
 80099fe:	4770      	bx	lr
 8009a00:	ffbdffbf 	.word	0xffbdffbf
 8009a04:	03ee0000 	.word	0x03ee0000

08009a08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	4613      	mov	r3, r2
 8009a14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d165      	bne.n	8009ae8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	4a41      	ldr	r2, [pc, #260]	; (8009b24 <USB_SetTurnaroundTime+0x11c>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d906      	bls.n	8009a32 <USB_SetTurnaroundTime+0x2a>
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4a40      	ldr	r2, [pc, #256]	; (8009b28 <USB_SetTurnaroundTime+0x120>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d202      	bcs.n	8009a32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a2c:	230f      	movs	r3, #15
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	e062      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	4a3c      	ldr	r2, [pc, #240]	; (8009b28 <USB_SetTurnaroundTime+0x120>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d306      	bcc.n	8009a48 <USB_SetTurnaroundTime+0x40>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	4a3b      	ldr	r2, [pc, #236]	; (8009b2c <USB_SetTurnaroundTime+0x124>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d202      	bcs.n	8009a48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a42:	230e      	movs	r3, #14
 8009a44:	617b      	str	r3, [r7, #20]
 8009a46:	e057      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	4a38      	ldr	r2, [pc, #224]	; (8009b2c <USB_SetTurnaroundTime+0x124>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d306      	bcc.n	8009a5e <USB_SetTurnaroundTime+0x56>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	4a37      	ldr	r2, [pc, #220]	; (8009b30 <USB_SetTurnaroundTime+0x128>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d202      	bcs.n	8009a5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a58:	230d      	movs	r3, #13
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	e04c      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	4a33      	ldr	r2, [pc, #204]	; (8009b30 <USB_SetTurnaroundTime+0x128>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d306      	bcc.n	8009a74 <USB_SetTurnaroundTime+0x6c>
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	4a32      	ldr	r2, [pc, #200]	; (8009b34 <USB_SetTurnaroundTime+0x12c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d802      	bhi.n	8009a74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a6e:	230c      	movs	r3, #12
 8009a70:	617b      	str	r3, [r7, #20]
 8009a72:	e041      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	4a2f      	ldr	r2, [pc, #188]	; (8009b34 <USB_SetTurnaroundTime+0x12c>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d906      	bls.n	8009a8a <USB_SetTurnaroundTime+0x82>
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	4a2e      	ldr	r2, [pc, #184]	; (8009b38 <USB_SetTurnaroundTime+0x130>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d802      	bhi.n	8009a8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009a84:	230b      	movs	r3, #11
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e036      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	4a2a      	ldr	r2, [pc, #168]	; (8009b38 <USB_SetTurnaroundTime+0x130>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d906      	bls.n	8009aa0 <USB_SetTurnaroundTime+0x98>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	4a29      	ldr	r2, [pc, #164]	; (8009b3c <USB_SetTurnaroundTime+0x134>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d802      	bhi.n	8009aa0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009a9a:	230a      	movs	r3, #10
 8009a9c:	617b      	str	r3, [r7, #20]
 8009a9e:	e02b      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	4a26      	ldr	r2, [pc, #152]	; (8009b3c <USB_SetTurnaroundTime+0x134>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d906      	bls.n	8009ab6 <USB_SetTurnaroundTime+0xae>
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	4a25      	ldr	r2, [pc, #148]	; (8009b40 <USB_SetTurnaroundTime+0x138>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d202      	bcs.n	8009ab6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ab0:	2309      	movs	r3, #9
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	e020      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	4a21      	ldr	r2, [pc, #132]	; (8009b40 <USB_SetTurnaroundTime+0x138>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d306      	bcc.n	8009acc <USB_SetTurnaroundTime+0xc4>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	4a20      	ldr	r2, [pc, #128]	; (8009b44 <USB_SetTurnaroundTime+0x13c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d802      	bhi.n	8009acc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009ac6:	2308      	movs	r3, #8
 8009ac8:	617b      	str	r3, [r7, #20]
 8009aca:	e015      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	4a1d      	ldr	r2, [pc, #116]	; (8009b44 <USB_SetTurnaroundTime+0x13c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d906      	bls.n	8009ae2 <USB_SetTurnaroundTime+0xda>
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	4a1c      	ldr	r2, [pc, #112]	; (8009b48 <USB_SetTurnaroundTime+0x140>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d202      	bcs.n	8009ae2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009adc:	2307      	movs	r3, #7
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	e00a      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009ae2:	2306      	movs	r3, #6
 8009ae4:	617b      	str	r3, [r7, #20]
 8009ae6:	e007      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d102      	bne.n	8009af4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009aee:	2309      	movs	r3, #9
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	e001      	b.n	8009af8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009af4:	2309      	movs	r3, #9
 8009af6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	68da      	ldr	r2, [r3, #12]
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	029b      	lsls	r3, r3, #10
 8009b0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009b10:	431a      	orrs	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	371c      	adds	r7, #28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	00d8acbf 	.word	0x00d8acbf
 8009b28:	00e4e1c0 	.word	0x00e4e1c0
 8009b2c:	00f42400 	.word	0x00f42400
 8009b30:	01067380 	.word	0x01067380
 8009b34:	011a499f 	.word	0x011a499f
 8009b38:	01312cff 	.word	0x01312cff
 8009b3c:	014ca43f 	.word	0x014ca43f
 8009b40:	016e3600 	.word	0x016e3600
 8009b44:	01a6ab1f 	.word	0x01a6ab1f
 8009b48:	01e84800 	.word	0x01e84800

08009b4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f043 0201 	orr.w	r2, r3, #1
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f023 0201 	bic.w	r2, r3, #1
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009bac:	78fb      	ldrb	r3, [r7, #3]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d115      	bne.n	8009bde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	f7f7 f924 	bl	8000e0c <HAL_Delay>
      ms++;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 fa4b 	bl	800b066 <USB_GetMode>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d01e      	beq.n	8009c14 <USB_SetCurrentMode+0x84>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b31      	cmp	r3, #49	; 0x31
 8009bda:	d9f0      	bls.n	8009bbe <USB_SetCurrentMode+0x2e>
 8009bdc:	e01a      	b.n	8009c14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bde:	78fb      	ldrb	r3, [r7, #3]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d115      	bne.n	8009c10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	f7f7 f90b 	bl	8000e0c <HAL_Delay>
      ms++;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 fa32 	bl	800b066 <USB_GetMode>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <USB_SetCurrentMode+0x84>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b31      	cmp	r3, #49	; 0x31
 8009c0c:	d9f0      	bls.n	8009bf0 <USB_SetCurrentMode+0x60>
 8009c0e:	e001      	b.n	8009c14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e005      	b.n	8009c20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b32      	cmp	r3, #50	; 0x32
 8009c18:	d101      	bne.n	8009c1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e000      	b.n	8009c20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c28:	b084      	sub	sp, #16
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b086      	sub	sp, #24
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
 8009c46:	e009      	b.n	8009c5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	3340      	adds	r3, #64	; 0x40
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	613b      	str	r3, [r7, #16]
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	2b0e      	cmp	r3, #14
 8009c60:	d9f2      	bls.n	8009c48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d11c      	bne.n	8009ca2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c76:	f043 0302 	orr.w	r3, r3, #2
 8009c7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c80:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	e005      	b.n	8009cae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc8:	461a      	mov	r2, r3
 8009cca:	680b      	ldr	r3, [r1, #0]
 8009ccc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d10c      	bne.n	8009cee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009cda:	2100      	movs	r1, #0
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f965 	bl	8009fac <USB_SetDevSpeed>
 8009ce2:	e008      	b.n	8009cf6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f960 	bl	8009fac <USB_SetDevSpeed>
 8009cec:	e003      	b.n	8009cf6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009cee:	2103      	movs	r1, #3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f95b 	bl	8009fac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cf6:	2110      	movs	r1, #16
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f8f3 	bl	8009ee4 <USB_FlushTxFifo>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f91f 	bl	8009f4c <USB_FlushRxFifo>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1e:	461a      	mov	r2, r3
 8009d20:	2300      	movs	r3, #0
 8009d22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d36:	461a      	mov	r2, r3
 8009d38:	2300      	movs	r3, #0
 8009d3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	e043      	b.n	8009dca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d58:	d118      	bne.n	8009d8c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10a      	bne.n	8009d76 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	e013      	b.n	8009d9e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d82:	461a      	mov	r2, r3
 8009d84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	e008      	b.n	8009d9e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d98:	461a      	mov	r2, r3
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009daa:	461a      	mov	r2, r3
 8009dac:	2300      	movs	r3, #0
 8009dae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009dc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	613b      	str	r3, [r7, #16]
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d3b7      	bcc.n	8009d42 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	613b      	str	r3, [r7, #16]
 8009dd6:	e043      	b.n	8009e60 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dee:	d118      	bne.n	8009e22 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e02:	461a      	mov	r2, r3
 8009e04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	e013      	b.n	8009e34 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	e008      	b.n	8009e34 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2e:	461a      	mov	r2, r3
 8009e30:	2300      	movs	r3, #0
 8009e32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e40:	461a      	mov	r2, r3
 8009e42:	2300      	movs	r3, #0
 8009e44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e52:	461a      	mov	r2, r3
 8009e54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	613b      	str	r3, [r7, #16]
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d3b7      	bcc.n	8009dd8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009e88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d105      	bne.n	8009e9c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	f043 0210 	orr.w	r2, r3, #16
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699a      	ldr	r2, [r3, #24]
 8009ea0:	4b0e      	ldr	r3, [pc, #56]	; (8009edc <USB_DevInit+0x2b4>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d005      	beq.n	8009eba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	f043 0208 	orr.w	r2, r3, #8
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d105      	bne.n	8009ecc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	699a      	ldr	r2, [r3, #24]
 8009ec4:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <USB_DevInit+0x2b8>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ed8:	b004      	add	sp, #16
 8009eda:	4770      	bx	lr
 8009edc:	803c3800 	.word	0x803c3800
 8009ee0:	40000004 	.word	0x40000004

08009ee4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4a13      	ldr	r2, [pc, #76]	; (8009f48 <USB_FlushTxFifo+0x64>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d901      	bls.n	8009f04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	e01b      	b.n	8009f3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	daf2      	bge.n	8009ef2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	019b      	lsls	r3, r3, #6
 8009f14:	f043 0220 	orr.w	r2, r3, #32
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4a08      	ldr	r2, [pc, #32]	; (8009f48 <USB_FlushTxFifo+0x64>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d901      	bls.n	8009f2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e006      	b.n	8009f3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d0f0      	beq.n	8009f1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	00030d40 	.word	0x00030d40

08009f4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4a11      	ldr	r2, [pc, #68]	; (8009fa8 <USB_FlushRxFifo+0x5c>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d901      	bls.n	8009f6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e018      	b.n	8009f9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	daf2      	bge.n	8009f58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2210      	movs	r2, #16
 8009f7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4a08      	ldr	r2, [pc, #32]	; (8009fa8 <USB_FlushRxFifo+0x5c>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d901      	bls.n	8009f8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e006      	b.n	8009f9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	f003 0310 	and.w	r3, r3, #16
 8009f96:	2b10      	cmp	r3, #16
 8009f98:	d0f0      	beq.n	8009f7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	00030d40 	.word	0x00030d40

08009fac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	78fb      	ldrb	r3, [r7, #3]
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b087      	sub	sp, #28
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f003 0306 	and.w	r3, r3, #6
 8009ff6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d102      	bne.n	800a004 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009ffe:	2300      	movs	r3, #0
 800a000:	75fb      	strb	r3, [r7, #23]
 800a002:	e00a      	b.n	800a01a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b02      	cmp	r3, #2
 800a008:	d002      	beq.n	800a010 <USB_GetDevSpeed+0x32>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b06      	cmp	r3, #6
 800a00e:	d102      	bne.n	800a016 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a010:	2302      	movs	r3, #2
 800a012:	75fb      	strb	r3, [r7, #23]
 800a014:	e001      	b.n	800a01a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a016:	230f      	movs	r3, #15
 800a018:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	371c      	adds	r7, #28
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	785b      	ldrb	r3, [r3, #1]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d139      	bne.n	800a0b8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a04a:	69da      	ldr	r2, [r3, #28]
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	f003 030f 	and.w	r3, r3, #15
 800a054:	2101      	movs	r1, #1
 800a056:	fa01 f303 	lsl.w	r3, r1, r3
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	68f9      	ldr	r1, [r7, #12]
 800a05e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a062:	4313      	orrs	r3, r2
 800a064:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d153      	bne.n	800a124 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	791b      	ldrb	r3, [r3, #4]
 800a096:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a098:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	059b      	lsls	r3, r3, #22
 800a09e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0a0:	431a      	orrs	r2, r3
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	0159      	lsls	r1, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	440b      	add	r3, r1
 800a0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4b20      	ldr	r3, [pc, #128]	; (800a134 <USB_ActivateEndpoint+0x10c>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	600b      	str	r3, [r1, #0]
 800a0b6:	e035      	b.n	800a124 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0be:	69da      	ldr	r2, [r3, #28]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	f003 030f 	and.w	r3, r3, #15
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ce:	041b      	lsls	r3, r3, #16
 800a0d0:	68f9      	ldr	r1, [r7, #12]
 800a0d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d119      	bne.n	800a124 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	791b      	ldrb	r3, [r3, #4]
 800a10a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a10c:	430b      	orrs	r3, r1
 800a10e:	431a      	orrs	r2, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	0159      	lsls	r1, r3, #5
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	440b      	add	r3, r1
 800a118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11c:	4619      	mov	r1, r3
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <USB_ActivateEndpoint+0x10c>)
 800a120:	4313      	orrs	r3, r2
 800a122:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	10008000 	.word	0x10008000

0800a138 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	785b      	ldrb	r3, [r3, #1]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d161      	bne.n	800a218 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	015a      	lsls	r2, r3, #5
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	4413      	add	r3, r2
 800a15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a16a:	d11f      	bne.n	800a1ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4413      	add	r3, r2
 800a174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	0151      	lsls	r1, r2, #5
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	440a      	add	r2, r1
 800a182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a186:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a18a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	015a      	lsls	r2, r3, #5
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4413      	add	r3, r2
 800a194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	0151      	lsls	r1, r2, #5
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	440a      	add	r2, r1
 800a1a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	f003 030f 	and.w	r3, r3, #15
 800a1bc:	2101      	movs	r1, #1
 800a1be:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	43db      	mvns	r3, r3
 800a1c6:	68f9      	ldr	r1, [r7, #12]
 800a1c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d6:	69da      	ldr	r2, [r3, #28]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	f003 030f 	and.w	r3, r3, #15
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	43db      	mvns	r3, r3
 800a1ea:	68f9      	ldr	r1, [r7, #12]
 800a1ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	0159      	lsls	r1, r3, #5
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	440b      	add	r3, r1
 800a20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a20e:	4619      	mov	r1, r3
 800a210:	4b35      	ldr	r3, [pc, #212]	; (800a2e8 <USB_DeactivateEndpoint+0x1b0>)
 800a212:	4013      	ands	r3, r2
 800a214:	600b      	str	r3, [r1, #0]
 800a216:	e060      	b.n	800a2da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a22a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a22e:	d11f      	bne.n	800a270 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	0151      	lsls	r1, r2, #5
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	440a      	add	r2, r1
 800a246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a24e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	0151      	lsls	r1, r2, #5
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	440a      	add	r2, r1
 800a266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a26a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a26e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	f003 030f 	and.w	r3, r3, #15
 800a280:	2101      	movs	r1, #1
 800a282:	fa01 f303 	lsl.w	r3, r1, r3
 800a286:	041b      	lsls	r3, r3, #16
 800a288:	43db      	mvns	r3, r3
 800a28a:	68f9      	ldr	r1, [r7, #12]
 800a28c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a290:	4013      	ands	r3, r2
 800a292:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a29a:	69da      	ldr	r2, [r3, #28]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	f003 030f 	and.w	r3, r3, #15
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2aa:	041b      	lsls	r3, r3, #16
 800a2ac:	43db      	mvns	r3, r3
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	0159      	lsls	r1, r3, #5
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	440b      	add	r3, r1
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <USB_DeactivateEndpoint+0x1b4>)
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	ec337800 	.word	0xec337800
 800a2ec:	eff37800 	.word	0xeff37800

0800a2f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08a      	sub	sp, #40	; 0x28
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	785b      	ldrb	r3, [r3, #1]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	f040 8163 	bne.w	800a5d8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d132      	bne.n	800a380 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	4413      	add	r3, r2
 800a322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a326:	691a      	ldr	r2, [r3, #16]
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	0159      	lsls	r1, r3, #5
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	440b      	add	r3, r1
 800a330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a334:	4619      	mov	r1, r3
 800a336:	4ba5      	ldr	r3, [pc, #660]	; (800a5cc <USB_EPStartXfer+0x2dc>)
 800a338:	4013      	ands	r3, r2
 800a33a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	0151      	lsls	r1, r2, #5
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	440a      	add	r2, r1
 800a352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a35a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	015a      	lsls	r2, r3, #5
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	4413      	add	r3, r2
 800a364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a368:	691a      	ldr	r2, [r3, #16]
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	0159      	lsls	r1, r3, #5
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	440b      	add	r3, r1
 800a372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a376:	4619      	mov	r1, r3
 800a378:	4b95      	ldr	r3, [pc, #596]	; (800a5d0 <USB_EPStartXfer+0x2e0>)
 800a37a:	4013      	ands	r3, r2
 800a37c:	610b      	str	r3, [r1, #16]
 800a37e:	e074      	b.n	800a46a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a38c:	691a      	ldr	r2, [r3, #16]
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	0159      	lsls	r1, r3, #5
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	440b      	add	r3, r1
 800a396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39a:	4619      	mov	r1, r3
 800a39c:	4b8c      	ldr	r3, [pc, #560]	; (800a5d0 <USB_EPStartXfer+0x2e0>)
 800a39e:	4013      	ands	r3, r2
 800a3a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ae:	691a      	ldr	r2, [r3, #16]
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	0159      	lsls	r1, r3, #5
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	440b      	add	r3, r1
 800a3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4b83      	ldr	r3, [pc, #524]	; (800a5cc <USB_EPStartXfer+0x2dc>)
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	6999      	ldr	r1, [r3, #24]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	440b      	add	r3, r1
 800a3dc:	1e59      	subs	r1, r3, #1
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a3e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a3e8:	4b7a      	ldr	r3, [pc, #488]	; (800a5d4 <USB_EPStartXfer+0x2e4>)
 800a3ea:	400b      	ands	r3, r1
 800a3ec:	69b9      	ldr	r1, [r7, #24]
 800a3ee:	0148      	lsls	r0, r1, #5
 800a3f0:	69f9      	ldr	r1, [r7, #28]
 800a3f2:	4401      	add	r1, r0
 800a3f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a408:	691a      	ldr	r2, [r3, #16]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a412:	69b9      	ldr	r1, [r7, #24]
 800a414:	0148      	lsls	r0, r1, #5
 800a416:	69f9      	ldr	r1, [r7, #28]
 800a418:	4401      	add	r1, r0
 800a41a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a41e:	4313      	orrs	r3, r2
 800a420:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	791b      	ldrb	r3, [r3, #4]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d11f      	bne.n	800a46a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	015a      	lsls	r2, r3, #5
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	4413      	add	r3, r2
 800a432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	69ba      	ldr	r2, [r7, #24]
 800a43a:	0151      	lsls	r1, r2, #5
 800a43c:	69fa      	ldr	r2, [r7, #28]
 800a43e:	440a      	add	r2, r1
 800a440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a444:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a448:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	69ba      	ldr	r2, [r7, #24]
 800a45a:	0151      	lsls	r1, r2, #5
 800a45c:	69fa      	ldr	r2, [r7, #28]
 800a45e:	440a      	add	r2, r1
 800a460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a464:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a468:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a46a:	79fb      	ldrb	r3, [r7, #7]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d14b      	bne.n	800a508 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d009      	beq.n	800a48c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a484:	461a      	mov	r2, r3
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	791b      	ldrb	r3, [r3, #4]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d128      	bne.n	800a4e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d110      	bne.n	800a4c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	69ba      	ldr	r2, [r7, #24]
 800a4b4:	0151      	lsls	r1, r2, #5
 800a4b6:	69fa      	ldr	r2, [r7, #28]
 800a4b8:	440a      	add	r2, r1
 800a4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	e00f      	b.n	800a4e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	69ba      	ldr	r2, [r7, #24]
 800a4d6:	0151      	lsls	r1, r2, #5
 800a4d8:	69fa      	ldr	r2, [r7, #28]
 800a4da:	440a      	add	r2, r1
 800a4dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	69ba      	ldr	r2, [r7, #24]
 800a4f6:	0151      	lsls	r1, r2, #5
 800a4f8:	69fa      	ldr	r2, [r7, #28]
 800a4fa:	440a      	add	r2, r1
 800a4fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a500:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	e137      	b.n	800a778 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	0151      	lsls	r1, r2, #5
 800a51a:	69fa      	ldr	r2, [r7, #28]
 800a51c:	440a      	add	r2, r1
 800a51e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a526:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	791b      	ldrb	r3, [r3, #4]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d015      	beq.n	800a55c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 811f 	beq.w	800a778 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	f003 030f 	and.w	r3, r3, #15
 800a54a:	2101      	movs	r1, #1
 800a54c:	fa01 f303 	lsl.w	r3, r1, r3
 800a550:	69f9      	ldr	r1, [r7, #28]
 800a552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a556:	4313      	orrs	r3, r2
 800a558:	634b      	str	r3, [r1, #52]	; 0x34
 800a55a:	e10d      	b.n	800a778 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d110      	bne.n	800a58e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	4413      	add	r3, r2
 800a574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	0151      	lsls	r1, r2, #5
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	440a      	add	r2, r1
 800a582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a586:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	e00f      	b.n	800a5ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	4413      	add	r3, r2
 800a596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	0151      	lsls	r1, r2, #5
 800a5a0:	69fa      	ldr	r2, [r7, #28]
 800a5a2:	440a      	add	r2, r1
 800a5a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	6919      	ldr	r1, [r3, #16]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	781a      	ldrb	r2, [r3, #0]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	b298      	uxth	r0, r3
 800a5bc:	79fb      	ldrb	r3, [r7, #7]
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 faea 	bl	800ab9c <USB_WritePacket>
 800a5c8:	e0d6      	b.n	800a778 <USB_EPStartXfer+0x488>
 800a5ca:	bf00      	nop
 800a5cc:	e007ffff 	.word	0xe007ffff
 800a5d0:	fff80000 	.word	0xfff80000
 800a5d4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	015a      	lsls	r2, r3, #5
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e4:	691a      	ldr	r2, [r3, #16]
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	0159      	lsls	r1, r3, #5
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	440b      	add	r3, r1
 800a5ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4b63      	ldr	r3, [pc, #396]	; (800a784 <USB_EPStartXfer+0x494>)
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	015a      	lsls	r2, r3, #5
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4413      	add	r3, r2
 800a602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a606:	691a      	ldr	r2, [r3, #16]
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	0159      	lsls	r1, r3, #5
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	440b      	add	r3, r1
 800a610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a614:	4619      	mov	r1, r3
 800a616:	4b5c      	ldr	r3, [pc, #368]	; (800a788 <USB_EPStartXfer+0x498>)
 800a618:	4013      	ands	r3, r2
 800a61a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d123      	bne.n	800a66c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a630:	691a      	ldr	r2, [r3, #16]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a63a:	69b9      	ldr	r1, [r7, #24]
 800a63c:	0148      	lsls	r0, r1, #5
 800a63e:	69f9      	ldr	r1, [r7, #28]
 800a640:	4401      	add	r1, r0
 800a642:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a646:	4313      	orrs	r3, r2
 800a648:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	015a      	lsls	r2, r3, #5
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	4413      	add	r3, r2
 800a652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	0151      	lsls	r1, r2, #5
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	440a      	add	r2, r1
 800a660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a668:	6113      	str	r3, [r2, #16]
 800a66a:	e037      	b.n	800a6dc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	699a      	ldr	r2, [r3, #24]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	4413      	add	r3, r2
 800a676:	1e5a      	subs	r2, r3, #1
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a680:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	8afa      	ldrh	r2, [r7, #22]
 800a688:	fb03 f202 	mul.w	r2, r3, r2
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	4413      	add	r3, r2
 800a698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69c:	691a      	ldr	r2, [r3, #16]
 800a69e:	8afb      	ldrh	r3, [r7, #22]
 800a6a0:	04d9      	lsls	r1, r3, #19
 800a6a2:	4b3a      	ldr	r3, [pc, #232]	; (800a78c <USB_EPStartXfer+0x49c>)
 800a6a4:	400b      	ands	r3, r1
 800a6a6:	69b9      	ldr	r1, [r7, #24]
 800a6a8:	0148      	lsls	r0, r1, #5
 800a6aa:	69f9      	ldr	r1, [r7, #28]
 800a6ac:	4401      	add	r1, r0
 800a6ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c2:	691a      	ldr	r2, [r3, #16]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6cc:	69b9      	ldr	r1, [r7, #24]
 800a6ce:	0148      	lsls	r0, r1, #5
 800a6d0:	69f9      	ldr	r1, [r7, #28]
 800a6d2:	4401      	add	r1, r0
 800a6d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a6dc:	79fb      	ldrb	r3, [r7, #7]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d10d      	bne.n	800a6fe <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	6919      	ldr	r1, [r3, #16]
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6fa:	460a      	mov	r2, r1
 800a6fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	791b      	ldrb	r3, [r3, #4]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d128      	bne.n	800a758 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a712:	2b00      	cmp	r3, #0
 800a714:	d110      	bne.n	800a738 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	69fa      	ldr	r2, [r7, #28]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a730:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	e00f      	b.n	800a758 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	0151      	lsls	r1, r2, #5
 800a74a:	69fa      	ldr	r2, [r7, #28]
 800a74c:	440a      	add	r2, r1
 800a74e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a756:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	69ba      	ldr	r2, [r7, #24]
 800a768:	0151      	lsls	r1, r2, #5
 800a76a:	69fa      	ldr	r2, [r7, #28]
 800a76c:	440a      	add	r2, r1
 800a76e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a772:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a776:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3720      	adds	r7, #32
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	fff80000 	.word	0xfff80000
 800a788:	e007ffff 	.word	0xe007ffff
 800a78c:	1ff80000 	.word	0x1ff80000

0800a790 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	4613      	mov	r3, r2
 800a79c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	785b      	ldrb	r3, [r3, #1]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	f040 80ce 	bne.w	800a94e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d132      	bne.n	800a820 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c6:	691a      	ldr	r2, [r3, #16]
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	0159      	lsls	r1, r3, #5
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	440b      	add	r3, r1
 800a7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4b9a      	ldr	r3, [pc, #616]	; (800aa40 <USB_EP0StartXfer+0x2b0>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	0151      	lsls	r1, r2, #5
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	440a      	add	r2, r1
 800a7f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a808:	691a      	ldr	r2, [r3, #16]
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	0159      	lsls	r1, r3, #5
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	440b      	add	r3, r1
 800a812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a816:	4619      	mov	r1, r3
 800a818:	4b8a      	ldr	r3, [pc, #552]	; (800aa44 <USB_EP0StartXfer+0x2b4>)
 800a81a:	4013      	ands	r3, r2
 800a81c:	610b      	str	r3, [r1, #16]
 800a81e:	e04e      	b.n	800a8be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	0159      	lsls	r1, r3, #5
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	440b      	add	r3, r1
 800a836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a83a:	4619      	mov	r1, r3
 800a83c:	4b81      	ldr	r3, [pc, #516]	; (800aa44 <USB_EP0StartXfer+0x2b4>)
 800a83e:	4013      	ands	r3, r2
 800a840:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84e:	691a      	ldr	r2, [r3, #16]
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	0159      	lsls	r1, r3, #5
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	440b      	add	r3, r1
 800a858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a85c:	4619      	mov	r1, r3
 800a85e:	4b78      	ldr	r3, [pc, #480]	; (800aa40 <USB_EP0StartXfer+0x2b0>)
 800a860:	4013      	ands	r3, r2
 800a862:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	699a      	ldr	r2, [r3, #24]
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d903      	bls.n	800a878 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	68da      	ldr	r2, [r3, #12]
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	0151      	lsls	r1, r2, #5
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	440a      	add	r2, r1
 800a88e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a892:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a4:	691a      	ldr	r2, [r3, #16]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8ae:	6939      	ldr	r1, [r7, #16]
 800a8b0:	0148      	lsls	r0, r1, #5
 800a8b2:	6979      	ldr	r1, [r7, #20]
 800a8b4:	4401      	add	r1, r0
 800a8b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a8be:	79fb      	ldrb	r3, [r7, #7]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d11e      	bne.n	800a902 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d009      	beq.n	800a8e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d8:	461a      	mov	r2, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	0151      	lsls	r1, r2, #5
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	440a      	add	r2, r1
 800a8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	e097      	b.n	800aa32 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	0151      	lsls	r1, r2, #5
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	440a      	add	r2, r1
 800a918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a91c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a920:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 8083 	beq.w	800aa32 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	f003 030f 	and.w	r3, r3, #15
 800a93c:	2101      	movs	r1, #1
 800a93e:	fa01 f303 	lsl.w	r3, r1, r3
 800a942:	6979      	ldr	r1, [r7, #20]
 800a944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a948:	4313      	orrs	r3, r2
 800a94a:	634b      	str	r3, [r1, #52]	; 0x34
 800a94c:	e071      	b.n	800aa32 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	4413      	add	r3, r2
 800a956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95a:	691a      	ldr	r2, [r3, #16]
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	0159      	lsls	r1, r3, #5
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	440b      	add	r3, r1
 800a964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a968:	4619      	mov	r1, r3
 800a96a:	4b36      	ldr	r3, [pc, #216]	; (800aa44 <USB_EP0StartXfer+0x2b4>)
 800a96c:	4013      	ands	r3, r2
 800a96e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97c:	691a      	ldr	r2, [r3, #16]
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	0159      	lsls	r1, r3, #5
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	440b      	add	r3, r1
 800a986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98a:	4619      	mov	r1, r3
 800a98c:	4b2c      	ldr	r3, [pc, #176]	; (800aa40 <USB_EP0StartXfer+0x2b0>)
 800a98e:	4013      	ands	r3, r2
 800a990:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	0151      	lsls	r1, r2, #5
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	440a      	add	r2, r1
 800a9c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	015a      	lsls	r2, r3, #5
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d6:	691a      	ldr	r2, [r3, #16]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9e0:	6939      	ldr	r1, [r7, #16]
 800a9e2:	0148      	lsls	r0, r1, #5
 800a9e4:	6979      	ldr	r1, [r7, #20]
 800a9e6:	4401      	add	r1, r0
 800a9e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d10d      	bne.n	800aa12 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d009      	beq.n	800aa12 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	6919      	ldr	r1, [r3, #16]
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0e:	460a      	mov	r2, r1
 800aa10:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	0151      	lsls	r1, r2, #5
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	440a      	add	r2, r1
 800aa28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	371c      	adds	r7, #28
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	e007ffff 	.word	0xe007ffff
 800aa44:	fff80000 	.word	0xfff80000

0800aa48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	785b      	ldrb	r3, [r3, #1]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d14a      	bne.n	800aafc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa7e:	f040 8086 	bne.w	800ab8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	7812      	ldrb	r2, [r2, #0]
 800aa96:	0151      	lsls	r1, r2, #5
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	440a      	add	r2, r1
 800aa9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aaa4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	7812      	ldrb	r2, [r2, #0]
 800aaba:	0151      	lsls	r1, r2, #5
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	440a      	add	r2, r1
 800aac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aac8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3301      	adds	r3, #1
 800aace:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f242 7210 	movw	r2, #10000	; 0x2710
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d902      	bls.n	800aae0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	75fb      	strb	r3, [r7, #23]
          break;
 800aade:	e056      	b.n	800ab8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	015a      	lsls	r2, r3, #5
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	4413      	add	r3, r2
 800aaea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaf8:	d0e7      	beq.n	800aaca <USB_EPStopXfer+0x82>
 800aafa:	e048      	b.n	800ab8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab14:	d13b      	bne.n	800ab8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	7812      	ldrb	r2, [r2, #0]
 800ab2a:	0151      	lsls	r1, r2, #5
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	440a      	add	r2, r1
 800ab30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	7812      	ldrb	r2, [r2, #0]
 800ab4e:	0151      	lsls	r1, r2, #5
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	440a      	add	r2, r1
 800ab54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3301      	adds	r3, #1
 800ab62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f242 7210 	movw	r2, #10000	; 0x2710
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d902      	bls.n	800ab74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	75fb      	strb	r3, [r7, #23]
          break;
 800ab72:	e00c      	b.n	800ab8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	015a      	lsls	r2, r3, #5
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab8c:	d0e7      	beq.n	800ab5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	371c      	adds	r7, #28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b089      	sub	sp, #36	; 0x24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	4611      	mov	r1, r2
 800aba8:	461a      	mov	r2, r3
 800abaa:	460b      	mov	r3, r1
 800abac:	71fb      	strb	r3, [r7, #7]
 800abae:	4613      	mov	r3, r2
 800abb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800abba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d123      	bne.n	800ac0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800abc2:	88bb      	ldrh	r3, [r7, #4]
 800abc4:	3303      	adds	r3, #3
 800abc6:	089b      	lsrs	r3, r3, #2
 800abc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800abca:	2300      	movs	r3, #0
 800abcc:	61bb      	str	r3, [r7, #24]
 800abce:	e018      	b.n	800ac02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800abd0:	79fb      	ldrb	r3, [r7, #7]
 800abd2:	031a      	lsls	r2, r3, #12
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	4413      	add	r3, r2
 800abd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abdc:	461a      	mov	r2, r3
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	3301      	adds	r3, #1
 800abe8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	3301      	adds	r3, #1
 800abee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	3301      	adds	r3, #1
 800abf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	3301      	adds	r3, #1
 800abfa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	3301      	adds	r3, #1
 800ac00:	61bb      	str	r3, [r7, #24]
 800ac02:	69ba      	ldr	r2, [r7, #24]
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d3e2      	bcc.n	800abd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3724      	adds	r7, #36	; 0x24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b08b      	sub	sp, #44	; 0x2c
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	4613      	mov	r3, r2
 800ac24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ac2e:	88fb      	ldrh	r3, [r7, #6]
 800ac30:	089b      	lsrs	r3, r3, #2
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ac36:	88fb      	ldrh	r3, [r7, #6]
 800ac38:	f003 0303 	and.w	r3, r3, #3
 800ac3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ac3e:	2300      	movs	r3, #0
 800ac40:	623b      	str	r3, [r7, #32]
 800ac42:	e014      	b.n	800ac6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	3301      	adds	r3, #1
 800ac54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ac56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac58:	3301      	adds	r3, #1
 800ac5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	3301      	adds	r3, #1
 800ac60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ac62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac64:	3301      	adds	r3, #1
 800ac66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	623b      	str	r3, [r7, #32]
 800ac6e:	6a3a      	ldr	r2, [r7, #32]
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d3e6      	bcc.n	800ac44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ac76:	8bfb      	ldrh	r3, [r7, #30]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d01e      	beq.n	800acba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac86:	461a      	mov	r2, r3
 800ac88:	f107 0310 	add.w	r3, r7, #16
 800ac8c:	6812      	ldr	r2, [r2, #0]
 800ac8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	fa22 f303 	lsr.w	r3, r2, r3
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	701a      	strb	r2, [r3, #0]
      i++;
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	3301      	adds	r3, #1
 800aca6:	623b      	str	r3, [r7, #32]
      pDest++;
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	3301      	adds	r3, #1
 800acac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800acae:	8bfb      	ldrh	r3, [r7, #30]
 800acb0:	3b01      	subs	r3, #1
 800acb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800acb4:	8bfb      	ldrh	r3, [r7, #30]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1ea      	bne.n	800ac90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	372c      	adds	r7, #44	; 0x2c
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	785b      	ldrb	r3, [r3, #1]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d12c      	bne.n	800ad3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4413      	add	r3, r2
 800acec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	db12      	blt.n	800ad1c <USB_EPSetStall+0x54>
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00f      	beq.n	800ad1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	0151      	lsls	r1, r2, #5
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	440a      	add	r2, r1
 800ad12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	0151      	lsls	r1, r2, #5
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	440a      	add	r2, r1
 800ad32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	e02b      	b.n	800ad96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	db12      	blt.n	800ad76 <USB_EPSetStall+0xae>
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00f      	beq.n	800ad76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	0151      	lsls	r1, r2, #5
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	440a      	add	r2, r1
 800ad6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	015a      	lsls	r2, r3, #5
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	0151      	lsls	r1, r2, #5
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	440a      	add	r2, r1
 800ad8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	785b      	ldrb	r3, [r3, #1]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d128      	bne.n	800ae12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	0151      	lsls	r1, r2, #5
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	440a      	add	r2, r1
 800add6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	791b      	ldrb	r3, [r3, #4]
 800ade4:	2b03      	cmp	r3, #3
 800ade6:	d003      	beq.n	800adf0 <USB_EPClearStall+0x4c>
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	791b      	ldrb	r3, [r3, #4]
 800adec:	2b02      	cmp	r3, #2
 800adee:	d138      	bne.n	800ae62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	0151      	lsls	r1, r2, #5
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	440a      	add	r2, r1
 800ae06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	e027      	b.n	800ae62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	0151      	lsls	r1, r2, #5
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	440a      	add	r2, r1
 800ae28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	791b      	ldrb	r3, [r3, #4]
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d003      	beq.n	800ae42 <USB_EPClearStall+0x9e>
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	791b      	ldrb	r3, [r3, #4]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d10f      	bne.n	800ae62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	0151      	lsls	r1, r2, #5
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	440a      	add	r2, r1
 800ae58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ae92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	78fb      	ldrb	r3, [r7, #3]
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aea4:	68f9      	ldr	r1, [r7, #12]
 800aea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aed6:	f023 0303 	bic.w	r3, r3, #3
 800aeda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aeea:	f023 0302 	bic.w	r3, r3, #2
 800aeee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aefe:	b480      	push	{r7}
 800af00:	b085      	sub	sp, #20
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af18:	f023 0303 	bic.w	r3, r3, #3
 800af1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af2c:	f043 0302 	orr.w	r3, r3, #2
 800af30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	4013      	ands	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800af58:	68fb      	ldr	r3, [r7, #12]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af82:	69db      	ldr	r3, [r3, #28]
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	4013      	ands	r3, r2
 800af88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	0c1b      	lsrs	r3, r3, #16
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b085      	sub	sp, #20
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb6:	69db      	ldr	r3, [r3, #28]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	4013      	ands	r3, r2
 800afbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	b29b      	uxth	r3, r3
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800afce:	b480      	push	{r7}
 800afd0:	b085      	sub	sp, #20
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	460b      	mov	r3, r1
 800afd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800afde:	78fb      	ldrb	r3, [r7, #3]
 800afe0:	015a      	lsls	r2, r3, #5
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	4413      	add	r3, r2
 800afe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	68ba      	ldr	r2, [r7, #8]
 800aff8:	4013      	ands	r3, r2
 800affa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800affc:	68bb      	ldr	r3, [r7, #8]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b087      	sub	sp, #28
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b02e:	78fb      	ldrb	r3, [r7, #3]
 800b030:	f003 030f 	and.w	r3, r3, #15
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	fa22 f303 	lsr.w	r3, r2, r3
 800b03a:	01db      	lsls	r3, r3, #7
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4313      	orrs	r3, r2
 800b042:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	4013      	ands	r3, r2
 800b056:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b058:	68bb      	ldr	r3, [r7, #8]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b066:	b480      	push	{r7}
 800b068:	b083      	sub	sp, #12
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	f003 0301 	and.w	r3, r3, #1
}
 800b076:	4618      	mov	r0, r3
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
	...

0800b084 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <USB_ActivateSetup+0x44>)
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	fffff800 	.word	0xfffff800

0800b0cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b087      	sub	sp, #28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	333c      	adds	r3, #60	; 0x3c
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	4a26      	ldr	r2, [pc, #152]	; (800b184 <USB_EP0_OutStart+0xb8>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d90a      	bls.n	800b106 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b100:	d101      	bne.n	800b106 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	e037      	b.n	800b176 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b10c:	461a      	mov	r2, r3
 800b10e:	2300      	movs	r3, #0
 800b110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b134:	f043 0318 	orr.w	r3, r3, #24
 800b138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b148:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b14c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b14e:	7afb      	ldrb	r3, [r7, #11]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d10f      	bne.n	800b174 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b15a:	461a      	mov	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b16e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	4f54300a 	.word	0x4f54300a

0800b188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3301      	adds	r3, #1
 800b198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	4a13      	ldr	r2, [pc, #76]	; (800b1ec <USB_CoreReset+0x64>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d901      	bls.n	800b1a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e01b      	b.n	800b1de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	daf2      	bge.n	800b194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	f043 0201 	orr.w	r2, r3, #1
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4a09      	ldr	r2, [pc, #36]	; (800b1ec <USB_CoreReset+0x64>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d901      	bls.n	800b1d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e006      	b.n	800b1de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	f003 0301 	and.w	r3, r3, #1
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d0f0      	beq.n	800b1be <USB_CoreReset+0x36>

  return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	00030d40 	.word	0x00030d40

0800b1f0 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800b1fc:	f643 4050 	movw	r0, #15440	; 0x3c50
 800b200:	f002 fb2c 	bl	800d85c <USBD_static_malloc>
 800b204:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d109      	bne.n	800b220 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	32b0      	adds	r2, #176	; 0xb0
 800b216:	2100      	movs	r1, #0
 800b218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b21c:	2302      	movs	r3, #2
 800b21e:	e07e      	b.n	800b31e <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	32b0      	adds	r2, #176	; 0xb0
 800b22a:	68f9      	ldr	r1, [r7, #12]
 800b22c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	32b0      	adds	r2, #176	; 0xb0
 800b23a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	7c1b      	ldrb	r3, [r3, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10e      	bne.n	800b26a <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800b24c:	4b36      	ldr	r3, [pc, #216]	; (800b328 <USBD_AUDIO_Init+0x138>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	f003 020f 	and.w	r2, r3, #15
 800b254:	6879      	ldr	r1, [r7, #4]
 800b256:	4613      	mov	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	440b      	add	r3, r1
 800b260:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b264:	2201      	movs	r2, #1
 800b266:	801a      	strh	r2, [r3, #0]
 800b268:	e00d      	b.n	800b286 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800b26a:	4b2f      	ldr	r3, [pc, #188]	; (800b328 <USBD_AUDIO_Init+0x138>)
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	f003 020f 	and.w	r2, r3, #15
 800b272:	6879      	ldr	r1, [r7, #4]
 800b274:	4613      	mov	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	440b      	add	r3, r1
 800b27e:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b282:	2201      	movs	r2, #1
 800b284:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800b286:	4b28      	ldr	r3, [pc, #160]	; (800b328 <USBD_AUDIO_Init+0x138>)
 800b288:	7819      	ldrb	r1, [r3, #0]
 800b28a:	23c0      	movs	r3, #192	; 0xc0
 800b28c:	2201      	movs	r2, #1
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f002 f9c1 	bl	800d616 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 800b294:	4b24      	ldr	r3, [pc, #144]	; (800b328 <USBD_AUDIO_Init+0x138>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	f003 020f 	and.w	r2, r3, #15
 800b29c:	6879      	ldr	r1, [r7, #4]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	440b      	add	r3, r1
 800b2a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b2bc:	2203      	movs	r2, #3
 800b2be:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	33b0      	adds	r3, #176	; 0xb0
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2146      	movs	r1, #70	; 0x46
 800b2fc:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800b300:	4798      	blx	r3
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800b308:	2303      	movs	r3, #3
 800b30a:	e008      	b.n	800b31e <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 800b30c:	4b06      	ldr	r3, [pc, #24]	; (800b328 <USBD_AUDIO_Init+0x138>)
 800b30e:	7819      	ldrb	r1, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	1d1a      	adds	r2, r3, #4
 800b314:	23c0      	movs	r3, #192	; 0xc0
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f002 fa6c 	bl	800d7f4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	240000c2 	.word	0x240000c2

0800b32c <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 800b338:	4b28      	ldr	r3, [pc, #160]	; (800b3dc <USBD_AUDIO_DeInit+0xb0>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f002 f98f 	bl	800d662 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 800b344:	4b25      	ldr	r3, [pc, #148]	; (800b3dc <USBD_AUDIO_DeInit+0xb0>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	f003 020f 	and.w	r2, r3, #15
 800b34c:	6879      	ldr	r1, [r7, #4]
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	440b      	add	r3, r1
 800b358:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b35c:	2200      	movs	r2, #0
 800b35e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 800b360:	4b1e      	ldr	r3, [pc, #120]	; (800b3dc <USBD_AUDIO_DeInit+0xb0>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	f003 020f 	and.w	r2, r3, #15
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	4613      	mov	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	440b      	add	r3, r1
 800b374:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b378:	2200      	movs	r2, #0
 800b37a:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	32b0      	adds	r2, #176	; 0xb0
 800b386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d020      	beq.n	800b3d0 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	33b0      	adds	r3, #176	; 0xb0
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	32b0      	adds	r2, #176	; 0xb0
 800b3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f002 fa60 	bl	800d878 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	32b0      	adds	r2, #176	; 0xb0
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	240000c2 	.word	0x240000c2

0800b3e0 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	32b0      	adds	r2, #176	; 0xb0
 800b3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b400:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	e0c1      	b.n	800b590 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b414:	2b00      	cmp	r3, #0
 800b416:	d01a      	beq.n	800b44e <USBD_AUDIO_Setup+0x6e>
 800b418:	2b20      	cmp	r3, #32
 800b41a:	f040 80b1 	bne.w	800b580 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	785b      	ldrb	r3, [r3, #1]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d006      	beq.n	800b434 <USBD_AUDIO_Setup+0x54>
 800b426:	2b81      	cmp	r3, #129	; 0x81
 800b428:	d109      	bne.n	800b43e <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fa01 	bl	800b834 <AUDIO_REQ_GetCurrent>
          break;
 800b432:	e00b      	b.n	800b44c <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fa28 	bl	800b88c <AUDIO_REQ_SetCurrent>
          break;
 800b43c:	e006      	b.n	800b44c <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 fc8c 	bl	800cd5e <USBD_CtlError>
          ret = USBD_FAIL;
 800b446:	2303      	movs	r3, #3
 800b448:	75fb      	strb	r3, [r7, #23]
          break;
 800b44a:	bf00      	nop
      }
      break;
 800b44c:	e09f      	b.n	800b58e <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	785b      	ldrb	r3, [r3, #1]
 800b452:	2b0b      	cmp	r3, #11
 800b454:	f200 8089 	bhi.w	800b56a <USBD_AUDIO_Setup+0x18a>
 800b458:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <USBD_AUDIO_Setup+0x80>)
 800b45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45e:	bf00      	nop
 800b460:	0800b491 	.word	0x0800b491
 800b464:	0800b579 	.word	0x0800b579
 800b468:	0800b56b 	.word	0x0800b56b
 800b46c:	0800b56b 	.word	0x0800b56b
 800b470:	0800b56b 	.word	0x0800b56b
 800b474:	0800b56b 	.word	0x0800b56b
 800b478:	0800b4bb 	.word	0x0800b4bb
 800b47c:	0800b56b 	.word	0x0800b56b
 800b480:	0800b56b 	.word	0x0800b56b
 800b484:	0800b56b 	.word	0x0800b56b
 800b488:	0800b503 	.word	0x0800b503
 800b48c:	0800b52b 	.word	0x0800b52b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b03      	cmp	r3, #3
 800b49a:	d107      	bne.n	800b4ac <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b49c:	f107 0308 	add.w	r3, r7, #8
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f001 fccb 	bl	800ce40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4aa:	e068      	b.n	800b57e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f001 fc55 	bl	800cd5e <USBD_CtlError>
            ret = USBD_FAIL;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	75fb      	strb	r3, [r7, #23]
          break;
 800b4b8:	e061      	b.n	800b57e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	885b      	ldrh	r3, [r3, #2]
 800b4be:	0a1b      	lsrs	r3, r3, #8
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	2b21      	cmp	r3, #33	; 0x21
 800b4c4:	d15a      	bne.n	800b57c <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f000 fa4b 	bl	800b968 <USBD_AUDIO_GetAudioHeaderDesc>
 800b4d2:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00c      	beq.n	800b4f4 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	88db      	ldrh	r3, [r3, #6]
 800b4de:	2b09      	cmp	r3, #9
 800b4e0:	bf28      	it	cs
 800b4e2:	2309      	movcs	r3, #9
 800b4e4:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4e6:	897b      	ldrh	r3, [r7, #10]
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	68f9      	ldr	r1, [r7, #12]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 fca7 	bl	800ce40 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800b4f2:	e043      	b.n	800b57c <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 fc31 	bl	800cd5e <USBD_CtlError>
              ret = USBD_FAIL;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	75fb      	strb	r3, [r7, #23]
          break;
 800b500:	e03c      	b.n	800b57c <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d106      	bne.n	800b51c <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	2201      	movs	r2, #1
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f001 fc93 	bl	800ce40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b51a:	e030      	b.n	800b57e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f001 fc1d 	bl	800cd5e <USBD_CtlError>
            ret = USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	75fb      	strb	r3, [r7, #23]
          break;
 800b528:	e029      	b.n	800b57e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b03      	cmp	r3, #3
 800b534:	d112      	bne.n	800b55c <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	885b      	ldrh	r3, [r3, #2]
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d806      	bhi.n	800b54e <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	885b      	ldrh	r3, [r3, #2]
 800b544:	b2db      	uxtb	r3, r3
 800b546:	461a      	mov	r2, r3
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b54c:	e017      	b.n	800b57e <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f001 fc04 	bl	800cd5e <USBD_CtlError>
              ret = USBD_FAIL;
 800b556:	2303      	movs	r3, #3
 800b558:	75fb      	strb	r3, [r7, #23]
          break;
 800b55a:	e010      	b.n	800b57e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f001 fbfd 	bl	800cd5e <USBD_CtlError>
            ret = USBD_FAIL;
 800b564:	2303      	movs	r3, #3
 800b566:	75fb      	strb	r3, [r7, #23]
          break;
 800b568:	e009      	b.n	800b57e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f001 fbf6 	bl	800cd5e <USBD_CtlError>
          ret = USBD_FAIL;
 800b572:	2303      	movs	r3, #3
 800b574:	75fb      	strb	r3, [r7, #23]
          break;
 800b576:	e002      	b.n	800b57e <USBD_AUDIO_Setup+0x19e>
          break;
 800b578:	bf00      	nop
 800b57a:	e008      	b.n	800b58e <USBD_AUDIO_Setup+0x1ae>
          break;
 800b57c:	bf00      	nop
      }
      break;
 800b57e:	e006      	b.n	800b58e <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 fbeb 	bl	800cd5e <USBD_CtlError>
      ret = USBD_FAIL;
 800b588:	2303      	movs	r3, #3
 800b58a:	75fb      	strb	r3, [r7, #23]
      break;
 800b58c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	226d      	movs	r2, #109	; 0x6d
 800b5a4:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800b5a6:	4b03      	ldr	r3, [pc, #12]	; (800b5b4 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	24000048 	.word	0x24000048

0800b5b8 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af02      	add	r7, sp, #8
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	70fb      	strb	r3, [r7, #3]
//  UNUSED(pdev);
//  UNUSED(epnum);

	USBD_AUDIO_HandleTypeDef   *haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ca:	60fb      	str	r3, [r7, #12]
		HAL_PCD_EP_Flush(pdev->pData, 0x81);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5d2:	2181      	movs	r1, #129	; 0x81
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7f9 ff24 	bl	8005422 <HAL_PCD_EP_Flush>
		HAL_PCD_EP_Transmit(pdev->pData, 0x81, haudio->buffer, AUDIO_OUT_PACKET); //buffµÄ´óÐ¡ÊÇAUDIO_OUT_PACKET * AUDIO_OUT_PACKET_NUM = (48000*2*2/1000) * 80
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	1d1a      	adds	r2, r3, #4
 800b5e4:	23c0      	movs	r3, #192	; 0xc0
 800b5e6:	2181      	movs	r1, #129	; 0x81
 800b5e8:	f7f9 fde6 	bl	80051b8 <HAL_PCD_EP_Transmit>
		printf("UAIn %d %d %d %d\r\n", AUDIO_OUT_PACKET, ((int16_t*)haudio->buffer)[0], ((int16_t*)haudio->buffer)[1], ((int16_t*)haudio->buffer)[2]);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	3302      	adds	r3, #2
 800b5fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b600:	4619      	mov	r1, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3304      	adds	r3, #4
 800b606:	3304      	adds	r3, #4
 800b608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	460b      	mov	r3, r1
 800b610:	21c0      	movs	r1, #192	; 0xc0
 800b612:	4804      	ldr	r0, [pc, #16]	; (800b624 <USBD_AUDIO_DataIn+0x6c>)
 800b614:	f002 f998 	bl	800d948 <iprintf>


  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	0800e970 	.word	0x0800e970

0800b628 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	32b0      	adds	r2, #176	; 0xb0
 800b63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b646:	2303      	movs	r3, #3
 800b648:	e02a      	b.n	800b6a0 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b650:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 800b654:	2b01      	cmp	r3, #1
 800b656:	d122      	bne.n	800b69e <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b65e:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 800b662:	2b02      	cmp	r3, #2
 800b664:	d11b      	bne.n	800b69e <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	33b0      	adds	r3, #176	; 0xb0
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800b67e:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 800b682:	4610      	mov	r0, r2
 800b684:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b083      	sub	sp, #12
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	32b0      	adds	r2, #176	; 0xb0
 800b71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b722:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d101      	bne.n	800b72e <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e07c      	b.n	800b828 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 800b72e:	4b40      	ldr	r3, [pc, #256]	; (800b830 <USBD_AUDIO_DataOut+0x128>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	78fa      	ldrb	r2, [r7, #3]
 800b734:	429a      	cmp	r2, r3
 800b736:	d176      	bne.n	800b826 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800b738:	78fb      	ldrb	r3, [r7, #3]
 800b73a:	4619      	mov	r1, r3
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f002 f87a 	bl	800d836 <USBD_LL_GetRxDataSize>
 800b742:	4603      	mov	r3, r0
 800b744:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	33b0      	adds	r3, #176	; 0xb0
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800b75e:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 800b762:	4611      	mov	r1, r2
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	440a      	add	r2, r1
 800b768:	1d10      	adds	r0, r2, #4
 800b76a:	8979      	ldrh	r1, [r7, #10]
 800b76c:	2201      	movs	r2, #1
 800b76e:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b776:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 800b77a:	897b      	ldrh	r3, [r7, #10]
 800b77c:	4413      	add	r3, r2
 800b77e:	b29a      	uxth	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b786:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b790:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800b794:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800b798:	d121      	bne.n	800b7de <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b7ac:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 800b7b0:	2b03      	cmp	r3, #3
 800b7b2:	d114      	bne.n	800b7de <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	33b0      	adds	r3, #176	; 0xb0
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	1d10      	adds	r0, r2, #4
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800b7d0:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b7e4:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10d      	bne.n	800b808 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b7f2:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800b7f6:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800b7fa:	d105      	bne.n	800b808 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800b808:	4b09      	ldr	r3, [pc, #36]	; (800b830 <USBD_AUDIO_DataOut+0x128>)
 800b80a:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b812:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800b816:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4413      	add	r3, r2
 800b81c:	1d1a      	adds	r2, r3, #4
 800b81e:	23c0      	movs	r3, #192	; 0xc0
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 ffe7 	bl	800d7f4 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	240000c2 	.word	0x240000c2

0800b834 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	32b0      	adds	r2, #176	; 0xb0
 800b848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d017      	beq.n	800b884 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800b85a:	4413      	add	r3, r2
 800b85c:	2240      	movs	r2, #64	; 0x40
 800b85e:	2100      	movs	r1, #0
 800b860:	4618      	mov	r0, r3
 800b862:	f002 f869 	bl	800d938 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800b86c:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	88d2      	ldrh	r2, [r2, #6]
 800b872:	2a40      	cmp	r2, #64	; 0x40
 800b874:	bf28      	it	cs
 800b876:	2240      	movcs	r2, #64	; 0x40
 800b878:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f001 fadf 	bl	800ce40 <USBD_CtlSendData>
 800b882:	e000      	b.n	800b886 <AUDIO_REQ_GetCurrent+0x52>
    return;
 800b884:	bf00      	nop
}
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	32b0      	adds	r2, #176	; 0xb0
 800b8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d02f      	beq.n	800b90c <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	88db      	ldrh	r3, [r3, #6]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d02c      	beq.n	800b90e <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	88db      	ldrh	r3, [r3, #6]
 800b8c4:	2b3f      	cmp	r3, #63	; 0x3f
 800b8c6:	d803      	bhi.n	800b8d0 <AUDIO_REQ_SetCurrent+0x44>
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	88db      	ldrh	r3, [r3, #6]
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	e000      	b.n	800b8d2 <AUDIO_REQ_SetCurrent+0x46>
 800b8d0:	2240      	movs	r2, #64	; 0x40
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b8d8:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	889b      	ldrh	r3, [r3, #4]
 800b8e0:	0a1b      	lsrs	r3, r3, #8
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b8ec:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800b8f6:	4413      	add	r3, r2
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800b8fe:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 800b902:	4619      	mov	r1, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f001 fac7 	bl	800ce98 <USBD_CtlPrepareRx>
 800b90a:	e000      	b.n	800b90e <AUDIO_REQ_SetCurrent+0x82>
    return;
 800b90c:	bf00      	nop
  }
}
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	220a      	movs	r2, #10
 800b920:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800b922:	4b03      	ldr	r3, [pc, #12]	; (800b930 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	240000b8 	.word	0x240000b8

0800b934 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b944:	2303      	movs	r3, #3
 800b946:	e009      	b.n	800b95c <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	33b0      	adds	r3, #176	; 0xb0
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4413      	add	r3, r2
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 800b978:	2300      	movs	r3, #0
 800b97a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	885b      	ldrh	r3, [r3, #2]
 800b980:	b29a      	uxth	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	b29b      	uxth	r3, r3
 800b988:	429a      	cmp	r2, r3
 800b98a:	d91c      	bls.n	800b9c6 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	b29b      	uxth	r3, r3
 800b992:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b994:	e011      	b.n	800b9ba <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b996:	f107 030a 	add.w	r3, r7, #10
 800b99a:	4619      	mov	r1, r3
 800b99c:	6978      	ldr	r0, [r7, #20]
 800b99e:	f000 fbe0 	bl	800c162 <USBD_GetNextDesc>
 800b9a2:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	2b24      	cmp	r3, #36	; 0x24
 800b9aa:	d106      	bne.n	800b9ba <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d102      	bne.n	800b9ba <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	613b      	str	r3, [r7, #16]
        break;
 800b9b8:	e005      	b.n	800b9c6 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	885b      	ldrh	r3, [r3, #2]
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	897b      	ldrh	r3, [r7, #10]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d8e7      	bhi.n	800b996 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 800b9c6:	693b      	ldr	r3, [r7, #16]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e01f      	b.n	800ba28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	79fa      	ldrb	r2, [r7, #7]
 800ba1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f001 fd8f 	bl	800d540 <USBD_LL_Init>
 800ba22:	4603      	mov	r3, r0
 800ba24:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3718      	adds	r7, #24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e025      	b.n	800ba94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	32ae      	adds	r2, #174	; 0xae
 800ba5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00f      	beq.n	800ba84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	32ae      	adds	r2, #174	; 0xae
 800ba6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba74:	f107 020e 	add.w	r2, r7, #14
 800ba78:	4610      	mov	r0, r2
 800ba7a:	4798      	blx	r3
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f001 fd9b 	bl	800d5e0 <USBD_LL_Start>
 800baaa:	4603      	mov	r3, r0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800babc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800babe:	4618      	mov	r0, r3
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	460b      	mov	r3, r1
 800bad4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d009      	beq.n	800baf8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	78fa      	ldrb	r2, [r7, #3]
 800baee:	4611      	mov	r1, r2
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	4798      	blx	r3
 800baf4:	4603      	mov	r3, r0
 800baf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	78fa      	ldrb	r2, [r7, #3]
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b084      	sub	sp, #16
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb46:	6839      	ldr	r1, [r7, #0]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f001 f8ce 	bl	800ccea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2201      	movs	r2, #1
 800bb52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb6a:	f003 031f 	and.w	r3, r3, #31
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d01a      	beq.n	800bba8 <USBD_LL_SetupStage+0x72>
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d822      	bhi.n	800bbbc <USBD_LL_SetupStage+0x86>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d002      	beq.n	800bb80 <USBD_LL_SetupStage+0x4a>
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d00a      	beq.n	800bb94 <USBD_LL_SetupStage+0x5e>
 800bb7e:	e01d      	b.n	800bbbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fb25 	bl	800c1d8 <USBD_StdDevReq>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73fb      	strb	r3, [r7, #15]
      break;
 800bb92:	e020      	b.n	800bbd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fb8d 	bl	800c2bc <USBD_StdItfReq>
 800bba2:	4603      	mov	r3, r0
 800bba4:	73fb      	strb	r3, [r7, #15]
      break;
 800bba6:	e016      	b.n	800bbd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fbef 	bl	800c394 <USBD_StdEPReq>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73fb      	strb	r3, [r7, #15]
      break;
 800bbba:	e00c      	b.n	800bbd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f001 fd68 	bl	800d6a0 <USBD_LL_StallEP>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd4:	bf00      	nop
  }

  return ret;
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3710      	adds	r7, #16
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d16e      	bne.n	800bcd6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bbfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	f040 8098 	bne.w	800bd3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	689a      	ldr	r2, [r3, #8]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d913      	bls.n	800bc40 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	689a      	ldr	r2, [r3, #8]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	1ad2      	subs	r2, r2, r3
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	68da      	ldr	r2, [r3, #12]
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	bf28      	it	cs
 800bc32:	4613      	movcs	r3, r2
 800bc34:	461a      	mov	r2, r3
 800bc36:	6879      	ldr	r1, [r7, #4]
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f001 f94a 	bl	800ced2 <USBD_CtlContinueRx>
 800bc3e:	e07d      	b.n	800bd3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc46:	f003 031f 	and.w	r3, r3, #31
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d014      	beq.n	800bc78 <USBD_LL_DataOutStage+0x98>
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d81d      	bhi.n	800bc8e <USBD_LL_DataOutStage+0xae>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d002      	beq.n	800bc5c <USBD_LL_DataOutStage+0x7c>
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d003      	beq.n	800bc62 <USBD_LL_DataOutStage+0x82>
 800bc5a:	e018      	b.n	800bc8e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	75bb      	strb	r3, [r7, #22]
            break;
 800bc60:	e018      	b.n	800bc94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f000 fa5e 	bl	800c12e <USBD_CoreFindIF>
 800bc72:	4603      	mov	r3, r0
 800bc74:	75bb      	strb	r3, [r7, #22]
            break;
 800bc76:	e00d      	b.n	800bc94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	4619      	mov	r1, r3
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f000 fa60 	bl	800c148 <USBD_CoreFindEP>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	75bb      	strb	r3, [r7, #22]
            break;
 800bc8c:	e002      	b.n	800bc94 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75bb      	strb	r3, [r7, #22]
            break;
 800bc92:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc94:	7dbb      	ldrb	r3, [r7, #22]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d119      	bne.n	800bcce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d113      	bne.n	800bcce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bca6:	7dba      	ldrb	r2, [r7, #22]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	32ae      	adds	r2, #174	; 0xae
 800bcac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb0:	691b      	ldr	r3, [r3, #16]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00b      	beq.n	800bcce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bcb6:	7dba      	ldrb	r2, [r7, #22]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bcbe:	7dba      	ldrb	r2, [r7, #22]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	32ae      	adds	r2, #174	; 0xae
 800bcc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f001 f910 	bl	800cef4 <USBD_CtlSendStatus>
 800bcd4:	e032      	b.n	800bd3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcd6:	7afb      	ldrb	r3, [r7, #11]
 800bcd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	4619      	mov	r1, r3
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f000 fa31 	bl	800c148 <USBD_CoreFindEP>
 800bce6:	4603      	mov	r3, r0
 800bce8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcea:	7dbb      	ldrb	r3, [r7, #22]
 800bcec:	2bff      	cmp	r3, #255	; 0xff
 800bcee:	d025      	beq.n	800bd3c <USBD_LL_DataOutStage+0x15c>
 800bcf0:	7dbb      	ldrb	r3, [r7, #22]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d122      	bne.n	800bd3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	2b03      	cmp	r3, #3
 800bd00:	d117      	bne.n	800bd32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bd02:	7dba      	ldrb	r2, [r7, #22]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	32ae      	adds	r2, #174	; 0xae
 800bd08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00f      	beq.n	800bd32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bd12:	7dba      	ldrb	r2, [r7, #22]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd1a:	7dba      	ldrb	r2, [r7, #22]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	32ae      	adds	r2, #174	; 0xae
 800bd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	7afa      	ldrb	r2, [r7, #11]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	4798      	blx	r3
 800bd2e:	4603      	mov	r3, r0
 800bd30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd38:	7dfb      	ldrb	r3, [r7, #23]
 800bd3a:	e000      	b.n	800bd3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3718      	adds	r7, #24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b086      	sub	sp, #24
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	60f8      	str	r0, [r7, #12]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	607a      	str	r2, [r7, #4]
 800bd52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd54:	7afb      	ldrb	r3, [r7, #11]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d16f      	bne.n	800be3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	3314      	adds	r3, #20
 800bd5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d15a      	bne.n	800be20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	689a      	ldr	r2, [r3, #8]
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d914      	bls.n	800bda0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	689a      	ldr	r2, [r3, #8]
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	1ad2      	subs	r2, r2, r3
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f001 f872 	bl	800ce76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd92:	2300      	movs	r3, #0
 800bd94:	2200      	movs	r2, #0
 800bd96:	2100      	movs	r1, #0
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f001 fd2b 	bl	800d7f4 <USBD_LL_PrepareReceive>
 800bd9e:	e03f      	b.n	800be20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	68da      	ldr	r2, [r3, #12]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d11c      	bne.n	800bde6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d316      	bcc.n	800bde6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d20f      	bcs.n	800bde6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2100      	movs	r1, #0
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f001 f853 	bl	800ce76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdd8:	2300      	movs	r3, #0
 800bdda:	2200      	movs	r2, #0
 800bddc:	2100      	movs	r1, #0
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f001 fd08 	bl	800d7f4 <USBD_LL_PrepareReceive>
 800bde4:	e01c      	b.n	800be20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d10f      	bne.n	800be12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d009      	beq.n	800be12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2200      	movs	r2, #0
 800be02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be12:	2180      	movs	r1, #128	; 0x80
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f001 fc43 	bl	800d6a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f001 f87d 	bl	800cf1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d03a      	beq.n	800bea0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f7ff fe42 	bl	800bab4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be38:	e032      	b.n	800bea0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be3a:	7afb      	ldrb	r3, [r7, #11]
 800be3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be40:	b2db      	uxtb	r3, r3
 800be42:	4619      	mov	r1, r3
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f000 f97f 	bl	800c148 <USBD_CoreFindEP>
 800be4a:	4603      	mov	r3, r0
 800be4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	2bff      	cmp	r3, #255	; 0xff
 800be52:	d025      	beq.n	800bea0 <USBD_LL_DataInStage+0x15a>
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d122      	bne.n	800bea0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b03      	cmp	r3, #3
 800be64:	d11c      	bne.n	800bea0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be66:	7dfa      	ldrb	r2, [r7, #23]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	32ae      	adds	r2, #174	; 0xae
 800be6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d014      	beq.n	800bea0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800be76:	7dfa      	ldrb	r2, [r7, #23]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be7e:	7dfa      	ldrb	r2, [r7, #23]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	32ae      	adds	r2, #174	; 0xae
 800be84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be88:	695b      	ldr	r3, [r3, #20]
 800be8a:	7afa      	ldrb	r2, [r7, #11]
 800be8c:	4611      	mov	r1, r2
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	4798      	blx	r3
 800be92:	4603      	mov	r3, r0
 800be94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be96:	7dbb      	ldrb	r3, [r7, #22]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d001      	beq.n	800bea0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800be9c:	7dbb      	ldrb	r3, [r7, #22]
 800be9e:	e000      	b.n	800bea2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3718      	adds	r7, #24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b084      	sub	sp, #16
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d014      	beq.n	800bf10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00e      	beq.n	800bf10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	6852      	ldr	r2, [r2, #4]
 800befe:	b2d2      	uxtb	r2, r2
 800bf00:	4611      	mov	r1, r2
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	4798      	blx	r3
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf10:	2340      	movs	r3, #64	; 0x40
 800bf12:	2200      	movs	r2, #0
 800bf14:	2100      	movs	r1, #0
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f001 fb7d 	bl	800d616 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2240      	movs	r2, #64	; 0x40
 800bf28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf2c:	2340      	movs	r3, #64	; 0x40
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2180      	movs	r1, #128	; 0x80
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f001 fb6f 	bl	800d616 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2240      	movs	r2, #64	; 0x40
 800bf42:	621a      	str	r2, [r3, #32]

  return ret;
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf4e:	b480      	push	{r7}
 800bf50:	b083      	sub	sp, #12
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	460b      	mov	r3, r1
 800bf58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	78fa      	ldrb	r2, [r7, #3]
 800bf5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr

0800bf6e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b083      	sub	sp, #12
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2204      	movs	r2, #4
 800bf88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b083      	sub	sp, #12
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	d106      	bne.n	800bfbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr

0800bfca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b082      	sub	sp, #8
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d110      	bne.n	800c000 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00b      	beq.n	800c000 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfee:	69db      	ldr	r3, [r3, #28]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d005      	beq.n	800c000 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bffa:	69db      	ldr	r3, [r3, #28]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	460b      	mov	r3, r1
 800c014:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	32ae      	adds	r2, #174	; 0xae
 800c020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c028:	2303      	movs	r3, #3
 800c02a:	e01c      	b.n	800c066 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b03      	cmp	r3, #3
 800c036:	d115      	bne.n	800c064 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	32ae      	adds	r2, #174	; 0xae
 800c042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00b      	beq.n	800c064 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	32ae      	adds	r2, #174	; 0xae
 800c056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05a:	6a1b      	ldr	r3, [r3, #32]
 800c05c:	78fa      	ldrb	r2, [r7, #3]
 800c05e:	4611      	mov	r1, r2
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b082      	sub	sp, #8
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	460b      	mov	r3, r1
 800c078:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	32ae      	adds	r2, #174	; 0xae
 800c084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c08c:	2303      	movs	r3, #3
 800c08e:	e01c      	b.n	800c0ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d115      	bne.n	800c0c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	32ae      	adds	r2, #174	; 0xae
 800c0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00b      	beq.n	800c0c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	32ae      	adds	r2, #174	; 0xae
 800c0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c0:	78fa      	ldrb	r2, [r7, #3]
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00e      	beq.n	800c124 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	6852      	ldr	r2, [r2, #4]
 800c112:	b2d2      	uxtb	r2, r2
 800c114:	4611      	mov	r1, r2
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	4798      	blx	r3
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c120:	2303      	movs	r3, #3
 800c122:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c124:	7bfb      	ldrb	r3, [r7, #15]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c12e:	b480      	push	{r7}
 800c130:	b083      	sub	sp, #12
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	460b      	mov	r3, r1
 800c138:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c13a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c154:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c156:	4618      	mov	r0, r3
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c162:	b480      	push	{r7}
 800c164:	b085      	sub	sp, #20
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	881a      	ldrh	r2, [r3, #0]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	4413      	add	r3, r2
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4413      	add	r3, r2
 800c18c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c18e:	68fb      	ldr	r3, [r7, #12]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b087      	sub	sp, #28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c1ba:	8a3b      	ldrh	r3, [r7, #16]
 800c1bc:	021b      	lsls	r3, r3, #8
 800c1be:	b21a      	sxth	r2, r3
 800c1c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	b21b      	sxth	r3, r3
 800c1c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c1ca:	89fb      	ldrh	r3, [r7, #14]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	371c      	adds	r7, #28
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1ee:	2b40      	cmp	r3, #64	; 0x40
 800c1f0:	d005      	beq.n	800c1fe <USBD_StdDevReq+0x26>
 800c1f2:	2b40      	cmp	r3, #64	; 0x40
 800c1f4:	d857      	bhi.n	800c2a6 <USBD_StdDevReq+0xce>
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00f      	beq.n	800c21a <USBD_StdDevReq+0x42>
 800c1fa:	2b20      	cmp	r3, #32
 800c1fc:	d153      	bne.n	800c2a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	32ae      	adds	r2, #174	; 0xae
 800c208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	4798      	blx	r3
 800c214:	4603      	mov	r3, r0
 800c216:	73fb      	strb	r3, [r7, #15]
      break;
 800c218:	e04a      	b.n	800c2b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	785b      	ldrb	r3, [r3, #1]
 800c21e:	2b09      	cmp	r3, #9
 800c220:	d83b      	bhi.n	800c29a <USBD_StdDevReq+0xc2>
 800c222:	a201      	add	r2, pc, #4	; (adr r2, 800c228 <USBD_StdDevReq+0x50>)
 800c224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c228:	0800c27d 	.word	0x0800c27d
 800c22c:	0800c291 	.word	0x0800c291
 800c230:	0800c29b 	.word	0x0800c29b
 800c234:	0800c287 	.word	0x0800c287
 800c238:	0800c29b 	.word	0x0800c29b
 800c23c:	0800c25b 	.word	0x0800c25b
 800c240:	0800c251 	.word	0x0800c251
 800c244:	0800c29b 	.word	0x0800c29b
 800c248:	0800c273 	.word	0x0800c273
 800c24c:	0800c265 	.word	0x0800c265
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa3c 	bl	800c6d0 <USBD_GetDescriptor>
          break;
 800c258:	e024      	b.n	800c2a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fba1 	bl	800c9a4 <USBD_SetAddress>
          break;
 800c262:	e01f      	b.n	800c2a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fbe0 	bl	800ca2c <USBD_SetConfig>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
          break;
 800c270:	e018      	b.n	800c2a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fc83 	bl	800cb80 <USBD_GetConfig>
          break;
 800c27a:	e013      	b.n	800c2a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fcb4 	bl	800cbec <USBD_GetStatus>
          break;
 800c284:	e00e      	b.n	800c2a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c286:	6839      	ldr	r1, [r7, #0]
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fce3 	bl	800cc54 <USBD_SetFeature>
          break;
 800c28e:	e009      	b.n	800c2a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c290:	6839      	ldr	r1, [r7, #0]
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fd07 	bl	800cca6 <USBD_ClrFeature>
          break;
 800c298:	e004      	b.n	800c2a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fd5e 	bl	800cd5e <USBD_CtlError>
          break;
 800c2a2:	bf00      	nop
      }
      break;
 800c2a4:	e004      	b.n	800c2b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fd58 	bl	800cd5e <USBD_CtlError>
      break;
 800c2ae:	bf00      	nop
  }

  return ret;
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop

0800c2bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2d2:	2b40      	cmp	r3, #64	; 0x40
 800c2d4:	d005      	beq.n	800c2e2 <USBD_StdItfReq+0x26>
 800c2d6:	2b40      	cmp	r3, #64	; 0x40
 800c2d8:	d852      	bhi.n	800c380 <USBD_StdItfReq+0xc4>
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <USBD_StdItfReq+0x26>
 800c2de:	2b20      	cmp	r3, #32
 800c2e0:	d14e      	bne.n	800c380 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d840      	bhi.n	800c372 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	889b      	ldrh	r3, [r3, #4]
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d836      	bhi.n	800c368 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	889b      	ldrh	r3, [r3, #4]
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff ff13 	bl	800c12e <USBD_CoreFindIF>
 800c308:	4603      	mov	r3, r0
 800c30a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
 800c30e:	2bff      	cmp	r3, #255	; 0xff
 800c310:	d01d      	beq.n	800c34e <USBD_StdItfReq+0x92>
 800c312:	7bbb      	ldrb	r3, [r7, #14]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d11a      	bne.n	800c34e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c318:	7bba      	ldrb	r2, [r7, #14]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	32ae      	adds	r2, #174	; 0xae
 800c31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00f      	beq.n	800c348 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c328:	7bba      	ldrb	r2, [r7, #14]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c330:	7bba      	ldrb	r2, [r7, #14]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	32ae      	adds	r2, #174	; 0xae
 800c336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	6839      	ldr	r1, [r7, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	4798      	blx	r3
 800c342:	4603      	mov	r3, r0
 800c344:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c346:	e004      	b.n	800c352 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c348:	2303      	movs	r3, #3
 800c34a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c34c:	e001      	b.n	800c352 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c34e:	2303      	movs	r3, #3
 800c350:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	88db      	ldrh	r3, [r3, #6]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d110      	bne.n	800c37c <USBD_StdItfReq+0xc0>
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d10d      	bne.n	800c37c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fdc7 	bl	800cef4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c366:	e009      	b.n	800c37c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fcf7 	bl	800cd5e <USBD_CtlError>
          break;
 800c370:	e004      	b.n	800c37c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fcf2 	bl	800cd5e <USBD_CtlError>
          break;
 800c37a:	e000      	b.n	800c37e <USBD_StdItfReq+0xc2>
          break;
 800c37c:	bf00      	nop
      }
      break;
 800c37e:	e004      	b.n	800c38a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fceb 	bl	800cd5e <USBD_CtlError>
      break;
 800c388:	bf00      	nop
  }

  return ret;
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	889b      	ldrh	r3, [r3, #4]
 800c3a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3b0:	2b40      	cmp	r3, #64	; 0x40
 800c3b2:	d007      	beq.n	800c3c4 <USBD_StdEPReq+0x30>
 800c3b4:	2b40      	cmp	r3, #64	; 0x40
 800c3b6:	f200 817f 	bhi.w	800c6b8 <USBD_StdEPReq+0x324>
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d02a      	beq.n	800c414 <USBD_StdEPReq+0x80>
 800c3be:	2b20      	cmp	r3, #32
 800c3c0:	f040 817a 	bne.w	800c6b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7ff febd 	bl	800c148 <USBD_CoreFindEP>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3d2:	7b7b      	ldrb	r3, [r7, #13]
 800c3d4:	2bff      	cmp	r3, #255	; 0xff
 800c3d6:	f000 8174 	beq.w	800c6c2 <USBD_StdEPReq+0x32e>
 800c3da:	7b7b      	ldrb	r3, [r7, #13]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f040 8170 	bne.w	800c6c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c3e2:	7b7a      	ldrb	r2, [r7, #13]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c3ea:	7b7a      	ldrb	r2, [r7, #13]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	32ae      	adds	r2, #174	; 0xae
 800c3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 8163 	beq.w	800c6c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c3fc:	7b7a      	ldrb	r2, [r7, #13]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	32ae      	adds	r2, #174	; 0xae
 800c402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	4798      	blx	r3
 800c40e:	4603      	mov	r3, r0
 800c410:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c412:	e156      	b.n	800c6c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	785b      	ldrb	r3, [r3, #1]
 800c418:	2b03      	cmp	r3, #3
 800c41a:	d008      	beq.n	800c42e <USBD_StdEPReq+0x9a>
 800c41c:	2b03      	cmp	r3, #3
 800c41e:	f300 8145 	bgt.w	800c6ac <USBD_StdEPReq+0x318>
 800c422:	2b00      	cmp	r3, #0
 800c424:	f000 809b 	beq.w	800c55e <USBD_StdEPReq+0x1ca>
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d03c      	beq.n	800c4a6 <USBD_StdEPReq+0x112>
 800c42c:	e13e      	b.n	800c6ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b02      	cmp	r3, #2
 800c438:	d002      	beq.n	800c440 <USBD_StdEPReq+0xac>
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d016      	beq.n	800c46c <USBD_StdEPReq+0xd8>
 800c43e:	e02c      	b.n	800c49a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c440:	7bbb      	ldrb	r3, [r7, #14]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00d      	beq.n	800c462 <USBD_StdEPReq+0xce>
 800c446:	7bbb      	ldrb	r3, [r7, #14]
 800c448:	2b80      	cmp	r3, #128	; 0x80
 800c44a:	d00a      	beq.n	800c462 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f001 f925 	bl	800d6a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c456:	2180      	movs	r1, #128	; 0x80
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f001 f921 	bl	800d6a0 <USBD_LL_StallEP>
 800c45e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c460:	e020      	b.n	800c4a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fc7a 	bl	800cd5e <USBD_CtlError>
              break;
 800c46a:	e01b      	b.n	800c4a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	885b      	ldrh	r3, [r3, #2]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10e      	bne.n	800c492 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c474:	7bbb      	ldrb	r3, [r7, #14]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00b      	beq.n	800c492 <USBD_StdEPReq+0xfe>
 800c47a:	7bbb      	ldrb	r3, [r7, #14]
 800c47c:	2b80      	cmp	r3, #128	; 0x80
 800c47e:	d008      	beq.n	800c492 <USBD_StdEPReq+0xfe>
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	88db      	ldrh	r3, [r3, #6]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d104      	bne.n	800c492 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c488:	7bbb      	ldrb	r3, [r7, #14]
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f001 f907 	bl	800d6a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fd2e 	bl	800cef4 <USBD_CtlSendStatus>

              break;
 800c498:	e004      	b.n	800c4a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fc5e 	bl	800cd5e <USBD_CtlError>
              break;
 800c4a2:	bf00      	nop
          }
          break;
 800c4a4:	e107      	b.n	800c6b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d002      	beq.n	800c4b8 <USBD_StdEPReq+0x124>
 800c4b2:	2b03      	cmp	r3, #3
 800c4b4:	d016      	beq.n	800c4e4 <USBD_StdEPReq+0x150>
 800c4b6:	e04b      	b.n	800c550 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4b8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00d      	beq.n	800c4da <USBD_StdEPReq+0x146>
 800c4be:	7bbb      	ldrb	r3, [r7, #14]
 800c4c0:	2b80      	cmp	r3, #128	; 0x80
 800c4c2:	d00a      	beq.n	800c4da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4c4:	7bbb      	ldrb	r3, [r7, #14]
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f001 f8e9 	bl	800d6a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ce:	2180      	movs	r1, #128	; 0x80
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f001 f8e5 	bl	800d6a0 <USBD_LL_StallEP>
 800c4d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4d8:	e040      	b.n	800c55c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fc3e 	bl	800cd5e <USBD_CtlError>
              break;
 800c4e2:	e03b      	b.n	800c55c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	885b      	ldrh	r3, [r3, #2]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d136      	bne.n	800c55a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c4ec:	7bbb      	ldrb	r3, [r7, #14]
 800c4ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d004      	beq.n	800c500 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c4f6:	7bbb      	ldrb	r3, [r7, #14]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f001 f8ef 	bl	800d6de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fcf7 	bl	800cef4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c506:	7bbb      	ldrb	r3, [r7, #14]
 800c508:	4619      	mov	r1, r3
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff fe1c 	bl	800c148 <USBD_CoreFindEP>
 800c510:	4603      	mov	r3, r0
 800c512:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c514:	7b7b      	ldrb	r3, [r7, #13]
 800c516:	2bff      	cmp	r3, #255	; 0xff
 800c518:	d01f      	beq.n	800c55a <USBD_StdEPReq+0x1c6>
 800c51a:	7b7b      	ldrb	r3, [r7, #13]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d11c      	bne.n	800c55a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c520:	7b7a      	ldrb	r2, [r7, #13]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c528:	7b7a      	ldrb	r2, [r7, #13]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	32ae      	adds	r2, #174	; 0xae
 800c52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d010      	beq.n	800c55a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c538:	7b7a      	ldrb	r2, [r7, #13]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	32ae      	adds	r2, #174	; 0xae
 800c53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	4798      	blx	r3
 800c54a:	4603      	mov	r3, r0
 800c54c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c54e:	e004      	b.n	800c55a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fc03 	bl	800cd5e <USBD_CtlError>
              break;
 800c558:	e000      	b.n	800c55c <USBD_StdEPReq+0x1c8>
              break;
 800c55a:	bf00      	nop
          }
          break;
 800c55c:	e0ab      	b.n	800c6b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b02      	cmp	r3, #2
 800c568:	d002      	beq.n	800c570 <USBD_StdEPReq+0x1dc>
 800c56a:	2b03      	cmp	r3, #3
 800c56c:	d032      	beq.n	800c5d4 <USBD_StdEPReq+0x240>
 800c56e:	e097      	b.n	800c6a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c570:	7bbb      	ldrb	r3, [r7, #14]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d007      	beq.n	800c586 <USBD_StdEPReq+0x1f2>
 800c576:	7bbb      	ldrb	r3, [r7, #14]
 800c578:	2b80      	cmp	r3, #128	; 0x80
 800c57a:	d004      	beq.n	800c586 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fbed 	bl	800cd5e <USBD_CtlError>
                break;
 800c584:	e091      	b.n	800c6aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	da0b      	bge.n	800c5a6 <USBD_StdEPReq+0x212>
 800c58e:	7bbb      	ldrb	r3, [r7, #14]
 800c590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c594:	4613      	mov	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	3310      	adds	r3, #16
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	3304      	adds	r3, #4
 800c5a4:	e00b      	b.n	800c5be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
 800c5a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	3304      	adds	r3, #4
 800c5be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2202      	movs	r2, #2
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fc37 	bl	800ce40 <USBD_CtlSendData>
              break;
 800c5d2:	e06a      	b.n	800c6aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	da11      	bge.n	800c600 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5dc:	7bbb      	ldrb	r3, [r7, #14]
 800c5de:	f003 020f 	and.w	r2, r3, #15
 800c5e2:	6879      	ldr	r1, [r7, #4]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	4413      	add	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	440b      	add	r3, r1
 800c5ee:	3324      	adds	r3, #36	; 0x24
 800c5f0:	881b      	ldrh	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d117      	bne.n	800c626 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c5f6:	6839      	ldr	r1, [r7, #0]
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 fbb0 	bl	800cd5e <USBD_CtlError>
                  break;
 800c5fe:	e054      	b.n	800c6aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c600:	7bbb      	ldrb	r3, [r7, #14]
 800c602:	f003 020f 	and.w	r2, r3, #15
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	440b      	add	r3, r1
 800c612:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d104      	bne.n	800c626 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fb9d 	bl	800cd5e <USBD_CtlError>
                  break;
 800c624:	e041      	b.n	800c6aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	da0b      	bge.n	800c646 <USBD_StdEPReq+0x2b2>
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c634:	4613      	mov	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4413      	add	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	3310      	adds	r3, #16
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	4413      	add	r3, r2
 800c642:	3304      	adds	r3, #4
 800c644:	e00b      	b.n	800c65e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c646:	7bbb      	ldrb	r3, [r7, #14]
 800c648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	4413      	add	r3, r2
 800c65c:	3304      	adds	r3, #4
 800c65e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c660:	7bbb      	ldrb	r3, [r7, #14]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <USBD_StdEPReq+0x2d8>
 800c666:	7bbb      	ldrb	r3, [r7, #14]
 800c668:	2b80      	cmp	r3, #128	; 0x80
 800c66a:	d103      	bne.n	800c674 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2200      	movs	r2, #0
 800c670:	601a      	str	r2, [r3, #0]
 800c672:	e00e      	b.n	800c692 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f001 f84f 	bl	800d71c <USBD_LL_IsStallEP>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d003      	beq.n	800c68c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	2201      	movs	r2, #1
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	e002      	b.n	800c692 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	2200      	movs	r2, #0
 800c690:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	2202      	movs	r2, #2
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 fbd1 	bl	800ce40 <USBD_CtlSendData>
              break;
 800c69e:	e004      	b.n	800c6aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fb5b 	bl	800cd5e <USBD_CtlError>
              break;
 800c6a8:	bf00      	nop
          }
          break;
 800c6aa:	e004      	b.n	800c6b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c6ac:	6839      	ldr	r1, [r7, #0]
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fb55 	bl	800cd5e <USBD_CtlError>
          break;
 800c6b4:	bf00      	nop
      }
      break;
 800c6b6:	e005      	b.n	800c6c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c6b8:	6839      	ldr	r1, [r7, #0]
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 fb4f 	bl	800cd5e <USBD_CtlError>
      break;
 800c6c0:	e000      	b.n	800c6c4 <USBD_StdEPReq+0x330>
      break;
 800c6c2:	bf00      	nop
  }

  return ret;
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	885b      	ldrh	r3, [r3, #2]
 800c6ea:	0a1b      	lsrs	r3, r3, #8
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	2b06      	cmp	r3, #6
 800c6f2:	f200 8128 	bhi.w	800c946 <USBD_GetDescriptor+0x276>
 800c6f6:	a201      	add	r2, pc, #4	; (adr r2, 800c6fc <USBD_GetDescriptor+0x2c>)
 800c6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fc:	0800c719 	.word	0x0800c719
 800c700:	0800c731 	.word	0x0800c731
 800c704:	0800c771 	.word	0x0800c771
 800c708:	0800c947 	.word	0x0800c947
 800c70c:	0800c947 	.word	0x0800c947
 800c710:	0800c8e7 	.word	0x0800c8e7
 800c714:	0800c913 	.word	0x0800c913
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	7c12      	ldrb	r2, [r2, #16]
 800c724:	f107 0108 	add.w	r1, r7, #8
 800c728:	4610      	mov	r0, r2
 800c72a:	4798      	blx	r3
 800c72c:	60f8      	str	r0, [r7, #12]
      break;
 800c72e:	e112      	b.n	800c956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	7c1b      	ldrb	r3, [r3, #16]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10d      	bne.n	800c754 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c740:	f107 0208 	add.w	r2, r7, #8
 800c744:	4610      	mov	r0, r2
 800c746:	4798      	blx	r3
 800c748:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3301      	adds	r3, #1
 800c74e:	2202      	movs	r2, #2
 800c750:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c752:	e100      	b.n	800c956 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	f107 0208 	add.w	r2, r7, #8
 800c760:	4610      	mov	r0, r2
 800c762:	4798      	blx	r3
 800c764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3301      	adds	r3, #1
 800c76a:	2202      	movs	r2, #2
 800c76c:	701a      	strb	r2, [r3, #0]
      break;
 800c76e:	e0f2      	b.n	800c956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	885b      	ldrh	r3, [r3, #2]
 800c774:	b2db      	uxtb	r3, r3
 800c776:	2b05      	cmp	r3, #5
 800c778:	f200 80ac 	bhi.w	800c8d4 <USBD_GetDescriptor+0x204>
 800c77c:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <USBD_GetDescriptor+0xb4>)
 800c77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c782:	bf00      	nop
 800c784:	0800c79d 	.word	0x0800c79d
 800c788:	0800c7d1 	.word	0x0800c7d1
 800c78c:	0800c805 	.word	0x0800c805
 800c790:	0800c839 	.word	0x0800c839
 800c794:	0800c86d 	.word	0x0800c86d
 800c798:	0800c8a1 	.word	0x0800c8a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	7c12      	ldrb	r2, [r2, #16]
 800c7b4:	f107 0108 	add.w	r1, r7, #8
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	4798      	blx	r3
 800c7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7be:	e091      	b.n	800c8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 facb 	bl	800cd5e <USBD_CtlError>
            err++;
 800c7c8:	7afb      	ldrb	r3, [r7, #11]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ce:	e089      	b.n	800c8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00b      	beq.n	800c7f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	7c12      	ldrb	r2, [r2, #16]
 800c7e8:	f107 0108 	add.w	r1, r7, #8
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	4798      	blx	r3
 800c7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7f2:	e077      	b.n	800c8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fab1 	bl	800cd5e <USBD_CtlError>
            err++;
 800c7fc:	7afb      	ldrb	r3, [r7, #11]
 800c7fe:	3301      	adds	r3, #1
 800c800:	72fb      	strb	r3, [r7, #11]
          break;
 800c802:	e06f      	b.n	800c8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00b      	beq.n	800c828 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	7c12      	ldrb	r2, [r2, #16]
 800c81c:	f107 0108 	add.w	r1, r7, #8
 800c820:	4610      	mov	r0, r2
 800c822:	4798      	blx	r3
 800c824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c826:	e05d      	b.n	800c8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fa97 	bl	800cd5e <USBD_CtlError>
            err++;
 800c830:	7afb      	ldrb	r3, [r7, #11]
 800c832:	3301      	adds	r3, #1
 800c834:	72fb      	strb	r3, [r7, #11]
          break;
 800c836:	e055      	b.n	800c8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00b      	beq.n	800c85c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	7c12      	ldrb	r2, [r2, #16]
 800c850:	f107 0108 	add.w	r1, r7, #8
 800c854:	4610      	mov	r0, r2
 800c856:	4798      	blx	r3
 800c858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c85a:	e043      	b.n	800c8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fa7d 	bl	800cd5e <USBD_CtlError>
            err++;
 800c864:	7afb      	ldrb	r3, [r7, #11]
 800c866:	3301      	adds	r3, #1
 800c868:	72fb      	strb	r3, [r7, #11]
          break;
 800c86a:	e03b      	b.n	800c8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c872:	695b      	ldr	r3, [r3, #20]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00b      	beq.n	800c890 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	7c12      	ldrb	r2, [r2, #16]
 800c884:	f107 0108 	add.w	r1, r7, #8
 800c888:	4610      	mov	r0, r2
 800c88a:	4798      	blx	r3
 800c88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c88e:	e029      	b.n	800c8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fa63 	bl	800cd5e <USBD_CtlError>
            err++;
 800c898:	7afb      	ldrb	r3, [r7, #11]
 800c89a:	3301      	adds	r3, #1
 800c89c:	72fb      	strb	r3, [r7, #11]
          break;
 800c89e:	e021      	b.n	800c8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00b      	beq.n	800c8c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	7c12      	ldrb	r2, [r2, #16]
 800c8b8:	f107 0108 	add.w	r1, r7, #8
 800c8bc:	4610      	mov	r0, r2
 800c8be:	4798      	blx	r3
 800c8c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8c2:	e00f      	b.n	800c8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8c4:	6839      	ldr	r1, [r7, #0]
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fa49 	bl	800cd5e <USBD_CtlError>
            err++;
 800c8cc:	7afb      	ldrb	r3, [r7, #11]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c8d2:	e007      	b.n	800c8e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fa41 	bl	800cd5e <USBD_CtlError>
          err++;
 800c8dc:	7afb      	ldrb	r3, [r7, #11]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c8e2:	bf00      	nop
      }
      break;
 800c8e4:	e037      	b.n	800c956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	7c1b      	ldrb	r3, [r3, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d109      	bne.n	800c902 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f6:	f107 0208 	add.w	r2, r7, #8
 800c8fa:	4610      	mov	r0, r2
 800c8fc:	4798      	blx	r3
 800c8fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c900:	e029      	b.n	800c956 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 fa2a 	bl	800cd5e <USBD_CtlError>
        err++;
 800c90a:	7afb      	ldrb	r3, [r7, #11]
 800c90c:	3301      	adds	r3, #1
 800c90e:	72fb      	strb	r3, [r7, #11]
      break;
 800c910:	e021      	b.n	800c956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	7c1b      	ldrb	r3, [r3, #16]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10d      	bne.n	800c936 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c922:	f107 0208 	add.w	r2, r7, #8
 800c926:	4610      	mov	r0, r2
 800c928:	4798      	blx	r3
 800c92a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	3301      	adds	r3, #1
 800c930:	2207      	movs	r2, #7
 800c932:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c934:	e00f      	b.n	800c956 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fa10 	bl	800cd5e <USBD_CtlError>
        err++;
 800c93e:	7afb      	ldrb	r3, [r7, #11]
 800c940:	3301      	adds	r3, #1
 800c942:	72fb      	strb	r3, [r7, #11]
      break;
 800c944:	e007      	b.n	800c956 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fa08 	bl	800cd5e <USBD_CtlError>
      err++;
 800c94e:	7afb      	ldrb	r3, [r7, #11]
 800c950:	3301      	adds	r3, #1
 800c952:	72fb      	strb	r3, [r7, #11]
      break;
 800c954:	bf00      	nop
  }

  if (err != 0U)
 800c956:	7afb      	ldrb	r3, [r7, #11]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d11e      	bne.n	800c99a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	88db      	ldrh	r3, [r3, #6]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d016      	beq.n	800c992 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c964:	893b      	ldrh	r3, [r7, #8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00e      	beq.n	800c988 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	88da      	ldrh	r2, [r3, #6]
 800c96e:	893b      	ldrh	r3, [r7, #8]
 800c970:	4293      	cmp	r3, r2
 800c972:	bf28      	it	cs
 800c974:	4613      	movcs	r3, r2
 800c976:	b29b      	uxth	r3, r3
 800c978:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c97a:	893b      	ldrh	r3, [r7, #8]
 800c97c:	461a      	mov	r2, r3
 800c97e:	68f9      	ldr	r1, [r7, #12]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fa5d 	bl	800ce40 <USBD_CtlSendData>
 800c986:	e009      	b.n	800c99c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f9e7 	bl	800cd5e <USBD_CtlError>
 800c990:	e004      	b.n	800c99c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 faae 	bl	800cef4 <USBD_CtlSendStatus>
 800c998:	e000      	b.n	800c99c <USBD_GetDescriptor+0x2cc>
    return;
 800c99a:	bf00      	nop
  }
}
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop

0800c9a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	889b      	ldrh	r3, [r3, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d131      	bne.n	800ca1a <USBD_SetAddress+0x76>
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	88db      	ldrh	r3, [r3, #6]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d12d      	bne.n	800ca1a <USBD_SetAddress+0x76>
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	885b      	ldrh	r3, [r3, #2]
 800c9c2:	2b7f      	cmp	r3, #127	; 0x7f
 800c9c4:	d829      	bhi.n	800ca1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	885b      	ldrh	r3, [r3, #2]
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b03      	cmp	r3, #3
 800c9dc:	d104      	bne.n	800c9e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c9de:	6839      	ldr	r1, [r7, #0]
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 f9bc 	bl	800cd5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e6:	e01d      	b.n	800ca24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	7bfa      	ldrb	r2, [r7, #15]
 800c9ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 febd 	bl	800d774 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fa7a 	bl	800cef4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca00:	7bfb      	ldrb	r3, [r7, #15]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d004      	beq.n	800ca10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2202      	movs	r2, #2
 800ca0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0e:	e009      	b.n	800ca24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca18:	e004      	b.n	800ca24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca1a:	6839      	ldr	r1, [r7, #0]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 f99e 	bl	800cd5e <USBD_CtlError>
  }
}
 800ca22:	bf00      	nop
 800ca24:	bf00      	nop
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	885b      	ldrh	r3, [r3, #2]
 800ca3e:	b2da      	uxtb	r2, r3
 800ca40:	4b4e      	ldr	r3, [pc, #312]	; (800cb7c <USBD_SetConfig+0x150>)
 800ca42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca44:	4b4d      	ldr	r3, [pc, #308]	; (800cb7c <USBD_SetConfig+0x150>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d905      	bls.n	800ca58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca4c:	6839      	ldr	r1, [r7, #0]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f985 	bl	800cd5e <USBD_CtlError>
    return USBD_FAIL;
 800ca54:	2303      	movs	r3, #3
 800ca56:	e08c      	b.n	800cb72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d002      	beq.n	800ca6a <USBD_SetConfig+0x3e>
 800ca64:	2b03      	cmp	r3, #3
 800ca66:	d029      	beq.n	800cabc <USBD_SetConfig+0x90>
 800ca68:	e075      	b.n	800cb56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ca6a:	4b44      	ldr	r3, [pc, #272]	; (800cb7c <USBD_SetConfig+0x150>)
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d020      	beq.n	800cab4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ca72:	4b42      	ldr	r3, [pc, #264]	; (800cb7c <USBD_SetConfig+0x150>)
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	461a      	mov	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca7c:	4b3f      	ldr	r3, [pc, #252]	; (800cb7c <USBD_SetConfig+0x150>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7ff f821 	bl	800baca <USBD_SetClassConfig>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d008      	beq.n	800caa4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f962 	bl	800cd5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2202      	movs	r2, #2
 800ca9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800caa2:	e065      	b.n	800cb70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fa25 	bl	800cef4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2203      	movs	r2, #3
 800caae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cab2:	e05d      	b.n	800cb70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fa1d 	bl	800cef4 <USBD_CtlSendStatus>
      break;
 800caba:	e059      	b.n	800cb70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cabc:	4b2f      	ldr	r3, [pc, #188]	; (800cb7c <USBD_SetConfig+0x150>)
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d112      	bne.n	800caea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2202      	movs	r2, #2
 800cac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cacc:	4b2b      	ldr	r3, [pc, #172]	; (800cb7c <USBD_SetConfig+0x150>)
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	461a      	mov	r2, r3
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cad6:	4b29      	ldr	r3, [pc, #164]	; (800cb7c <USBD_SetConfig+0x150>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	4619      	mov	r1, r3
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff f810 	bl	800bb02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 fa06 	bl	800cef4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cae8:	e042      	b.n	800cb70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800caea:	4b24      	ldr	r3, [pc, #144]	; (800cb7c <USBD_SetConfig+0x150>)
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	461a      	mov	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d02a      	beq.n	800cb4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	4619      	mov	r1, r3
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7fe fffe 	bl	800bb02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb06:	4b1d      	ldr	r3, [pc, #116]	; (800cb7c <USBD_SetConfig+0x150>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb10:	4b1a      	ldr	r3, [pc, #104]	; (800cb7c <USBD_SetConfig+0x150>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	4619      	mov	r1, r3
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7fe ffd7 	bl	800baca <USBD_SetClassConfig>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00f      	beq.n	800cb46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f918 	bl	800cd5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7fe ffe3 	bl	800bb02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2202      	movs	r2, #2
 800cb40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb44:	e014      	b.n	800cb70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 f9d4 	bl	800cef4 <USBD_CtlSendStatus>
      break;
 800cb4c:	e010      	b.n	800cb70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 f9d0 	bl	800cef4 <USBD_CtlSendStatus>
      break;
 800cb54:	e00c      	b.n	800cb70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f900 	bl	800cd5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb5e:	4b07      	ldr	r3, [pc, #28]	; (800cb7c <USBD_SetConfig+0x150>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7fe ffcc 	bl	800bb02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb6e:	bf00      	nop
  }

  return ret;
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	24000718 	.word	0x24000718

0800cb80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	88db      	ldrh	r3, [r3, #6]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d004      	beq.n	800cb9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f8e2 	bl	800cd5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb9a:	e023      	b.n	800cbe4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	dc02      	bgt.n	800cbae <USBD_GetConfig+0x2e>
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	dc03      	bgt.n	800cbb4 <USBD_GetConfig+0x34>
 800cbac:	e015      	b.n	800cbda <USBD_GetConfig+0x5a>
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	d00b      	beq.n	800cbca <USBD_GetConfig+0x4a>
 800cbb2:	e012      	b.n	800cbda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f93c 	bl	800ce40 <USBD_CtlSendData>
        break;
 800cbc8:	e00c      	b.n	800cbe4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3304      	adds	r3, #4
 800cbce:	2201      	movs	r2, #1
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 f934 	bl	800ce40 <USBD_CtlSendData>
        break;
 800cbd8:	e004      	b.n	800cbe4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cbda:	6839      	ldr	r1, [r7, #0]
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 f8be 	bl	800cd5e <USBD_CtlError>
        break;
 800cbe2:	bf00      	nop
}
 800cbe4:	bf00      	nop
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d81e      	bhi.n	800cc42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	88db      	ldrh	r3, [r3, #6]
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d004      	beq.n	800cc16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f8a5 	bl	800cd5e <USBD_CtlError>
        break;
 800cc14:	e01a      	b.n	800cc4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d005      	beq.n	800cc32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	f043 0202 	orr.w	r2, r3, #2
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	330c      	adds	r3, #12
 800cc36:	2202      	movs	r2, #2
 800cc38:	4619      	mov	r1, r3
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f900 	bl	800ce40 <USBD_CtlSendData>
      break;
 800cc40:	e004      	b.n	800cc4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f88a 	bl	800cd5e <USBD_CtlError>
      break;
 800cc4a:	bf00      	nop
  }
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	885b      	ldrh	r3, [r3, #2]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d107      	bne.n	800cc76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f940 	bl	800cef4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cc74:	e013      	b.n	800cc9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	885b      	ldrh	r3, [r3, #2]
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d10b      	bne.n	800cc96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	889b      	ldrh	r3, [r3, #4]
 800cc82:	0a1b      	lsrs	r3, r3, #8
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f930 	bl	800cef4 <USBD_CtlSendStatus>
}
 800cc94:	e003      	b.n	800cc9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f860 	bl	800cd5e <USBD_CtlError>
}
 800cc9e:	bf00      	nop
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d80b      	bhi.n	800ccd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	885b      	ldrh	r3, [r3, #2]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d10c      	bne.n	800cce0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f910 	bl	800cef4 <USBD_CtlSendStatus>
      }
      break;
 800ccd4:	e004      	b.n	800cce0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ccd6:	6839      	ldr	r1, [r7, #0]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f840 	bl	800cd5e <USBD_CtlError>
      break;
 800ccde:	e000      	b.n	800cce2 <USBD_ClrFeature+0x3c>
      break;
 800cce0:	bf00      	nop
  }
}
 800cce2:	bf00      	nop
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b084      	sub	sp, #16
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
 800ccf2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	781a      	ldrb	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	3301      	adds	r3, #1
 800cd04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	781a      	ldrb	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3301      	adds	r3, #1
 800cd12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f7ff fa41 	bl	800c19c <SWAPBYTE>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	3301      	adds	r3, #1
 800cd26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f7ff fa34 	bl	800c19c <SWAPBYTE>
 800cd34:	4603      	mov	r3, r0
 800cd36:	461a      	mov	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	3301      	adds	r3, #1
 800cd46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7ff fa27 	bl	800c19c <SWAPBYTE>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	461a      	mov	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	80da      	strh	r2, [r3, #6]
}
 800cd56:	bf00      	nop
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b082      	sub	sp, #8
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd68:	2180      	movs	r1, #128	; 0x80
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fc98 	bl	800d6a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd70:	2100      	movs	r1, #0
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fc94 	bl	800d6a0 <USBD_LL_StallEP>
}
 800cd78:	bf00      	nop
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d036      	beq.n	800ce04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd9a:	6938      	ldr	r0, [r7, #16]
 800cd9c:	f000 f836 	bl	800ce0c <USBD_GetLen>
 800cda0:	4603      	mov	r3, r0
 800cda2:	3301      	adds	r3, #1
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	005b      	lsls	r3, r3, #1
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	7812      	ldrb	r2, [r2, #0]
 800cdb8:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cdc0:	7dfb      	ldrb	r3, [r7, #23]
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	2203      	movs	r2, #3
 800cdc8:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cdd0:	e013      	b.n	800cdfa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cdd2:	7dfb      	ldrb	r3, [r7, #23]
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	693a      	ldr	r2, [r7, #16]
 800cdda:	7812      	ldrb	r2, [r2, #0]
 800cddc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	3301      	adds	r3, #1
 800cde2:	613b      	str	r3, [r7, #16]
    idx++;
 800cde4:	7dfb      	ldrb	r3, [r7, #23]
 800cde6:	3301      	adds	r3, #1
 800cde8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cdea:	7dfb      	ldrb	r3, [r7, #23]
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	4413      	add	r3, r2
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	701a      	strb	r2, [r3, #0]
    idx++;
 800cdf4:	7dfb      	ldrb	r3, [r7, #23]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1e7      	bne.n	800cdd2 <USBD_GetString+0x52>
 800ce02:	e000      	b.n	800ce06 <USBD_GetString+0x86>
    return;
 800ce04:	bf00      	nop
  }
}
 800ce06:	3718      	adds	r7, #24
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce14:	2300      	movs	r3, #0
 800ce16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce1c:	e005      	b.n	800ce2a <USBD_GetLen+0x1e>
  {
    len++;
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
 800ce20:	3301      	adds	r3, #1
 800ce22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	3301      	adds	r3, #1
 800ce28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1f5      	bne.n	800ce1e <USBD_GetLen+0x12>
  }

  return len;
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3714      	adds	r7, #20
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	2100      	movs	r1, #0
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f000 fca3 	bl	800d7b2 <USBD_LL_Transmit>

  return USBD_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b084      	sub	sp, #16
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	60f8      	str	r0, [r7, #12]
 800ce7e:	60b9      	str	r1, [r7, #8]
 800ce80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	2100      	movs	r1, #0
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f000 fc92 	bl	800d7b2 <USBD_LL_Transmit>

  return USBD_OK;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2203      	movs	r2, #3
 800cea8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	2100      	movs	r1, #0
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f000 fc96 	bl	800d7f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cec8:	2300      	movs	r3, #0
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	60f8      	str	r0, [r7, #12]
 800ceda:	60b9      	str	r1, [r7, #8]
 800cedc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	2100      	movs	r1, #0
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f000 fc85 	bl	800d7f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2204      	movs	r2, #4
 800cf00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf04:	2300      	movs	r3, #0
 800cf06:	2200      	movs	r2, #0
 800cf08:	2100      	movs	r1, #0
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fc51 	bl	800d7b2 <USBD_LL_Transmit>

  return USBD_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b082      	sub	sp, #8
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2205      	movs	r2, #5
 800cf26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	2100      	movs	r1, #0
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 fc5f 	bl	800d7f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf44:	2200      	movs	r2, #0
 800cf46:	4913      	ldr	r1, [pc, #76]	; (800cf94 <MX_USB_DEVICE_Init+0x54>)
 800cf48:	4813      	ldr	r0, [pc, #76]	; (800cf98 <MX_USB_DEVICE_Init+0x58>)
 800cf4a:	f7fe fd41 	bl	800b9d0 <USBD_Init>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf54:	f7f3 fbfe 	bl	8000754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800cf58:	4910      	ldr	r1, [pc, #64]	; (800cf9c <MX_USB_DEVICE_Init+0x5c>)
 800cf5a:	480f      	ldr	r0, [pc, #60]	; (800cf98 <MX_USB_DEVICE_Init+0x58>)
 800cf5c:	f7fe fd68 	bl	800ba30 <USBD_RegisterClass>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf66:	f7f3 fbf5 	bl	8000754 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800cf6a:	490d      	ldr	r1, [pc, #52]	; (800cfa0 <MX_USB_DEVICE_Init+0x60>)
 800cf6c:	480a      	ldr	r0, [pc, #40]	; (800cf98 <MX_USB_DEVICE_Init+0x58>)
 800cf6e:	f7fe fce1 	bl	800b934 <USBD_AUDIO_RegisterInterface>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf78:	f7f3 fbec 	bl	8000754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf7c:	4806      	ldr	r0, [pc, #24]	; (800cf98 <MX_USB_DEVICE_Init+0x58>)
 800cf7e:	f7fe fd8d 	bl	800ba9c <USBD_Start>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf88:	f7f3 fbe4 	bl	8000754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cf8c:	f7f8 fcf4 	bl	8005978 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf90:	bf00      	nop
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	240000e0 	.word	0x240000e0
 800cf98:	2400071c 	.word	0x2400071c
 800cf9c:	24000010 	.word	0x24000010
 800cfa0:	240000c4 	.word	0x240000c4

0800cfa4 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800cfb0:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	b083      	sub	sp, #12
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800cfc6:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d001      	beq.n	800cfec <AUDIO_AudioCmd_FS+0x18>
 800cfe8:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800cfea:	e000      	b.n	800cfee <AUDIO_AudioCmd_FS+0x1a>
    break;
 800cfec:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800cfee:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	4603      	mov	r3, r0
 800d004:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800d006:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d008:	4618      	mov	r0, r3
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800d01e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d020:	4618      	mov	r0, r3
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	4613      	mov	r3, r2
 800d038:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800d03a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3714      	adds	r7, #20
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800d048:	b480      	push	{r7}
 800d04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800d04c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d04e:	4618      	mov	r0, r3
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	6039      	str	r1, [r7, #0]
 800d062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	2212      	movs	r2, #18
 800d068:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d06a:	4b03      	ldr	r3, [pc, #12]	; (800d078 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr
 800d078:	240000fc 	.word	0x240000fc

0800d07c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	4603      	mov	r3, r0
 800d084:	6039      	str	r1, [r7, #0]
 800d086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	2204      	movs	r2, #4
 800d08c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d08e:	4b03      	ldr	r3, [pc, #12]	; (800d09c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d090:	4618      	mov	r0, r3
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	24000110 	.word	0x24000110

0800d0a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	6039      	str	r1, [r7, #0]
 800d0aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d105      	bne.n	800d0be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0b2:	683a      	ldr	r2, [r7, #0]
 800d0b4:	4907      	ldr	r1, [pc, #28]	; (800d0d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0b6:	4808      	ldr	r0, [pc, #32]	; (800d0d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d0b8:	f7ff fe62 	bl	800cd80 <USBD_GetString>
 800d0bc:	e004      	b.n	800d0c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	4904      	ldr	r1, [pc, #16]	; (800d0d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0c2:	4805      	ldr	r0, [pc, #20]	; (800d0d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d0c4:	f7ff fe5c 	bl	800cd80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0c8:	4b02      	ldr	r3, [pc, #8]	; (800d0d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	240009f8 	.word	0x240009f8
 800d0d8:	0800e984 	.word	0x0800e984

0800d0dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	6039      	str	r1, [r7, #0]
 800d0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d0e8:	683a      	ldr	r2, [r7, #0]
 800d0ea:	4904      	ldr	r1, [pc, #16]	; (800d0fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d0ec:	4804      	ldr	r0, [pc, #16]	; (800d100 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d0ee:	f7ff fe47 	bl	800cd80 <USBD_GetString>
  return USBD_StrDesc;
 800d0f2:	4b02      	ldr	r3, [pc, #8]	; (800d0fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	240009f8 	.word	0x240009f8
 800d100:	0800e998 	.word	0x0800e998

0800d104 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	4603      	mov	r3, r0
 800d10c:	6039      	str	r1, [r7, #0]
 800d10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	221a      	movs	r2, #26
 800d114:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d116:	f000 f843 	bl	800d1a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d11a:	4b02      	ldr	r3, [pc, #8]	; (800d124 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	24000114 	.word	0x24000114

0800d128 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	4603      	mov	r3, r0
 800d130:	6039      	str	r1, [r7, #0]
 800d132:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d134:	79fb      	ldrb	r3, [r7, #7]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d105      	bne.n	800d146 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d13a:	683a      	ldr	r2, [r7, #0]
 800d13c:	4907      	ldr	r1, [pc, #28]	; (800d15c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d13e:	4808      	ldr	r0, [pc, #32]	; (800d160 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d140:	f7ff fe1e 	bl	800cd80 <USBD_GetString>
 800d144:	e004      	b.n	800d150 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	4904      	ldr	r1, [pc, #16]	; (800d15c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d14a:	4805      	ldr	r0, [pc, #20]	; (800d160 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d14c:	f7ff fe18 	bl	800cd80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d150:	4b02      	ldr	r3, [pc, #8]	; (800d15c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	240009f8 	.word	0x240009f8
 800d160:	0800e9ac 	.word	0x0800e9ac

0800d164 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	6039      	str	r1, [r7, #0]
 800d16e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d170:	79fb      	ldrb	r3, [r7, #7]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d105      	bne.n	800d182 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d176:	683a      	ldr	r2, [r7, #0]
 800d178:	4907      	ldr	r1, [pc, #28]	; (800d198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d17a:	4808      	ldr	r0, [pc, #32]	; (800d19c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d17c:	f7ff fe00 	bl	800cd80 <USBD_GetString>
 800d180:	e004      	b.n	800d18c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	4904      	ldr	r1, [pc, #16]	; (800d198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d186:	4805      	ldr	r0, [pc, #20]	; (800d19c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d188:	f7ff fdfa 	bl	800cd80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d18c:	4b02      	ldr	r3, [pc, #8]	; (800d198 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3708      	adds	r7, #8
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	240009f8 	.word	0x240009f8
 800d19c:	0800e9bc 	.word	0x0800e9bc

0800d1a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d1a6:	4b0f      	ldr	r3, [pc, #60]	; (800d1e4 <Get_SerialNum+0x44>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <Get_SerialNum+0x48>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d1b2:	4b0e      	ldr	r3, [pc, #56]	; (800d1ec <Get_SerialNum+0x4c>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d1b8:	68fa      	ldr	r2, [r7, #12]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4413      	add	r3, r2
 800d1be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d009      	beq.n	800d1da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d1c6:	2208      	movs	r2, #8
 800d1c8:	4909      	ldr	r1, [pc, #36]	; (800d1f0 <Get_SerialNum+0x50>)
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f000 f814 	bl	800d1f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d1d0:	2204      	movs	r2, #4
 800d1d2:	4908      	ldr	r1, [pc, #32]	; (800d1f4 <Get_SerialNum+0x54>)
 800d1d4:	68b8      	ldr	r0, [r7, #8]
 800d1d6:	f000 f80f 	bl	800d1f8 <IntToUnicode>
  }
}
 800d1da:	bf00      	nop
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	1ff1e800 	.word	0x1ff1e800
 800d1e8:	1ff1e804 	.word	0x1ff1e804
 800d1ec:	1ff1e808 	.word	0x1ff1e808
 800d1f0:	24000116 	.word	0x24000116
 800d1f4:	24000126 	.word	0x24000126

0800d1f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b087      	sub	sp, #28
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	4613      	mov	r3, r2
 800d204:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d20a:	2300      	movs	r3, #0
 800d20c:	75fb      	strb	r3, [r7, #23]
 800d20e:	e027      	b.n	800d260 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	0f1b      	lsrs	r3, r3, #28
 800d214:	2b09      	cmp	r3, #9
 800d216:	d80b      	bhi.n	800d230 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	0f1b      	lsrs	r3, r3, #28
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	7dfb      	ldrb	r3, [r7, #23]
 800d220:	005b      	lsls	r3, r3, #1
 800d222:	4619      	mov	r1, r3
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	440b      	add	r3, r1
 800d228:	3230      	adds	r2, #48	; 0x30
 800d22a:	b2d2      	uxtb	r2, r2
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	e00a      	b.n	800d246 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	0f1b      	lsrs	r3, r3, #28
 800d234:	b2da      	uxtb	r2, r3
 800d236:	7dfb      	ldrb	r3, [r7, #23]
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	4619      	mov	r1, r3
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	440b      	add	r3, r1
 800d240:	3237      	adds	r2, #55	; 0x37
 800d242:	b2d2      	uxtb	r2, r2
 800d244:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	011b      	lsls	r3, r3, #4
 800d24a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d24c:	7dfb      	ldrb	r3, [r7, #23]
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	3301      	adds	r3, #1
 800d252:	68ba      	ldr	r2, [r7, #8]
 800d254:	4413      	add	r3, r2
 800d256:	2200      	movs	r2, #0
 800d258:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
 800d25c:	3301      	adds	r3, #1
 800d25e:	75fb      	strb	r3, [r7, #23]
 800d260:	7dfa      	ldrb	r2, [r7, #23]
 800d262:	79fb      	ldrb	r3, [r7, #7]
 800d264:	429a      	cmp	r2, r3
 800d266:	d3d3      	bcc.n	800d210 <IntToUnicode+0x18>
  }
}
 800d268:	bf00      	nop
 800d26a:	bf00      	nop
 800d26c:	371c      	adds	r7, #28
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
	...

0800d278 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b0b8      	sub	sp, #224	; 0xe0
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d280:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d284:	2200      	movs	r2, #0
 800d286:	601a      	str	r2, [r3, #0]
 800d288:	605a      	str	r2, [r3, #4]
 800d28a:	609a      	str	r2, [r3, #8]
 800d28c:	60da      	str	r2, [r3, #12]
 800d28e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d290:	f107 0310 	add.w	r3, r7, #16
 800d294:	22bc      	movs	r2, #188	; 0xbc
 800d296:	2100      	movs	r1, #0
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 fb4d 	bl	800d938 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a2b      	ldr	r2, [pc, #172]	; (800d350 <HAL_PCD_MspInit+0xd8>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d14e      	bne.n	800d346 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d2a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d2ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d2ae:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800d2b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d2b6:	f107 0310 	add.w	r3, r7, #16
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7f9 fafa 	bl	80068b4 <HAL_RCCEx_PeriphCLKConfig>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800d2c6:	f7f3 fa45 	bl	8000754 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d2ca:	f7f8 fb55 	bl	8005978 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2ce:	4b21      	ldr	r3, [pc, #132]	; (800d354 <HAL_PCD_MspInit+0xdc>)
 800d2d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d2d4:	4a1f      	ldr	r2, [pc, #124]	; (800d354 <HAL_PCD_MspInit+0xdc>)
 800d2d6:	f043 0301 	orr.w	r3, r3, #1
 800d2da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d2de:	4b1d      	ldr	r3, [pc, #116]	; (800d354 <HAL_PCD_MspInit+0xdc>)
 800d2e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d2e4:	f003 0301 	and.w	r3, r3, #1
 800d2e8:	60fb      	str	r3, [r7, #12]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d2ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d2f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2f4:	2302      	movs	r3, #2
 800d2f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d300:	2300      	movs	r3, #0
 800d302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d306:	230a      	movs	r3, #10
 800d308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d30c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d310:	4619      	mov	r1, r3
 800d312:	4811      	ldr	r0, [pc, #68]	; (800d358 <HAL_PCD_MspInit+0xe0>)
 800d314:	f7f6 fd02 	bl	8003d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d318:	4b0e      	ldr	r3, [pc, #56]	; (800d354 <HAL_PCD_MspInit+0xdc>)
 800d31a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d31e:	4a0d      	ldr	r2, [pc, #52]	; (800d354 <HAL_PCD_MspInit+0xdc>)
 800d320:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d324:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d328:	4b0a      	ldr	r3, [pc, #40]	; (800d354 <HAL_PCD_MspInit+0xdc>)
 800d32a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d32e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d332:	60bb      	str	r3, [r7, #8]
 800d334:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d336:	2200      	movs	r2, #0
 800d338:	2100      	movs	r1, #0
 800d33a:	2065      	movs	r0, #101	; 0x65
 800d33c:	f7f3 fe71 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d340:	2065      	movs	r0, #101	; 0x65
 800d342:	f7f3 fe88 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d346:	bf00      	nop
 800d348:	37e0      	adds	r7, #224	; 0xe0
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	40080000 	.word	0x40080000
 800d354:	58024400 	.word	0x58024400
 800d358:	58020000 	.word	0x58020000

0800d35c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d370:	4619      	mov	r1, r3
 800d372:	4610      	mov	r0, r2
 800d374:	f7fe fbdf 	bl	800bb36 <USBD_LL_SetupStage>
}
 800d378:	bf00      	nop
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	460b      	mov	r3, r1
 800d38a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d392:	78fa      	ldrb	r2, [r7, #3]
 800d394:	6879      	ldr	r1, [r7, #4]
 800d396:	4613      	mov	r3, r2
 800d398:	00db      	lsls	r3, r3, #3
 800d39a:	4413      	add	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	440b      	add	r3, r1
 800d3a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	78fb      	ldrb	r3, [r7, #3]
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	f7fe fc19 	bl	800bbe0 <USBD_LL_DataOutStage>
}
 800d3ae:	bf00      	nop
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b082      	sub	sp, #8
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
 800d3be:	460b      	mov	r3, r1
 800d3c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d3c8:	78fa      	ldrb	r2, [r7, #3]
 800d3ca:	6879      	ldr	r1, [r7, #4]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	00db      	lsls	r3, r3, #3
 800d3d0:	4413      	add	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	440b      	add	r3, r1
 800d3d6:	334c      	adds	r3, #76	; 0x4c
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	78fb      	ldrb	r3, [r7, #3]
 800d3dc:	4619      	mov	r1, r3
 800d3de:	f7fe fcb2 	bl	800bd46 <USBD_LL_DataInStage>
}
 800d3e2:	bf00      	nop
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b082      	sub	sp, #8
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe fde6 	bl	800bfca <USBD_LL_SOF>
}
 800d3fe:	bf00      	nop
 800d400:	3708      	adds	r7, #8
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b084      	sub	sp, #16
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d40e:	2301      	movs	r3, #1
 800d410:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d102      	bne.n	800d420 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d41a:	2300      	movs	r3, #0
 800d41c:	73fb      	strb	r3, [r7, #15]
 800d41e:	e008      	b.n	800d432 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	2b02      	cmp	r3, #2
 800d426:	d102      	bne.n	800d42e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d428:	2301      	movs	r3, #1
 800d42a:	73fb      	strb	r3, [r7, #15]
 800d42c:	e001      	b.n	800d432 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d42e:	f7f3 f991 	bl	8000754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d438:	7bfa      	ldrb	r2, [r7, #15]
 800d43a:	4611      	mov	r1, r2
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe fd86 	bl	800bf4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fe fd2e 	bl	800beaa <USBD_LL_Reset>
}
 800d44e:	bf00      	nop
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe fd81 	bl	800bf6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	6812      	ldr	r2, [r2, #0]
 800d47a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d47e:	f043 0301 	orr.w	r3, r3, #1
 800d482:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a1b      	ldr	r3, [r3, #32]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d005      	beq.n	800d498 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d48c:	4b04      	ldr	r3, [pc, #16]	; (800d4a0 <HAL_PCD_SuspendCallback+0x48>)
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	4a03      	ldr	r2, [pc, #12]	; (800d4a0 <HAL_PCD_SuspendCallback+0x48>)
 800d492:	f043 0306 	orr.w	r3, r3, #6
 800d496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d498:	bf00      	nop
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	e000ed00 	.word	0xe000ed00

0800d4a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe fd71 	bl	800bf9a <USBD_LL_Resume>
}
 800d4b8:	bf00      	nop
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d4d2:	78fa      	ldrb	r2, [r7, #3]
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fe fdc9 	bl	800c06e <USBD_LL_IsoOUTIncomplete>
}
 800d4dc:	bf00      	nop
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d4f6:	78fa      	ldrb	r2, [r7, #3]
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fe fd85 	bl	800c00a <USBD_LL_IsoINIncomplete>
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d516:	4618      	mov	r0, r3
 800d518:	f7fe fddb 	bl	800c0d2 <USBD_LL_DevConnected>
}
 800d51c:	bf00      	nop
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d532:	4618      	mov	r0, r3
 800d534:	f7fe fdd8 	bl	800c0e8 <USBD_LL_DevDisconnected>
}
 800d538:	bf00      	nop
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d13e      	bne.n	800d5ce <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d550:	4a21      	ldr	r2, [pc, #132]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a1f      	ldr	r2, [pc, #124]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d55c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d560:	4b1d      	ldr	r3, [pc, #116]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d562:	4a1e      	ldr	r2, [pc, #120]	; (800d5dc <USBD_LL_Init+0x9c>)
 800d564:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d566:	4b1c      	ldr	r3, [pc, #112]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d568:	2209      	movs	r2, #9
 800d56a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d56c:	4b1a      	ldr	r3, [pc, #104]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d56e:	2202      	movs	r2, #2
 800d570:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d572:	4b19      	ldr	r3, [pc, #100]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d574:	2200      	movs	r2, #0
 800d576:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d578:	4b17      	ldr	r3, [pc, #92]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d57a:	2202      	movs	r2, #2
 800d57c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d57e:	4b16      	ldr	r3, [pc, #88]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d580:	2201      	movs	r2, #1
 800d582:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d584:	4b14      	ldr	r3, [pc, #80]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d586:	2200      	movs	r2, #0
 800d588:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d58a:	4b13      	ldr	r3, [pc, #76]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d590:	4b11      	ldr	r3, [pc, #68]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d592:	2200      	movs	r2, #0
 800d594:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d596:	4b10      	ldr	r3, [pc, #64]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d598:	2200      	movs	r2, #0
 800d59a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d59c:	4b0e      	ldr	r3, [pc, #56]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d5a2:	480d      	ldr	r0, [pc, #52]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d5a4:	f7f6 feab 	bl	80042fe <HAL_PCD_Init>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d5ae:	f7f3 f8d1 	bl	8000754 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d5b2:	2180      	movs	r1, #128	; 0x80
 800d5b4:	4808      	ldr	r0, [pc, #32]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d5b6:	f7f8 f964 	bl	8005882 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d5ba:	2240      	movs	r2, #64	; 0x40
 800d5bc:	2100      	movs	r1, #0
 800d5be:	4806      	ldr	r0, [pc, #24]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d5c0:	f7f8 f918 	bl	80057f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d5c4:	2280      	movs	r2, #128	; 0x80
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	4803      	ldr	r0, [pc, #12]	; (800d5d8 <USBD_LL_Init+0x98>)
 800d5ca:	f7f8 f913 	bl	80057f4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	24000df8 	.word	0x24000df8
 800d5dc:	40080000 	.word	0x40080000

0800d5e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7f6 ffa5 	bl	8004546 <HAL_PCD_Start>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d600:	7bfb      	ldrb	r3, [r7, #15]
 800d602:	4618      	mov	r0, r3
 800d604:	f000 f942 	bl	800d88c <USBD_Get_USB_Status>
 800d608:	4603      	mov	r3, r0
 800d60a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d60c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b084      	sub	sp, #16
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	4608      	mov	r0, r1
 800d620:	4611      	mov	r1, r2
 800d622:	461a      	mov	r2, r3
 800d624:	4603      	mov	r3, r0
 800d626:	70fb      	strb	r3, [r7, #3]
 800d628:	460b      	mov	r3, r1
 800d62a:	70bb      	strb	r3, [r7, #2]
 800d62c:	4613      	mov	r3, r2
 800d62e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d634:	2300      	movs	r3, #0
 800d636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d63e:	78bb      	ldrb	r3, [r7, #2]
 800d640:	883a      	ldrh	r2, [r7, #0]
 800d642:	78f9      	ldrb	r1, [r7, #3]
 800d644:	f7f7 fca3 	bl	8004f8e <HAL_PCD_EP_Open>
 800d648:	4603      	mov	r3, r0
 800d64a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 f91c 	bl	800d88c <USBD_Get_USB_Status>
 800d654:	4603      	mov	r3, r0
 800d656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d658:	7bbb      	ldrb	r3, [r7, #14]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b084      	sub	sp, #16
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	460b      	mov	r3, r1
 800d66c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d672:	2300      	movs	r3, #0
 800d674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d67c:	78fa      	ldrb	r2, [r7, #3]
 800d67e:	4611      	mov	r1, r2
 800d680:	4618      	mov	r0, r3
 800d682:	f7f7 fcec 	bl	800505e <HAL_PCD_EP_Close>
 800d686:	4603      	mov	r3, r0
 800d688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 f8fd 	bl	800d88c <USBD_Get_USB_Status>
 800d692:	4603      	mov	r3, r0
 800d694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d696:	7bbb      	ldrb	r3, [r7, #14]
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6ba:	78fa      	ldrb	r2, [r7, #3]
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7f7 fdc4 	bl	800524c <HAL_PCD_EP_SetStall>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6c8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f000 f8de 	bl	800d88c <USBD_Get_USB_Status>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b084      	sub	sp, #16
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6f8:	78fa      	ldrb	r2, [r7, #3]
 800d6fa:	4611      	mov	r1, r2
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7f7 fe09 	bl	8005314 <HAL_PCD_EP_ClrStall>
 800d702:	4603      	mov	r3, r0
 800d704:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	4618      	mov	r0, r3
 800d70a:	f000 f8bf 	bl	800d88c <USBD_Get_USB_Status>
 800d70e:	4603      	mov	r3, r0
 800d710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d712:	7bbb      	ldrb	r3, [r7, #14]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d72e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d734:	2b00      	cmp	r3, #0
 800d736:	da0b      	bge.n	800d750 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d738:	78fb      	ldrb	r3, [r7, #3]
 800d73a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d73e:	68f9      	ldr	r1, [r7, #12]
 800d740:	4613      	mov	r3, r2
 800d742:	00db      	lsls	r3, r3, #3
 800d744:	4413      	add	r3, r2
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	440b      	add	r3, r1
 800d74a:	333e      	adds	r3, #62	; 0x3e
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	e00b      	b.n	800d768 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d756:	68f9      	ldr	r1, [r7, #12]
 800d758:	4613      	mov	r3, r2
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	4413      	add	r3, r2
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	440b      	add	r3, r1
 800d762:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d766:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3714      	adds	r7, #20
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	460b      	mov	r3, r1
 800d77e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d78e:	78fa      	ldrb	r2, [r7, #3]
 800d790:	4611      	mov	r1, r2
 800d792:	4618      	mov	r0, r3
 800d794:	f7f7 fbd6 	bl	8004f44 <HAL_PCD_SetAddress>
 800d798:	4603      	mov	r3, r0
 800d79a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f874 	bl	800d88c <USBD_Get_USB_Status>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b086      	sub	sp, #24
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	60f8      	str	r0, [r7, #12]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
 800d7be:	460b      	mov	r3, r1
 800d7c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d7d0:	7af9      	ldrb	r1, [r7, #11]
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	f7f7 fcef 	bl	80051b8 <HAL_PCD_EP_Transmit>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7de:	7dfb      	ldrb	r3, [r7, #23]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 f853 	bl	800d88c <USBD_Get_USB_Status>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3718      	adds	r7, #24
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	607a      	str	r2, [r7, #4]
 800d7fe:	603b      	str	r3, [r7, #0]
 800d800:	460b      	mov	r3, r1
 800d802:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d808:	2300      	movs	r3, #0
 800d80a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d812:	7af9      	ldrb	r1, [r7, #11]
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	f7f7 fc6b 	bl	80050f2 <HAL_PCD_EP_Receive>
 800d81c:	4603      	mov	r3, r0
 800d81e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d820:	7dfb      	ldrb	r3, [r7, #23]
 800d822:	4618      	mov	r0, r3
 800d824:	f000 f832 	bl	800d88c <USBD_Get_USB_Status>
 800d828:	4603      	mov	r3, r0
 800d82a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d82c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	460b      	mov	r3, r1
 800d840:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d848:	78fa      	ldrb	r2, [r7, #3]
 800d84a:	4611      	mov	r1, r2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7f7 fc9b 	bl	8005188 <HAL_PCD_EP_GetRxCount>
 800d852:	4603      	mov	r3, r0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3708      	adds	r7, #8
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d864:	4b03      	ldr	r3, [pc, #12]	; (800d874 <USBD_static_malloc+0x18>)
}
 800d866:	4618      	mov	r0, r3
 800d868:	370c      	adds	r7, #12
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	24001304 	.word	0x24001304

0800d878 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]

}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	4603      	mov	r3, r0
 800d894:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d896:	2300      	movs	r3, #0
 800d898:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d89a:	79fb      	ldrb	r3, [r7, #7]
 800d89c:	2b03      	cmp	r3, #3
 800d89e:	d817      	bhi.n	800d8d0 <USBD_Get_USB_Status+0x44>
 800d8a0:	a201      	add	r2, pc, #4	; (adr r2, 800d8a8 <USBD_Get_USB_Status+0x1c>)
 800d8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a6:	bf00      	nop
 800d8a8:	0800d8b9 	.word	0x0800d8b9
 800d8ac:	0800d8bf 	.word	0x0800d8bf
 800d8b0:	0800d8c5 	.word	0x0800d8c5
 800d8b4:	0800d8cb 	.word	0x0800d8cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d8bc:	e00b      	b.n	800d8d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8be:	2303      	movs	r3, #3
 800d8c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c2:	e008      	b.n	800d8d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c8:	e005      	b.n	800d8d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ce:	e002      	b.n	800d8d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d8d0:	2303      	movs	r3, #3
 800d8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d4:	bf00      	nop
  }
  return usb_status;
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <__errno>:
 800d8e4:	4b01      	ldr	r3, [pc, #4]	; (800d8ec <__errno+0x8>)
 800d8e6:	6818      	ldr	r0, [r3, #0]
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	24000130 	.word	0x24000130

0800d8f0 <__libc_init_array>:
 800d8f0:	b570      	push	{r4, r5, r6, lr}
 800d8f2:	4d0d      	ldr	r5, [pc, #52]	; (800d928 <__libc_init_array+0x38>)
 800d8f4:	4c0d      	ldr	r4, [pc, #52]	; (800d92c <__libc_init_array+0x3c>)
 800d8f6:	1b64      	subs	r4, r4, r5
 800d8f8:	10a4      	asrs	r4, r4, #2
 800d8fa:	2600      	movs	r6, #0
 800d8fc:	42a6      	cmp	r6, r4
 800d8fe:	d109      	bne.n	800d914 <__libc_init_array+0x24>
 800d900:	4d0b      	ldr	r5, [pc, #44]	; (800d930 <__libc_init_array+0x40>)
 800d902:	4c0c      	ldr	r4, [pc, #48]	; (800d934 <__libc_init_array+0x44>)
 800d904:	f001 f824 	bl	800e950 <_init>
 800d908:	1b64      	subs	r4, r4, r5
 800d90a:	10a4      	asrs	r4, r4, #2
 800d90c:	2600      	movs	r6, #0
 800d90e:	42a6      	cmp	r6, r4
 800d910:	d105      	bne.n	800d91e <__libc_init_array+0x2e>
 800d912:	bd70      	pop	{r4, r5, r6, pc}
 800d914:	f855 3b04 	ldr.w	r3, [r5], #4
 800d918:	4798      	blx	r3
 800d91a:	3601      	adds	r6, #1
 800d91c:	e7ee      	b.n	800d8fc <__libc_init_array+0xc>
 800d91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d922:	4798      	blx	r3
 800d924:	3601      	adds	r6, #1
 800d926:	e7f2      	b.n	800d90e <__libc_init_array+0x1e>
 800d928:	0800ea7c 	.word	0x0800ea7c
 800d92c:	0800ea7c 	.word	0x0800ea7c
 800d930:	0800ea7c 	.word	0x0800ea7c
 800d934:	0800ea80 	.word	0x0800ea80

0800d938 <memset>:
 800d938:	4402      	add	r2, r0
 800d93a:	4603      	mov	r3, r0
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d100      	bne.n	800d942 <memset+0xa>
 800d940:	4770      	bx	lr
 800d942:	f803 1b01 	strb.w	r1, [r3], #1
 800d946:	e7f9      	b.n	800d93c <memset+0x4>

0800d948 <iprintf>:
 800d948:	b40f      	push	{r0, r1, r2, r3}
 800d94a:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <iprintf+0x2c>)
 800d94c:	b513      	push	{r0, r1, r4, lr}
 800d94e:	681c      	ldr	r4, [r3, #0]
 800d950:	b124      	cbz	r4, 800d95c <iprintf+0x14>
 800d952:	69a3      	ldr	r3, [r4, #24]
 800d954:	b913      	cbnz	r3, 800d95c <iprintf+0x14>
 800d956:	4620      	mov	r0, r4
 800d958:	f000 fa5e 	bl	800de18 <__sinit>
 800d95c:	ab05      	add	r3, sp, #20
 800d95e:	9a04      	ldr	r2, [sp, #16]
 800d960:	68a1      	ldr	r1, [r4, #8]
 800d962:	9301      	str	r3, [sp, #4]
 800d964:	4620      	mov	r0, r4
 800d966:	f000 fc67 	bl	800e238 <_vfiprintf_r>
 800d96a:	b002      	add	sp, #8
 800d96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d970:	b004      	add	sp, #16
 800d972:	4770      	bx	lr
 800d974:	24000130 	.word	0x24000130

0800d978 <_puts_r>:
 800d978:	b570      	push	{r4, r5, r6, lr}
 800d97a:	460e      	mov	r6, r1
 800d97c:	4605      	mov	r5, r0
 800d97e:	b118      	cbz	r0, 800d988 <_puts_r+0x10>
 800d980:	6983      	ldr	r3, [r0, #24]
 800d982:	b90b      	cbnz	r3, 800d988 <_puts_r+0x10>
 800d984:	f000 fa48 	bl	800de18 <__sinit>
 800d988:	69ab      	ldr	r3, [r5, #24]
 800d98a:	68ac      	ldr	r4, [r5, #8]
 800d98c:	b913      	cbnz	r3, 800d994 <_puts_r+0x1c>
 800d98e:	4628      	mov	r0, r5
 800d990:	f000 fa42 	bl	800de18 <__sinit>
 800d994:	4b2c      	ldr	r3, [pc, #176]	; (800da48 <_puts_r+0xd0>)
 800d996:	429c      	cmp	r4, r3
 800d998:	d120      	bne.n	800d9dc <_puts_r+0x64>
 800d99a:	686c      	ldr	r4, [r5, #4]
 800d99c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d99e:	07db      	lsls	r3, r3, #31
 800d9a0:	d405      	bmi.n	800d9ae <_puts_r+0x36>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	0598      	lsls	r0, r3, #22
 800d9a6:	d402      	bmi.n	800d9ae <_puts_r+0x36>
 800d9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9aa:	f000 fad3 	bl	800df54 <__retarget_lock_acquire_recursive>
 800d9ae:	89a3      	ldrh	r3, [r4, #12]
 800d9b0:	0719      	lsls	r1, r3, #28
 800d9b2:	d51d      	bpl.n	800d9f0 <_puts_r+0x78>
 800d9b4:	6923      	ldr	r3, [r4, #16]
 800d9b6:	b1db      	cbz	r3, 800d9f0 <_puts_r+0x78>
 800d9b8:	3e01      	subs	r6, #1
 800d9ba:	68a3      	ldr	r3, [r4, #8]
 800d9bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	60a3      	str	r3, [r4, #8]
 800d9c4:	bb39      	cbnz	r1, 800da16 <_puts_r+0x9e>
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	da38      	bge.n	800da3c <_puts_r+0xc4>
 800d9ca:	4622      	mov	r2, r4
 800d9cc:	210a      	movs	r1, #10
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	f000 f848 	bl	800da64 <__swbuf_r>
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	d011      	beq.n	800d9fc <_puts_r+0x84>
 800d9d8:	250a      	movs	r5, #10
 800d9da:	e011      	b.n	800da00 <_puts_r+0x88>
 800d9dc:	4b1b      	ldr	r3, [pc, #108]	; (800da4c <_puts_r+0xd4>)
 800d9de:	429c      	cmp	r4, r3
 800d9e0:	d101      	bne.n	800d9e6 <_puts_r+0x6e>
 800d9e2:	68ac      	ldr	r4, [r5, #8]
 800d9e4:	e7da      	b.n	800d99c <_puts_r+0x24>
 800d9e6:	4b1a      	ldr	r3, [pc, #104]	; (800da50 <_puts_r+0xd8>)
 800d9e8:	429c      	cmp	r4, r3
 800d9ea:	bf08      	it	eq
 800d9ec:	68ec      	ldreq	r4, [r5, #12]
 800d9ee:	e7d5      	b.n	800d99c <_puts_r+0x24>
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	f000 f888 	bl	800db08 <__swsetup_r>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d0dd      	beq.n	800d9b8 <_puts_r+0x40>
 800d9fc:	f04f 35ff 	mov.w	r5, #4294967295
 800da00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da02:	07da      	lsls	r2, r3, #31
 800da04:	d405      	bmi.n	800da12 <_puts_r+0x9a>
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	059b      	lsls	r3, r3, #22
 800da0a:	d402      	bmi.n	800da12 <_puts_r+0x9a>
 800da0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da0e:	f000 faa2 	bl	800df56 <__retarget_lock_release_recursive>
 800da12:	4628      	mov	r0, r5
 800da14:	bd70      	pop	{r4, r5, r6, pc}
 800da16:	2b00      	cmp	r3, #0
 800da18:	da04      	bge.n	800da24 <_puts_r+0xac>
 800da1a:	69a2      	ldr	r2, [r4, #24]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	dc06      	bgt.n	800da2e <_puts_r+0xb6>
 800da20:	290a      	cmp	r1, #10
 800da22:	d004      	beq.n	800da2e <_puts_r+0xb6>
 800da24:	6823      	ldr	r3, [r4, #0]
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	6022      	str	r2, [r4, #0]
 800da2a:	7019      	strb	r1, [r3, #0]
 800da2c:	e7c5      	b.n	800d9ba <_puts_r+0x42>
 800da2e:	4622      	mov	r2, r4
 800da30:	4628      	mov	r0, r5
 800da32:	f000 f817 	bl	800da64 <__swbuf_r>
 800da36:	3001      	adds	r0, #1
 800da38:	d1bf      	bne.n	800d9ba <_puts_r+0x42>
 800da3a:	e7df      	b.n	800d9fc <_puts_r+0x84>
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	250a      	movs	r5, #10
 800da40:	1c5a      	adds	r2, r3, #1
 800da42:	6022      	str	r2, [r4, #0]
 800da44:	701d      	strb	r5, [r3, #0]
 800da46:	e7db      	b.n	800da00 <_puts_r+0x88>
 800da48:	0800ea08 	.word	0x0800ea08
 800da4c:	0800ea28 	.word	0x0800ea28
 800da50:	0800e9e8 	.word	0x0800e9e8

0800da54 <puts>:
 800da54:	4b02      	ldr	r3, [pc, #8]	; (800da60 <puts+0xc>)
 800da56:	4601      	mov	r1, r0
 800da58:	6818      	ldr	r0, [r3, #0]
 800da5a:	f7ff bf8d 	b.w	800d978 <_puts_r>
 800da5e:	bf00      	nop
 800da60:	24000130 	.word	0x24000130

0800da64 <__swbuf_r>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	460e      	mov	r6, r1
 800da68:	4614      	mov	r4, r2
 800da6a:	4605      	mov	r5, r0
 800da6c:	b118      	cbz	r0, 800da76 <__swbuf_r+0x12>
 800da6e:	6983      	ldr	r3, [r0, #24]
 800da70:	b90b      	cbnz	r3, 800da76 <__swbuf_r+0x12>
 800da72:	f000 f9d1 	bl	800de18 <__sinit>
 800da76:	4b21      	ldr	r3, [pc, #132]	; (800dafc <__swbuf_r+0x98>)
 800da78:	429c      	cmp	r4, r3
 800da7a:	d12b      	bne.n	800dad4 <__swbuf_r+0x70>
 800da7c:	686c      	ldr	r4, [r5, #4]
 800da7e:	69a3      	ldr	r3, [r4, #24]
 800da80:	60a3      	str	r3, [r4, #8]
 800da82:	89a3      	ldrh	r3, [r4, #12]
 800da84:	071a      	lsls	r2, r3, #28
 800da86:	d52f      	bpl.n	800dae8 <__swbuf_r+0x84>
 800da88:	6923      	ldr	r3, [r4, #16]
 800da8a:	b36b      	cbz	r3, 800dae8 <__swbuf_r+0x84>
 800da8c:	6923      	ldr	r3, [r4, #16]
 800da8e:	6820      	ldr	r0, [r4, #0]
 800da90:	1ac0      	subs	r0, r0, r3
 800da92:	6963      	ldr	r3, [r4, #20]
 800da94:	b2f6      	uxtb	r6, r6
 800da96:	4283      	cmp	r3, r0
 800da98:	4637      	mov	r7, r6
 800da9a:	dc04      	bgt.n	800daa6 <__swbuf_r+0x42>
 800da9c:	4621      	mov	r1, r4
 800da9e:	4628      	mov	r0, r5
 800daa0:	f000 f926 	bl	800dcf0 <_fflush_r>
 800daa4:	bb30      	cbnz	r0, 800daf4 <__swbuf_r+0x90>
 800daa6:	68a3      	ldr	r3, [r4, #8]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	60a3      	str	r3, [r4, #8]
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	1c5a      	adds	r2, r3, #1
 800dab0:	6022      	str	r2, [r4, #0]
 800dab2:	701e      	strb	r6, [r3, #0]
 800dab4:	6963      	ldr	r3, [r4, #20]
 800dab6:	3001      	adds	r0, #1
 800dab8:	4283      	cmp	r3, r0
 800daba:	d004      	beq.n	800dac6 <__swbuf_r+0x62>
 800dabc:	89a3      	ldrh	r3, [r4, #12]
 800dabe:	07db      	lsls	r3, r3, #31
 800dac0:	d506      	bpl.n	800dad0 <__swbuf_r+0x6c>
 800dac2:	2e0a      	cmp	r6, #10
 800dac4:	d104      	bne.n	800dad0 <__swbuf_r+0x6c>
 800dac6:	4621      	mov	r1, r4
 800dac8:	4628      	mov	r0, r5
 800daca:	f000 f911 	bl	800dcf0 <_fflush_r>
 800dace:	b988      	cbnz	r0, 800daf4 <__swbuf_r+0x90>
 800dad0:	4638      	mov	r0, r7
 800dad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dad4:	4b0a      	ldr	r3, [pc, #40]	; (800db00 <__swbuf_r+0x9c>)
 800dad6:	429c      	cmp	r4, r3
 800dad8:	d101      	bne.n	800dade <__swbuf_r+0x7a>
 800dada:	68ac      	ldr	r4, [r5, #8]
 800dadc:	e7cf      	b.n	800da7e <__swbuf_r+0x1a>
 800dade:	4b09      	ldr	r3, [pc, #36]	; (800db04 <__swbuf_r+0xa0>)
 800dae0:	429c      	cmp	r4, r3
 800dae2:	bf08      	it	eq
 800dae4:	68ec      	ldreq	r4, [r5, #12]
 800dae6:	e7ca      	b.n	800da7e <__swbuf_r+0x1a>
 800dae8:	4621      	mov	r1, r4
 800daea:	4628      	mov	r0, r5
 800daec:	f000 f80c 	bl	800db08 <__swsetup_r>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d0cb      	beq.n	800da8c <__swbuf_r+0x28>
 800daf4:	f04f 37ff 	mov.w	r7, #4294967295
 800daf8:	e7ea      	b.n	800dad0 <__swbuf_r+0x6c>
 800dafa:	bf00      	nop
 800dafc:	0800ea08 	.word	0x0800ea08
 800db00:	0800ea28 	.word	0x0800ea28
 800db04:	0800e9e8 	.word	0x0800e9e8

0800db08 <__swsetup_r>:
 800db08:	4b32      	ldr	r3, [pc, #200]	; (800dbd4 <__swsetup_r+0xcc>)
 800db0a:	b570      	push	{r4, r5, r6, lr}
 800db0c:	681d      	ldr	r5, [r3, #0]
 800db0e:	4606      	mov	r6, r0
 800db10:	460c      	mov	r4, r1
 800db12:	b125      	cbz	r5, 800db1e <__swsetup_r+0x16>
 800db14:	69ab      	ldr	r3, [r5, #24]
 800db16:	b913      	cbnz	r3, 800db1e <__swsetup_r+0x16>
 800db18:	4628      	mov	r0, r5
 800db1a:	f000 f97d 	bl	800de18 <__sinit>
 800db1e:	4b2e      	ldr	r3, [pc, #184]	; (800dbd8 <__swsetup_r+0xd0>)
 800db20:	429c      	cmp	r4, r3
 800db22:	d10f      	bne.n	800db44 <__swsetup_r+0x3c>
 800db24:	686c      	ldr	r4, [r5, #4]
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db2c:	0719      	lsls	r1, r3, #28
 800db2e:	d42c      	bmi.n	800db8a <__swsetup_r+0x82>
 800db30:	06dd      	lsls	r5, r3, #27
 800db32:	d411      	bmi.n	800db58 <__swsetup_r+0x50>
 800db34:	2309      	movs	r3, #9
 800db36:	6033      	str	r3, [r6, #0]
 800db38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db3c:	81a3      	strh	r3, [r4, #12]
 800db3e:	f04f 30ff 	mov.w	r0, #4294967295
 800db42:	e03e      	b.n	800dbc2 <__swsetup_r+0xba>
 800db44:	4b25      	ldr	r3, [pc, #148]	; (800dbdc <__swsetup_r+0xd4>)
 800db46:	429c      	cmp	r4, r3
 800db48:	d101      	bne.n	800db4e <__swsetup_r+0x46>
 800db4a:	68ac      	ldr	r4, [r5, #8]
 800db4c:	e7eb      	b.n	800db26 <__swsetup_r+0x1e>
 800db4e:	4b24      	ldr	r3, [pc, #144]	; (800dbe0 <__swsetup_r+0xd8>)
 800db50:	429c      	cmp	r4, r3
 800db52:	bf08      	it	eq
 800db54:	68ec      	ldreq	r4, [r5, #12]
 800db56:	e7e6      	b.n	800db26 <__swsetup_r+0x1e>
 800db58:	0758      	lsls	r0, r3, #29
 800db5a:	d512      	bpl.n	800db82 <__swsetup_r+0x7a>
 800db5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db5e:	b141      	cbz	r1, 800db72 <__swsetup_r+0x6a>
 800db60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db64:	4299      	cmp	r1, r3
 800db66:	d002      	beq.n	800db6e <__swsetup_r+0x66>
 800db68:	4630      	mov	r0, r6
 800db6a:	f000 fa5b 	bl	800e024 <_free_r>
 800db6e:	2300      	movs	r3, #0
 800db70:	6363      	str	r3, [r4, #52]	; 0x34
 800db72:	89a3      	ldrh	r3, [r4, #12]
 800db74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db78:	81a3      	strh	r3, [r4, #12]
 800db7a:	2300      	movs	r3, #0
 800db7c:	6063      	str	r3, [r4, #4]
 800db7e:	6923      	ldr	r3, [r4, #16]
 800db80:	6023      	str	r3, [r4, #0]
 800db82:	89a3      	ldrh	r3, [r4, #12]
 800db84:	f043 0308 	orr.w	r3, r3, #8
 800db88:	81a3      	strh	r3, [r4, #12]
 800db8a:	6923      	ldr	r3, [r4, #16]
 800db8c:	b94b      	cbnz	r3, 800dba2 <__swsetup_r+0x9a>
 800db8e:	89a3      	ldrh	r3, [r4, #12]
 800db90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db98:	d003      	beq.n	800dba2 <__swsetup_r+0x9a>
 800db9a:	4621      	mov	r1, r4
 800db9c:	4630      	mov	r0, r6
 800db9e:	f000 fa01 	bl	800dfa4 <__smakebuf_r>
 800dba2:	89a0      	ldrh	r0, [r4, #12]
 800dba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dba8:	f010 0301 	ands.w	r3, r0, #1
 800dbac:	d00a      	beq.n	800dbc4 <__swsetup_r+0xbc>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60a3      	str	r3, [r4, #8]
 800dbb2:	6963      	ldr	r3, [r4, #20]
 800dbb4:	425b      	negs	r3, r3
 800dbb6:	61a3      	str	r3, [r4, #24]
 800dbb8:	6923      	ldr	r3, [r4, #16]
 800dbba:	b943      	cbnz	r3, 800dbce <__swsetup_r+0xc6>
 800dbbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbc0:	d1ba      	bne.n	800db38 <__swsetup_r+0x30>
 800dbc2:	bd70      	pop	{r4, r5, r6, pc}
 800dbc4:	0781      	lsls	r1, r0, #30
 800dbc6:	bf58      	it	pl
 800dbc8:	6963      	ldrpl	r3, [r4, #20]
 800dbca:	60a3      	str	r3, [r4, #8]
 800dbcc:	e7f4      	b.n	800dbb8 <__swsetup_r+0xb0>
 800dbce:	2000      	movs	r0, #0
 800dbd0:	e7f7      	b.n	800dbc2 <__swsetup_r+0xba>
 800dbd2:	bf00      	nop
 800dbd4:	24000130 	.word	0x24000130
 800dbd8:	0800ea08 	.word	0x0800ea08
 800dbdc:	0800ea28 	.word	0x0800ea28
 800dbe0:	0800e9e8 	.word	0x0800e9e8

0800dbe4 <__sflush_r>:
 800dbe4:	898a      	ldrh	r2, [r1, #12]
 800dbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbea:	4605      	mov	r5, r0
 800dbec:	0710      	lsls	r0, r2, #28
 800dbee:	460c      	mov	r4, r1
 800dbf0:	d458      	bmi.n	800dca4 <__sflush_r+0xc0>
 800dbf2:	684b      	ldr	r3, [r1, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	dc05      	bgt.n	800dc04 <__sflush_r+0x20>
 800dbf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	dc02      	bgt.n	800dc04 <__sflush_r+0x20>
 800dbfe:	2000      	movs	r0, #0
 800dc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc06:	2e00      	cmp	r6, #0
 800dc08:	d0f9      	beq.n	800dbfe <__sflush_r+0x1a>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc10:	682f      	ldr	r7, [r5, #0]
 800dc12:	602b      	str	r3, [r5, #0]
 800dc14:	d032      	beq.n	800dc7c <__sflush_r+0x98>
 800dc16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	075a      	lsls	r2, r3, #29
 800dc1c:	d505      	bpl.n	800dc2a <__sflush_r+0x46>
 800dc1e:	6863      	ldr	r3, [r4, #4]
 800dc20:	1ac0      	subs	r0, r0, r3
 800dc22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc24:	b10b      	cbz	r3, 800dc2a <__sflush_r+0x46>
 800dc26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc28:	1ac0      	subs	r0, r0, r3
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc30:	6a21      	ldr	r1, [r4, #32]
 800dc32:	4628      	mov	r0, r5
 800dc34:	47b0      	blx	r6
 800dc36:	1c43      	adds	r3, r0, #1
 800dc38:	89a3      	ldrh	r3, [r4, #12]
 800dc3a:	d106      	bne.n	800dc4a <__sflush_r+0x66>
 800dc3c:	6829      	ldr	r1, [r5, #0]
 800dc3e:	291d      	cmp	r1, #29
 800dc40:	d82c      	bhi.n	800dc9c <__sflush_r+0xb8>
 800dc42:	4a2a      	ldr	r2, [pc, #168]	; (800dcec <__sflush_r+0x108>)
 800dc44:	40ca      	lsrs	r2, r1
 800dc46:	07d6      	lsls	r6, r2, #31
 800dc48:	d528      	bpl.n	800dc9c <__sflush_r+0xb8>
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	6062      	str	r2, [r4, #4]
 800dc4e:	04d9      	lsls	r1, r3, #19
 800dc50:	6922      	ldr	r2, [r4, #16]
 800dc52:	6022      	str	r2, [r4, #0]
 800dc54:	d504      	bpl.n	800dc60 <__sflush_r+0x7c>
 800dc56:	1c42      	adds	r2, r0, #1
 800dc58:	d101      	bne.n	800dc5e <__sflush_r+0x7a>
 800dc5a:	682b      	ldr	r3, [r5, #0]
 800dc5c:	b903      	cbnz	r3, 800dc60 <__sflush_r+0x7c>
 800dc5e:	6560      	str	r0, [r4, #84]	; 0x54
 800dc60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc62:	602f      	str	r7, [r5, #0]
 800dc64:	2900      	cmp	r1, #0
 800dc66:	d0ca      	beq.n	800dbfe <__sflush_r+0x1a>
 800dc68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc6c:	4299      	cmp	r1, r3
 800dc6e:	d002      	beq.n	800dc76 <__sflush_r+0x92>
 800dc70:	4628      	mov	r0, r5
 800dc72:	f000 f9d7 	bl	800e024 <_free_r>
 800dc76:	2000      	movs	r0, #0
 800dc78:	6360      	str	r0, [r4, #52]	; 0x34
 800dc7a:	e7c1      	b.n	800dc00 <__sflush_r+0x1c>
 800dc7c:	6a21      	ldr	r1, [r4, #32]
 800dc7e:	2301      	movs	r3, #1
 800dc80:	4628      	mov	r0, r5
 800dc82:	47b0      	blx	r6
 800dc84:	1c41      	adds	r1, r0, #1
 800dc86:	d1c7      	bne.n	800dc18 <__sflush_r+0x34>
 800dc88:	682b      	ldr	r3, [r5, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d0c4      	beq.n	800dc18 <__sflush_r+0x34>
 800dc8e:	2b1d      	cmp	r3, #29
 800dc90:	d001      	beq.n	800dc96 <__sflush_r+0xb2>
 800dc92:	2b16      	cmp	r3, #22
 800dc94:	d101      	bne.n	800dc9a <__sflush_r+0xb6>
 800dc96:	602f      	str	r7, [r5, #0]
 800dc98:	e7b1      	b.n	800dbfe <__sflush_r+0x1a>
 800dc9a:	89a3      	ldrh	r3, [r4, #12]
 800dc9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dca0:	81a3      	strh	r3, [r4, #12]
 800dca2:	e7ad      	b.n	800dc00 <__sflush_r+0x1c>
 800dca4:	690f      	ldr	r7, [r1, #16]
 800dca6:	2f00      	cmp	r7, #0
 800dca8:	d0a9      	beq.n	800dbfe <__sflush_r+0x1a>
 800dcaa:	0793      	lsls	r3, r2, #30
 800dcac:	680e      	ldr	r6, [r1, #0]
 800dcae:	bf08      	it	eq
 800dcb0:	694b      	ldreq	r3, [r1, #20]
 800dcb2:	600f      	str	r7, [r1, #0]
 800dcb4:	bf18      	it	ne
 800dcb6:	2300      	movne	r3, #0
 800dcb8:	eba6 0807 	sub.w	r8, r6, r7
 800dcbc:	608b      	str	r3, [r1, #8]
 800dcbe:	f1b8 0f00 	cmp.w	r8, #0
 800dcc2:	dd9c      	ble.n	800dbfe <__sflush_r+0x1a>
 800dcc4:	6a21      	ldr	r1, [r4, #32]
 800dcc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcc8:	4643      	mov	r3, r8
 800dcca:	463a      	mov	r2, r7
 800dccc:	4628      	mov	r0, r5
 800dcce:	47b0      	blx	r6
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	dc06      	bgt.n	800dce2 <__sflush_r+0xfe>
 800dcd4:	89a3      	ldrh	r3, [r4, #12]
 800dcd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcda:	81a3      	strh	r3, [r4, #12]
 800dcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dce0:	e78e      	b.n	800dc00 <__sflush_r+0x1c>
 800dce2:	4407      	add	r7, r0
 800dce4:	eba8 0800 	sub.w	r8, r8, r0
 800dce8:	e7e9      	b.n	800dcbe <__sflush_r+0xda>
 800dcea:	bf00      	nop
 800dcec:	20400001 	.word	0x20400001

0800dcf0 <_fflush_r>:
 800dcf0:	b538      	push	{r3, r4, r5, lr}
 800dcf2:	690b      	ldr	r3, [r1, #16]
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	b913      	cbnz	r3, 800dd00 <_fflush_r+0x10>
 800dcfa:	2500      	movs	r5, #0
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	bd38      	pop	{r3, r4, r5, pc}
 800dd00:	b118      	cbz	r0, 800dd0a <_fflush_r+0x1a>
 800dd02:	6983      	ldr	r3, [r0, #24]
 800dd04:	b90b      	cbnz	r3, 800dd0a <_fflush_r+0x1a>
 800dd06:	f000 f887 	bl	800de18 <__sinit>
 800dd0a:	4b14      	ldr	r3, [pc, #80]	; (800dd5c <_fflush_r+0x6c>)
 800dd0c:	429c      	cmp	r4, r3
 800dd0e:	d11b      	bne.n	800dd48 <_fflush_r+0x58>
 800dd10:	686c      	ldr	r4, [r5, #4]
 800dd12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d0ef      	beq.n	800dcfa <_fflush_r+0xa>
 800dd1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd1c:	07d0      	lsls	r0, r2, #31
 800dd1e:	d404      	bmi.n	800dd2a <_fflush_r+0x3a>
 800dd20:	0599      	lsls	r1, r3, #22
 800dd22:	d402      	bmi.n	800dd2a <_fflush_r+0x3a>
 800dd24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd26:	f000 f915 	bl	800df54 <__retarget_lock_acquire_recursive>
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	4621      	mov	r1, r4
 800dd2e:	f7ff ff59 	bl	800dbe4 <__sflush_r>
 800dd32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd34:	07da      	lsls	r2, r3, #31
 800dd36:	4605      	mov	r5, r0
 800dd38:	d4e0      	bmi.n	800dcfc <_fflush_r+0xc>
 800dd3a:	89a3      	ldrh	r3, [r4, #12]
 800dd3c:	059b      	lsls	r3, r3, #22
 800dd3e:	d4dd      	bmi.n	800dcfc <_fflush_r+0xc>
 800dd40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd42:	f000 f908 	bl	800df56 <__retarget_lock_release_recursive>
 800dd46:	e7d9      	b.n	800dcfc <_fflush_r+0xc>
 800dd48:	4b05      	ldr	r3, [pc, #20]	; (800dd60 <_fflush_r+0x70>)
 800dd4a:	429c      	cmp	r4, r3
 800dd4c:	d101      	bne.n	800dd52 <_fflush_r+0x62>
 800dd4e:	68ac      	ldr	r4, [r5, #8]
 800dd50:	e7df      	b.n	800dd12 <_fflush_r+0x22>
 800dd52:	4b04      	ldr	r3, [pc, #16]	; (800dd64 <_fflush_r+0x74>)
 800dd54:	429c      	cmp	r4, r3
 800dd56:	bf08      	it	eq
 800dd58:	68ec      	ldreq	r4, [r5, #12]
 800dd5a:	e7da      	b.n	800dd12 <_fflush_r+0x22>
 800dd5c:	0800ea08 	.word	0x0800ea08
 800dd60:	0800ea28 	.word	0x0800ea28
 800dd64:	0800e9e8 	.word	0x0800e9e8

0800dd68 <std>:
 800dd68:	2300      	movs	r3, #0
 800dd6a:	b510      	push	{r4, lr}
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	e9c0 3300 	strd	r3, r3, [r0]
 800dd72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd76:	6083      	str	r3, [r0, #8]
 800dd78:	8181      	strh	r1, [r0, #12]
 800dd7a:	6643      	str	r3, [r0, #100]	; 0x64
 800dd7c:	81c2      	strh	r2, [r0, #14]
 800dd7e:	6183      	str	r3, [r0, #24]
 800dd80:	4619      	mov	r1, r3
 800dd82:	2208      	movs	r2, #8
 800dd84:	305c      	adds	r0, #92	; 0x5c
 800dd86:	f7ff fdd7 	bl	800d938 <memset>
 800dd8a:	4b05      	ldr	r3, [pc, #20]	; (800dda0 <std+0x38>)
 800dd8c:	6263      	str	r3, [r4, #36]	; 0x24
 800dd8e:	4b05      	ldr	r3, [pc, #20]	; (800dda4 <std+0x3c>)
 800dd90:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd92:	4b05      	ldr	r3, [pc, #20]	; (800dda8 <std+0x40>)
 800dd94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd96:	4b05      	ldr	r3, [pc, #20]	; (800ddac <std+0x44>)
 800dd98:	6224      	str	r4, [r4, #32]
 800dd9a:	6323      	str	r3, [r4, #48]	; 0x30
 800dd9c:	bd10      	pop	{r4, pc}
 800dd9e:	bf00      	nop
 800dda0:	0800e7e1 	.word	0x0800e7e1
 800dda4:	0800e803 	.word	0x0800e803
 800dda8:	0800e83b 	.word	0x0800e83b
 800ddac:	0800e85f 	.word	0x0800e85f

0800ddb0 <_cleanup_r>:
 800ddb0:	4901      	ldr	r1, [pc, #4]	; (800ddb8 <_cleanup_r+0x8>)
 800ddb2:	f000 b8af 	b.w	800df14 <_fwalk_reent>
 800ddb6:	bf00      	nop
 800ddb8:	0800dcf1 	.word	0x0800dcf1

0800ddbc <__sfmoreglue>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	2268      	movs	r2, #104	; 0x68
 800ddc0:	1e4d      	subs	r5, r1, #1
 800ddc2:	4355      	muls	r5, r2
 800ddc4:	460e      	mov	r6, r1
 800ddc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ddca:	f000 f997 	bl	800e0fc <_malloc_r>
 800ddce:	4604      	mov	r4, r0
 800ddd0:	b140      	cbz	r0, 800dde4 <__sfmoreglue+0x28>
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	e9c0 1600 	strd	r1, r6, [r0]
 800ddd8:	300c      	adds	r0, #12
 800ddda:	60a0      	str	r0, [r4, #8]
 800dddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dde0:	f7ff fdaa 	bl	800d938 <memset>
 800dde4:	4620      	mov	r0, r4
 800dde6:	bd70      	pop	{r4, r5, r6, pc}

0800dde8 <__sfp_lock_acquire>:
 800dde8:	4801      	ldr	r0, [pc, #4]	; (800ddf0 <__sfp_lock_acquire+0x8>)
 800ddea:	f000 b8b3 	b.w	800df54 <__retarget_lock_acquire_recursive>
 800ddee:	bf00      	nop
 800ddf0:	24004f59 	.word	0x24004f59

0800ddf4 <__sfp_lock_release>:
 800ddf4:	4801      	ldr	r0, [pc, #4]	; (800ddfc <__sfp_lock_release+0x8>)
 800ddf6:	f000 b8ae 	b.w	800df56 <__retarget_lock_release_recursive>
 800ddfa:	bf00      	nop
 800ddfc:	24004f59 	.word	0x24004f59

0800de00 <__sinit_lock_acquire>:
 800de00:	4801      	ldr	r0, [pc, #4]	; (800de08 <__sinit_lock_acquire+0x8>)
 800de02:	f000 b8a7 	b.w	800df54 <__retarget_lock_acquire_recursive>
 800de06:	bf00      	nop
 800de08:	24004f5a 	.word	0x24004f5a

0800de0c <__sinit_lock_release>:
 800de0c:	4801      	ldr	r0, [pc, #4]	; (800de14 <__sinit_lock_release+0x8>)
 800de0e:	f000 b8a2 	b.w	800df56 <__retarget_lock_release_recursive>
 800de12:	bf00      	nop
 800de14:	24004f5a 	.word	0x24004f5a

0800de18 <__sinit>:
 800de18:	b510      	push	{r4, lr}
 800de1a:	4604      	mov	r4, r0
 800de1c:	f7ff fff0 	bl	800de00 <__sinit_lock_acquire>
 800de20:	69a3      	ldr	r3, [r4, #24]
 800de22:	b11b      	cbz	r3, 800de2c <__sinit+0x14>
 800de24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de28:	f7ff bff0 	b.w	800de0c <__sinit_lock_release>
 800de2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de30:	6523      	str	r3, [r4, #80]	; 0x50
 800de32:	4b13      	ldr	r3, [pc, #76]	; (800de80 <__sinit+0x68>)
 800de34:	4a13      	ldr	r2, [pc, #76]	; (800de84 <__sinit+0x6c>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	62a2      	str	r2, [r4, #40]	; 0x28
 800de3a:	42a3      	cmp	r3, r4
 800de3c:	bf04      	itt	eq
 800de3e:	2301      	moveq	r3, #1
 800de40:	61a3      	streq	r3, [r4, #24]
 800de42:	4620      	mov	r0, r4
 800de44:	f000 f820 	bl	800de88 <__sfp>
 800de48:	6060      	str	r0, [r4, #4]
 800de4a:	4620      	mov	r0, r4
 800de4c:	f000 f81c 	bl	800de88 <__sfp>
 800de50:	60a0      	str	r0, [r4, #8]
 800de52:	4620      	mov	r0, r4
 800de54:	f000 f818 	bl	800de88 <__sfp>
 800de58:	2200      	movs	r2, #0
 800de5a:	60e0      	str	r0, [r4, #12]
 800de5c:	2104      	movs	r1, #4
 800de5e:	6860      	ldr	r0, [r4, #4]
 800de60:	f7ff ff82 	bl	800dd68 <std>
 800de64:	68a0      	ldr	r0, [r4, #8]
 800de66:	2201      	movs	r2, #1
 800de68:	2109      	movs	r1, #9
 800de6a:	f7ff ff7d 	bl	800dd68 <std>
 800de6e:	68e0      	ldr	r0, [r4, #12]
 800de70:	2202      	movs	r2, #2
 800de72:	2112      	movs	r1, #18
 800de74:	f7ff ff78 	bl	800dd68 <std>
 800de78:	2301      	movs	r3, #1
 800de7a:	61a3      	str	r3, [r4, #24]
 800de7c:	e7d2      	b.n	800de24 <__sinit+0xc>
 800de7e:	bf00      	nop
 800de80:	0800e9e4 	.word	0x0800e9e4
 800de84:	0800ddb1 	.word	0x0800ddb1

0800de88 <__sfp>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	4607      	mov	r7, r0
 800de8c:	f7ff ffac 	bl	800dde8 <__sfp_lock_acquire>
 800de90:	4b1e      	ldr	r3, [pc, #120]	; (800df0c <__sfp+0x84>)
 800de92:	681e      	ldr	r6, [r3, #0]
 800de94:	69b3      	ldr	r3, [r6, #24]
 800de96:	b913      	cbnz	r3, 800de9e <__sfp+0x16>
 800de98:	4630      	mov	r0, r6
 800de9a:	f7ff ffbd 	bl	800de18 <__sinit>
 800de9e:	3648      	adds	r6, #72	; 0x48
 800dea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dea4:	3b01      	subs	r3, #1
 800dea6:	d503      	bpl.n	800deb0 <__sfp+0x28>
 800dea8:	6833      	ldr	r3, [r6, #0]
 800deaa:	b30b      	cbz	r3, 800def0 <__sfp+0x68>
 800deac:	6836      	ldr	r6, [r6, #0]
 800deae:	e7f7      	b.n	800dea0 <__sfp+0x18>
 800deb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800deb4:	b9d5      	cbnz	r5, 800deec <__sfp+0x64>
 800deb6:	4b16      	ldr	r3, [pc, #88]	; (800df10 <__sfp+0x88>)
 800deb8:	60e3      	str	r3, [r4, #12]
 800deba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800debe:	6665      	str	r5, [r4, #100]	; 0x64
 800dec0:	f000 f847 	bl	800df52 <__retarget_lock_init_recursive>
 800dec4:	f7ff ff96 	bl	800ddf4 <__sfp_lock_release>
 800dec8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800decc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ded0:	6025      	str	r5, [r4, #0]
 800ded2:	61a5      	str	r5, [r4, #24]
 800ded4:	2208      	movs	r2, #8
 800ded6:	4629      	mov	r1, r5
 800ded8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dedc:	f7ff fd2c 	bl	800d938 <memset>
 800dee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dee8:	4620      	mov	r0, r4
 800deea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deec:	3468      	adds	r4, #104	; 0x68
 800deee:	e7d9      	b.n	800dea4 <__sfp+0x1c>
 800def0:	2104      	movs	r1, #4
 800def2:	4638      	mov	r0, r7
 800def4:	f7ff ff62 	bl	800ddbc <__sfmoreglue>
 800def8:	4604      	mov	r4, r0
 800defa:	6030      	str	r0, [r6, #0]
 800defc:	2800      	cmp	r0, #0
 800defe:	d1d5      	bne.n	800deac <__sfp+0x24>
 800df00:	f7ff ff78 	bl	800ddf4 <__sfp_lock_release>
 800df04:	230c      	movs	r3, #12
 800df06:	603b      	str	r3, [r7, #0]
 800df08:	e7ee      	b.n	800dee8 <__sfp+0x60>
 800df0a:	bf00      	nop
 800df0c:	0800e9e4 	.word	0x0800e9e4
 800df10:	ffff0001 	.word	0xffff0001

0800df14 <_fwalk_reent>:
 800df14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df18:	4606      	mov	r6, r0
 800df1a:	4688      	mov	r8, r1
 800df1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df20:	2700      	movs	r7, #0
 800df22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df26:	f1b9 0901 	subs.w	r9, r9, #1
 800df2a:	d505      	bpl.n	800df38 <_fwalk_reent+0x24>
 800df2c:	6824      	ldr	r4, [r4, #0]
 800df2e:	2c00      	cmp	r4, #0
 800df30:	d1f7      	bne.n	800df22 <_fwalk_reent+0xe>
 800df32:	4638      	mov	r0, r7
 800df34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df38:	89ab      	ldrh	r3, [r5, #12]
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d907      	bls.n	800df4e <_fwalk_reent+0x3a>
 800df3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df42:	3301      	adds	r3, #1
 800df44:	d003      	beq.n	800df4e <_fwalk_reent+0x3a>
 800df46:	4629      	mov	r1, r5
 800df48:	4630      	mov	r0, r6
 800df4a:	47c0      	blx	r8
 800df4c:	4307      	orrs	r7, r0
 800df4e:	3568      	adds	r5, #104	; 0x68
 800df50:	e7e9      	b.n	800df26 <_fwalk_reent+0x12>

0800df52 <__retarget_lock_init_recursive>:
 800df52:	4770      	bx	lr

0800df54 <__retarget_lock_acquire_recursive>:
 800df54:	4770      	bx	lr

0800df56 <__retarget_lock_release_recursive>:
 800df56:	4770      	bx	lr

0800df58 <__swhatbuf_r>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	460e      	mov	r6, r1
 800df5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df60:	2900      	cmp	r1, #0
 800df62:	b096      	sub	sp, #88	; 0x58
 800df64:	4614      	mov	r4, r2
 800df66:	461d      	mov	r5, r3
 800df68:	da08      	bge.n	800df7c <__swhatbuf_r+0x24>
 800df6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800df6e:	2200      	movs	r2, #0
 800df70:	602a      	str	r2, [r5, #0]
 800df72:	061a      	lsls	r2, r3, #24
 800df74:	d410      	bmi.n	800df98 <__swhatbuf_r+0x40>
 800df76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df7a:	e00e      	b.n	800df9a <__swhatbuf_r+0x42>
 800df7c:	466a      	mov	r2, sp
 800df7e:	f000 fc95 	bl	800e8ac <_fstat_r>
 800df82:	2800      	cmp	r0, #0
 800df84:	dbf1      	blt.n	800df6a <__swhatbuf_r+0x12>
 800df86:	9a01      	ldr	r2, [sp, #4]
 800df88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df90:	425a      	negs	r2, r3
 800df92:	415a      	adcs	r2, r3
 800df94:	602a      	str	r2, [r5, #0]
 800df96:	e7ee      	b.n	800df76 <__swhatbuf_r+0x1e>
 800df98:	2340      	movs	r3, #64	; 0x40
 800df9a:	2000      	movs	r0, #0
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	b016      	add	sp, #88	; 0x58
 800dfa0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dfa4 <__smakebuf_r>:
 800dfa4:	898b      	ldrh	r3, [r1, #12]
 800dfa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfa8:	079d      	lsls	r5, r3, #30
 800dfaa:	4606      	mov	r6, r0
 800dfac:	460c      	mov	r4, r1
 800dfae:	d507      	bpl.n	800dfc0 <__smakebuf_r+0x1c>
 800dfb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dfb4:	6023      	str	r3, [r4, #0]
 800dfb6:	6123      	str	r3, [r4, #16]
 800dfb8:	2301      	movs	r3, #1
 800dfba:	6163      	str	r3, [r4, #20]
 800dfbc:	b002      	add	sp, #8
 800dfbe:	bd70      	pop	{r4, r5, r6, pc}
 800dfc0:	ab01      	add	r3, sp, #4
 800dfc2:	466a      	mov	r2, sp
 800dfc4:	f7ff ffc8 	bl	800df58 <__swhatbuf_r>
 800dfc8:	9900      	ldr	r1, [sp, #0]
 800dfca:	4605      	mov	r5, r0
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f000 f895 	bl	800e0fc <_malloc_r>
 800dfd2:	b948      	cbnz	r0, 800dfe8 <__smakebuf_r+0x44>
 800dfd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd8:	059a      	lsls	r2, r3, #22
 800dfda:	d4ef      	bmi.n	800dfbc <__smakebuf_r+0x18>
 800dfdc:	f023 0303 	bic.w	r3, r3, #3
 800dfe0:	f043 0302 	orr.w	r3, r3, #2
 800dfe4:	81a3      	strh	r3, [r4, #12]
 800dfe6:	e7e3      	b.n	800dfb0 <__smakebuf_r+0xc>
 800dfe8:	4b0d      	ldr	r3, [pc, #52]	; (800e020 <__smakebuf_r+0x7c>)
 800dfea:	62b3      	str	r3, [r6, #40]	; 0x28
 800dfec:	89a3      	ldrh	r3, [r4, #12]
 800dfee:	6020      	str	r0, [r4, #0]
 800dff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dff4:	81a3      	strh	r3, [r4, #12]
 800dff6:	9b00      	ldr	r3, [sp, #0]
 800dff8:	6163      	str	r3, [r4, #20]
 800dffa:	9b01      	ldr	r3, [sp, #4]
 800dffc:	6120      	str	r0, [r4, #16]
 800dffe:	b15b      	cbz	r3, 800e018 <__smakebuf_r+0x74>
 800e000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e004:	4630      	mov	r0, r6
 800e006:	f000 fc63 	bl	800e8d0 <_isatty_r>
 800e00a:	b128      	cbz	r0, 800e018 <__smakebuf_r+0x74>
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	f023 0303 	bic.w	r3, r3, #3
 800e012:	f043 0301 	orr.w	r3, r3, #1
 800e016:	81a3      	strh	r3, [r4, #12]
 800e018:	89a0      	ldrh	r0, [r4, #12]
 800e01a:	4305      	orrs	r5, r0
 800e01c:	81a5      	strh	r5, [r4, #12]
 800e01e:	e7cd      	b.n	800dfbc <__smakebuf_r+0x18>
 800e020:	0800ddb1 	.word	0x0800ddb1

0800e024 <_free_r>:
 800e024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e026:	2900      	cmp	r1, #0
 800e028:	d044      	beq.n	800e0b4 <_free_r+0x90>
 800e02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e02e:	9001      	str	r0, [sp, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	f1a1 0404 	sub.w	r4, r1, #4
 800e036:	bfb8      	it	lt
 800e038:	18e4      	addlt	r4, r4, r3
 800e03a:	f000 fc6b 	bl	800e914 <__malloc_lock>
 800e03e:	4a1e      	ldr	r2, [pc, #120]	; (800e0b8 <_free_r+0x94>)
 800e040:	9801      	ldr	r0, [sp, #4]
 800e042:	6813      	ldr	r3, [r2, #0]
 800e044:	b933      	cbnz	r3, 800e054 <_free_r+0x30>
 800e046:	6063      	str	r3, [r4, #4]
 800e048:	6014      	str	r4, [r2, #0]
 800e04a:	b003      	add	sp, #12
 800e04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e050:	f000 bc66 	b.w	800e920 <__malloc_unlock>
 800e054:	42a3      	cmp	r3, r4
 800e056:	d908      	bls.n	800e06a <_free_r+0x46>
 800e058:	6825      	ldr	r5, [r4, #0]
 800e05a:	1961      	adds	r1, r4, r5
 800e05c:	428b      	cmp	r3, r1
 800e05e:	bf01      	itttt	eq
 800e060:	6819      	ldreq	r1, [r3, #0]
 800e062:	685b      	ldreq	r3, [r3, #4]
 800e064:	1949      	addeq	r1, r1, r5
 800e066:	6021      	streq	r1, [r4, #0]
 800e068:	e7ed      	b.n	800e046 <_free_r+0x22>
 800e06a:	461a      	mov	r2, r3
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	b10b      	cbz	r3, 800e074 <_free_r+0x50>
 800e070:	42a3      	cmp	r3, r4
 800e072:	d9fa      	bls.n	800e06a <_free_r+0x46>
 800e074:	6811      	ldr	r1, [r2, #0]
 800e076:	1855      	adds	r5, r2, r1
 800e078:	42a5      	cmp	r5, r4
 800e07a:	d10b      	bne.n	800e094 <_free_r+0x70>
 800e07c:	6824      	ldr	r4, [r4, #0]
 800e07e:	4421      	add	r1, r4
 800e080:	1854      	adds	r4, r2, r1
 800e082:	42a3      	cmp	r3, r4
 800e084:	6011      	str	r1, [r2, #0]
 800e086:	d1e0      	bne.n	800e04a <_free_r+0x26>
 800e088:	681c      	ldr	r4, [r3, #0]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	6053      	str	r3, [r2, #4]
 800e08e:	4421      	add	r1, r4
 800e090:	6011      	str	r1, [r2, #0]
 800e092:	e7da      	b.n	800e04a <_free_r+0x26>
 800e094:	d902      	bls.n	800e09c <_free_r+0x78>
 800e096:	230c      	movs	r3, #12
 800e098:	6003      	str	r3, [r0, #0]
 800e09a:	e7d6      	b.n	800e04a <_free_r+0x26>
 800e09c:	6825      	ldr	r5, [r4, #0]
 800e09e:	1961      	adds	r1, r4, r5
 800e0a0:	428b      	cmp	r3, r1
 800e0a2:	bf04      	itt	eq
 800e0a4:	6819      	ldreq	r1, [r3, #0]
 800e0a6:	685b      	ldreq	r3, [r3, #4]
 800e0a8:	6063      	str	r3, [r4, #4]
 800e0aa:	bf04      	itt	eq
 800e0ac:	1949      	addeq	r1, r1, r5
 800e0ae:	6021      	streq	r1, [r4, #0]
 800e0b0:	6054      	str	r4, [r2, #4]
 800e0b2:	e7ca      	b.n	800e04a <_free_r+0x26>
 800e0b4:	b003      	add	sp, #12
 800e0b6:	bd30      	pop	{r4, r5, pc}
 800e0b8:	24004f5c 	.word	0x24004f5c

0800e0bc <sbrk_aligned>:
 800e0bc:	b570      	push	{r4, r5, r6, lr}
 800e0be:	4e0e      	ldr	r6, [pc, #56]	; (800e0f8 <sbrk_aligned+0x3c>)
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	6831      	ldr	r1, [r6, #0]
 800e0c4:	4605      	mov	r5, r0
 800e0c6:	b911      	cbnz	r1, 800e0ce <sbrk_aligned+0x12>
 800e0c8:	f000 fb7a 	bl	800e7c0 <_sbrk_r>
 800e0cc:	6030      	str	r0, [r6, #0]
 800e0ce:	4621      	mov	r1, r4
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	f000 fb75 	bl	800e7c0 <_sbrk_r>
 800e0d6:	1c43      	adds	r3, r0, #1
 800e0d8:	d00a      	beq.n	800e0f0 <sbrk_aligned+0x34>
 800e0da:	1cc4      	adds	r4, r0, #3
 800e0dc:	f024 0403 	bic.w	r4, r4, #3
 800e0e0:	42a0      	cmp	r0, r4
 800e0e2:	d007      	beq.n	800e0f4 <sbrk_aligned+0x38>
 800e0e4:	1a21      	subs	r1, r4, r0
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	f000 fb6a 	bl	800e7c0 <_sbrk_r>
 800e0ec:	3001      	adds	r0, #1
 800e0ee:	d101      	bne.n	800e0f4 <sbrk_aligned+0x38>
 800e0f0:	f04f 34ff 	mov.w	r4, #4294967295
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	bd70      	pop	{r4, r5, r6, pc}
 800e0f8:	24004f60 	.word	0x24004f60

0800e0fc <_malloc_r>:
 800e0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e100:	1ccd      	adds	r5, r1, #3
 800e102:	f025 0503 	bic.w	r5, r5, #3
 800e106:	3508      	adds	r5, #8
 800e108:	2d0c      	cmp	r5, #12
 800e10a:	bf38      	it	cc
 800e10c:	250c      	movcc	r5, #12
 800e10e:	2d00      	cmp	r5, #0
 800e110:	4607      	mov	r7, r0
 800e112:	db01      	blt.n	800e118 <_malloc_r+0x1c>
 800e114:	42a9      	cmp	r1, r5
 800e116:	d905      	bls.n	800e124 <_malloc_r+0x28>
 800e118:	230c      	movs	r3, #12
 800e11a:	603b      	str	r3, [r7, #0]
 800e11c:	2600      	movs	r6, #0
 800e11e:	4630      	mov	r0, r6
 800e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e124:	4e2e      	ldr	r6, [pc, #184]	; (800e1e0 <_malloc_r+0xe4>)
 800e126:	f000 fbf5 	bl	800e914 <__malloc_lock>
 800e12a:	6833      	ldr	r3, [r6, #0]
 800e12c:	461c      	mov	r4, r3
 800e12e:	bb34      	cbnz	r4, 800e17e <_malloc_r+0x82>
 800e130:	4629      	mov	r1, r5
 800e132:	4638      	mov	r0, r7
 800e134:	f7ff ffc2 	bl	800e0bc <sbrk_aligned>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	4604      	mov	r4, r0
 800e13c:	d14d      	bne.n	800e1da <_malloc_r+0xde>
 800e13e:	6834      	ldr	r4, [r6, #0]
 800e140:	4626      	mov	r6, r4
 800e142:	2e00      	cmp	r6, #0
 800e144:	d140      	bne.n	800e1c8 <_malloc_r+0xcc>
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	4631      	mov	r1, r6
 800e14a:	4638      	mov	r0, r7
 800e14c:	eb04 0803 	add.w	r8, r4, r3
 800e150:	f000 fb36 	bl	800e7c0 <_sbrk_r>
 800e154:	4580      	cmp	r8, r0
 800e156:	d13a      	bne.n	800e1ce <_malloc_r+0xd2>
 800e158:	6821      	ldr	r1, [r4, #0]
 800e15a:	3503      	adds	r5, #3
 800e15c:	1a6d      	subs	r5, r5, r1
 800e15e:	f025 0503 	bic.w	r5, r5, #3
 800e162:	3508      	adds	r5, #8
 800e164:	2d0c      	cmp	r5, #12
 800e166:	bf38      	it	cc
 800e168:	250c      	movcc	r5, #12
 800e16a:	4629      	mov	r1, r5
 800e16c:	4638      	mov	r0, r7
 800e16e:	f7ff ffa5 	bl	800e0bc <sbrk_aligned>
 800e172:	3001      	adds	r0, #1
 800e174:	d02b      	beq.n	800e1ce <_malloc_r+0xd2>
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	442b      	add	r3, r5
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	e00e      	b.n	800e19c <_malloc_r+0xa0>
 800e17e:	6822      	ldr	r2, [r4, #0]
 800e180:	1b52      	subs	r2, r2, r5
 800e182:	d41e      	bmi.n	800e1c2 <_malloc_r+0xc6>
 800e184:	2a0b      	cmp	r2, #11
 800e186:	d916      	bls.n	800e1b6 <_malloc_r+0xba>
 800e188:	1961      	adds	r1, r4, r5
 800e18a:	42a3      	cmp	r3, r4
 800e18c:	6025      	str	r5, [r4, #0]
 800e18e:	bf18      	it	ne
 800e190:	6059      	strne	r1, [r3, #4]
 800e192:	6863      	ldr	r3, [r4, #4]
 800e194:	bf08      	it	eq
 800e196:	6031      	streq	r1, [r6, #0]
 800e198:	5162      	str	r2, [r4, r5]
 800e19a:	604b      	str	r3, [r1, #4]
 800e19c:	4638      	mov	r0, r7
 800e19e:	f104 060b 	add.w	r6, r4, #11
 800e1a2:	f000 fbbd 	bl	800e920 <__malloc_unlock>
 800e1a6:	f026 0607 	bic.w	r6, r6, #7
 800e1aa:	1d23      	adds	r3, r4, #4
 800e1ac:	1af2      	subs	r2, r6, r3
 800e1ae:	d0b6      	beq.n	800e11e <_malloc_r+0x22>
 800e1b0:	1b9b      	subs	r3, r3, r6
 800e1b2:	50a3      	str	r3, [r4, r2]
 800e1b4:	e7b3      	b.n	800e11e <_malloc_r+0x22>
 800e1b6:	6862      	ldr	r2, [r4, #4]
 800e1b8:	42a3      	cmp	r3, r4
 800e1ba:	bf0c      	ite	eq
 800e1bc:	6032      	streq	r2, [r6, #0]
 800e1be:	605a      	strne	r2, [r3, #4]
 800e1c0:	e7ec      	b.n	800e19c <_malloc_r+0xa0>
 800e1c2:	4623      	mov	r3, r4
 800e1c4:	6864      	ldr	r4, [r4, #4]
 800e1c6:	e7b2      	b.n	800e12e <_malloc_r+0x32>
 800e1c8:	4634      	mov	r4, r6
 800e1ca:	6876      	ldr	r6, [r6, #4]
 800e1cc:	e7b9      	b.n	800e142 <_malloc_r+0x46>
 800e1ce:	230c      	movs	r3, #12
 800e1d0:	603b      	str	r3, [r7, #0]
 800e1d2:	4638      	mov	r0, r7
 800e1d4:	f000 fba4 	bl	800e920 <__malloc_unlock>
 800e1d8:	e7a1      	b.n	800e11e <_malloc_r+0x22>
 800e1da:	6025      	str	r5, [r4, #0]
 800e1dc:	e7de      	b.n	800e19c <_malloc_r+0xa0>
 800e1de:	bf00      	nop
 800e1e0:	24004f5c 	.word	0x24004f5c

0800e1e4 <__sfputc_r>:
 800e1e4:	6893      	ldr	r3, [r2, #8]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	b410      	push	{r4}
 800e1ec:	6093      	str	r3, [r2, #8]
 800e1ee:	da08      	bge.n	800e202 <__sfputc_r+0x1e>
 800e1f0:	6994      	ldr	r4, [r2, #24]
 800e1f2:	42a3      	cmp	r3, r4
 800e1f4:	db01      	blt.n	800e1fa <__sfputc_r+0x16>
 800e1f6:	290a      	cmp	r1, #10
 800e1f8:	d103      	bne.n	800e202 <__sfputc_r+0x1e>
 800e1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1fe:	f7ff bc31 	b.w	800da64 <__swbuf_r>
 800e202:	6813      	ldr	r3, [r2, #0]
 800e204:	1c58      	adds	r0, r3, #1
 800e206:	6010      	str	r0, [r2, #0]
 800e208:	7019      	strb	r1, [r3, #0]
 800e20a:	4608      	mov	r0, r1
 800e20c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <__sfputs_r>:
 800e212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e214:	4606      	mov	r6, r0
 800e216:	460f      	mov	r7, r1
 800e218:	4614      	mov	r4, r2
 800e21a:	18d5      	adds	r5, r2, r3
 800e21c:	42ac      	cmp	r4, r5
 800e21e:	d101      	bne.n	800e224 <__sfputs_r+0x12>
 800e220:	2000      	movs	r0, #0
 800e222:	e007      	b.n	800e234 <__sfputs_r+0x22>
 800e224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e228:	463a      	mov	r2, r7
 800e22a:	4630      	mov	r0, r6
 800e22c:	f7ff ffda 	bl	800e1e4 <__sfputc_r>
 800e230:	1c43      	adds	r3, r0, #1
 800e232:	d1f3      	bne.n	800e21c <__sfputs_r+0xa>
 800e234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e238 <_vfiprintf_r>:
 800e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	460d      	mov	r5, r1
 800e23e:	b09d      	sub	sp, #116	; 0x74
 800e240:	4614      	mov	r4, r2
 800e242:	4698      	mov	r8, r3
 800e244:	4606      	mov	r6, r0
 800e246:	b118      	cbz	r0, 800e250 <_vfiprintf_r+0x18>
 800e248:	6983      	ldr	r3, [r0, #24]
 800e24a:	b90b      	cbnz	r3, 800e250 <_vfiprintf_r+0x18>
 800e24c:	f7ff fde4 	bl	800de18 <__sinit>
 800e250:	4b89      	ldr	r3, [pc, #548]	; (800e478 <_vfiprintf_r+0x240>)
 800e252:	429d      	cmp	r5, r3
 800e254:	d11b      	bne.n	800e28e <_vfiprintf_r+0x56>
 800e256:	6875      	ldr	r5, [r6, #4]
 800e258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e25a:	07d9      	lsls	r1, r3, #31
 800e25c:	d405      	bmi.n	800e26a <_vfiprintf_r+0x32>
 800e25e:	89ab      	ldrh	r3, [r5, #12]
 800e260:	059a      	lsls	r2, r3, #22
 800e262:	d402      	bmi.n	800e26a <_vfiprintf_r+0x32>
 800e264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e266:	f7ff fe75 	bl	800df54 <__retarget_lock_acquire_recursive>
 800e26a:	89ab      	ldrh	r3, [r5, #12]
 800e26c:	071b      	lsls	r3, r3, #28
 800e26e:	d501      	bpl.n	800e274 <_vfiprintf_r+0x3c>
 800e270:	692b      	ldr	r3, [r5, #16]
 800e272:	b9eb      	cbnz	r3, 800e2b0 <_vfiprintf_r+0x78>
 800e274:	4629      	mov	r1, r5
 800e276:	4630      	mov	r0, r6
 800e278:	f7ff fc46 	bl	800db08 <__swsetup_r>
 800e27c:	b1c0      	cbz	r0, 800e2b0 <_vfiprintf_r+0x78>
 800e27e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e280:	07dc      	lsls	r4, r3, #31
 800e282:	d50e      	bpl.n	800e2a2 <_vfiprintf_r+0x6a>
 800e284:	f04f 30ff 	mov.w	r0, #4294967295
 800e288:	b01d      	add	sp, #116	; 0x74
 800e28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28e:	4b7b      	ldr	r3, [pc, #492]	; (800e47c <_vfiprintf_r+0x244>)
 800e290:	429d      	cmp	r5, r3
 800e292:	d101      	bne.n	800e298 <_vfiprintf_r+0x60>
 800e294:	68b5      	ldr	r5, [r6, #8]
 800e296:	e7df      	b.n	800e258 <_vfiprintf_r+0x20>
 800e298:	4b79      	ldr	r3, [pc, #484]	; (800e480 <_vfiprintf_r+0x248>)
 800e29a:	429d      	cmp	r5, r3
 800e29c:	bf08      	it	eq
 800e29e:	68f5      	ldreq	r5, [r6, #12]
 800e2a0:	e7da      	b.n	800e258 <_vfiprintf_r+0x20>
 800e2a2:	89ab      	ldrh	r3, [r5, #12]
 800e2a4:	0598      	lsls	r0, r3, #22
 800e2a6:	d4ed      	bmi.n	800e284 <_vfiprintf_r+0x4c>
 800e2a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2aa:	f7ff fe54 	bl	800df56 <__retarget_lock_release_recursive>
 800e2ae:	e7e9      	b.n	800e284 <_vfiprintf_r+0x4c>
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2b4:	2320      	movs	r3, #32
 800e2b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2be:	2330      	movs	r3, #48	; 0x30
 800e2c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e484 <_vfiprintf_r+0x24c>
 800e2c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2c8:	f04f 0901 	mov.w	r9, #1
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	469a      	mov	sl, r3
 800e2d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2d4:	b10a      	cbz	r2, 800e2da <_vfiprintf_r+0xa2>
 800e2d6:	2a25      	cmp	r2, #37	; 0x25
 800e2d8:	d1f9      	bne.n	800e2ce <_vfiprintf_r+0x96>
 800e2da:	ebba 0b04 	subs.w	fp, sl, r4
 800e2de:	d00b      	beq.n	800e2f8 <_vfiprintf_r+0xc0>
 800e2e0:	465b      	mov	r3, fp
 800e2e2:	4622      	mov	r2, r4
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	f7ff ff93 	bl	800e212 <__sfputs_r>
 800e2ec:	3001      	adds	r0, #1
 800e2ee:	f000 80aa 	beq.w	800e446 <_vfiprintf_r+0x20e>
 800e2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2f4:	445a      	add	r2, fp
 800e2f6:	9209      	str	r2, [sp, #36]	; 0x24
 800e2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f000 80a2 	beq.w	800e446 <_vfiprintf_r+0x20e>
 800e302:	2300      	movs	r3, #0
 800e304:	f04f 32ff 	mov.w	r2, #4294967295
 800e308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e30c:	f10a 0a01 	add.w	sl, sl, #1
 800e310:	9304      	str	r3, [sp, #16]
 800e312:	9307      	str	r3, [sp, #28]
 800e314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e318:	931a      	str	r3, [sp, #104]	; 0x68
 800e31a:	4654      	mov	r4, sl
 800e31c:	2205      	movs	r2, #5
 800e31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e322:	4858      	ldr	r0, [pc, #352]	; (800e484 <_vfiprintf_r+0x24c>)
 800e324:	f7f1 ffdc 	bl	80002e0 <memchr>
 800e328:	9a04      	ldr	r2, [sp, #16]
 800e32a:	b9d8      	cbnz	r0, 800e364 <_vfiprintf_r+0x12c>
 800e32c:	06d1      	lsls	r1, r2, #27
 800e32e:	bf44      	itt	mi
 800e330:	2320      	movmi	r3, #32
 800e332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e336:	0713      	lsls	r3, r2, #28
 800e338:	bf44      	itt	mi
 800e33a:	232b      	movmi	r3, #43	; 0x2b
 800e33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e340:	f89a 3000 	ldrb.w	r3, [sl]
 800e344:	2b2a      	cmp	r3, #42	; 0x2a
 800e346:	d015      	beq.n	800e374 <_vfiprintf_r+0x13c>
 800e348:	9a07      	ldr	r2, [sp, #28]
 800e34a:	4654      	mov	r4, sl
 800e34c:	2000      	movs	r0, #0
 800e34e:	f04f 0c0a 	mov.w	ip, #10
 800e352:	4621      	mov	r1, r4
 800e354:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e358:	3b30      	subs	r3, #48	; 0x30
 800e35a:	2b09      	cmp	r3, #9
 800e35c:	d94e      	bls.n	800e3fc <_vfiprintf_r+0x1c4>
 800e35e:	b1b0      	cbz	r0, 800e38e <_vfiprintf_r+0x156>
 800e360:	9207      	str	r2, [sp, #28]
 800e362:	e014      	b.n	800e38e <_vfiprintf_r+0x156>
 800e364:	eba0 0308 	sub.w	r3, r0, r8
 800e368:	fa09 f303 	lsl.w	r3, r9, r3
 800e36c:	4313      	orrs	r3, r2
 800e36e:	9304      	str	r3, [sp, #16]
 800e370:	46a2      	mov	sl, r4
 800e372:	e7d2      	b.n	800e31a <_vfiprintf_r+0xe2>
 800e374:	9b03      	ldr	r3, [sp, #12]
 800e376:	1d19      	adds	r1, r3, #4
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	9103      	str	r1, [sp, #12]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	bfbb      	ittet	lt
 800e380:	425b      	neglt	r3, r3
 800e382:	f042 0202 	orrlt.w	r2, r2, #2
 800e386:	9307      	strge	r3, [sp, #28]
 800e388:	9307      	strlt	r3, [sp, #28]
 800e38a:	bfb8      	it	lt
 800e38c:	9204      	strlt	r2, [sp, #16]
 800e38e:	7823      	ldrb	r3, [r4, #0]
 800e390:	2b2e      	cmp	r3, #46	; 0x2e
 800e392:	d10c      	bne.n	800e3ae <_vfiprintf_r+0x176>
 800e394:	7863      	ldrb	r3, [r4, #1]
 800e396:	2b2a      	cmp	r3, #42	; 0x2a
 800e398:	d135      	bne.n	800e406 <_vfiprintf_r+0x1ce>
 800e39a:	9b03      	ldr	r3, [sp, #12]
 800e39c:	1d1a      	adds	r2, r3, #4
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	9203      	str	r2, [sp, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	bfb8      	it	lt
 800e3a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3aa:	3402      	adds	r4, #2
 800e3ac:	9305      	str	r3, [sp, #20]
 800e3ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e494 <_vfiprintf_r+0x25c>
 800e3b2:	7821      	ldrb	r1, [r4, #0]
 800e3b4:	2203      	movs	r2, #3
 800e3b6:	4650      	mov	r0, sl
 800e3b8:	f7f1 ff92 	bl	80002e0 <memchr>
 800e3bc:	b140      	cbz	r0, 800e3d0 <_vfiprintf_r+0x198>
 800e3be:	2340      	movs	r3, #64	; 0x40
 800e3c0:	eba0 000a 	sub.w	r0, r0, sl
 800e3c4:	fa03 f000 	lsl.w	r0, r3, r0
 800e3c8:	9b04      	ldr	r3, [sp, #16]
 800e3ca:	4303      	orrs	r3, r0
 800e3cc:	3401      	adds	r4, #1
 800e3ce:	9304      	str	r3, [sp, #16]
 800e3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3d4:	482c      	ldr	r0, [pc, #176]	; (800e488 <_vfiprintf_r+0x250>)
 800e3d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3da:	2206      	movs	r2, #6
 800e3dc:	f7f1 ff80 	bl	80002e0 <memchr>
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	d03f      	beq.n	800e464 <_vfiprintf_r+0x22c>
 800e3e4:	4b29      	ldr	r3, [pc, #164]	; (800e48c <_vfiprintf_r+0x254>)
 800e3e6:	bb1b      	cbnz	r3, 800e430 <_vfiprintf_r+0x1f8>
 800e3e8:	9b03      	ldr	r3, [sp, #12]
 800e3ea:	3307      	adds	r3, #7
 800e3ec:	f023 0307 	bic.w	r3, r3, #7
 800e3f0:	3308      	adds	r3, #8
 800e3f2:	9303      	str	r3, [sp, #12]
 800e3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f6:	443b      	add	r3, r7
 800e3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e3fa:	e767      	b.n	800e2cc <_vfiprintf_r+0x94>
 800e3fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e400:	460c      	mov	r4, r1
 800e402:	2001      	movs	r0, #1
 800e404:	e7a5      	b.n	800e352 <_vfiprintf_r+0x11a>
 800e406:	2300      	movs	r3, #0
 800e408:	3401      	adds	r4, #1
 800e40a:	9305      	str	r3, [sp, #20]
 800e40c:	4619      	mov	r1, r3
 800e40e:	f04f 0c0a 	mov.w	ip, #10
 800e412:	4620      	mov	r0, r4
 800e414:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e418:	3a30      	subs	r2, #48	; 0x30
 800e41a:	2a09      	cmp	r2, #9
 800e41c:	d903      	bls.n	800e426 <_vfiprintf_r+0x1ee>
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0c5      	beq.n	800e3ae <_vfiprintf_r+0x176>
 800e422:	9105      	str	r1, [sp, #20]
 800e424:	e7c3      	b.n	800e3ae <_vfiprintf_r+0x176>
 800e426:	fb0c 2101 	mla	r1, ip, r1, r2
 800e42a:	4604      	mov	r4, r0
 800e42c:	2301      	movs	r3, #1
 800e42e:	e7f0      	b.n	800e412 <_vfiprintf_r+0x1da>
 800e430:	ab03      	add	r3, sp, #12
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	462a      	mov	r2, r5
 800e436:	4b16      	ldr	r3, [pc, #88]	; (800e490 <_vfiprintf_r+0x258>)
 800e438:	a904      	add	r1, sp, #16
 800e43a:	4630      	mov	r0, r6
 800e43c:	f3af 8000 	nop.w
 800e440:	4607      	mov	r7, r0
 800e442:	1c78      	adds	r0, r7, #1
 800e444:	d1d6      	bne.n	800e3f4 <_vfiprintf_r+0x1bc>
 800e446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e448:	07d9      	lsls	r1, r3, #31
 800e44a:	d405      	bmi.n	800e458 <_vfiprintf_r+0x220>
 800e44c:	89ab      	ldrh	r3, [r5, #12]
 800e44e:	059a      	lsls	r2, r3, #22
 800e450:	d402      	bmi.n	800e458 <_vfiprintf_r+0x220>
 800e452:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e454:	f7ff fd7f 	bl	800df56 <__retarget_lock_release_recursive>
 800e458:	89ab      	ldrh	r3, [r5, #12]
 800e45a:	065b      	lsls	r3, r3, #25
 800e45c:	f53f af12 	bmi.w	800e284 <_vfiprintf_r+0x4c>
 800e460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e462:	e711      	b.n	800e288 <_vfiprintf_r+0x50>
 800e464:	ab03      	add	r3, sp, #12
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	462a      	mov	r2, r5
 800e46a:	4b09      	ldr	r3, [pc, #36]	; (800e490 <_vfiprintf_r+0x258>)
 800e46c:	a904      	add	r1, sp, #16
 800e46e:	4630      	mov	r0, r6
 800e470:	f000 f880 	bl	800e574 <_printf_i>
 800e474:	e7e4      	b.n	800e440 <_vfiprintf_r+0x208>
 800e476:	bf00      	nop
 800e478:	0800ea08 	.word	0x0800ea08
 800e47c:	0800ea28 	.word	0x0800ea28
 800e480:	0800e9e8 	.word	0x0800e9e8
 800e484:	0800ea48 	.word	0x0800ea48
 800e488:	0800ea52 	.word	0x0800ea52
 800e48c:	00000000 	.word	0x00000000
 800e490:	0800e213 	.word	0x0800e213
 800e494:	0800ea4e 	.word	0x0800ea4e

0800e498 <_printf_common>:
 800e498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e49c:	4616      	mov	r6, r2
 800e49e:	4699      	mov	r9, r3
 800e4a0:	688a      	ldr	r2, [r1, #8]
 800e4a2:	690b      	ldr	r3, [r1, #16]
 800e4a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	bfb8      	it	lt
 800e4ac:	4613      	movlt	r3, r2
 800e4ae:	6033      	str	r3, [r6, #0]
 800e4b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4b4:	4607      	mov	r7, r0
 800e4b6:	460c      	mov	r4, r1
 800e4b8:	b10a      	cbz	r2, 800e4be <_printf_common+0x26>
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	6033      	str	r3, [r6, #0]
 800e4be:	6823      	ldr	r3, [r4, #0]
 800e4c0:	0699      	lsls	r1, r3, #26
 800e4c2:	bf42      	ittt	mi
 800e4c4:	6833      	ldrmi	r3, [r6, #0]
 800e4c6:	3302      	addmi	r3, #2
 800e4c8:	6033      	strmi	r3, [r6, #0]
 800e4ca:	6825      	ldr	r5, [r4, #0]
 800e4cc:	f015 0506 	ands.w	r5, r5, #6
 800e4d0:	d106      	bne.n	800e4e0 <_printf_common+0x48>
 800e4d2:	f104 0a19 	add.w	sl, r4, #25
 800e4d6:	68e3      	ldr	r3, [r4, #12]
 800e4d8:	6832      	ldr	r2, [r6, #0]
 800e4da:	1a9b      	subs	r3, r3, r2
 800e4dc:	42ab      	cmp	r3, r5
 800e4de:	dc26      	bgt.n	800e52e <_printf_common+0x96>
 800e4e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4e4:	1e13      	subs	r3, r2, #0
 800e4e6:	6822      	ldr	r2, [r4, #0]
 800e4e8:	bf18      	it	ne
 800e4ea:	2301      	movne	r3, #1
 800e4ec:	0692      	lsls	r2, r2, #26
 800e4ee:	d42b      	bmi.n	800e548 <_printf_common+0xb0>
 800e4f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4f4:	4649      	mov	r1, r9
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	47c0      	blx	r8
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	d01e      	beq.n	800e53c <_printf_common+0xa4>
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	68e5      	ldr	r5, [r4, #12]
 800e502:	6832      	ldr	r2, [r6, #0]
 800e504:	f003 0306 	and.w	r3, r3, #6
 800e508:	2b04      	cmp	r3, #4
 800e50a:	bf08      	it	eq
 800e50c:	1aad      	subeq	r5, r5, r2
 800e50e:	68a3      	ldr	r3, [r4, #8]
 800e510:	6922      	ldr	r2, [r4, #16]
 800e512:	bf0c      	ite	eq
 800e514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e518:	2500      	movne	r5, #0
 800e51a:	4293      	cmp	r3, r2
 800e51c:	bfc4      	itt	gt
 800e51e:	1a9b      	subgt	r3, r3, r2
 800e520:	18ed      	addgt	r5, r5, r3
 800e522:	2600      	movs	r6, #0
 800e524:	341a      	adds	r4, #26
 800e526:	42b5      	cmp	r5, r6
 800e528:	d11a      	bne.n	800e560 <_printf_common+0xc8>
 800e52a:	2000      	movs	r0, #0
 800e52c:	e008      	b.n	800e540 <_printf_common+0xa8>
 800e52e:	2301      	movs	r3, #1
 800e530:	4652      	mov	r2, sl
 800e532:	4649      	mov	r1, r9
 800e534:	4638      	mov	r0, r7
 800e536:	47c0      	blx	r8
 800e538:	3001      	adds	r0, #1
 800e53a:	d103      	bne.n	800e544 <_printf_common+0xac>
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e544:	3501      	adds	r5, #1
 800e546:	e7c6      	b.n	800e4d6 <_printf_common+0x3e>
 800e548:	18e1      	adds	r1, r4, r3
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	2030      	movs	r0, #48	; 0x30
 800e54e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e552:	4422      	add	r2, r4
 800e554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e55c:	3302      	adds	r3, #2
 800e55e:	e7c7      	b.n	800e4f0 <_printf_common+0x58>
 800e560:	2301      	movs	r3, #1
 800e562:	4622      	mov	r2, r4
 800e564:	4649      	mov	r1, r9
 800e566:	4638      	mov	r0, r7
 800e568:	47c0      	blx	r8
 800e56a:	3001      	adds	r0, #1
 800e56c:	d0e6      	beq.n	800e53c <_printf_common+0xa4>
 800e56e:	3601      	adds	r6, #1
 800e570:	e7d9      	b.n	800e526 <_printf_common+0x8e>
	...

0800e574 <_printf_i>:
 800e574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e578:	7e0f      	ldrb	r7, [r1, #24]
 800e57a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e57c:	2f78      	cmp	r7, #120	; 0x78
 800e57e:	4691      	mov	r9, r2
 800e580:	4680      	mov	r8, r0
 800e582:	460c      	mov	r4, r1
 800e584:	469a      	mov	sl, r3
 800e586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e58a:	d807      	bhi.n	800e59c <_printf_i+0x28>
 800e58c:	2f62      	cmp	r7, #98	; 0x62
 800e58e:	d80a      	bhi.n	800e5a6 <_printf_i+0x32>
 800e590:	2f00      	cmp	r7, #0
 800e592:	f000 80d8 	beq.w	800e746 <_printf_i+0x1d2>
 800e596:	2f58      	cmp	r7, #88	; 0x58
 800e598:	f000 80a3 	beq.w	800e6e2 <_printf_i+0x16e>
 800e59c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5a4:	e03a      	b.n	800e61c <_printf_i+0xa8>
 800e5a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5aa:	2b15      	cmp	r3, #21
 800e5ac:	d8f6      	bhi.n	800e59c <_printf_i+0x28>
 800e5ae:	a101      	add	r1, pc, #4	; (adr r1, 800e5b4 <_printf_i+0x40>)
 800e5b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5b4:	0800e60d 	.word	0x0800e60d
 800e5b8:	0800e621 	.word	0x0800e621
 800e5bc:	0800e59d 	.word	0x0800e59d
 800e5c0:	0800e59d 	.word	0x0800e59d
 800e5c4:	0800e59d 	.word	0x0800e59d
 800e5c8:	0800e59d 	.word	0x0800e59d
 800e5cc:	0800e621 	.word	0x0800e621
 800e5d0:	0800e59d 	.word	0x0800e59d
 800e5d4:	0800e59d 	.word	0x0800e59d
 800e5d8:	0800e59d 	.word	0x0800e59d
 800e5dc:	0800e59d 	.word	0x0800e59d
 800e5e0:	0800e72d 	.word	0x0800e72d
 800e5e4:	0800e651 	.word	0x0800e651
 800e5e8:	0800e70f 	.word	0x0800e70f
 800e5ec:	0800e59d 	.word	0x0800e59d
 800e5f0:	0800e59d 	.word	0x0800e59d
 800e5f4:	0800e74f 	.word	0x0800e74f
 800e5f8:	0800e59d 	.word	0x0800e59d
 800e5fc:	0800e651 	.word	0x0800e651
 800e600:	0800e59d 	.word	0x0800e59d
 800e604:	0800e59d 	.word	0x0800e59d
 800e608:	0800e717 	.word	0x0800e717
 800e60c:	682b      	ldr	r3, [r5, #0]
 800e60e:	1d1a      	adds	r2, r3, #4
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	602a      	str	r2, [r5, #0]
 800e614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e61c:	2301      	movs	r3, #1
 800e61e:	e0a3      	b.n	800e768 <_printf_i+0x1f4>
 800e620:	6820      	ldr	r0, [r4, #0]
 800e622:	6829      	ldr	r1, [r5, #0]
 800e624:	0606      	lsls	r6, r0, #24
 800e626:	f101 0304 	add.w	r3, r1, #4
 800e62a:	d50a      	bpl.n	800e642 <_printf_i+0xce>
 800e62c:	680e      	ldr	r6, [r1, #0]
 800e62e:	602b      	str	r3, [r5, #0]
 800e630:	2e00      	cmp	r6, #0
 800e632:	da03      	bge.n	800e63c <_printf_i+0xc8>
 800e634:	232d      	movs	r3, #45	; 0x2d
 800e636:	4276      	negs	r6, r6
 800e638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e63c:	485e      	ldr	r0, [pc, #376]	; (800e7b8 <_printf_i+0x244>)
 800e63e:	230a      	movs	r3, #10
 800e640:	e019      	b.n	800e676 <_printf_i+0x102>
 800e642:	680e      	ldr	r6, [r1, #0]
 800e644:	602b      	str	r3, [r5, #0]
 800e646:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e64a:	bf18      	it	ne
 800e64c:	b236      	sxthne	r6, r6
 800e64e:	e7ef      	b.n	800e630 <_printf_i+0xbc>
 800e650:	682b      	ldr	r3, [r5, #0]
 800e652:	6820      	ldr	r0, [r4, #0]
 800e654:	1d19      	adds	r1, r3, #4
 800e656:	6029      	str	r1, [r5, #0]
 800e658:	0601      	lsls	r1, r0, #24
 800e65a:	d501      	bpl.n	800e660 <_printf_i+0xec>
 800e65c:	681e      	ldr	r6, [r3, #0]
 800e65e:	e002      	b.n	800e666 <_printf_i+0xf2>
 800e660:	0646      	lsls	r6, r0, #25
 800e662:	d5fb      	bpl.n	800e65c <_printf_i+0xe8>
 800e664:	881e      	ldrh	r6, [r3, #0]
 800e666:	4854      	ldr	r0, [pc, #336]	; (800e7b8 <_printf_i+0x244>)
 800e668:	2f6f      	cmp	r7, #111	; 0x6f
 800e66a:	bf0c      	ite	eq
 800e66c:	2308      	moveq	r3, #8
 800e66e:	230a      	movne	r3, #10
 800e670:	2100      	movs	r1, #0
 800e672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e676:	6865      	ldr	r5, [r4, #4]
 800e678:	60a5      	str	r5, [r4, #8]
 800e67a:	2d00      	cmp	r5, #0
 800e67c:	bfa2      	ittt	ge
 800e67e:	6821      	ldrge	r1, [r4, #0]
 800e680:	f021 0104 	bicge.w	r1, r1, #4
 800e684:	6021      	strge	r1, [r4, #0]
 800e686:	b90e      	cbnz	r6, 800e68c <_printf_i+0x118>
 800e688:	2d00      	cmp	r5, #0
 800e68a:	d04d      	beq.n	800e728 <_printf_i+0x1b4>
 800e68c:	4615      	mov	r5, r2
 800e68e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e692:	fb03 6711 	mls	r7, r3, r1, r6
 800e696:	5dc7      	ldrb	r7, [r0, r7]
 800e698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e69c:	4637      	mov	r7, r6
 800e69e:	42bb      	cmp	r3, r7
 800e6a0:	460e      	mov	r6, r1
 800e6a2:	d9f4      	bls.n	800e68e <_printf_i+0x11a>
 800e6a4:	2b08      	cmp	r3, #8
 800e6a6:	d10b      	bne.n	800e6c0 <_printf_i+0x14c>
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	07de      	lsls	r6, r3, #31
 800e6ac:	d508      	bpl.n	800e6c0 <_printf_i+0x14c>
 800e6ae:	6923      	ldr	r3, [r4, #16]
 800e6b0:	6861      	ldr	r1, [r4, #4]
 800e6b2:	4299      	cmp	r1, r3
 800e6b4:	bfde      	ittt	le
 800e6b6:	2330      	movle	r3, #48	; 0x30
 800e6b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6c0:	1b52      	subs	r2, r2, r5
 800e6c2:	6122      	str	r2, [r4, #16]
 800e6c4:	f8cd a000 	str.w	sl, [sp]
 800e6c8:	464b      	mov	r3, r9
 800e6ca:	aa03      	add	r2, sp, #12
 800e6cc:	4621      	mov	r1, r4
 800e6ce:	4640      	mov	r0, r8
 800e6d0:	f7ff fee2 	bl	800e498 <_printf_common>
 800e6d4:	3001      	adds	r0, #1
 800e6d6:	d14c      	bne.n	800e772 <_printf_i+0x1fe>
 800e6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6dc:	b004      	add	sp, #16
 800e6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6e2:	4835      	ldr	r0, [pc, #212]	; (800e7b8 <_printf_i+0x244>)
 800e6e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e6e8:	6829      	ldr	r1, [r5, #0]
 800e6ea:	6823      	ldr	r3, [r4, #0]
 800e6ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6f0:	6029      	str	r1, [r5, #0]
 800e6f2:	061d      	lsls	r5, r3, #24
 800e6f4:	d514      	bpl.n	800e720 <_printf_i+0x1ac>
 800e6f6:	07df      	lsls	r7, r3, #31
 800e6f8:	bf44      	itt	mi
 800e6fa:	f043 0320 	orrmi.w	r3, r3, #32
 800e6fe:	6023      	strmi	r3, [r4, #0]
 800e700:	b91e      	cbnz	r6, 800e70a <_printf_i+0x196>
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	f023 0320 	bic.w	r3, r3, #32
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	2310      	movs	r3, #16
 800e70c:	e7b0      	b.n	800e670 <_printf_i+0xfc>
 800e70e:	6823      	ldr	r3, [r4, #0]
 800e710:	f043 0320 	orr.w	r3, r3, #32
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	2378      	movs	r3, #120	; 0x78
 800e718:	4828      	ldr	r0, [pc, #160]	; (800e7bc <_printf_i+0x248>)
 800e71a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e71e:	e7e3      	b.n	800e6e8 <_printf_i+0x174>
 800e720:	0659      	lsls	r1, r3, #25
 800e722:	bf48      	it	mi
 800e724:	b2b6      	uxthmi	r6, r6
 800e726:	e7e6      	b.n	800e6f6 <_printf_i+0x182>
 800e728:	4615      	mov	r5, r2
 800e72a:	e7bb      	b.n	800e6a4 <_printf_i+0x130>
 800e72c:	682b      	ldr	r3, [r5, #0]
 800e72e:	6826      	ldr	r6, [r4, #0]
 800e730:	6961      	ldr	r1, [r4, #20]
 800e732:	1d18      	adds	r0, r3, #4
 800e734:	6028      	str	r0, [r5, #0]
 800e736:	0635      	lsls	r5, r6, #24
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	d501      	bpl.n	800e740 <_printf_i+0x1cc>
 800e73c:	6019      	str	r1, [r3, #0]
 800e73e:	e002      	b.n	800e746 <_printf_i+0x1d2>
 800e740:	0670      	lsls	r0, r6, #25
 800e742:	d5fb      	bpl.n	800e73c <_printf_i+0x1c8>
 800e744:	8019      	strh	r1, [r3, #0]
 800e746:	2300      	movs	r3, #0
 800e748:	6123      	str	r3, [r4, #16]
 800e74a:	4615      	mov	r5, r2
 800e74c:	e7ba      	b.n	800e6c4 <_printf_i+0x150>
 800e74e:	682b      	ldr	r3, [r5, #0]
 800e750:	1d1a      	adds	r2, r3, #4
 800e752:	602a      	str	r2, [r5, #0]
 800e754:	681d      	ldr	r5, [r3, #0]
 800e756:	6862      	ldr	r2, [r4, #4]
 800e758:	2100      	movs	r1, #0
 800e75a:	4628      	mov	r0, r5
 800e75c:	f7f1 fdc0 	bl	80002e0 <memchr>
 800e760:	b108      	cbz	r0, 800e766 <_printf_i+0x1f2>
 800e762:	1b40      	subs	r0, r0, r5
 800e764:	6060      	str	r0, [r4, #4]
 800e766:	6863      	ldr	r3, [r4, #4]
 800e768:	6123      	str	r3, [r4, #16]
 800e76a:	2300      	movs	r3, #0
 800e76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e770:	e7a8      	b.n	800e6c4 <_printf_i+0x150>
 800e772:	6923      	ldr	r3, [r4, #16]
 800e774:	462a      	mov	r2, r5
 800e776:	4649      	mov	r1, r9
 800e778:	4640      	mov	r0, r8
 800e77a:	47d0      	blx	sl
 800e77c:	3001      	adds	r0, #1
 800e77e:	d0ab      	beq.n	800e6d8 <_printf_i+0x164>
 800e780:	6823      	ldr	r3, [r4, #0]
 800e782:	079b      	lsls	r3, r3, #30
 800e784:	d413      	bmi.n	800e7ae <_printf_i+0x23a>
 800e786:	68e0      	ldr	r0, [r4, #12]
 800e788:	9b03      	ldr	r3, [sp, #12]
 800e78a:	4298      	cmp	r0, r3
 800e78c:	bfb8      	it	lt
 800e78e:	4618      	movlt	r0, r3
 800e790:	e7a4      	b.n	800e6dc <_printf_i+0x168>
 800e792:	2301      	movs	r3, #1
 800e794:	4632      	mov	r2, r6
 800e796:	4649      	mov	r1, r9
 800e798:	4640      	mov	r0, r8
 800e79a:	47d0      	blx	sl
 800e79c:	3001      	adds	r0, #1
 800e79e:	d09b      	beq.n	800e6d8 <_printf_i+0x164>
 800e7a0:	3501      	adds	r5, #1
 800e7a2:	68e3      	ldr	r3, [r4, #12]
 800e7a4:	9903      	ldr	r1, [sp, #12]
 800e7a6:	1a5b      	subs	r3, r3, r1
 800e7a8:	42ab      	cmp	r3, r5
 800e7aa:	dcf2      	bgt.n	800e792 <_printf_i+0x21e>
 800e7ac:	e7eb      	b.n	800e786 <_printf_i+0x212>
 800e7ae:	2500      	movs	r5, #0
 800e7b0:	f104 0619 	add.w	r6, r4, #25
 800e7b4:	e7f5      	b.n	800e7a2 <_printf_i+0x22e>
 800e7b6:	bf00      	nop
 800e7b8:	0800ea59 	.word	0x0800ea59
 800e7bc:	0800ea6a 	.word	0x0800ea6a

0800e7c0 <_sbrk_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	4d06      	ldr	r5, [pc, #24]	; (800e7dc <_sbrk_r+0x1c>)
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	4604      	mov	r4, r0
 800e7c8:	4608      	mov	r0, r1
 800e7ca:	602b      	str	r3, [r5, #0]
 800e7cc:	f7f2 f9a4 	bl	8000b18 <_sbrk>
 800e7d0:	1c43      	adds	r3, r0, #1
 800e7d2:	d102      	bne.n	800e7da <_sbrk_r+0x1a>
 800e7d4:	682b      	ldr	r3, [r5, #0]
 800e7d6:	b103      	cbz	r3, 800e7da <_sbrk_r+0x1a>
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	bd38      	pop	{r3, r4, r5, pc}
 800e7dc:	24004f64 	.word	0x24004f64

0800e7e0 <__sread>:
 800e7e0:	b510      	push	{r4, lr}
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7e8:	f000 f8a0 	bl	800e92c <_read_r>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	bfab      	itete	ge
 800e7f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7f2:	89a3      	ldrhlt	r3, [r4, #12]
 800e7f4:	181b      	addge	r3, r3, r0
 800e7f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7fa:	bfac      	ite	ge
 800e7fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7fe:	81a3      	strhlt	r3, [r4, #12]
 800e800:	bd10      	pop	{r4, pc}

0800e802 <__swrite>:
 800e802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e806:	461f      	mov	r7, r3
 800e808:	898b      	ldrh	r3, [r1, #12]
 800e80a:	05db      	lsls	r3, r3, #23
 800e80c:	4605      	mov	r5, r0
 800e80e:	460c      	mov	r4, r1
 800e810:	4616      	mov	r6, r2
 800e812:	d505      	bpl.n	800e820 <__swrite+0x1e>
 800e814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e818:	2302      	movs	r3, #2
 800e81a:	2200      	movs	r2, #0
 800e81c:	f000 f868 	bl	800e8f0 <_lseek_r>
 800e820:	89a3      	ldrh	r3, [r4, #12]
 800e822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e82a:	81a3      	strh	r3, [r4, #12]
 800e82c:	4632      	mov	r2, r6
 800e82e:	463b      	mov	r3, r7
 800e830:	4628      	mov	r0, r5
 800e832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e836:	f000 b817 	b.w	800e868 <_write_r>

0800e83a <__sseek>:
 800e83a:	b510      	push	{r4, lr}
 800e83c:	460c      	mov	r4, r1
 800e83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e842:	f000 f855 	bl	800e8f0 <_lseek_r>
 800e846:	1c43      	adds	r3, r0, #1
 800e848:	89a3      	ldrh	r3, [r4, #12]
 800e84a:	bf15      	itete	ne
 800e84c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e84e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e856:	81a3      	strheq	r3, [r4, #12]
 800e858:	bf18      	it	ne
 800e85a:	81a3      	strhne	r3, [r4, #12]
 800e85c:	bd10      	pop	{r4, pc}

0800e85e <__sclose>:
 800e85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e862:	f000 b813 	b.w	800e88c <_close_r>
	...

0800e868 <_write_r>:
 800e868:	b538      	push	{r3, r4, r5, lr}
 800e86a:	4d07      	ldr	r5, [pc, #28]	; (800e888 <_write_r+0x20>)
 800e86c:	4604      	mov	r4, r0
 800e86e:	4608      	mov	r0, r1
 800e870:	4611      	mov	r1, r2
 800e872:	2200      	movs	r2, #0
 800e874:	602a      	str	r2, [r5, #0]
 800e876:	461a      	mov	r2, r3
 800e878:	f7f2 f8fd 	bl	8000a76 <_write>
 800e87c:	1c43      	adds	r3, r0, #1
 800e87e:	d102      	bne.n	800e886 <_write_r+0x1e>
 800e880:	682b      	ldr	r3, [r5, #0]
 800e882:	b103      	cbz	r3, 800e886 <_write_r+0x1e>
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	bd38      	pop	{r3, r4, r5, pc}
 800e888:	24004f64 	.word	0x24004f64

0800e88c <_close_r>:
 800e88c:	b538      	push	{r3, r4, r5, lr}
 800e88e:	4d06      	ldr	r5, [pc, #24]	; (800e8a8 <_close_r+0x1c>)
 800e890:	2300      	movs	r3, #0
 800e892:	4604      	mov	r4, r0
 800e894:	4608      	mov	r0, r1
 800e896:	602b      	str	r3, [r5, #0]
 800e898:	f7f2 f909 	bl	8000aae <_close>
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	d102      	bne.n	800e8a6 <_close_r+0x1a>
 800e8a0:	682b      	ldr	r3, [r5, #0]
 800e8a2:	b103      	cbz	r3, 800e8a6 <_close_r+0x1a>
 800e8a4:	6023      	str	r3, [r4, #0]
 800e8a6:	bd38      	pop	{r3, r4, r5, pc}
 800e8a8:	24004f64 	.word	0x24004f64

0800e8ac <_fstat_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d07      	ldr	r5, [pc, #28]	; (800e8cc <_fstat_r+0x20>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	602b      	str	r3, [r5, #0]
 800e8ba:	f7f2 f904 	bl	8000ac6 <_fstat>
 800e8be:	1c43      	adds	r3, r0, #1
 800e8c0:	d102      	bne.n	800e8c8 <_fstat_r+0x1c>
 800e8c2:	682b      	ldr	r3, [r5, #0]
 800e8c4:	b103      	cbz	r3, 800e8c8 <_fstat_r+0x1c>
 800e8c6:	6023      	str	r3, [r4, #0]
 800e8c8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ca:	bf00      	nop
 800e8cc:	24004f64 	.word	0x24004f64

0800e8d0 <_isatty_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d06      	ldr	r5, [pc, #24]	; (800e8ec <_isatty_r+0x1c>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	f7f2 f903 	bl	8000ae6 <_isatty>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_isatty_r+0x1a>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_isatty_r+0x1a>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	24004f64 	.word	0x24004f64

0800e8f0 <_lseek_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4d07      	ldr	r5, [pc, #28]	; (800e910 <_lseek_r+0x20>)
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	4608      	mov	r0, r1
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	602a      	str	r2, [r5, #0]
 800e8fe:	461a      	mov	r2, r3
 800e900:	f7f2 f8fc 	bl	8000afc <_lseek>
 800e904:	1c43      	adds	r3, r0, #1
 800e906:	d102      	bne.n	800e90e <_lseek_r+0x1e>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	b103      	cbz	r3, 800e90e <_lseek_r+0x1e>
 800e90c:	6023      	str	r3, [r4, #0]
 800e90e:	bd38      	pop	{r3, r4, r5, pc}
 800e910:	24004f64 	.word	0x24004f64

0800e914 <__malloc_lock>:
 800e914:	4801      	ldr	r0, [pc, #4]	; (800e91c <__malloc_lock+0x8>)
 800e916:	f7ff bb1d 	b.w	800df54 <__retarget_lock_acquire_recursive>
 800e91a:	bf00      	nop
 800e91c:	24004f58 	.word	0x24004f58

0800e920 <__malloc_unlock>:
 800e920:	4801      	ldr	r0, [pc, #4]	; (800e928 <__malloc_unlock+0x8>)
 800e922:	f7ff bb18 	b.w	800df56 <__retarget_lock_release_recursive>
 800e926:	bf00      	nop
 800e928:	24004f58 	.word	0x24004f58

0800e92c <_read_r>:
 800e92c:	b538      	push	{r3, r4, r5, lr}
 800e92e:	4d07      	ldr	r5, [pc, #28]	; (800e94c <_read_r+0x20>)
 800e930:	4604      	mov	r4, r0
 800e932:	4608      	mov	r0, r1
 800e934:	4611      	mov	r1, r2
 800e936:	2200      	movs	r2, #0
 800e938:	602a      	str	r2, [r5, #0]
 800e93a:	461a      	mov	r2, r3
 800e93c:	f7f2 f87e 	bl	8000a3c <_read>
 800e940:	1c43      	adds	r3, r0, #1
 800e942:	d102      	bne.n	800e94a <_read_r+0x1e>
 800e944:	682b      	ldr	r3, [r5, #0]
 800e946:	b103      	cbz	r3, 800e94a <_read_r+0x1e>
 800e948:	6023      	str	r3, [r4, #0]
 800e94a:	bd38      	pop	{r3, r4, r5, pc}
 800e94c:	24004f64 	.word	0x24004f64

0800e950 <_init>:
 800e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e952:	bf00      	nop
 800e954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e956:	bc08      	pop	{r3}
 800e958:	469e      	mov	lr, r3
 800e95a:	4770      	bx	lr

0800e95c <_fini>:
 800e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95e:	bf00      	nop
 800e960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e962:	bc08      	pop	{r3}
 800e964:	469e      	mov	lr, r3
 800e966:	4770      	bx	lr
